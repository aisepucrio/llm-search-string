{
    "gemma3:12b": [
        {
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR SPL) AND (\"non-functional properties\" OR performance OR footprint OR energy) AND (optimization OR measurement) AND (\"variant derivation\" OR \"feature-oriented programming\")",
            "old_answer": "(\"software product line\" OR SPL) AND (\"non-functional properties\" OR performance OR footprint OR energy) AND (optimization OR measurement) AND (\"variant derivation\" OR \"feature-oriented programming\")",
            "new_answer": "software product line AND non-functional requirements AND optimization AND variant generation AND performance modeling",
            "execution_time": 14.85,
            "id": 0
        },
        {
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR SPL) AND (\"non-functional properties\" OR \"quality attributes\" OR performance OR size OR \"binary size\") AND (\"software configuration\" OR \"product derivation\") AND (measurement OR \"attribute evaluation\")",
            "old_answer": "(\"software product line\" OR SPL) AND (\"non-functional properties\" OR \"quality attributes\" OR performance OR size OR \"binary size\") AND (\"software configuration\" OR \"product derivation\") AND (measurement OR \"attribute evaluation\")",
            "new_answer": "('software product line' OR SPL) AND ('quality attribute' OR performance OR size OR reliability OR security) AND ('product derivation' OR customization) AND (measurement OR assessment OR traceability)",
            "execution_time": 10.11,
            "id": 1
        },
        {
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software defect prediction\" OR \"defect prediction\") AND (\"machine learning\" OR \"data mining\" OR \"classification\") AND (\"source code\" OR \"code metrics\")",
            "old_answer": "(\"software defect prediction\" OR \"defect prediction\") AND (\"machine learning\" OR \"data mining\" OR \"classification\") AND (\"source code\" OR \"code metrics\")",
            "new_answer": "software defect prediction AND machine learning AND code metrics",
            "execution_time": 3.53,
            "id": 2
        },
        {
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"machine learning\" OR \"data mining\") AND (\"product line\" OR \"product lines\" OR \"configuration space\") AND (\"constraint inference\" OR \"constraint discovery\" OR \"constraint generation\") AND (\"product configuration\" OR \"software configuration\")",
            "old_answer": "(\"machine learning\" OR \"data mining\") AND (\"product line\" OR \"product lines\" OR \"configuration space\") AND (\"constraint inference\" OR \"constraint discovery\" OR \"constraint generation\") AND (\"product configuration\" OR \"software configuration\")",
            "new_answer": "machine learning AND product design AND configuration AND constraints AND optimization",
            "execution_time": 4.26,
            "id": 3
        },
        {
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"performance prediction\" OR \"performance modeling\") AND (\"configurable systems\" OR \"variant selection\") AND (\"sampling strategies\" OR \"sampling methods\" OR \"sampling techniques\") AND (\"feature selection\" OR \"variant generation\")",
            "old_answer": "(\"performance prediction\" OR \"performance modeling\") AND (\"configurable systems\" OR \"variant selection\") AND (\"sampling strategies\" OR \"sampling methods\" OR \"sampling techniques\") AND (\"feature selection\" OR \"variant generation\")",
            "new_answer": "('performance prediction' OR 'performance modeling') AND ('configurable systems' OR 'design space exploration') AND ('sampling strategies' OR 'optimization algorithms') AND ('feature importance' OR 'dimensionality reduction')",
            "execution_time": 11.57,
            "id": 4
        },
        {
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR SPL) AND (\"non-functional properties\" OR performance OR footprint OR energy) AND (optimization OR \"variant derivation\")",
            "old_answer": "(\"software product line\" OR SPL) AND (\"non-functional properties\" OR performance OR footprint OR energy) AND (optimization OR \"variant derivation\")",
            "new_answer": "software product lines AND non-functional requirements AND performance optimization AND footprint reduction AND energy efficiency AND variant generation",
            "execution_time": 5.97,
            "id": 5
        },
        {
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR SPL) AND (\"non-functional properties\" OR \"quality attributes\") AND (\"software modules\" OR \"code units\") AND (\"measurement\" OR \"optimization\" OR \"configuration\")",
            "old_answer": "(\"software product line\" OR SPL) AND (\"non-functional properties\" OR \"quality attributes\") AND (\"software modules\" OR \"code units\") AND (\"measurement\" OR \"optimization\" OR \"configuration\")",
            "new_answer": "software product lines quality attributes code optimization measurement",
            "execution_time": 4.88,
            "id": 6
        },
        {
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"machine learning\" OR \"data mining\") AND (\"software defect\" OR \"software fault\" OR \"bug prediction\")\n",
            "old_answer": "(\"machine learning\" OR \"data mining\") AND (\"software defect\" OR \"software fault\" OR \"bug prediction\")\n",
            "new_answer": "machine learning OR data mining AND software quality AND fault detection AND predictive analytics\n",
            "execution_time": 5.49,
            "id": 7
        },
        {
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"machine learning\" OR \"data mining\") AND (\"product line\" OR \"product-line\") AND (\"constraint inference\" OR \"cross-tree constraints\")",
            "old_answer": "(\"machine learning\" OR \"data mining\") AND (\"product line\" OR \"product-line\") AND (\"constraint inference\" OR \"cross-tree constraints\")",
            "new_answer": "machine learning data mining product line constraint inference cross-tree constraints optimization design exploration",
            "execution_time": 6.51,
            "id": 8
        },
        {
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"configurable systems\" OR \"system variants\") AND (\"performance prediction\" OR \"performance evaluation\") AND (\"sampling strategies\" OR \"sampling methods\" OR \"sample selection\") AND (\"feature selection\" OR \"feature coverage\")",
            "old_answer": "(\"configurable systems\" OR \"system variants\") AND (\"performance prediction\" OR \"performance evaluation\") AND (\"sampling strategies\" OR \"sampling methods\" OR \"sample selection\") AND (\"feature selection\" OR \"feature coverage\")",
            "new_answer": "('adaptive systems' OR 'reconfigurable computing' OR 'design space exploration') AND ('performance modeling' OR 'performance analysis' OR 'workload characterization') AND ('statistical sampling' OR 'experimental design' OR 'active learning') AND ('dimensionality reduction' OR 'relevant features')",
            "execution_time": 14.2,
            "id": 9
        },
        {
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR SPL) AND (\"non-functional properties\" OR \"quality attributes\" OR performance OR footprint OR energy) AND (optimization OR \"variant derivation\") AND (\"feature-oriented programming\" OR \"conditional compilation\")",
            "old_answer": "(\"software product line\" OR SPL) AND (\"non-functional properties\" OR \"quality attributes\" OR performance OR footprint OR energy) AND (optimization OR \"variant derivation\") AND (\"feature-oriented programming\" OR \"conditional compilation\")",
            "new_answer": "software product lines AND quality properties AND optimization AND feature engineering",
            "execution_time": 4.08,
            "id": 10
        },
        {
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR SPL) AND (\"non-functional properties\" OR \"quality attributes\" OR performance OR security OR reliability OR usability) AND (\"product derivation\" OR configuration) AND (measurement OR \"attribute-driven design\")",
            "old_answer": "(\"software product line\" OR SPL) AND (\"non-functional properties\" OR \"quality attributes\" OR performance OR security OR reliability OR usability) AND (\"product derivation\" OR configuration) AND (measurement OR \"attribute-driven design\")",
            "new_answer": "software product lines OR SPL AND quality attributes AND derivation AND measurement AND architecture",
            "execution_time": 6.22,
            "id": 11
        },
        {
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software defect prediction\" OR \"defect prediction\") AND (\"machine learning\" OR PNN OR CART OR \"J48 algorithm\" OR GMDH) AND (\"source code\" OR \"code metrics\")",
            "old_answer": "(\"software defect prediction\" OR \"defect prediction\") AND (\"machine learning\" OR PNN OR CART OR \"J48 algorithm\" OR GMDH) AND (\"source code\" OR \"code metrics\")",
            "new_answer": "('software defect prediction' OR 'defect prediction') AND ('machine learning' OR 'deep learning' OR 'neural networks') AND ('code metrics' OR 'static analysis' OR 'software testing')",
            "execution_time": 11.49,
            "id": 12
        },
        {
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"machine learning\" OR \"data mining\" OR \"artificial intelligence\") AND (\"product line\" OR \"product lines\" OR \"software product line\" OR \"SPL\") AND (\"constraint inference\" OR \"constraint generation\" OR \"constraint discovery\" OR \"cross-tree constraints\")",
            "old_answer": "(\"machine learning\" OR \"data mining\" OR \"artificial intelligence\") AND (\"product line\" OR \"product lines\" OR \"software product line\" OR \"SPL\") AND (\"constraint inference\" OR \"constraint generation\" OR \"constraint discovery\" OR \"cross-tree constraints\")",
            "new_answer": "('machine learning' OR 'artificial intelligence') AND ('software product line' OR 'product line engineering' OR 'product line architecture') AND ('constraint solving' OR 'automated reasoning' OR 'dependency analysis' OR 'feature interaction')",
            "execution_time": 13.25,
            "id": 13
        },
        {
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"configurable systems\" OR \"variant generation\") AND (\"performance prediction\" OR \"performance modeling\" OR \"performance estimation\") AND (\"sampling strategies\" OR \"sampling methods\" OR \"sample selection\") AND (\"feature selection\" OR \"feature frequency\" OR \"t-way feature coverage\")",
            "old_answer": "(\"configurable systems\" OR \"variant generation\") AND (\"performance prediction\" OR \"performance modeling\" OR \"performance estimation\") AND (\"sampling strategies\" OR \"sampling methods\" OR \"sample selection\") AND (\"feature selection\" OR \"feature frequency\" OR \"t-way feature coverage\")",
            "new_answer": "('design space exploration' OR 'variant generation') AND ('performance modeling' OR 'performance estimation') AND ('sampling methods' OR 'optimization algorithms') AND ('feature selection' OR 'dimensionality reduction')",
            "execution_time": 11.0,
            "id": 14
        }
    ],
    "mistral-nemo:latest": [
        {
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR \"SPL\") AND (\"non-functional properties\" OR \"NFPs\") AND optimization AND measurement",
            "old_answer": "(\"software product line\" OR \"SPL\") AND (\"non-functional properties\" OR \"NFPs\") AND optimization AND measurement",
            "new_answer": "('Software Product Line' OR 'SPL') AND ('Non-Functional Properties' OR 'NFPs') AND Optimization AND Measurement",
            "execution_time": 16.77,
            "id": 15
        },
        {
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR \"SPL\") AND (\"non-functional property\" OR \"functional property\") AND (\"product derivation\" OR \"configuration process\") AND (measure* OR optimize*)",
            "old_answer": "(\"software product line\" OR \"SPL\") AND (\"non-functional property\" OR \"functional property\") AND (\"product derivation\" OR \"configuration process\") AND (measure* OR optimize*)",
            "new_answer": "('Software Product Line' OR SPL) AND ('Non-Functional Property' OR 'Functional Property') AND ('Product Derivation' OR 'Configuration Process' OR 'Variability Management') AND ('Measurement' OR 'Optimization')",
            "execution_time": 8.49,
            "id": 16
        },
        {
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software defect\" OR \"defect prediction\") AND (machine learning)",
            "old_answer": "(\"software defect\" OR \"defect prediction\") AND (machine learning)",
            "new_answer": "('software quality', 'bug prediction', 'fault detection', 'ML for software engineering')",
            "execution_time": 3.97,
            "id": 17
        },
        {
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"machine learning\" OR \"ML\") AND (\"product lines\" OR \"product line constraints\") AND (infer OR derive)",
            "old_answer": "(\"machine learning\" OR \"ML\") AND (\"product lines\" OR \"product line constraints\") AND (infer OR derive)",
            "new_answer": "('machine learning' OR 'ML') AND ('product portfolio' OR 'product line optimization' OR 'product line strategy') AND ('inference' OR 'derivation' OR 'learning')",
            "execution_time": 7.0,
            "id": 18
        },
        {
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"configurable systems\" OR \"individual system variants\") AND (\"performance prediction\" OR \"sampling strategies\") AND (\"cost-efficient\" OR \"measurement effort\")",
            "old_answer": "(\"configurable systems\" OR \"individual system variants\") AND (\"performance prediction\" OR \"sampling strategies\") AND (\"cost-efficient\" OR \"measurement effort\")",
            "new_answer": "('Configurable Systems', 'Individual System Variants', 'Performance Prediction', 'Sampling Strategies', 'Cost-Efficient Design', 'Efficient Resource Allocation', 'System Optimization', 'Model-Based Performance Analysis')",
            "execution_time": 6.03,
            "id": 19
        },
        {
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: software product line AND (\"non-functional property\" OR \"performance\" OR \"footprint\" OR \"energy\") AND optimization AND (SPL OR variant)",
            "old_answer": "software product line AND (\"non-functional property\" OR \"performance\" OR \"footprint\" OR \"energy\") AND optimization AND (SPL OR variant)",
            "new_answer": "'Software Product Line Optimization for Non-Functional Properties'",
            "execution_time": 2.09,
            "id": 20
        },
        {
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR \"SPL\") AND (\"non-functional property\" OR \"quality attribute\") AND (measure OR evaluate) AND (\"software module\" OR \"code unit\")",
            "old_answer": "(\"software product line\" OR \"SPL\") AND (\"non-functional property\" OR \"quality attribute\") AND (measure OR evaluate) AND (\"software module\" OR \"code unit\")",
            "new_answer": "('Software Product Line' OR 'SPL') AND ('Non-Functional Property' OR 'Quality Attribute') AND (Measure OR Evaluate) AND ('Software Module' OR 'Code Unit')",
            "execution_time": 5.38,
            "id": 21
        },
        {
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software defect\" OR \"defect prediction\") AND (\"machine learning\" OR ML) AND (PNN OR CART OR \"decision tree\" OR rule-based)",
            "old_answer": "(\"software defect\" OR \"defect prediction\") AND (\"machine learning\" OR ML) AND (PNN OR CART OR \"decision tree\" OR rule-based)",
            "new_answer": "('software fault' OR 'bug prediction') AND ('ML techniques' OR 'AI algorithms') AND ('probabilistic neural networks' OR 'classification trees' OR 'decision tree classifiers' OR 'rule-based classification systems')",
            "execution_time": 6.44,
            "id": 22
        },
        {
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"product line\" OR \"software product lines\") AND (\"machine learning\" OR \"ML\") AND constraints AND oracle",
            "old_answer": "(\"product line\" OR \"software product lines\") AND (\"machine learning\" OR \"ML\") AND constraints AND oracle",
            "new_answer": "('software engineering' OR 'product development') AND ('machine learning' OR 'AI') AND (optimization OR resource allocation) AND database management",
            "execution_time": 5.77,
            "id": 23
        },
        {
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"configurable system\" OR \"software product line\") AND (\"performance prediction\" OR \"predict performance\") AND (sampling OR measure)",
            "old_answer": "(\"configurable system\" OR \"software product line\") AND (\"performance prediction\" OR \"predict performance\") AND (sampling OR measure)",
            "new_answer": "('configurable software' OR 'product line engineering') AND ('performance estimation' OR 'predictive modeling') AND ('statistical sampling' OR 'measurement strategies')",
            "execution_time": 5.31,
            "id": 24
        },
        {
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR \"SPL\") AND (\"non-functional properties\" OR \"qualitative specification\" OR \"quantitative measurement\") AND (optimization OR variant space)",
            "old_answer": "(\"software product line\" OR \"SPL\") AND (\"non-functional properties\" OR \"qualitative specification\" OR \"quantitative measurement\") AND (optimization OR variant space)",
            "new_answer": "('Software Product Line' OR SPL) AND ('Non-Functional Properties' OR Quantitative Attributes OR Qualitative Requirements) AND Optimization AND Variant Space Management",
            "execution_time": 4.39,
            "id": 25
        },
        {
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR \"SPL\") AND (\"non-functional properties\" OR \"quality attributes\") AND (\"feature composition\" OR \"product derivation\") AND (measurement OR optimization)",
            "old_answer": "(\"software product line\" OR \"SPL\") AND (\"non-functional properties\" OR \"quality attributes\") AND (\"feature composition\" OR \"product derivation\") AND (measurement OR optimization)",
            "new_answer": "('Software Product Lines' OR 'SPLs') AND ('Non-Functional Properties' OR 'Quality Attributes') AND ('Feature Composition' OR 'Product Derivation') AND ('Measurement Techniques' OR 'Optimization Methods')",
            "execution_time": 7.51,
            "id": 26
        },
        {
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software defect\" OR \"defect prediction\") AND (\"machine learning\" OR \"ML\") AND (PNN OR CART OR J48)",
            "old_answer": "(\"software defect\" OR \"defect prediction\") AND (\"machine learning\" OR \"ML\") AND (PNN OR CART OR J48)",
            "new_answer": "('software fault' OR 'defect detection') AND ('machine intelligence' OR 'AI techniques') AND ('Probabilistic Neural Networks' OR 'Decision Trees' OR 'J48 Algorithm')",
            "execution_time": 6.19,
            "id": 27
        },
        {
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"machine learning\" OR \"ML\") AND (\"product line\" OR \"productlines\") AND constraints AND (infer OR learn) AND (correct OR valid) AND video generator",
            "old_answer": "(\"machine learning\" OR \"ML\") AND (\"product line\" OR \"productlines\") AND constraints AND (infer OR learn) AND (correct OR valid) AND video generator",
            "new_answer": "('machine learning' OR 'ML') AND product AND constraint* AND infer AND validation AND generation AND visual",
            "execution_time": 3.28,
            "id": 28
        },
        {
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"configurable systems\" OR \"system variants\") AND (\"performance prediction\" OR \"sampling strategies\") AND (measurement effort OR accuracy)",
            "old_answer": "(\"configurable systems\" OR \"system variants\") AND (\"performance prediction\" OR \"sampling strategies\") AND (measurement effort OR accuracy)",
            "new_answer": "('System Configurability' OR 'Variant Systems') AND ('Predictive Performance Analysis' OR 'Sampling Techniques') AND ('Efficiency Assessment' OR 'Precision Evaluation')",
            "execution_time": 6.38,
            "id": 29
        }
    ],
    "llama3.1:latest": [
        {
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR \"SPL\") AND (\"non-functional property\" OR \"performance optimization\" OR \"energy efficiency\") AND (\"variant derivation\" OR \"optimization algorithm\")",
            "old_answer": "(\"software product line\" OR \"SPL\") AND (\"non-functional property\" OR \"performance optimization\" OR \"energy efficiency\") AND (\"variant derivation\" OR \"optimization algorithm\")",
            "new_answer": "('software product lines' OR SPL) AND (non-functional requirements OR performance enhancement OR energy-aware computing) AND (variant generation OR multi-objective optimization)",
            "execution_time": 7.87,
            "id": 30
        },
        {
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product line\" OR \"SPL\") AND (\"non-functional property\" OR \"performance metric\" OR \"quality attribute\") AND (\"configuration process\" OR \"product derivation\")",
            "old_answer": "(\"software product line\" OR \"SPL\") AND (\"non-functional property\" OR \"performance metric\" OR \"quality attribute\") AND (\"configuration process\" OR \"product derivation\")",
            "new_answer": "('Software Product Line Engineering' OR 'SPL' OR 'Variability Management') AND ('Non-Functional Requirements' OR 'Performance Evaluation' OR 'Quality Attributes') AND ('Product Derivation' OR 'Configuration Planning' OR 'Derivative Development')",
            "execution_time": 3.26,
            "id": 31
        },
        {
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"machine learning\" OR \"artificial intelligence\") AND (\"software defect prediction\" OR \"defect prediction\") AND (\"source code analysis\" OR \"algorithmic approach\")",
            "old_answer": "(\"machine learning\" OR \"artificial intelligence\") AND (\"software defect prediction\" OR \"defect prediction\") AND (\"source code analysis\" OR \"algorithmic approach\")",
            "new_answer": "('Machine Learning for Software Defect Prediction' OR 'Artificial Intelligence in Source Code Analysis') AND ('Predictive Models for Algorithmic Faults' OR 'Software Quality Improvement through Code Analytics')",
            "execution_time": 2.56,
            "id": 32
        },
        {
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"machine learning\" OR \"constraint inference\") AND (\"product lines\" OR \"variability intensive systems\") AND (oracle OR validation)",
            "old_answer": "(\"machine learning\" OR \"constraint inference\") AND (\"product lines\" OR \"variability intensive systems\") AND (oracle OR validation)",
            "new_answer": "(machine learning OR constraint reasoning OR automated testing OR software verification) AND (product line engineering OR variability management OR complex systems) AND (validation OR verification OR certification OR assurance)",
            "execution_time": 2.17,
            "id": 33
        },
        {
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"performance prediction\" OR \"configurable systems\") AND (\"sampling strategies\" OR \"sampling methods\") AND (\"software performance\" OR \"system variants\")",
            "old_answer": "(\"performance prediction\" OR \"configurable systems\") AND (\"sampling strategies\" OR \"sampling methods\") AND (\"software performance\" OR \"system variants\")",
            "new_answer": "('performance modeling' OR 'predictive analytics') AND ('adaptive sampling' OR 'cross-validation techniques') AND ('application profiling' OR 'resource allocation')",
            "execution_time": 2.06,
            "id": 34
        },
        {
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"Software product line\" OR \"SPL\") AND (\"non-functional properties\" OR \"optimization goals\") AND (variant OR \"program derivation\")",
            "old_answer": "(\"Software product line\" OR \"SPL\") AND (\"non-functional properties\" OR \"optimization goals\") AND (variant OR \"program derivation\")",
            "new_answer": "('Software product lines' OR SPL) AND ('performance optimization' OR 'resource allocation' OR 'reliability engineering') AND ('derivation techniques' OR 'feature variation' OR 'product customization')",
            "execution_time": 2.62,
            "id": 35
        },
        {
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"non-functional properties\" OR \"software metrics\") AND (\"product derivation\" OR \"software product lines\") AND (configuration OR \"complexity management\")",
            "old_answer": "(\"non-functional properties\" OR \"software metrics\") AND (\"product derivation\" OR \"software product lines\") AND (configuration OR \"complexity management\")",
            "new_answer": "(non-functional requirements OR software quality attributes OR maintainability OR reliability) AND (software product family engineering OR variability management OR product configuration) AND (software product line engineering OR SPL OR feature configuration)",
            "execution_time": 2.5,
            "id": 36
        },
        {
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software defect\" OR \"predictive maintenance\") AND (\"machine learning\" OR \"classification algorithms\") AND (\"source code analysis\" OR \"software metrics\")",
            "old_answer": "(\"software defect\" OR \"predictive maintenance\") AND (\"machine learning\" OR \"classification algorithms\") AND (\"source code analysis\" OR \"software metrics\")",
            "new_answer": "('software defect detection and classification' OR 'predictive software maintenance' OR 'fault prevention') AND ('machine learning for software quality' OR 'automated classification techniques') AND ('software analytics tools' OR 'code smell identification')",
            "execution_time": 2.93,
            "id": 37
        },
        {
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"machine learning\" OR \"constraint inference\") AND (\"product lines\" OR \"variability intensive systems\") AND (\"constraints\" OR \"cross-tree constraints\")",
            "old_answer": "(\"machine learning\" OR \"constraint inference\") AND (\"product lines\" OR \"variability intensive systems\") AND (\"constraints\" OR \"cross-tree constraints\")",
            "new_answer": "('machine learning for software product lines' OR 'variability-intensive system constraint inference') AND ('software product line variability management' OR 'multi-product system design')",
            "execution_time": 2.12,
            "id": 38
        },
        {
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"configurable systems\" OR \"system variants\") AND (\"performance prediction\" OR \"sampling strategies\") AND (\"prediction accuracy\" OR \"measurement effort\")",
            "old_answer": "(\"configurable systems\" OR \"system variants\") AND (\"performance prediction\" OR \"sampling strategies\") AND (\"prediction accuracy\" OR \"measurement effort\")",
            "new_answer": "('configurable systems' OR 'systems variability' OR 'software product lines') AND ('performance evaluation' OR 'predictive modeling' OR 'model-based methods') AND ('accuracy metrics' OR 'evaluation protocols' OR 'experiments and data analysis')",
            "execution_time": 3.24,
            "id": 39
        },
        {
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product lines\" OR \"SPL engineering\") AND (\"non-functional properties\" OR \"optimization goals\") AND (\"variant-derivation process\" OR \"feature-oriented programming\" OR \"conditional compilation\")\n\nAfter searching with the extracted terms, the following new list of keywords is generated to expand the search string:\n\n* To capture more relevant articles on optimization of non-functional properties in SPLs:\n\t+ Optimization techniques (e.g., genetic algorithms, simulated annealing)\n\t+ Performance metrics (e.g., response time, throughput)\n\t+ Energy efficiency\n\t+ Footprint reduction\n\t+ Variability management\n* To focus on the application domains mentioned in the abstract:\n\t+ Database management systems\n\t+ Operating systems\n\nThe second version of the search string is:\n\n(\"software product lines\" OR \"SPL engineering\") AND (\"non-functional properties\" OR \"optimization goals\") AND ((genetic algorithms OR simulated annealing) OR (performance metrics OR response time OR throughput) OR energy efficiency OR footprint reduction OR variability management OR database management systems OR operating systems)\n\nFinal search string:\n \n(\"software product lines\" OR \"SPL engineering\") AND (\"non-functional properties\" OR \"optimization goals\") AND ((genetic algorithms OR simulated annealing) OR (performance metrics OR response time OR throughput) OR energy efficiency OR footprint reduction OR variability management OR database management OR operating system)",
            "old_answer": "(\"software product lines\" OR \"SPL engineering\") AND (\"non-functional properties\" OR \"optimization goals\") AND (\"variant-derivation process\" OR \"feature-oriented programming\" OR \"conditional compilation\")\n\nAfter searching with the extracted terms, the following new list of keywords is generated to expand the search string:\n\n* To capture more relevant articles on optimization of non-functional properties in SPLs:\n\t+ Optimization techniques (e.g., genetic algorithms, simulated annealing)\n\t+ Performance metrics (e.g., response time, throughput)\n\t+ Energy efficiency\n\t+ Footprint reduction\n\t+ Variability management\n* To focus on the application domains mentioned in the abstract:\n\t+ Database management systems\n\t+ Operating systems\n\nThe second version of the search string is:\n\n(\"software product lines\" OR \"SPL engineering\") AND (\"non-functional properties\" OR \"optimization goals\") AND ((genetic algorithms OR simulated annealing) OR (performance metrics OR response time OR throughput) OR energy efficiency OR footprint reduction OR variability management OR database management systems OR operating systems)\n\nFinal search string:\n \n(\"software product lines\" OR \"SPL engineering\") AND (\"non-functional properties\" OR \"optimization goals\") AND ((genetic algorithms OR simulated annealing) OR (performance metrics OR response time OR throughput) OR energy efficiency OR footprint reduction OR variability management OR database management OR operating system)",
            "new_answer": "('software product lines' OR 'SPL engineering' OR 'product line engineering') AND ('non-functional properties' OR 'optimization goals' OR 'quality attributes' OR 'performance optimization') AND ((genetic algorithms OR simulated annealing OR metaheuristics) OR (performance metrics OR response time OR throughput OR energy efficiency OR footprint reduction OR variability management) OR database systems OR operating systems OR software architecture OR design patterns)",
            "execution_time": 5.52,
            "id": 40
        },
        {
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software product lines\" OR \"SPL\") AND (\"non-functional properties\" OR \"performance measures\" OR \"binary size constraints\") AND (\"configuration process\" OR \"product derivation\")",
            "old_answer": "(\"software product lines\" OR \"SPL\") AND (\"non-functional properties\" OR \"performance measures\" OR \"binary size constraints\") AND (\"configuration process\" OR \"product derivation\")",
            "new_answer": "('software product lines' OR 'SPL') AND ('non-functional requirements' OR 'quality attributes' OR 'performance metrics') AND ('dynamic configuration' OR 'product line evolution' OR 'variability management')",
            "execution_time": 2.68,
            "id": 41
        },
        {
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (\"software defect\" OR \"software errors\") AND (\"machine learning\" OR \"predictive model\") AND (\"source code analysis\" OR \"code metrics\" OR \"feature selection\")",
            "old_answer": "(\"software defect\" OR \"software errors\") AND (\"machine learning\" OR \"predictive model\") AND (\"source code analysis\" OR \"code metrics\" OR \"feature selection\")",
            "new_answer": "('software defects identification through machine learning and source code analysis' OR 'predictive models for software errors using code metrics')",
            "execution_time": 1.68,
            "id": 42
        },
        {
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (product line OR product lines) AND (constraints OR constraint inference) AND (machine learning OR variabilty intensive systems)\n\n(\"product line\" OR \"product lines\") AND (\"constraint inference\" OR constraints) AND (\"machine learning\" OR \"variability intensive system\")",
            "old_answer": "(product line OR product lines) AND (constraints OR constraint inference) AND (machine learning OR variabilty intensive systems)\n\n(\"product line\" OR \"product lines\") AND (\"constraint inference\" OR constraints) AND (\"machine learning\" OR \"variability intensive system\")",
            "new_answer": "(product line variability management OR product family engineering) AND (software product line architecture OR constraint-based reasoning) AND (artificial intelligence OR adaptable and evolvable systems)",
            "execution_time": 2.14,
            "id": 43
        },
        {
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "new_prompt": "You should enhance the provided keywords to find relevant scientific topics related to them. Focus on expand the context broaden the thematic coverage without losing the connection to the original keywords. Remove keywords that are unimportant or too specific. The string doesn't need to be long to have quality. In the answer, I want just end only the final search string, with no additional answer. The provided keywords are: (configurable systems OR performance prediction) AND (sampling strategies OR \"small samples\") AND (prediction accuracy OR measurement effort)",
            "old_answer": "(configurable systems OR performance prediction) AND (sampling strategies OR \"small samples\") AND (prediction accuracy OR measurement effort)",
            "new_answer": "(configurable systems OR dynamic systems OR self-adaptive systems) AND (performance prediction OR predictive analytics OR machine learning) AND (optimization techniques OR model-based optimization OR simulation-based optimization)",
            "execution_time": 2.36,
            "id": 44
        }
    ]
}