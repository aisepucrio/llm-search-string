@inproceedings{10.1145/3382025.3414956,
author = {Gr\"{u}ner, Sten and Burger, Andreas and Kantonen, Tuomas and R\"{u}ckert, Julius},
title = {Incremental migration to software product line engineering},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414956},
doi = {10.1145/3382025.3414956},
abstract = {Current market developments require organizations to produce high-quality tailored software variants while simultaneously coping with increased software complexity. Software Product Line Engineering (SPLE) is a well-known approach to manage this variability and complexity, however no step-wise migration process is available allowing a co-existence of SPLE along with established development processes. In this paper, we introduce an incremental SPLE migration strategy and process starting from using the feature model as synchronized product and variant documentation. They can be applied as a first step of SPLE migration along with the continuous software development cycle. We performed initial steps of the process on industrial low voltage drive embedded firmware spanning around few millions lines of code using a commercial SPLE tool and validated short-term benefits by means of stakeholder feedback.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {5},
numpages = {11},
keywords = {incremental migration, migration process, non-invasive migration, software product line engineering},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3336294.3336304,
author = {Horcas, Jose-Miguel and Pinto, M\'{o}nica and Fuentes, Lidia},
title = {Software Product Line Engineering: A Practical Experience},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336304},
doi = {10.1145/3336294.3336304},
abstract = {The lack of mature tool support is one of the main reasons that make the industry to be reluctant to adopt Software Product Line (SPL) approaches. A number of systematic literature reviews exist that identify the main characteristics offered by existing tools and the SPL phases in which they can be applied. However, these reviews do not really help to understand if those tools are offering what is really needed to apply SPLs to complex projects. These studies are mainly based on information extracted from the tool documentation or published papers. In this paper, we follow a different approach, in which we firstly identify those characteristics that are currently essential for the development of an SPL, and secondly analyze whether the tools provide or not support for those characteristics. We focus on those tools that satisfy certain selection criteria (e.g., they can be downloaded and are ready to be used). The paper presents a state of practice with the availability and usability of the existing tools for SPL, and defines different roadmaps that allow carrying out a complete SPL process with the existing tool support.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {164–176},
numpages = {13},
keywords = {spl in practice, state of practice, tool support, tooling roadmap},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3336294.3342381,
author = {Krueger, Charles W. and Clements, Paul C.},
title = {Feature-Based Systems and Software Product Line Engineering: PLE for the Enterprise},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342381},
doi = {10.1145/3336294.3342381},
abstract = {This paper describes a tutorial to introduce a product line engineering solution, including tools and methods, that is the subject of an upcoming ISO standard and known as "Feature-Based Systems and Software Product Line Engineering." This tutorial will explain the approach, give its history and a brief summary of some of its many successes, and discuss its application to systems and software engineering. Moreover, the tutorial will cover how its usage is spreading beyond the traditional engineering realm, across the entire enterprise in areas such as product marketing, portfolio planning, manufacturing, supply chain management, product service and maintenance, and much more.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {331},
numpages = {1},
keywords = {bill-of-features, feature modeling, feature-based PLE, product line engineering, product portfolio, software product lines},
location = {Paris, France},
series = {SPLC '19}
}

@article{10.1016/j.infsof.2020.106389,
author = {Chac\'{o}n-Luna, Ana Eva and Guti\'{e}rrez, Antonio Manuel and Galindo, Jos\'{e} A. and Benavides, David},
title = {Empirical software product line engineering: A systematic literature review},
year = {2020},
issue_date = {Dec 2020},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {128},
number = {C},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2020.106389},
doi = {10.1016/j.infsof.2020.106389},
journal = {Inf. Softw. Technol.},
month = dec,
numpages = {22},
keywords = {Software product lines, Empirical strategies, Case study, Experiment, Systematic literature review}
}

@inproceedings{10.1145/3233027.3233052,
author = {Krueger, Charles W. and Clements, Paul C.},
title = {Feature-based systems and software product line engineering: PLE for the enterprise},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233052},
doi = {10.1145/3233027.3233052},
abstract = {This paper describes a tutorial to introduce a product line engineering solution, including tools and methods, that is the subject of an upcoming ISO standard and known as "Feature-Based Systems and Software Product Line Engineering." Its usage is spreading beyond the traditional engineering realm, across the entire enterprise in areas such as product marketing, portfolio planning, manufacturing, supply chain management, product service and maintenance, and much more.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {301–302},
numpages = {2},
keywords = {bill-of-features, feature modeling, feature-based PLE, product line engineering, product portfolio, software product lines},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3307630.3342393,
author = {Krueger, Charles and Clements, Paul},
title = {Feature-Based Systems and Software Product Line Engineering with Gears from BigLever},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342393},
doi = {10.1145/3307630.3342393},
abstract = {This paper describes a demonstration of the product line engineering tool and framework called Gears from BigLever Software. Gears is the automation at the heart of a PLE Factory, which itself is the conceptual construct at the heart of Feature-based Product Line Engineering. (Feature-based PLE is the subject of an upcoming ISO standard.) Gears provides the means to create and maintain a Feature Catalog via a unified feature modeling language; the means to create and maintain a Bill-of-Features Portfolio, which is a way to specify the members of the product line by the features that each one exhibits; and a single variation point mechanism that works in Shared Assets across the entire product lifecycle. The result is an automated production line capability that can quickly produce any product in the portfolio from the same, single set of shared assets.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {42–43},
numpages = {2},
keywords = {bill-of-features, feature modeling, feature profiles, feature-based PLE, hierarchical product lines, multistage configuration, product baselines, product configurator, product line engineering, product portfolio, software product lines, variation points},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3106195.3106228,
author = {Krueger, Charles W. and Clements, Paul C.},
title = {Feature-Based Systems and Software Product Line Engineering: PLE for the Enterprise},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106228},
doi = {10.1145/3106195.3106228},
abstract = {This paper describes a tutorial to introduce a product line engineering solution, including tools and methods, that is the subject of an upcoming ISO standard and known as "Feature-Based Systems and Software Product Line Engineering." Its usage is spreading beyond the traditional engineering realm, where PLE is best known, and across the entire enterprise in areas such as product marketing, portfolio planning, manufacturing, supply chain management, product service and maintenance, and much more.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {253},
numpages = {1},
keywords = {Feature-Based PLE, Product line engineering, bill-of-features, feature modeling, product portfolio, software product lines},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3236405.3236409,
author = {Krueger, Charles and Clements, Paul},
title = {Feature-based systems and software product line engineering with gears from BigLever},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3236409},
doi = {10.1145/3236405.3236409},
abstract = {This paper describes a demonstration of the product line engineering tool and framework Gears from BigLever Software. Gears provides a single feature modeling language, a single variation point mechanism that works across the entire product lifecycle, and a single automated product configurator that are used to configure a product portfolio's shared engineering assets appropriately for each product in the portfolio. The result is an automated production line capability that can quickly produce any product in the portfolio from the same, single set of shared assets.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {1–4},
numpages = {4},
keywords = {bill-of-features, feature modeling, feature profiles, hierarchical product lines, multistage configuration, product baselines, product configurator, product line engineering, product portfolio, software product lines, variation points},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3307630.3342421,
author = {Chac\'{o}n-Luna, Ana E. and Ruiz, Elvira G. and Galindo, Jos\'{e} A. and Benavides, David},
title = {Variability Management in a Software Product Line Unaware Company: Towards a Real Evaluation},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342421},
doi = {10.1145/3307630.3342421},
abstract = {Software Product Lines (SPL) enable systematic reuse within an organization thus, enabling the reduction of costs, efforts, development time and the average number of defects per product. However, there is little empirical evidence of SPL adoption in the literature, which makes it difficult to strengthen or elaborate adjustments or improvements to SPL frameworks. In this article, we present the first steps towards an empirical evaluation by showing how companies that do not know about of SPL manage variability in their products, pointing out the strengths and weaknesses of their approaches. To this end, we present the design of a case study that we plan to carry out in the future in two companies to evaluate how companies perform variability management when they are not aware of software product lines. Our assumption is that most of the companies manage variability but no many of them are aware of software product lines. In addition, the first preliminary results of the case study applied in a company are presented.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {82–89},
numpages = {8},
keywords = {a case study, software product lines, variability management},
location = {Paris, France},
series = {SPLC '19}
}

@article{10.1007/s11227-021-03627-5,
author = {Kiani, Azaz Ahmed and Hafeez, Yaser and Imran, Muhammad and Ali, Sadia},
title = {A dynamic variability management approach working with agile product line engineering practices for reusing features},
year = {2021},
issue_date = {Aug 2021},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {77},
number = {8},
issn = {0920-8542},
url = {https://doi.org/10.1007/s11227-021-03627-5},
doi = {10.1007/s11227-021-03627-5},
abstract = {Agile software development (ASD) and software product line (SPL) have shown significant benefits for software engineering processes and practices. Although both methodologies promise similar benefits, they are based on different foundations. SPL encourages systematic reuse that exploits the commonalities of various products belonging to a common domain and manages their variations systematically. In contrast, ASD stresses a flexible and rapid development of products using iterative and incremental approaches. ASD encourages active involvement of customers and their frequent feedback. Both ASD and SPL require alternatives to extend agile methods for several reasons such as (1) to manage reusability and variability across the products of any domain, (2) to avoid the risk of developing core assets that will become obsolete and not used in future projects, and (3) to meet the requirements of changing markets. This motivates the researchers for the integration of ASD and SPL approaches. As a result, an innovative approach called agile product line engineering (APLE) by integrating SPL and ASD has been introduced. The principal aim of APLE is to maximize the benefits of ASD and SPL and address the shortcomings of both. However, combining both is a major challenge. Researchers have proposed a few approaches that try to put APLE into practice, but none of the existing approaches cover all APLE features needed. This paper proposes a new dynamic variability approach for APLE that uses APLE practices for reusing features. The proposed approach (PA) is based on the agile method Scrum and the reactive approach of SPL. In this approach, reusable core assets respond reactively to customer requirements. The PA constructs and develops the SPL architecture iteratively and incrementally. It provides the benefits of reusability and maintainability of SPLs while keeping the delivery-focused approach from agile methods. We conducted a quantitative survey of software companies applying the APLE to assess the performance of the PA and hypotheses of empirical study. Findings of empirical evaluation provide evidence on integrating ASD and SPL and the application of APLE into practices.},
journal = {J. Supercomput.},
month = aug,
pages = {8391–8432},
numpages = {42},
keywords = {Software product line, Agile software development, Agile software product line, Agile product line engineering}
}

@inproceedings{10.1145/3377024.3377032,
author = {Greiner, Sandra and Westfechtel, Bernhard},
title = {Towards iterative software product line engineering with incremental multi-variant model transformations},
year = {2020},
isbn = {9781450375016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377024.3377032},
doi = {10.1145/3377024.3377032},
abstract = {Software product line engineering (SPLE) aims at increasing productivity by relying on the principles of organized reuse and variability. In annotative approaches to SPLE the realization artifacts carry presence conditions, we refer to as annotations below, which express the presence of the artifact in configured products. On the other hand, model-driven software engineering aims at the same effect by raising the level of abstraction and automation through models expressing the system under development. Combining both disciplines seeks to exploit their benefits. In model-driven SPLE the product line typically consists of different kind of models, e.g., class diagrams may capture design decisions whereas Java source code models are enriched by realization artifacts. In order to automatically generate the source code models from the class diagrams, model transformations are written in the single-product development. However, these transformation languages have not been developed with the variability of SPLE in mind, i.e., they are not able to handle annotations out-of-the-box. Consequently, the engineer needs to annotate the target representation manually, contradicting the aim of both disciplines, SPLE and MDSE. Multi-variant model transformations have been proposed as answer to propagate annotations additionally. Since all of them require certain properties to be fulfilled for a correct propagation, still some target annotations may have to be changed or can simply not be determined by the propagation yet. Since software engineering is always an iterative process we like to preserve manual changes in the target representations which requires an incremental behavior of the annotation propagation. However, to the best of our knowledge up to now, no research on this topic has been conducted and, thus, we present strategies in this research-in-progress paper how an incremental propagation can be realized. Moreover, we like to consider incremental behavior also in the correctness criterion.},
booktitle = {Proceedings of the 14th International Working Conference on Variability Modelling of Software-Intensive Systems},
articleno = {22},
numpages = {9},
keywords = {annotative approach, feature propagation, model-driven software product line engineering, multi-variant model transformations, software evolution},
location = {Magdeburg, Germany},
series = {VaMoS '20}
}

@inproceedings{10.1145/3338906.3341467,
author = {Greiner, Sandra},
title = {On extending single-variant model transformations for reuse in software product line engineering},
year = {2019},
isbn = {9781450355728},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3338906.3341467},
doi = {10.1145/3338906.3341467},
abstract = {Software product line engineering (SPLE) aims at increasing productivity by following the principles of variability and organized reuse. Combining the discipline with model-driven software engineering (MDSE) seeks to intensify this effect by raising the level of abstraction. Typically, a product line developed in a model-driven way is composed of various kinds of models, like class diagrams and database schemata. To automatically generate further necessary representations from a initial (source) model, model transformations may create a respective target model. In annotative approaches to SPLE, variability annotations, which are boolean expressions over the features of the product line, state in which products a (model) element is visible. State-of-the-art single-variant model transformations (SVMT), however, do not consider variability annotations additionally associated with model elements. Thus, multi-variant model transformations (MVMT) should bridge the gap between existing SPLE and MDSE approaches by reusing already existing technology to propagate annotations additionally to the the target. The present contribution gives an overview on the research we conduct to reuse SVMTs in model-driven SPLE and provides a plan on which steps are still to be taken.},
booktitle = {Proceedings of the 2019 27th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
pages = {1160–1163},
numpages = {4},
keywords = {(multi-variant) model transformations, Model-driven Software Product Line Engineering, annotative approach, feature propagation, software evolution},
location = {Tallinn, Estonia},
series = {ESEC/FSE 2019}
}

@inproceedings{10.1145/2593882.2593888,
author = {Metzger, Andreas and Pohl, Klaus},
title = {Software product line engineering and variability management: achievements and challenges},
year = {2014},
isbn = {9781450328654},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2593882.2593888},
doi = {10.1145/2593882.2593888},
abstract = {Software product line engineering has proven to empower organizations to develop a diversity of similar software-intensive systems (applications) at lower cost, in shorter time, and with higher quality when compared with the development of single systems. Over the last decade the software product line engineering research community has grown significantly. It has produced impressive research results both in terms of quality as well as quantity. We identified over 600 relevant research and experience papers published within the last seven years in established conferences and journals. We briefly summarize the major research achievements of these past seven years. We structure this research summary along a standardized software product line framework. Further, we outline current and future research challenges anticipated from major trends in software engineering and technology.},
booktitle = {Future of Software Engineering Proceedings},
pages = {70–84},
numpages = {15},
keywords = {Software product lines, design, quality assurance, requirements engineering, variability management, variability modeling},
location = {Hyderabad, India},
series = {FOSE 2014}
}

@inproceedings{10.1145/2791060.2798047,
author = {Krueger, Charles W. and Clements, Paul C.},
title = {Second generation systems and software product line engineering},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2798047},
doi = {10.1145/2791060.2798047},
abstract = {This paper describes a tutorial on an advanced set of product line engineering solutions, tools, and methods, which are being referred to as Second Generation Product Line Engineering (2GPLE).},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {388–389},
numpages = {2},
keywords = {bill-of-features, feature modeling, feature profiles, hierarchical product lines, product audit, product baselines, product configurator, product derivation, product line engineering, product portfolio, second generation product line engineering, software product lines, variation points},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@article{10.1016/j.jss.2019.04.054,
author = {Acher, Mathieu and Cohen, Myra B.},
title = {Special issue on systems and software product line engineering},
year = {2019},
issue_date = {Aug 2019},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {154},
number = {C},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2019.04.054},
doi = {10.1016/j.jss.2019.04.054},
journal = {J. Syst. Softw.},
month = aug,
pages = {110–111},
numpages = {2}
}

@inproceedings{10.1145/3382025.3414981,
author = {Setyautami, Maya R. A. and Fadhlillah, Hafiyyan S. and Adianto, Daya and Affan, Ichlasul and Azurat, Ade},
title = {Variability management: re-engineering microservices with delta-oriented software product lines},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414981},
doi = {10.1145/3382025.3414981},
abstract = {Combining microservices and software product line engineering (SPLE) is a challenge in variability management. This paper proposes a solution to that challenge by re-engineering existing webshop systems into a product line application. We first perform feature identification to analyze the features of subject systems. We introduce a mechanism that models the variability and designs a software product line architecture based on existing features. We use a UML diagram with the UML-DOP profile to abstract microservice variability in SPLE. Then, a transformation into a product line application is conducted to generate running applications based on selected features. We utilize a preliminary framework of microservice variability based on delta-oriented programming.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {23},
numpages = {6},
keywords = {UML profile, delta-oriented programming, microservice, re-engineering, software product line engineering},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/2648511.2648535,
author = {Hartmann, Herman and van der Linden, Frank and Bosch, Jan},
title = {Risk based testing for software product line engineering},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648535},
doi = {10.1145/2648511.2648535},
abstract = {The variability of product lines increases over time thereby leading to an increasing effort for testing. Since the available time for test activities is limited an efficiency improvement is needed to ensure that products have sufficient quality.This paper introduces risk-based testing for software product lines. Our approach is based on risk based testing for single system engineering which is extended with a dimension that captures the percentage of product variants that use a particular development artifact. Based on the risk of development artifacts, the priorities for domain and application engineering are determined. We demonstrate our approach using a case study from an existing product line and discuss tool support.We conclude that the basic ideas behind risk-based testing for product lines are intuitive, pragmatic in nature, and provide the means for practitioners for guiding the test effort.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {227–231},
numpages = {5},
keywords = {risk based testing, software product line engineering},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2934466.2934489,
author = {Nagamine, Motoi and Nakajima, Tsuyoshi and Kuno, Noriyoshi},
title = {A case study of applying software product line engineering to the air conditioner domain},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934489},
doi = {10.1145/2934466.2934489},
abstract = {Software development for embedded products requires high quality, high productivity, and short delivery time because of strong business demands. Although software product line engineering (SPLE) is widely recognized as a good approach for systematic reuse of software, few reports present the information needed for other organizations to implement SPLE. This paper describes a case study of applying SPLE to a product family of air-conditioners, including the effects on degree of implementation of SPLE'S three essential activities (domain engineering, application engineering, and management) and its evaluation over the long period. The use of an incomplete implementation of SPLE's three essential activities temporally improves the productivity of the application developments due to the effect of refactored software, but this gradually decreases through architecture erosion.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {220–226},
numpages = {7},
keywords = {SPL, case study, embedded system, software product line},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2648511.2648556,
author = {Krueger, Charles W. and Clements, Paul C.},
title = {Second generation systems and software product line engineering},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648556},
doi = {10.1145/2648511.2648556},
abstract = {This paper describes a tutorial on an advanced set of product line engineering solutions, tools, and methods, which are being referred to as Second Generation Product Line Engineering (2GPLE).},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {358},
numpages = {1},
keywords = {bill-of-features, feature modeling, feature profiles, hierarchical product lines, product configurator, product derivation, product line engineering, product portfolio, second generation product line engineering, software product lines, variation points},
location = {Florence, Italy},
series = {SPLC '14}
}

@article{10.1016/j.infsof.2018.01.016,
author = {Soares, Larissa Rocha and Schobbens, Pierre-Yves and do Carmo Machado, Ivan and de Almeida, Eduardo Santana},
title = {Feature interaction in software product line engineering: A systematic mapping study},
year = {2018},
issue_date = {Jun 2018},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {98},
number = {C},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2018.01.016},
doi = {10.1016/j.infsof.2018.01.016},
journal = {Inf. Softw. Technol.},
month = jun,
pages = {44–58},
numpages = {15},
keywords = {Feature interaction, Software product lines, Systematic mapping}
}

@inproceedings{10.1145/3233027.3233045,
author = {Becker, Martin and Zhang, Bo},
title = {How do our neighbours do product line engineering? a comparison of hardware and software product line engineering approaches from an industrial perspective},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233045},
doi = {10.1145/3233027.3233045},
abstract = {Product line engineering (PLE) approaches have been followed in industry for hardware and software solutions for more than three decades now. However, the different engineering disciplines (e.g. mechanics, electrics, software) have developed and evolved their approaches within their own realms, which is fine as long as there is no need for integrated approaches. Driven by the increasing complexity of systems, there is a rising need for interdisciplinary systems engineering these days. Companies engineering cyber-physical systems and their components have to integrate product line engineering approaches across the involved engineering disciplines to enable a global optimization of portfolio, solution structures, and assets along their lifecycle. From a bird's-eye view, there is noticeable commonality but also variety in the approaches followed for PLE in the different engineering disciplines, which renders the integration of approaches a non-trivial endeavour. In order to foster the development of integrated PLE approaches, this paper explores, maps, and compares PLE approaches in the field of hardware and software engineering. Furthermore, the paper identifies integration opportunities and challenges. As the paper targets industrial practitioners, it mainly provides references to respective industrial events and material and does not fully cover related work in the respective research communities.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {190–195},
numpages = {6},
keywords = {SPLC, academia, industry, software product lines},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2970276.2970288,
author = {Schw\"{a}gerl, Felix and Westfechtel, Bernhard},
title = {SuperMod: tool support for collaborative filtered model-driven software product line engineering},
year = {2016},
isbn = {9781450338455},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2970276.2970288},
doi = {10.1145/2970276.2970288},
abstract = {The increase in productivity implied by model-driven software product line engineering is weakened by the complexity exposed to the user having to manage a multi-variant model. Recently, a new paradigm has emerged: filtered software product line engineering transfers the established check-out/modify/commit workflow from version control to variability management, allowing to iteratively develop the multi-variant model in a single-variant view. This paper demonstrates SuperMod, a tool that supports collaborative filtered model-driven product line engineering, implemented for and with the Eclipse Modeling Framework. Concerning variability management, the tool offers capabilities for editing feature models and specifying feature configurations, both being well-known formalisms in product line engineering. Furthermore, collaborative editing of product lines is provided through distributed version control. The accompanying video shows that SuperMod seamlessly integrates into existing tool landscapes, reduces the complexity of multi-variant editing, automates a large part of variability management, and ensures consistency. A tool demonstration video is available here: http://youtu.be/5XOk3x5kjFc},
booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
pages = {822–827},
numpages = {6},
keywords = {Model-driven software engineering, filtered editing, software product line engineering, version control},
location = {Singapore, Singapore},
series = {ASE '16}
}

@inproceedings{10.1007/978-3-319-35122-3_5,
author = {Schaefer, Ina and Seidl, Christoph and Cleophas, Loek and Watson, Bruce W.},
title = {Tax-PLEASE--Towards Taxonomy-Based Software Product Line Engineering},
year = {2016},
isbn = {9783319351216},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-319-35122-3_5},
doi = {10.1007/978-3-319-35122-3_5},
abstract = {Modern software systems, in particular in mobile and cloud-based applications, exist in many different variants in order to adapt to changing user requirements or application contexts. Software product line engineering allows developing these software systems by managed large-scale reuse in order to achieve shorter time to market. Traditional software product line engineering approaches use a domain variability model which only captures the configuration options of the product variants, but does not provide any guideline for designing and implementing reusable artifacts. In contrast, software taxonomies structure software domains from an abstract specification of the functionality to concrete implementable variants by successive correctness-preserving refinements. In this paper, we propose a novel software product line engineering process based on a taxonomy-based domain analysis. The taxonomy's hierarchy provides guidelines for designing and implementing the product line's reusable artifacts while at the same time specifying possible configuration options. By deriving reusable product line artifacts from a software taxonomy, the well-defined structuring of the reusable artifacts yields improved maintainability and evolvability of the product line.},
booktitle = {Proceedings of the 15th International Conference on Software Reuse: Bridging with Social-Awareness - Volume 9679},
pages = {63–70},
numpages = {8},
keywords = {Software Product Line SPL, Taxonomy-Based Software Construction TABASCO},
location = {Limassol, Cyprus},
series = {ICSR 2016}
}

@inproceedings{10.1145/2491627.2493905,
author = {Krueger, Charles W. and Clements, Paul C.},
title = {Second generation systems and software product line engineering},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2493905},
doi = {10.1145/2491627.2493905},
abstract = {This paper describes a tutorial on an advanced set of product line engineering solutions, tools, and methods, which are being referred to as Second Generation Product Line Engineering (2GPLE).},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {283–284},
numpages = {2},
keywords = {bill-of-features, feature modeling, feature profiles, hierarchical product lines, product audit, product baselines, product configurator, product derivation, product line engineering, product portfolio, second generation product line engineering, software product lines, variation points},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/3382026.3425771,
author = {Morais Ferreira, David and Becker, Martin and Tenev, Vasil L.},
title = {Experience Report on Variability Improvement in a Product Line Engineering Unaware Company},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3425771},
doi = {10.1145/3382026.3425771},
abstract = {Product Line Engineering (PLE) enables strategic reuse within an organisation, thus reducing development costs, decreasing the time to market, and increasing product quality. As a core activity in PLE, variability management supports modelling of commonality and variability throughout the engineering life cycle. Given the increased complexity of modern software-intensive systems, variability management is becoming increasingly important. Transitioning to PLE approaches is a challenging task, as potential benefits must be carefully weighed against costs introduced by PLE approaches. This paper presents a collaborative approach for reverse-engineering variability and configuration knowledge with minimal domain expert involvement and provides insights into the experience we gained from our industrial collaboration.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {21–28},
numpages = {8},
keywords = {Experience report, industrial collaboration, product line engineering, reverse engineering, variability improvement},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3106195.3106224,
author = {Tizzei, Leonardo P. and Nery, Marcelo and Segura, Vin\'{\i}cius C. V. B. and Cerqueira, Renato F. G.},
title = {Using Microservices and Software Product Line Engineering to Support Reuse of Evolving Multi-tenant SaaS},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106224},
doi = {10.1145/3106195.3106224},
abstract = {In order to achieve economies of scale, a Software as a Service (SaaS) should be configurable, multi-tenant efficient, and scalable. But building SaaS with these characteristics comes at a price of having more complex services. Some works in the literature integrate software product line engineering and service-oriented architecture to tackle the complexity of building multi-tenant SaaS. Most of these works focused on centralized approaches that rely on middleware or platforms, but they do not investigate the use of decentralized architectural style. Microservices architecture is an architectural style that relies on small, decentralized, and autonomous services that work together. Thus, this paper investigates the integrated use of microservices architecture and software produt line techniques to develop multi-tenant SaaS. We conducted an empirical study that analyzes the behavior of software reuse during the evolution of a multi-tenant SaaS. This empirical study showed an average software reuse of 62% of lines of code among tenants. We also provide lessons we learned during the the re-engineering and maintenance of such multi-tenant SaaS.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {205–214},
numpages = {10},
keywords = {Microservices, Multi-tenancy, Service-oriented Architectures, Software Evolution, Software Reuse},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2811681.2811703,
author = {Tan, Lei and Lin, Yuqing},
title = {An Aspect-Oriented Feature Modelling Framework for Software Product Line Engineering},
year = {2015},
isbn = {9781450337960},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2811681.2811703},
doi = {10.1145/2811681.2811703},
abstract = {Software Product Line Engineering (SPLE) is a software development paradigm that focusing on systematic software assets reuse. SPLE treats software products in the same application domains as a product family and developing various of assets could be reused in the product family. Feature modelling is a critical activity of SPLE, which developing the requirement model for product families and providing guidance for individual product implementation. In this paper, we discuss several drawbacks of current feature modelling and propose a solution which adopting aspect-oriented development ideas and approaches. The proposed framework is intended to better manage complex feature relationships, and enhance quality-aware feature modelling. We include a case study of a real-life experience to demonstrate the proposed approach.},
booktitle = {Proceedings of the ASWEC 2015 24th Australasian Software Engineering Conference},
pages = {111–115},
numpages = {5},
keywords = {aspectoriented, feature modelling, software product line engineering},
location = {Adelaide, SA, Australia},
series = {ASWEC ' 15 Vol. II}
}

@article{10.1007/s00766-013-0189-0,
author = {Insfran, Emilio and Chastek, Gary and Donohoe, Patrick and Prado Leite, Julio C\'{e}sar},
title = {Requirements engineering in software product line engineering},
year = {2014},
issue_date = {November  2014},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {19},
number = {4},
issn = {0947-3602},
url = {https://doi.org/10.1007/s00766-013-0189-0},
doi = {10.1007/s00766-013-0189-0},
abstract = {Many attempts have been made to increase the productivity and quality of software products based on software reuse. Software product line practice is one such approach, one that focuses on developing a family of products which have a majority of features in common. Hence, there are numerous requirements that are common across the family, but others are unique to individual products. Traditional requirements engineering methods were conceived to deal with single product requirements and are usually not flexible enough to address the needs arising from reusing requirements for a family of products. There is also the additional burden of correctly identifying and engineering both product-line-wide requirements and product-specific requirements as well as evolving them. Therefore, in this special issue, we want to highlight the importance and the role of requirements engineering for product line development as well as to provide insights into the state of the art in the field.},
journal = {Requir. Eng.},
month = nov,
pages = {331–332},
numpages = {2},
keywords = {Requirements engineering, Reuse, Software product line}
}

@inproceedings{10.1145/3461001.3473060,
author = {Sch\"{a}fer, Andreas and Becker, Martin and Andres, Markus and Kistenfeger, Tim and Rohlf, Florian},
title = {Variability realization in model-based system engineering using software product line techniques: an industrial perspective},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3473060},
doi = {10.1145/3461001.3473060},
abstract = {Efficiently handling system variants is rising of importance in industry and challenges the application of model-based systems engineering.This paper reveals the increasing industrial demand of guidance and decision support on how to handle variants and variability within SysML and UML models. While a substantial amount of variability realization approaches has already been published on source code level, there is little guidance for practitioners on system model level. Hence, there is major uncertainty in dealing with system changes or concurrent system modeling of related system. Due to a poor modularization and variability realization these model variants are ending up in interwoven and complex system models.In this paper, we aim to raise awareness of the need for appropriate guidance and decision support, identify important contextual factors of MBSE that influence variability realization, and derive well known variability mechanisms used in software coding for their applicability in system modeling.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {25–34},
numpages = {10},
keywords = {SysML, UML, decision support, model-based systems engineering, system and software product line engineering, variability mechanism, variability realization, variant management},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3382025.3414942,
author = {Assun\c{c}\~{a}o, Wesley K. G. and Kr\"{u}ger, Jacob and Mendon\c{c}a, Willian D. F.},
title = {Variability management meets microservices: six challenges of re-engineering microservice-based webshops},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414942},
doi = {10.1145/3382025.3414942},
abstract = {A microservice implements a small unit of functionality that it provides through a network using lightweight protocols. So, microservices can be combined to fulfill tasks and implement features of a larger software system---resembling a variability mechanism in the context of a software product line (SPL). Microservices and SPLs have similar goals, namely facilitating reuse and customizing, but they are usually employed in different contexts. Any developer who has access to the network can provide a microservice for any task, while SPLs are usually intended to implement features of a specific domain. Due to their different concepts, using microservices to implement an SPL or adopting SPL practices (e.g., variability management) for microservices is a challenging cross-area research problem. However, both techniques can complement each other, and thus tackling this problem promises benefits for organizations that employ either technique. In this paper, we reason on the importance of advancing in this direction, and sketch six concrete challenges to initiate research, namely (1) feature identification, (2) variability modeling, (3) variable microservice architectures, (4) interchangeability, (5) deep customization, and (6) re-engineering an SPL. We intend these challenges to serve as a starting point for future research in this cross-area research direction---avoiding that the concepts of one area are reinvented in the other.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {22},
numpages = {6},
keywords = {cloud computing, microservices, re-engineering, software product line, variability management},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3382025.3414971,
author = {Martinez, Jabier and Wolfart, Daniele and Assun\c{c}\~{a}o, Wesley K. G. and Figueiredo, Eduardo},
title = {Insights on software product line extraction processes: ArgoUML to ArgoUML-SPL revisited},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414971},
doi = {10.1145/3382025.3414971},
abstract = {Software Product Lines (SPLs) are rarely developed from scratch. Commonly, they emerge from monolithic architectures when there is a need to create tailored variants, or from existing variants created in an ad-hoc way once their separated maintenance and evolution become challenging. Despite the vast literature about re-engineering systems into SPLs and related technical approaches, there is a lack of detailed analysis about the process itself and the effort that is involved. We provide and analyze empirical data of an existing SPL extraction process: the ArgoUML monolithic architecture transition to ArgoUML-SPL. The analysis relies on information mined from the version control history of the source-code repository and the discussion with developers that took part in the process. The contribution of this study is an in-depth characterization of the process compared to previous works that focused only on the structural results of the final SPL. We made publicly available the dataset and the analysis scripts to be used as baseline for extractive SPL adoption research and practice.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {6},
numpages = {6},
keywords = {ArgoUML, mining software repositories, re-engineering, software product line architecture},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.5555/2814058.2814112,
author = {Lobato, Luanna Lopes and Bittar, Thiago Jabur},
title = {A Risk Management Approach for Software Product Line Engineering},
year = {2015},
publisher = {Brazilian Computer Society},
address = {Porto Alegre, BRA},
abstract = {TSoftware Product Line (SPL) Engineering is a software development paradigm that fosters systematic reuse. It is focused on improving software practices, leading companies to experience benefits, such as reduced time-to-market and effort, and higher quality for the products delivered to customers. However, establishing a SPL is neither a simple nor a cheap task, and may affect several aspects of a software company. Besides, it involves a range of risks that may hinder project success. These have to be managed accordingly, so as to minimize the likelihood of project failure. Despite the importance of Risk Management (RM) for SPL Engineering, little has been published in terms of suitable and structured practices to cope with that. This present paper reports an approach for RM in SPL Engineering, named RiPLERM (Rise Product Line Engineering and Risk Management). The approach presents activities to structure RM in SPL projects, The design of the RiPLE-RM approach elaborated on results from empirical investigations, and was proposed to facilitate the management and provide significant insights that can be used to avoid and solve risks.},
booktitle = {Proceedings of the Annual Conference on Brazilian Symposium on Information Systems: Information Systems: A Computer Socio-Technical Perspective - Volume 1},
pages = {331–338},
numpages = {8},
keywords = {Project management, Risk Management, Software Process, Software Product Line Engineering},
location = {Goiania, Goias, Brazil},
series = {SBSI '15}
}

@inproceedings{10.1145/2934466.2934479,
author = {Setyautami, Maya R. A. and H\"{a}hnle, Reiner and Muschevici, Radu and Azurat, Ade},
title = {A UML profile for delta-oriented programming to support software product line engineering},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934479},
doi = {10.1145/2934466.2934479},
abstract = {Feature-based approaches to software design, like delta-oriented programming, are well-suited to support multi-product software development paradigms, such as Software Product Lines. Currently, the popular UML notation does not support delta-oriented software design, so that several ad-hoc notations tend to be used. This paper presents a systematic approach to import concepts from delta-oriented programming into the mainstream notation UML. This is done with minimal overhead by specifying a new, slim, delta-oriented UML profile. It is compatible with languages that support delta-oriented programming such as DeltaJ and ABS. The usefulness of the profile is evaluated with a case study.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {45–49},
numpages = {5},
keywords = {delta-oriented programming, unified modelling language},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3023956.3023957,
author = {Wille, David and Runge, Tobias and Seidl, Christoph and Schulze, Sandro},
title = {Extractive software product line engineering using model-based delta module generation},
year = {2017},
isbn = {9781450348119},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3023956.3023957},
doi = {10.1145/3023956.3023957},
abstract = {To satisfy demand for customized products, companies commonly apply so-called clone-and-own strategies by copying functionality from existing products and modifying it to create product variants that have to be developed, maintained, and evolved in isolation. In previous work, we introduced a variability mining technique to identify variability information (commonalities and differences) in block-based model variants (e.g., MATLAB/Simulink models), which can be used to guide manual transition from clone-and-own to managed reuse of a software product line (SPL). In this paper, we present a procedure that uses the extracted variability information to generate a transformational delta-oriented SPL fully automatically. We generate a delta language specifically tailored to transforming models in the analyzed modeling language and utilize it to generate delta modules expressing variation of the SPL's implementation artifacts. The procedure seamlessly integrates with our variability mining technique and allows to fully adopt a managed reuse strategy (i.e., generation of products from a single code base) without manual overhead. We show the feasibility of the procedure by applying it to state chart and MATLAB/Simulink model variants from two industrial case studies.},
booktitle = {Proceedings of the 11th International Workshop on Variability Modelling of Software-Intensive Systems},
pages = {36–43},
numpages = {8},
keywords = {clone-and-own, delta modeling, extractive product line engineering, model-based, variability mining},
location = {Eindhoven, Netherlands},
series = {VaMoS '17}
}

@inproceedings{10.1145/2648511.2648513,
author = {Harman, M. and Jia, Y. and Krinke, J. and Langdon, W. B. and Petke, J. and Zhang, Y.},
title = {Search based software engineering for software product line engineering: a survey and directions for future work},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648513},
doi = {10.1145/2648511.2648513},
abstract = {This paper presents a survey of work on Search Based Software Engineering (SBSE) for Software Product Lines (SPLs). We have attempted to be comprehensive, in the sense that we have sought to include all papers that apply computational search techniques to problems in software product line engineering. Having surveyed the recent explosion in SBSE for SPL research activity, we highlight some directions for future work. We focus on suggestions for the development of recent advances in genetic improvement, showing how these might be exploited by SPL researchers and practitioners: Genetic improvement may grow new products with new functional and non-functional features and graft these into SPLs. It may also merge and parameterise multiple branches to cope with SPL branchmania.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {5–18},
numpages = {14},
keywords = {SBSE, SPL, genetic programming, program synthesis},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2499777.2499780,
author = {Krueger, Charles and Clements, Paul},
title = {Systems and software product line engineering with BigLever software gears},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2499780},
doi = {10.1145/2499777.2499780},
abstract = {This paper describes a demonstration of the product line engineering tool and framework Gears from BigLever software. Gears provides a single feature modeling language, a single variation point mechanism, and a single automated product configurator that are used to configure a product portfolio's shared engineering assets appropriately for each product in the portfolio. The result is an automated production line capability that can quickly produce any product in the portfolio from the same, single set of shared assets.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {136–140},
numpages = {5},
keywords = {bill-of-features, feature modeling, feature profiles, hierarchical product lines, multistage configuration, product baselines, product configurator, product line engineering, product portfolio, software product lines, variation points},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1007/978-3-319-23781-7_26,
author = {Brisaboa, Nieves R. and Corti\~{n}as, Alejandro and Luaces, Miguel R. and Pol'La, Matias},
title = {A Reusable Software Architecture for Geographic Information Systems Based on Software Product Line Engineering},
year = {2015},
isbn = {9783319237800},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-319-23781-7_26},
doi = {10.1007/978-3-319-23781-7_26},
abstract = {In the last years there has been a continuous growth in functionality of geographic information systems GIS resulting in many different software artifacts. Even though each GIS is used in different areas with different objectives, they all share many features and requirements and therefore it is possible to apply techniques based on intensive software reuse, such as software product line engineering SPLE. Although there has been much research on software product line engineering in the last years, the definition of a software product line for the domain of geographic information systems has not been undertaken.In this work we identify the requirements and functionalities of a generic product for a web-based geographic information system, grouping them into commonalities that allow us to reuse many software artifacts, and variabilities that allow use to configure different products. Then, we define the functional and technological architecture of a software product line that uses current technologies for web-based application development. Finally, we design a tool to configure and assemble the components to generate the possible products. The resulting platform is flexible enough to adapt each product to the specific needs of each customer.},
booktitle = {Proceedings of the 5th International Conference on Model and Data Engineering - Volume 9344},
pages = {320–331},
numpages = {12},
keywords = {General-purpose software architecture, Geographic information systems, Software product line engineering, Variability management},
location = {Rhodes, Greece},
series = {MEDI 2015}
}

@inproceedings{10.1145/2364412.2364472,
author = {Krueger, Charles W. and Clements, Paul},
title = {Second generation systems and software product line engineering},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364472},
doi = {10.1145/2364412.2364472},
abstract = {Second Generation Systems and Software Product Line Engineering (2GPLE) has emerged to pick up where classic software product line practice leaves off, and is empowering a whole new class of product lines that solve unprecedented challenges of scale and variation complexity. These so-called "mega-scale" product lines often define product spaces with more possible variations than there are atoms in the universe.To deal with product line complexity that is literally astronomical, 2GPLE comprises a surprisingly small set of elegant and simple concepts. This tutorial will show how, in 2GPLE:- a small set of feature constructs suffices to model the most complex product lines in the world;- a small set of variation mechanisms suffices to work in all kinds of shared assets from across the entire engineering lifecycle -- from requirements to architectures, design models, implementations, calibrations, parts lists, test cases, documentation, and more;- a simple model of configuration management makes product line CM as simple, or simpler, than single-product CM;- application engineering (the partner of domain engineering) is reduced to a vanishingly small activity;- off-the-shelf automation is available to exercise variation points in assets, based on the features needed in a product being built.Together, these concepts make migrating to, defining, developing, and sustaining a product line of almost any size tractable and practical, either within an organization or across organizations. Further, the products are not limited to software or software-intensive systems; 2GPLE is a true systems and software engineering approach.This tutorial will draw upon first-hand experience in applying 2GPLE to some of the best-known product lines in the world, from companies such as Lockheed Martin, General Dynamics, HomeAway, and General Motors. In addition to concepts and experience, it will also cover roles and responsibilities, and organizational adoption and training.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {280},
numpages = {1},
keywords = {product lines, scaling, software},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2647908.2655976,
author = {Krueger, Charles and Clements, Paul},
title = {Systems and software product line engineering with gears from BigLever software},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655976},
doi = {10.1145/2647908.2655976},
abstract = {This paper describes a demonstration of the product line engineering tool and framework Gears from BigLever software. Gears provides a single feature modeling language, a single variation point mechanism, and a single automated product configurator that are used to configure a product portfolio's shared engineering assets appropriately for each product in the portfolio. The result is an automated production line capability that can quickly produce any product in the portfolio from the same, single set of shared assets.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {121–125},
numpages = {5},
keywords = {bill-of-features, feature modeling, feature profiles, hierarchical product lines, multistage configuration, product baselines, product configurator, product line engineering, product portfolio, software product lines, variation points},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2934466.2934481,
author = {Sion, Laurens and Van Landuyt, Dimitri and Joosen, Wouter and de Jong, Gjalt},
title = {Systematic quality trade-off support in the software product-line configuration process},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934481},
doi = {10.1145/2934466.2934481},
abstract = {Software product line engineering is a compelling methodology that accomplishes systematic reuse in families of systems by relying on two key principles: (i) the decomposition of complex systems into composable and reusable building blocks (often logical units called features), and (ii) on-demand construction of products and product variants by composing these building blocks.However, unless the stakeholder responsible for product configuration has detailed knowledge of the technical ins and outs of the software product line (e.g., the architectural impact of a specific feature, or potential feature interactions), he is in many cases flying in the dark. Although many initial approaches and techniques have been proposed that take into account quality considerations and involve trade-off decisions during product configuration, no systematic support exists.In this paper, we present a reference architecture for product configuration tooling, providing support for (i) up-front generation of variants, and (ii) quality analysis of these variants. This allows pro-actively assessing and predicting architectural quality properties for each product variant and in turn, product configuration tools can take into account architectural considerations. In addition, we provide an in-depth discussion of techniques and tactics for dealing with the problem of variant explosion, and as such to maintain practical feasibility of such approaches.We validated and implemented our reference architecture in the context of a real-world industrial application, a product-line for the firmware of an automotive sensor. Our prototype, based on FeatureIDE, is open for extension and readily available.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {164–173},
numpages = {10},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3023956.3023969,
author = {Schw\"{a}gerl, Felix and Westfechtel, Bernhard},
title = {Perspectives on combining model-driven engineering, software product line engineering, and version control},
year = {2017},
isbn = {9781450348119},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3023956.3023969},
doi = {10.1145/3023956.3023969},
abstract = {Model-driven software engineering (MDSE), software product line engineering (SPLE), and version control (VC) have been established as three software engineering sub-disciplines dealing with raising the level of abstraction of software development, organizing variability in a systematic way, and controlling the evolution of software artifacts, respectively. Traditionally, these sub-disciplines are supported by disjoint tools, leading to undesirable context switches.In this tool-centric survey, approaches for combining MDSE, SPLE, and VC in a pair-wise or even holistic fashion are categorized and assessed. The combination of MDSE and SPLE is natural since models are used to describe both the problem and the solution space. Moreover, specific VC support for models may improve collaborative MDSE in a similar way as dedicated SPL versioning supports evolution control. Last, both VC and SPLE deal with different types of variability - in time and in space, respectively -, such that an integration promises to close the gap between historical and logical (model) versioning.Results indicate that these promises are only satisfied partly by existing approaches. To attest this, we conclude with a list of usage scenarios for combined MDSE/SPLE/VC that cannot be adequately addressed by the current tools.},
booktitle = {Proceedings of the 11th International Workshop on Variability Modelling of Software-Intensive Systems},
pages = {76–83},
numpages = {8},
keywords = {model version control, model-driven software product lines, software evolution, variability management},
location = {Eindhoven, Netherlands},
series = {VaMoS '17}
}

@inproceedings{10.1007/978-3-319-35122-3_2,
author = {Bashari, Mahdi and Bagheri, Ebrahim and Du, Weichang},
title = {Automated Composition of Service Mashups Through Software Product Line Engineering},
year = {2016},
isbn = {9783319351216},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-319-35122-3_2},
doi = {10.1007/978-3-319-35122-3_2},
abstract = {The growing number of online resources, including data and services, has motivated both researchers and practitioners to provide methods and tools for non-expert end-users to create desirable applications by putting these resources together leading to the so called mashups. In this paper, we focus on a class of mashups referred to as service mashups. A service mashup is built from existing services such that the developed service mashup offers added-value through new functionalities. We propose an approach which adopts concepts from software product line engineering and automated AI planning to support the automated composition of service mashups. One of the advantages of our work is that it allows non-experts to build and optimize desired mashups with little knowledge of service composition. We report on the results of the experimentation that we have performed which support the practicality and scalability of our proposed work.},
booktitle = {Proceedings of the 15th International Conference on Software Reuse: Bridging with Social-Awareness - Volume 9679},
pages = {20–38},
numpages = {19},
keywords = {Automated composition, Feature model, Planning, Service mashups, Software product lines, Workflow optimization},
location = {Limassol, Cyprus},
series = {ICSR 2016}
}

@article{10.1145/2382756.2382778,
author = {Tekinerdogan, Bedir},
title = {First turkish software product line engineering workshop summary},
year = {2012},
issue_date = {November 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {37},
number = {6},
issn = {0163-5948},
url = {https://doi.org/10.1145/2382756.2382778},
doi = {10.1145/2382756.2382778},
abstract = {Software reuse has been a goal of the software community since the early days of software engineering. In this context software product line engineering (SPLE) has gained a broad interest in both academic institutions and industry. This trend can also be observed in Turkey. In the recent years an increasing number of software companies in Turkey have adopted a SPLE approach while others are planning to make the transition. This paper summarizes the results of the First Turkish Software Product Line Engineering Workshop that has been organized in Ankara in June 2012. The primary goal of the workshop was to reflect on the state of practice in SPLE in Turkey. For this five leading SPLE companies in Turkey have shared their experiences in adopting SPLE, and using interactive discussions a research agenda for SPLE in Turkey has been defined. We report both on the experiences from the workshop and the resulting research topics.},
journal = {SIGSOFT Softw. Eng. Notes},
month = nov,
pages = {30–34},
numpages = {5},
keywords = {software product line engineering, software reuse, technology transfer, workshop organization}
}

@inproceedings{10.1145/2364412.2364458,
author = {Krueger, Charles and Clements, Paul},
title = {Systems and software product line engineering with BigLever software gears},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364458},
doi = {10.1145/2364412.2364458},
abstract = {This paper describes a demonstration of the product line engineering tool and framework Gears from BigLever software. Gears provides a single feature modeling language, a single variation point mechanism, and a single automated product configurator that are used to configure a product portfolio's shared engineering assets appropriately for each product in the portfolio. The result is an automated production line capability that can quickly produce any product in the portfolio from the same, single set of shared assets.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {256–259},
numpages = {4},
keywords = {bill-of-features, feature modeling, feature profiles, hierarchical product lines, product baselines, product configurator, product line engineering, product portfolio, software product lines, variation points},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1109/ICSE-Companion52605.2021.00122,
author = {Rosiak, Kamil},
title = {Extractive multi product-line engineering},
year = {2021},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-Companion52605.2021.00122},
doi = {10.1109/ICSE-Companion52605.2021.00122},
abstract = {Cloning is a general approach to create new functionality within variants as well as new system variants. It is a fast, flexible, intuitive, and economical approach to evolve systems in the short run. However, in the long run, the maintenance effort increases. A common solution to this problem is the extraction of a product line from a set of cloned variants. This process requires a detailed analysis of variants to extract variability information. However, clones within a variant are usually not considered in the process, but are also a cause for unsustainable software. This thesis proposes an extractive multi product-line engineering approach to re-establish the sustainable development of software variants. We propose an approach to re-engineer intra-system and inter-system clones into reusable, configurable components stored in an integrated platform and synthesize a matching multilayer feature model.},
booktitle = {Proceedings of the 43rd International Conference on Software Engineering: Companion Proceedings},
pages = {263–265},
numpages = {3},
keywords = {clone detection, multi product-line, refactoring, variability mining},
location = {Virtual Event, Spain},
series = {ICSE '21}
}

@inproceedings{10.5555/2525401.2525415,
author = {Tan, Lei and Lin, Yuqing and Ye, Huilin and Zhang, Guoheng},
title = {Improving product configuration in software product line engineering},
year = {2013},
isbn = {9781921770203},
publisher = {Australian Computer Society, Inc.},
address = {AUS},
abstract = {Software Product Line Engineering (SPLE) is a emerging software reuse paradigm. SPLE focuses on systematic software reuse from requirement engineering to product derivation throughout the software development life-cycle. Feature model is one of the most important reusable assets which represents all design considerations of a software product line. Feature model will be used in the product configuration process to produce a software. The product configuration is a decision-making process, where all kinds of relationships among configurable features will be considered to select the desired features for the product. To improve the efficiency and quality of product configuration, we are proposing a new approach which aims at identifying a small set of key features. The product configuration should always start from this set of features since, based on the feature dependencies, the decisions made on these features will imply decisions on the rest of the features of the product line, thus reduce the features visited in the configuration process. We have also conducted some experiments to demonstrate how the proposed approach works and evaluate the efficiency of the approach.},
booktitle = {Proceedings of the Thirty-Sixth Australasian Computer Science Conference - Volume 135},
pages = {125–133},
numpages = {9},
keywords = {feature model, minimum vertex cover, product configuration, software product line},
location = {Adelaide, Australia},
series = {ACSC '13}
}

@inproceedings{10.1145/2491627.2499880,
author = {Clarke, Dave and Schaefer, Ina and ter Beek, Maurice H. and Apel, Sven and Atlee, Joanne M.},
title = {Formal methods and analysis in software product line engineering: 4th edition of FMSPLE workshop series},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2499880},
doi = {10.1145/2491627.2499880},
abstract = {FMSPLE 2013 is the fourth edition of the FMSPLE workshop series aimed at connecting researchers and practitioners interested in raising the efficiency and the effectiveness of software product line engineering through the application of innovative analysis approaches and formal methods.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {266–267},
numpages = {2},
keywords = {evolution, formal methods, semantics, software product lines, testing, variability, verification},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.5555/3124362.3124380,
author = {Leite, Alessandro Ferreira and Penciuc, Diana},
title = {A computing environment configuration management pattern based on a software product line engineering method},
year = {2016},
publisher = {The Hillside Group},
address = {USA},
abstract = {This paper describes a pattern to configure computing environments based on a software product line engineering (SPLE) method. Configuring computing environment represents a challenging and time-consuming activity, even for skilled DevOps engineers. The challenges these users usually face include: (a) choosing a configuration management tool to write their configuration management scripts, (b) ensuring that their computing environments are correctly configured, (c) keeping configuration scripts' dependencies and relationships up-to-date, and (d) ensuring that their scripts are both reproducible and idempotent. Furthermore, configuration management tools offer different levels of abstraction to describe the tasks. Hence, they demand knowledge on various programming languages. Therefore, configuring a computing environment follows a pattern. The pattern is: (a) describe a target state for the computing environment, (b) identify the software packages and their required configuration files, (c) create the scripts with the commands to achieve the desired state, and then, (d) execute the scripts. Thus, a software product line (SPL) based strategy is ideal for this domain, as the products have common characteristics and variable parts. As a result, this approach demands much less time and effort than the traditional one.},
booktitle = {Proceedings of the 11th Latin-American Conference on Pattern Languages of Programming},
articleno = {15},
numpages = {9},
keywords = {DevOps, infrastructure as code, pattern for computing environment configuration, software product line (SPL)},
location = {Buenos Aires, Argentina},
series = {SugarLoafPLoP '16}
}

@inproceedings{10.1145/1134285.1134499,
author = {Pohl, Klaus and Metzger, Andreas},
title = {Variability management in software product line engineering},
year = {2006},
isbn = {1595933751},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1134285.1134499},
doi = {10.1145/1134285.1134499},
abstract = {By explicitly modeling and managing variability, software product line engineering provides a systematic approach for creating a diversity of similar products at low cost, in short time, and with high quality. This tutorial focuses on the two principle differences of software product line engineering when compared to single systems development: The differentiation of two key development processes (domain engineering and application engineering) and the explicit representation and management of variability. We characterize the two processes and their main activities and introduce the orthogonal variability modeling approach (OVM). We further illustrate the OVM approach in the product line requirements engineering and product line testing activities.},
booktitle = {Proceedings of the 28th International Conference on Software Engineering},
pages = {1049–1050},
numpages = {2},
keywords = {requirements engineering, software product lines, testing, variability management, variability modeling},
location = {Shanghai, China},
series = {ICSE '06}
}

@inproceedings{10.1109/ICSECOMPANION.2007.83,
author = {Metzger, Andreas and Pohl, Klaus},
title = {Variability Management in Software Product Line Engineering},
year = {2007},
isbn = {0769528929},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICSECOMPANION.2007.83},
doi = {10.1109/ICSECOMPANION.2007.83},
abstract = {Software product line engineering (SPLE [2], [6]) has proven to be the paradigm for developing a diversity of similar software applications and software-intensive systems at low costs, in short time, and with high quality. Numerous reports document the significant achievements of introducing software product lines in industry [6].},
booktitle = {Companion to the Proceedings of the 29th International Conference on Software Engineering},
pages = {186–187},
numpages = {2},
series = {ICSE COMPANION '07}
}

@inproceedings{10.1145/3489849.3489948,
author = {Lebiedz, Jacek and Wiszniewski, Bogdan},
title = {CAVE applications: from craft manufacturing to product line engineering},
year = {2021},
isbn = {9781450390927},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3489849.3489948},
doi = {10.1145/3489849.3489948},
abstract = {Product line engineering model is suitable for engineering related software products in an efficient manner, taking advantage of their similarities while managing their differences. Our feature driven software product line (SPL) solution based on that model allows for instantiation of different CAVE products based on the set of core assets and driven by a set of common VR features with the minimal budget and time to market.},
booktitle = {Proceedings of the 27th ACM Symposium on Virtual Reality Software and Technology},
articleno = {57},
numpages = {2},
keywords = {VR application features, core assets, production stations},
location = {Osaka, Japan},
series = {VRST '21}
}

@inproceedings{10.1145/3336294.3336321,
author = {Ghofrani, Javad and Kozegar, Ehsan and Fehlhaber, Anna Lena and Soorati, Mohammad Divband},
title = {Applying Product Line Engineering Concepts to Deep Neural Networks},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336321},
doi = {10.1145/3336294.3336321},
abstract = {Deep Neural Networks (DNNs) are increasingly being used as a machine learning solution thanks to the complexity of their architecture and hyperparameters-weights. A drawback is the excessive demand for massive computational power during the training process. Not only as a whole but parts of neural networks can also be in charge of certain functionalities. We present a novel challenge in an intersection between machine learning and variability management communities to reuse modules of DNNs without further training. Let us assume that we are given a DNN for image processing that recognizes cats and dogs. By extracting a part of the network, without additional training a new DNN should be divisible with the functionality of recognizing only cats. Existing research in variability management can offer a foundation for a product line of DNNs composing the reusable functionalities. An ideal solution can be evaluated based on its speed, granularity of determined functionalities, and the support for adding variability to the network. The challenge is decomposed in three subchallenges: feature extraction, feature abstraction, and the implementation of a product line of DNNs.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {72–77},
numpages = {6},
keywords = {deep neural networks, machine learning, software product lines, transfer learning, variability},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1007/978-3-662-45234-9_18,
author = {Schaefer, Ina and Beek, Maurice H.},
title = {Fomal Methods and Analyses in Software Product Line Engineering},
year = {2014},
isbn = {9783662452332},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-662-45234-9_18},
doi = {10.1007/978-3-662-45234-9_18},
abstract = {Software product line engineering SPLE [5,11] aims to develop a family of software-intensive systems via systematic, large-scale reuse in order to reduce time-to-market and costs and to increase the quality of individual products. In order to achieve these goals, formal methods offer promising analysis techniques, which are best applied throughout the product-line lifecycle so as to maximize their overall efficiency and effectiveness.},
booktitle = {Part I of the Proceedings of the 6th International Symposium on Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change - Volume 8802},
pages = {253–256},
numpages = {4}
}

@inproceedings{10.1109/APSEC.2014.94,
author = {Tan, Lei and Lin, Yuqing and Liu, Li},
title = {Quality Ranking of Features in Software Product Line Engineering},
year = {2014},
isbn = {9781479974269},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/APSEC.2014.94},
doi = {10.1109/APSEC.2014.94},
abstract = {Software Product Line Engineering (SPLE) is a systematic software reuse approach that developing a set of similar software products as a family. All the visible characters of the products in a product family are represented as features and their relationships are modelled in a feature model. During application engineering, desired features are selected from the feature model in a configuration process based on the requirements. In this process, the quality of final product should be considered as early as possible which requires identifying and ranking associated features' contributions to related quality attributes before configuring member products. In this paper, we propose a ranking approach to address the issues in current quality based feature ranking approaches, we also include a case study to illustrate our approach at the end.},
booktitle = {Proceedings of the 2014 21st Asia-Pacific Software Engineering Conference - Volume 02},
pages = {57–62},
numpages = {6},
series = {APSEC '14}
}

@inproceedings{10.1145/3336294.3342361,
author = {Debbiche, Jamel and Lignell, Oskar and Kr\"{u}ger, Jacob and Berger, Thorsten},
title = {Migrating Java-Based Apo-Games into a Composition-Based Software Product Line},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342361},
doi = {10.1145/3336294.3342361},
abstract = {A software product line enables an organization to systematically reuse software features that allow to derive customized variants from a common platform, promising reduced development and maintenance costs. In practice, however, most organizations start to clone existing systems and only extract a software product line from such clones when the maintenance and coordination costs increase. Despite the importance of extractive software-product-line adoption, we still have only limited knowledge on what practices work best and miss datasets for evaluating automated techniques. To improve this situation, we performed an extractive adoption of the Apo-Games, resulting in a systematic analysis of five Java games and the migration of three games into a composition-based software product line. In this paper, we report our analysis and migration process, discuss our lessons learned, and contribute a feature model as well as the implementation of the extracted software product line. Overall, the results help to gain a better understanding of problems that can appear during such migrations, indicating research opportunities and hints for practitioners. Moreover, our artifacts can serve as dataset to test automated techniques and developers may improve or extent them in the future.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {98–102},
numpages = {5},
keywords = {Apo-Games, case study, extraction, feature model, featurehouse, software product line},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/1808937.1808938,
author = {Hanssen, Geir Kjetil},
title = {Opening up software product line engineering},
year = {2010},
isbn = {9781605589688},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1808937.1808938},
doi = {10.1145/1808937.1808938},
abstract = {The software industry is experiencing a shift towards more open processes, a globalized market and more active and engaged customers and end users. This change seems natural and inevitable, imposing necessary changes in how software product line organizations plan and drive the development of their products. This paper gives insight into some recent developments in a product line organization and discusses how their efforts have helped them in improving their development processes and their product line. Based on this experience, this paper provides some preliminary guidelines to both industry and research, indicating that software product line organizations should exploit open innovation, engage customers, build communities and simplify processes and organization.},
booktitle = {Proceedings of the 2010 ICSE Workshop on Product Line Approaches in Software Engineering},
pages = {1–7},
numpages = {7},
keywords = {open processes, software product line engineering},
location = {Cape Town, South Africa},
series = {PLEASE '10}
}

@inproceedings{10.1145/3336294.3342362,
author = {\r{A}kesson, Jonas and Nilsson, Sebastian and Kr\"{u}ger, Jacob and Berger, Thorsten},
title = {Migrating the Android Apo-Games into an Annotation-Based Software Product Line},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342362},
doi = {10.1145/3336294.3342362},
abstract = {Most organizations start to reuse software by cloning complete systems and adapting them to new customer requirements. However, with an increasing number of cloned systems, the problems of this approach become severe, due to synchronization efforts. In such cases, organizations often decide to extract a software product line, which promises to reduce development and maintenance costs. While this scenario is common in practice, the research community is still missing knowledge about best practices and needs datasets to evaluate supportive techniques. In this paper, we report our experiences with extracting a preprocessor-based software product line from five cloned Android games of the Apo-Games challenge. Besides the process we employed, we also discuss lessons learned and contribute corresponding artifacts, namely a feature model and source code. The insights into the processes help researchers and practitioners to improve their understanding of extractive software-product-line adoption. Our artifacts can serve as a valuable dataset for evaluations and can be extended in the future to support researchers as a real-world baseline.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {103–107},
numpages = {5},
keywords = {antenna, apo-games, case study, extraction, feature model, software product line},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2846650.2846654,
author = {El-Sharkawy, Sascha and Kr\"{o}her, Christian and Eichelberger, Holger and Schmid, Klaus},
title = {Experience from implementing a complex eclipse extension for software product line engineering},
year = {2015},
isbn = {9781450339049},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2846650.2846654},
doi = {10.1145/2846650.2846654},
abstract = {Software Product Line Engineering (SPLE) is a systematic approach for the development of related software products. These products share a common infrastructure but vary with respect to their individual capabilities, called variabilities. Variability management is a key part of SPLE and is responsible for developing, combining and configuring such variabilities. As these activities are inherently complex, SPLE significantly benefits from tool-support. We developed a customizable Eclipse extension for SPLE that consists of around 38 plug-ins. The resulting tool, called EASy-Producer, extends the Eclipse IDE by the capability to support the creation and management of software product line projects. To provide this capability, EASy-Producer utilizes the extension concepts of the Eclipse platform and integrates additional frameworks, like Xtext. In this paper, we share our experience while applying the Eclipse technologies and, in particular, realizing specific capabilities of our tool using the Eclipse framework. The focus of this paper is on our lessons learned regarding managing workspace information and conflicting build mechanism as well as using Eclipse extensions outside of Eclipse. These lessons serve as an input to the Eclipse community and may help other developers in realizing a complex Eclipse extension.},
booktitle = {Proceedings of the on Eclipse Technology EXchange},
pages = {13–18},
numpages = {6},
keywords = {EASy-Producer, Eclipse, Software Product Lines},
location = {Pittsburgh, PA, USA},
series = {ETX 2015}
}

@inproceedings{10.1145/3106195.3106219,
author = {Gregg, Susan P. and Albert, Denise M. and Clements, Paul},
title = {Product Line Engineering on the Right Side of the "V"},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106219},
doi = {10.1145/3106195.3106219},
abstract = {Product line engineering (PLE) is well-known for the savings it brings to organizations. This paper shows how a very large, in-service systems and software product line is achieving PLE-based savings in their verification and validation phase of development. The paper addresses how to achieve the sharing across product variants while the products being tested are evolving over time. Additionally, we will give a pragmatic set of decision criteria to help answer the longstanding issue in PLE-based testing of whether to test on the domain side or the application (product) side of the product derivation process.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {165–174},
numpages = {10},
keywords = {AEGIS Combat System, PLE factory, Product line engineering, bill-of-features, feature modeling, feature profiles, product configurator, product portfolio, second generation product line engineering, software product lines, variation points},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3106195.3106218,
author = {Krueger, Charles and Clements, Paul},
title = {Enterprise Feature Ontology for Feature-based Product Line Engineering and Operations},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106218},
doi = {10.1145/3106195.3106218},
abstract = {Feature trees have been the standard data structure for representing product diversity in feature-based systems and software product line engineering (PLE). For basic product lines of modest size or complexity, one or several modular feature trees can be sufficient for managing the and resolving the variation present across the engineering assets in the systems engineering 'V' --- from requirements, to design, through implementation, verification, validation, documentation, and more --- in the software, mechanical, and electrical disciplines. However, enterprises seeking to adopt PLE at all levels of their organization, including areas such as product marketing, portfolio planning, manufacturing, supply chain, product sales, product service and maintenance, Internet-of-Things, resource planning, and much more are finding that thousands of nonengineering users need different views and interaction scenarios with a feature diversity representation. This paper describes a feature ontology (a specification of the meaning of terms in the feature modeling realm) that is suitable for managing the feature-based product line engineering and operations in the largest and most complex product line organizations. This ontology is based on layers of abstraction that each incrementally constrain the complexity and combinatorics and targets specific roles in the organization for greater degrees of efficiency, precision, and automation across an entire business enterprise.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {227–236},
numpages = {10},
keywords = {PLE factory, Product line engineering, bill-of-features, enterprise feature ontology, feature modeling, feature profiles, feature-based product line engineering, product configurator, product portfolio, software product lines, variation points},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3236405.3237200,
author = {Bilic, Damir and Sundmark, Daniel and Afzal, Wasif and Wallin, Peter and Causevic, Adnan and Amlinger, Christoffer},
title = {Model-based product line engineering in an industrial automotive context: an exploratory case study},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3237200},
doi = {10.1145/3236405.3237200},
abstract = {Product Line Engineering is an approach to reuse assets of complex systems by taking advantage of commonalities between product families. Reuse within complex systems usually means reuse of artifacts from different engineering domains such as mechanical, electronics and software engineering. Model-based systems engineering is becoming a standard for systems engineering and collaboration within different domains. This paper presents an exploratory case study on initial efforts of adopting Product Line Engineering practices within the model-based systems engineering process at Volvo Construction Equipment (Volvo CE), Sweden. We have used SysML to create overloaded models of the engine systems at Volvo CE. The variability within the engine systems was captured by using the Orthogonal Variability Modeling language. The case study has shown us that overloaded SysML models tend to become complex even on small scale systems, which in turn makes scalability of the approach a major challenge. For successful reuse and to, possibly, tackle scalability, it is necessary to have a database of reusable assets from which product variants can be derived.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {56–63},
numpages = {8},
keywords = {model-based systems engineering, orthogonal variability modeling, system product lines, variability management},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@article{10.1007/s10664-020-09913-9,
author = {Lindohf, Robert and Kr\"{u}ger, Jacob and Herzog, Erik and Berger, Thorsten},
title = {Software product-line evaluation in the large},
year = {2021},
issue_date = {Mar 2021},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {26},
number = {2},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-020-09913-9},
doi = {10.1007/s10664-020-09913-9},
abstract = {Software product-line engineering is arguably one of the most successful methods for establishing large portfolios of software variants in an application domain. However, despite the benefits, establishing a product line requires substantial upfront investments into a software platform with a proper product-line architecture, into new software-engineering processes (domain engineering and application engineering), into business strategies with commercially successful product-line visions and financial planning, as well as into re-organization of development teams. Moreover, establishing a full-fledged product line is not always possible or desired, and thus organizations often adopt product-line engineering only to an extent that deemed necessary or was possible. However, understanding the current state of adoption, namely, the maturity or performance of product-line engineering in an organization, is challenging, while being crucial to steer investments. To this end, several measurement methods have been proposed in the literature, with the most prominent one being the Family Evaluation Framework (FEF), introduced almost two decades ago. Unfortunately, applying it is not straightforward, and the benefits of using it have not been assessed so far. We present an experience report of applying the FEF to nine medium- to large-scale product lines in the avionics domain. We discuss how we tailored and executed the FEF, together with the relevant adaptations and extensions we needed to perform. Specifically, we elicited the data for the FEF assessment with 27 interviews over a period of 11 months. We discuss experiences and assess the benefits of using the FEF, aiming at helping other organizations assessing their practices for engineering their portfolios of software variants.},
journal = {Empirical Softw. Engg.},
month = mar,
numpages = {41},
keywords = {software product lines, process maturity, experience report, family evaluation framework}
}

@inproceedings{10.1145/3233027.3233029,
author = {Sree-Kumar, Anjali and Planas, Elena and Claris\'{o}, Robert},
title = {Extracting software product line feature models from natural language specifications},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233029},
doi = {10.1145/3233027.3233029},
abstract = {The specification of a family of software products may include documents written in natural language. Automatically extracting knowledge from these documents is a challenging problem that requires using Natural Language Processing (NLP) techniques. This knowledge can be formalized as a Feature Model (FM), a diagram capturing the key features and the relationships among them.In this paper, we first review previous works that have presented tools for extracting FMs from textual specifications and compare their strengths and limitations. Then, we propose a framework for feature and relationship extraction, which overcomes the identified limitations and is built upon state-of-the-art open-source NLP tools. This framework is evaluated against previous works using several case studies, showing improved results.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {43–53},
numpages = {11},
keywords = {NLTK, feature model extraction, natural language processing, requirements engineering, software product line},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3233027.3236401,
author = {Damiani, Ferruccio and H\"{a}hnle, Reiner and Kamburjan, Eduard and Lienhardt, Michael},
title = {Interoperability of software product line variants},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3236401},
doi = {10.1145/3233027.3236401},
abstract = {Software Product Lines are an established mechanism to describe multiple variants of one software product. Current approaches however, do not offer a mechanism to support the use of multiple variants from one product line in the same application. We experienced the need for such a mechanism in an industry project with German Railways where we do not merely model a highly variable system, but a system with highly variable subsystems. We present the design challenges that arise when software product lines have to support the use of multiple variants in the same application, in particular: How to reference multiple variants, how to manage multiple variants to avoid name clashes, and how to keep multiple variants interoperable.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {264–268},
numpages = {5},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@article{10.1016/j.infsof.2013.05.006,
author = {Mohabbati, Bardia and Asadi, Mohsen and Ga\v{s}evi\'{c}, Dragan and Hatala, Marek and M\"{u}ller, Hausi A.},
title = {Combining service-orientation and software product line engineering: A systematic mapping study},
year = {2013},
issue_date = {November, 2013},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {55},
number = {11},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2013.05.006},
doi = {10.1016/j.infsof.2013.05.006},
abstract = {Context: Service-Orientation (SO) is a rapidly emerging paradigm for the design and development of adaptive and dynamic software systems. Software Product Line Engineering (SPLE) has also gained attention as a promising and successful software reuse development paradigm over the last decade and proven to provide effective solutions to deal with managing the growing complexity of software systems. Objective: This study aims at characterizing and identifying the existing research on employing and leveraging SO and SPLE. Method: We conducted a systematic mapping study to identify and analyze related literature. We identified 81 primary studies, dated from 2000-2011 and classified them with respect to research focus, types of research and contribution. Result: The mapping synthesizes the available evidence about combining the synergy points and integration of SO and SPLE. The analysis shows that the majority of studies focus on service variability modeling and adaptive systems by employing SPLE principles and approaches. In particular, SPLE approaches, especially feature-oriented approaches for variability modeling, have been applied to the design and development of service-oriented systems. While SO is employed in software product line contexts for the realization of product lines to reconcile the flexibility, scalability and dynamism in product derivations thereby creating dynamic software product lines. Conclusion: Our study summarizes and characterizes the SO and SPLE topics researchers have investigated over the past decade and identifies promising research directions as due to the synergy generated by integrating methods and techniques from these two areas.},
journal = {Inf. Softw. Technol.},
month = nov,
pages = {1845–1859},
numpages = {15},
keywords = {Service-oriented architecture, Software product lines, Systematic mapping}
}

@inproceedings{10.1145/3233027.3233038,
author = {Martinez, Jabier and T\"{e}rnava, Xhevahire and Ziadi, Tewfik},
title = {Software product line extraction from variability-rich systems: the robocode case study},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233038},
doi = {10.1145/3233027.3233038},
abstract = {The engineering of a Software Product Line (SPL), either by creating it from scratch or through the re-engineering of existing variants, it uses to be a project that spans several years with a high investment. It is often hard to analyse and quantify this investment, especially in the context of extractive SPL adoption when the related software variants are independently created by different developers following different system architectures and implementation conventions. This paper reports an experience on the creation of an SPL by re-engineering system variants implemented around an educational game called Robocode. The objective of this game is to program a bot (a battle tank) that battles against the bots of other developers. The world-wide Robocode community creates and maintains a large base of knowledge and implementations that are mainly organized in terms of features, although not presented as an SPL. Therefore, a group of master students analysed this variability-rich domain and extracted a Robocode SPL. We present the results of such extraction augmented with an analysis and a quantification regarding the spent time and effort. We believe that the results and the a-posteriori analysis can provide insights on global challenges on SPL adoption. We also provide all the elements to SPL educators to reproduce the teaching activity, and we make available this SPL to be used for any research purpose.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {132–142},
numpages = {11},
keywords = {education, extractive software product line adoption, reverse-engineering, robocode, software product lines},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3233027.3233032,
author = {Kr\"{o}her, Christian and Gerling, Lea and Schmid, Klaus},
title = {Identifying the intensity of variability changes in software product line evolution},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233032},
doi = {10.1145/3233027.3233032},
abstract = {The evolution of a Software Product Line (SPL) typically affects a variety of artifact types. The intensity (the frequency and the amount) in which developers change variability information in these different types of artifacts is currently unknown. In this paper, we present a fine-grained approach for the variability-centric extraction and analysis of changes to code, build, and variability model artifacts introduced by commits. This approach complements existing work that is typically based on a feature-perspective and, thus, abstracts from this level of detail. Further, it provides a detailed understanding of the intensity of changes affecting variability information in these types of artifacts. We apply our approach to the Linux kernel revealing that changes to variability information occur infrequently and only affect small parts of the analyzed artifacts. Further, we outline how these results may improve certain analysis and verification tasks during SPL evolution.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {54–64},
numpages = {11},
keywords = {evolution analysis, intensity, software product line evolution, variability changes},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3483899.3483902,
author = {Marchezan, Luciano and Assun\c{c}\~{a}o, Wesley Klewerton Guez and Carbonell, Jo\~{a}o and Rodrigues, Elder and Bernardino, Maicon and Basso, F\'{a}bio},
title = {SPLReePlan - Automated Support for Software Product Line Reengineering Planning},
year = {2021},
isbn = {9781450384193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3483899.3483902},
doi = {10.1145/3483899.3483902},
abstract = {The extractive adoption of Software Product Lines (SPL) relies on the reuse of the already developed systems, employing a reengineering process. However, due to the diversity of options found in the daily practice of SPL development, rigorous planning of scenarios is critical to perform SPL reengineering. This diversity is the result of different organizational aspects, such as team experience and product portfolio. Hence, a proper planning process must consider technical and organizational aspects, however, most existing studies in the field do not take into account organizational aspects of the companies. In this work, we present SPLReePlan, an automated framework to aid the SPL reengineering planning taking into account technical and organizational aspects. Our framework is supported by a web-based tool, ready to be used in the industry. To investigate how flexible is SPLReePlan to support the SPL reengineering planning in diverse situations, we extracted eight different scenarios from the SPL literature, which are used as input for the evaluation of SPLReePlan. The results indicate that SPLReePlan can be satisfactorily customized to a variety of scenarios with different artifacts, feature retrieval techniques, and reengineering activities. As a contribution, we discuss the lessons learned within the evaluation, and present challenges that were faced, being a source of information for tool builders or motivating new studies.},
booktitle = {Proceedings of the 15th Brazilian Symposium on Software Components, Architectures, and Reuse},
pages = {1–10},
numpages = {10},
keywords = {automated support, reengineering process, software product lines, variability management},
location = {Joinville, Brazil},
series = {SBCARS '21}
}

@article{10.1016/j.dam.2019.06.008,
author = {Carbonnel, Jessie and Bertet, Karell and Huchard, Marianne and Nebut, Cl\'{e}mentine},
title = {FCA for software product line representation: Mixing configuration and feature relationships in a unique canonical representation},
year = {2020},
issue_date = {Feb 2020},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {273},
number = {C},
issn = {0166-218X},
url = {https://doi.org/10.1016/j.dam.2019.06.008},
doi = {10.1016/j.dam.2019.06.008},
journal = {Discrete Appl. Math.},
month = feb,
pages = {43–64},
numpages = {22},
keywords = {Software product line, Feature model, Formal concept analysis, Concept lattice}
}

@inproceedings{10.1145/3336294.3336303,
author = {Varela-Vaca, \'{A}ngel Jes\'{u}s and Galindo, Jos\'{e} A. and Ramos-Guti\'{e}rrez, Bel\'{e}n and G\'{o}mez-L\'{o}pez, Mar\'{\i}a Teresa and Benavides, David},
title = {Process Mining to Unleash Variability Management: Discovering Configuration Workflows Using Logs},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336303},
doi = {10.1145/3336294.3336303},
abstract = {Variability models are used to build configurators. Configurators are programs that guide users through the configuration process to reach a desired configuration that fulfils user requirements. The same variability model can be used to design different configurators employing different techniques. One of the elements that can change in a configurator is the configuration workflow, i.e., the order and sequence in which the different configuration elements are presented to the configuration stakeholders. When developing a configurator, a challenge is to decide the configuration workflow that better suites stakeholders according to previous configurations. For example, when configuring a Linux distribution, the configuration process start by choosing the network or the graphic card, and then other packages with respect to a given sequence. In this paper, we present COnfiguration workfLOw proceSS mIning (COLOSSI), an automated technique that given a set of logs of previous configurations and a variability model can automatically assist to determine the configuration workflow that better fits the configuration logs generated by user activities. The technique is based on process discovery, commonly used in the process mining area, with an adaptation to configuration contexts. Our proposal is validated using existing data from an ERP configuration environment showing its feasibility. Furthermore, we open the door to new applications of process mining techniques in different areas of software product line engineering.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {265–276},
numpages = {12},
keywords = {clustering, configuration workflow, process discovery, process mining, variability},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3106195.3106223,
author = {Iglesias, Aitziber and Lu, Hong and Arellano, Crist\'{o}bal and Yue, Tao and Ali, Shaukat and Sagardui, Goiuria},
title = {Product Line Engineering of Monitoring Functionality in Industrial Cyber-Physical Systems: A Domain Analysis},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106223},
doi = {10.1145/3106195.3106223},
abstract = {In recent years, manufacturing technology is evolving and progressively becoming more dynamic and complex. This means that manufacturing technology (e.g., based on Industry 4.0) should be able to control the production process at runtime by monitoring physical elements and adapting itself. Such functionality is aimed at increasing production effectiveness and reducing the production cost. We argue that monitoring process can be viewed as a software product line having commonalities and variability. To support our argument, we analyzed and conducted domain analysis of two monitoring systems of Industrial Cyber-Physical Systems (ICPSs) from two industrial domains including automated warehouses and press machines. Based on the domain analysis, we present a common solution for monitoring including a software product line. With such product line, a user can configure, monitor, and visualize data of an ICPS at runtime. However, such solution could not handle the dynamic functionality related to monitoring of ICPS. Thus, we propose the use of dynamic product line and present a set of research questions that must be addressed for such solution.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {195–204},
numpages = {10},
keywords = {Cyber Physical System, Dynamic Software Product Line, Industrial domains, Software Product Line},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3385032.3385043,
author = {Bilic, Damir and Sundmark, Daniel and Afzal, Wasif and Wallin, Peter and Causevic, Adnan and Amlinger, Christoffer and Barkah, Dani},
title = {Towards a Model-Driven Product Line Engineering Process: An Industrial Case Study},
year = {2020},
isbn = {9781450375948},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3385032.3385043},
doi = {10.1145/3385032.3385043},
abstract = {Many organizations developing software-intensive systems face challenges with high product complexity and large numbers of variants. In order to effectively maintain and develop these product variants, Product-Line Engineering methods are often considered, while Model-based Systems Engineering practices are commonly utilized to tackle product complexity. In this paper, we report on an industrial case study concerning the ongoing adoption of Product Line Engineering in the Model-based Systems Engineering environment at Volvo Construction Equipment (Volvo CE) in Sweden. In the study, we identify and define a Product Line Engineering process that is aligned with Model-based Systems Engineering activities at the engines control department of Volvo CE. Furthermore, we discuss the implications of the migration from the current development process to a Model-based Product Line Engineering-oriented process. This process, and its implications, are derived by conducting and analyzing interviews with Volvo CE employees, inspecting artifacts and documents, and by means of participant observation. Based on the results of a first system model iteration, we were able to document how Model-based Systems Engineering and variability modeling will affect development activities, work products and stakeholders of the work products.},
booktitle = {Proceedings of the 13th Innovations in Software Engineering Conference (Formerly Known as India Software Engineering Conference)},
articleno = {9},
numpages = {11},
keywords = {Engine System Development, Model-Based Systems Engineering, Product Line Engineering},
location = {Jabalpur, India},
series = {ISEC '20}
}

@inproceedings{10.1109/APSEC.2012.135,
author = {Yu, Dongjin and Geng, Peng and Wu, Wei},
title = {Constructing Traceability between Features and Requirements for Software Product Line Engineering},
year = {2012},
isbn = {9780769549224},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/APSEC.2012.135},
doi = {10.1109/APSEC.2012.135},
abstract = {Software Product Line Engineering organizes the commonality and the variability of domain feature model in order to achieve large-scale software reuse. Although there are a variety of approaches to the construction of domain feature models, they are however difficult to locate inconsistency caused by frequent changes occurring in the process of evolution. This paper presents a novel approach to the construction of domain feature model and its trace ability with corresponding requirements. It first constructs a set of feature models for individual applications within same domain and their trace ability to corresponding application requirements. Then, it merges all application feature models to form the domain feature model and constructs the trace ability between features in different models. It finally extracts the domain requirements and the trace ability between domain requirements and domain features. The case of software product line for labor market monitoring applications verifies this new approach, and shows that it can not only construct domain feature model automatically and effectively, but also help locate affected requirements while features change or vice versa.},
booktitle = {Proceedings of the 2012 19th Asia-Pacific Software Engineering Conference - Volume 02},
pages = {27–34},
numpages = {8},
keywords = {feature, feature model, requirement, software product line, traceability},
series = {APSEC '12}
}

@inproceedings{10.1145/2362536.2362576,
author = {ter Beek, Maurice H. and Becker, Martin and Classen, Andreas and Roos-Frantz, Fabricia and Schaefer, Ina and Wong, Peter Y. H.},
title = {Formal methods and analysis in software product line engineering: 3rd edition of FMSPLE workshop series},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362576},
doi = {10.1145/2362536.2362576},
abstract = {FMSPLE 2012 is the third edition of the FMSPLE workshop series, traditionally affiliated with SPLC, which aims to connect researchers and practitioners interested in raising the efficiency and the effectiveness of SPLE through the application of innovative analysis approaches and formal methods.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {286–287},
numpages = {2},
keywords = {evolution, formal methods, semantics, software product lines, testing, variability, verification},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@article{10.1007/s11334-011-0159-y,
author = {Ahmed, Faheem and Capretz, Luiz Fernando},
title = {An architecture process maturity model of software product line engineering},
year = {2011},
issue_date = {September 2011},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {7},
number = {3},
issn = {1614-5046},
url = {https://doi.org/10.1007/s11334-011-0159-y},
doi = {10.1007/s11334-011-0159-y},
abstract = {Software architecture has been a key research area in the software engineering community due to its significant role in creating high-quality software. The trend of developing product lines rather than single products has made the software product line a viable option in the industry. Software product line architecture (SPLA) is regarded as one of the crucial components in the product lines, since all of the resulting products share this common architecture. The increased popularity of software product lines demands a process maturity evaluation methodology. Consequently, this paper presents an architecture process maturity model for software product line engineering to evaluate the current maturity of the product line architecture development process in an organization. Assessment questionnaires and a rating methodology comprise the framework of this model. The objective of the questionnaires is to collect information about the SPLA development process. Thus, in general this work contributes towards the establishment of a comprehensive and unified strategy for the process maturity evaluation of software product line engineering. Furthermore, we conducted two case studies and reported the assessment results, which show the maturity of the architecture development process in two organizations.},
journal = {Innov. Syst. Softw. Eng.},
month = sep,
pages = {191–207},
numpages = {17},
keywords = {Application engineering, Domain engineering, Process assessment, Software architecture, Software product line}
}

@article{10.1007/s10664-016-9439-3,
author = {Bagheri, Ebrahim and Benavides, David and Schmid, Klaus and Runeson, Per},
title = {Foreword to the special issue on empirical evidence on software product line engineering},
year = {2016},
issue_date = {August    2016},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {21},
number = {4},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-016-9439-3},
doi = {10.1007/s10664-016-9439-3},
journal = {Empirical Softw. Engg.},
month = aug,
pages = {1579–1585},
numpages = {7}
}

@phdthesis{10.5555/2519127,
author = {Tawhid, Rasha},
title = {Integrating performance analysis in model driven software product line engineering},
year = {2012},
isbn = {9780494893104},
publisher = {Carleton University},
address = {CAN},
abstract = {A  Software Product Line  (SPL) is a set of similar software systems that share a common set of features satisfying a particular domain, and are built from a shared set of software assets using a common means of production. This research proposes to integrate performance analysis in the early phases of the model-driven development process of SPL. We start by adding generic performance annotations to the UML model representing the set of core reusable SPL assets using the MARTE Profile adopted by OMG. A model transformation realized in Atlas Transformation Language (ATL), derives the UML model of a specific product with concrete performance annotations from the SPL model, which is further transformed into a performance model by using a previously developed transformation called PUMA. The automatic derivation of a specific product model based on a given feature configuration is enabled through the mapping between features from the feature model and their realizations in the design model. An efficient mapping technique is proposed that aims to minimize the amount of explicit feature annotations in the UML model of SPL. Implicit feature mapping is inferred during product derivation from the relationships between annotated and non-annotated model elements as defined in the UML metamodel. The mapping technique is used to derive automatically a given product model. Performance is a run-time property of the deployed system and depends on other factors that are external to the design model, characterizing the underlying platforms and run-time environment. Performance completions provide a means to extend the modeling constructs of a system by including the influence of these factors. The variability space of the performance completions is covered and represented through Performance Completion-feature model (PC-feature model). Dealing manually with a large number of performance parameters annotating a UML+MARTE product model is an error-prone process. A model-driven user-friendly technique is proposed to automatically collect all generic performance parameters that need binding from the generated product model and present them to developers in a spreadsheet format, together with context and guiding information where each PC-feature is mapped to certain MARTE annotations corresponding to UML model elements in the product model.},
note = {AAINR89310}
}

@inproceedings{10.1145/3382026.3431248,
author = {Ferreira, Thiago Nascimento and Vergilio, Silvia Regina and Kessentini, Mauroane},
title = {Many-objective Search-based Selection of Software Product Line Test Products with Nautilus},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3431248},
doi = {10.1145/3382026.3431248},
abstract = {The Variability Testing of Software Product Lines (VTSPL) concerns the selection of the most representative products to be tested according to specific goals. Works in the literature use a great variety of objectives and distinct algorithms. However, they neither address all the objectives at the same time nor offer an automatic tool to support this task. To this end, this work introduces Nautilus/VTSPL, a tool to address the VTSPL problem, created by instantiating Nautilus Framework. Nautilus/VTSPL allows the tester to experiment and configure different objectives and categories of many-objective algorithms. The tool also offers support to visualization of the generated solutions, easing the decision-making process.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {1–4},
numpages = {4},
keywords = {many-objective algorithms, product line testing, sbse},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3483899.3483909,
author = {Furtado, Viviane and OliveiraJr, Edson and Kalinowski, Marcos},
title = {Guidelines for Promoting Software Product Line Experiments},
year = {2021},
isbn = {9781450384193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3483899.3483909},
doi = {10.1145/3483899.3483909},
abstract = {The importance of experimentation for Software Engineering research has been notably established in the last years. The software engineering community has discussed how to proper report and evaluate experiments using different approaches, such as quality criteria, scales, and checklists. Nevertheless, there are no guidelines to support researchers and practitioners active in straightforward software engineering research areas, as in Software Product Lines (SPL), at conducting experiments. We hypothesize that experimentation guidelines may aid such a specific area by providing advice and actual excerpts reflecting good practices of SPL experimentation, thus experimentally evolving this area. Therefore, the goal of this paper is to provide guidelines for properly reporting and promoting SPL experiments. We defined such guidelines based on well-known software engineering experiment reports, quality evaluation checklists, and data extracted from 211 SPL experiments identified in a systematic mapping study. We evaluated the guidelines with a qualitative study with SPL and experimentation experts applying open and axial coding procedures. The evaluation enabled us to improve the guidelines. The resulting guidelines contain specific advice to researchers active in SPL and provide examples taken from published SPL experiments. The experts’ positive points indicate that the proposed guidelines can aid SPL researchers and practitioners. Sharing the resulting guidelines could support conducting SPL experiments and allow further area evolution based on prospective experiment replications and reproductions from well-designed and reported experiments.},
booktitle = {Proceedings of the 15th Brazilian Symposium on Software Components, Architectures, and Reuse},
pages = {31–40},
numpages = {10},
keywords = {Experiment Reporting and Sharing, Guidelines, Qualitative Study, SPL Experiments},
location = {Joinville, Brazil},
series = {SBCARS '21}
}

@inproceedings{10.1007/978-3-030-61362-4_5,
author = {Damiani, Ferruccio and Lienhardt, Michael and Paolini, Luca},
title = {On Slicing Software Product Line Signatures},
year = {2020},
isbn = {978-3-030-61361-7},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-030-61362-4_5},
doi = {10.1007/978-3-030-61362-4_5},
abstract = {A Software Product Line (SPL) is a family of similar programs (called variants) generated from a common artifact base. Variability in an SPL can be documented in terms of abstract description of functionalities (called features): a feature model (FM) identifies each variant by a set of features (called a product). Delta-orientation is a flexible approach to implement SPLs. An SPL Signature (SPLS) is a variability-aware Application Programming Interface (API), i.e., an SPL where each variant is the API of a program. In this paper we introduce and formalize, by abstracting from SPL implementation approaches, the notion of slice of an SPLS K for a set of features F (i.e., an SPLS obtained from by K by hiding the features that are not in F). Moreover, we formulate the challenge of defining an efficient algorithm that, given a delta-oriented SPLS K and a set of features F, sreturns a delta-oriented SPLS that is an slice of K for F. Thus paving the way for further research on devising such an algorithm. The proposed notions are formalized for SPLs of programs written in an imperative version of Featherweight Java.},
booktitle = {Leveraging Applications of Formal Methods, Verification and Validation: Verification Principles: 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020, Rhodes, Greece, October 20–30, 2020, Proceedings, Part I},
pages = {81–102},
numpages = {22},
location = {Rhodes, Greece}
}

@inproceedings{10.1145/1982185.1982336,
author = {Asadi, Mohsen and Bagheri, Ebrahim and Ga\v{s}evi\'{c}, Dragan and Hatala, Marek and Mohabbati, Bardia},
title = {Goal-driven software product line engineering},
year = {2011},
isbn = {9781450301138},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1982185.1982336},
doi = {10.1145/1982185.1982336},
abstract = {Feature Models encapsulate functionalities and quality properties of a product family. The employment of feature models for managing variability and commonality of large-scale product families raises an important question: on what basis should the features of a product family be selected for a target software application, which is going to be derived from the product family. Thus, the selection of the most suitable features for a specific application requires the understanding of its stakeholders' intentions and also the relationship between their intentions and the available software features. To address this important issue, we adopt a standard goal-oriented requirements engineering framework, i.e., the i* framework, for identifying stakeholders' intentions and propose an approach for explicitly mapping and bridging between the features of a product family and the goals and objectives of the stakeholders. We propose a novel approach to automatically preconfigure a given feature model based on the objectives of the target product stakeholders. Also, our approach is able to elucidate the rationale behind the selection of the most important features of a family for a target application.},
booktitle = {Proceedings of the 2011 ACM Symposium on Applied Computing},
pages = {691–698},
numpages = {8},
location = {TaiChung, Taiwan},
series = {SAC '11}
}

@inproceedings{10.1145/2791060.2791109,
author = {Krueger, Charles W.},
title = {Mechanical product lifecycle management meets product line engineering},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791109},
doi = {10.1145/2791060.2791109},
abstract = {Early generation Software Product Line (SPL) engineering has evolved into Systems and Software Product Line Engineering (PLE) approaches that extend well beyond the original focus on source code, to a more holistic perspective of the engineering lifecycle. PLE tools and methods in commercial practice today support variation management in requirements, architecture, design models, source code, documentation, configuration data, test cases and more. One of the last lifecycle holdouts from PLE has been mechanical engineering, or Product Lifecycle Management (PLM). The engineering complexity of mechanical product families with embedded software has increased to a threshold where it is intractable for mechanical and software product line engineering to remain disjoint. This paper explores the convergence of mechanical, systems and software product line engineering and why it has been slow to emerge. The reasons are based both on conceptual misalignment among the traditionally distinct disciplines, as well the differences between the physics of mechanical and software systems. The Aras Innovator / BigLever Gears Bridge, an example PLM and PLE integration, is used to illustrate key concepts.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {316–320},
numpages = {5},
keywords = {bill of features, bill of materials, mechanical product line engineering, product lifecycle management},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3106195.3106220,
author = {Young, Bobbi and Cheatwood, Judd and Peterson, Todd and Flores, Rick and Clements, Paul},
title = {Product Line Engineering Meets Model Based Engineering in the Defense and Automotive Industries},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106220},
doi = {10.1145/3106195.3106220},
abstract = {Product line engineering and model based engineering are two powerful engineering approaches that each bring significant advantages to system engineering projects. This paper explores how three companies - Raytheon, General Dynamics, and General Motors - are combining these two paradigms in unique and innovative ways in very challenging application domains to achieve engineering goals of critical importance to them.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {175–179},
numpages = {5},
keywords = {PLE factory, Product line engineering, feature models, feature profiles, feature-based product line engineering, model-based engineering, product configurator, variation points},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.5555/2666064.2666075,
author = {Fant, Julie Street and Gomaa, Hassan and Pettit, Robert G.},
title = {Software product line engineering of space flight software},
year = {2012},
isbn = {9781467317511},
publisher = {IEEE Press},
abstract = {This paper presents a practical solution to a real-life industrial problem in the unmanned space flight software (FSW) domain using software product lines and software architectural design patterns. In the FSW domain, there exists a significant amount of variability in the required capabilities. For example, some FSW have a significant amount of hardware to control and operate in a nearly autonomous fashion. In contrast, other FSW have a small amount of hardware to control and rely heavily of commanding from the ground station to operate the spacecraft. The underlying architecture and component interactions needed for the different FSWs are quite different. This amount of architectural variability makes it difficult to develop a SPL architecture that covers the all possible variability in the FSW domain. Therefore, this paper presents a practical solution to this real world problem that leverages software product line concepts and software architectural design patterns.},
booktitle = {Proceedings of the Third International Workshop on Product LinE Approaches in Software Engineering},
pages = {41–44},
numpages = {4},
keywords = {UML, software architectural design patterns, software product lines, unmanned space flight software},
location = {Zurich, Switzerland},
series = {PLEASE '12}
}

@inproceedings{10.1145/3233027.3236392,
author = {Seidl, Christoph and Schuster, Sven and Schaefer, Ina},
title = {Generative software product line development using variability-aware design patterns},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3236392},
doi = {10.1145/3233027.3236392},
abstract = {A Software Product Line (SPL) is an approach to reuse in-the-large that models closely related software systems in terms of commonalities and variabilities. Design patterns are best practices for addressing recurring design problems. When implementing an SPL, instances of certain design patterns are employed to handle variability, which makes these variability-aware design patterns a best practice for SPL design. However, a proactive SPL development method with design patterns is lacking. In our paper [1], we present a method to perform generative SPL development with design patterns.To specify a design pattern (see Fig. 1 1 -- 3), we use role models to capture a design pattern's elements and its relation to a variability model in a Design Pattern Role Model (DPRM) and a Family Role Model (FRM), respectively. To associate the aspects specified in each of these role models, i.e., design and variability, we define an FRM to DPRM mapping. To apply a design pattern (see Fig. 1 4 -- 6), a user has to select a variability-aware design pattern, variability realization mechanism and target language to have the implementation generated-potentially by merging it into existing realization artifacts. In the process, a user has to map individual FRM roles to existing features and DPRM roles to (parts of) implementation elements to be generated (e.g., classes, methods). To assure correct instantiation, we check both these mappings for conformance with the specification of the pattern by formulating a satisfiability problem and applying a SAT solver.In the paper, we provide definitions for the variability-aware versions of the design patterns Observer, Strategy, Template Method and Composite. Furthermore, we support generation of realizations in Java, C++ and UML class diagrams utilizing annotative, compositional and transformational variability realization mechanisms, see Fig. 2. Through these mechanisms, we support proactive development of SPLs using design patterns to apply best practices for the realization of variability. We realize our concepts within the Eclipse IDE and demonstrate them within a case study.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {246},
numpages = {1},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3109729.3109744,
author = {Munoz, Daniel-Jesus},
title = {Achieving energy efficiency using a Software Product Line Approach},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109744},
doi = {10.1145/3109729.3109744},
abstract = {Green computing and energy-aware software engineering are trend approaches that try to address the development of applications respectful with the environment. To reduce the energy consumption of an application the developer needs: (i) to identify what are the concerns that will impact more in the energy consumption; (ii) to model the variability of alternative designs and implementations of each concern; (iii) to store and compare the experimentation results related with the energy and time consumption of concerns; (iv) to find out what is the most eco-efficient solution for each concern. HADAS addresses these issues by modelling the variability of energy consuming concerns for different energy contexts. It connects the variability model with a repository that stores energy measurements, providing a Software Product Line (SPL) service, helping developers to reason and find out what are the most eco-friendly configurations. We have an initial implementation of the HADAS toolkit using Clafer. We have tested our implementation with several case studies.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {131–138},
numpages = {8},
keywords = {Clafer, Energy Efficiency, Metrics, Optimisation, Repository, Software Product Line, Variability},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.5555/1885639.1885680,
author = {Lutz, Robyn and Weiss, David and Krishnan, Sandeep and Yang, Jingwei},
title = {Software product line engineering for long-lived, sustainable systems},
year = {2010},
isbn = {3642155782},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {The design and operation of long-lived, sustainable systems (LSS) are hampered by limited support for change over time and limited preservation of system knowledge. The solution we propose is to adopt software product-line engineering (SPLE) techniques for use in single, critical systems with requirements for sustainability. We describe how four categories of change in a LSS can be usefully handled as variabilities in a software product line. We illustrate our argument with examples of changes from the Voyager spacecraft.},
booktitle = {Proceedings of the 14th International Conference on Software Product Lines: Going Beyond},
pages = {430–434},
numpages = {5},
keywords = {commonality/variability analysis, long-lived system, software product line, sustainable system, variability},
location = {Jeju Island, South Korea},
series = {SPLC'10}
}

@inproceedings{10.1109/IWSPM.2009.6,
author = {Yamazaki, Susumu},
title = {Software Product Line Engineering with Personas},
year = {2009},
isbn = {9780769540986},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/IWSPM.2009.6},
doi = {10.1109/IWSPM.2009.6},
abstract = {In this paper, a user-centered and mass-customized design process is proposed that unifies Personas and Software Product Line Engineering (SPLE). The key to this proposal is the relationship between persona- weighted feature matrices and product-feature matri- ces. We propose a development method that (1) creates personas before the product portfolio scoping stage, and (2) adds extra personas during the application engineering stage. Applicable domains are discussed, and methods for evaluating the approach are reported.},
booktitle = {Proceedings of the 2009 Third International Workshop on Software Product Management},
pages = {27–30},
numpages = {4},
series = {IWSPM '09}
}

@inproceedings{10.1145/2556624.2556633,
author = {Benavides, David and Galindo, Jos\'{e} A.},
title = {Variability management in an unaware software product line company: an experience report},
year = {2014},
isbn = {9781450325561},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2556624.2556633},
doi = {10.1145/2556624.2556633},
abstract = {Software product line adoption is a challenging task in software development organisations. There are some reports in the literature of how software product line engineering has been adopted in several companies using different variability management techniques and patterns. However, to the best of our knowledge, there are no empirical reports on how variability management is handled in companies that do not know about software product line methods and tools. In this paper we present an experience report observing variability management practices in a software development company that was unaware of software product line approaches. We briefly report how variability management is performed in different areas ranging from business architecture to software assets management. From the observation we report some open research opportunities for the future and foster further similar and more structured empirical studies on unaware software product line companies.},
booktitle = {Proceedings of the 8th International Workshop on Variability Modelling of Software-Intensive Systems},
articleno = {5},
numpages = {6},
keywords = {experience report, software product lines, unaware variability techniques organisation},
location = {Sophia Antipolis, France},
series = {VaMoS '14}
}

@inproceedings{10.1145/1985782.1985785,
author = {Remmel, Hanna and Paech, Barbara and Engwer, Christian and Bastian, Peter},
title = {Supporting the testing of scientific frameworks with software product line engineering: a proposed approach},
year = {2011},
isbn = {9781450305983},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1985782.1985785},
doi = {10.1145/1985782.1985785},
abstract = {Testing scientific software involves dealing with special challenges like missing test oracle and different possible sources of a problem. When testing scientific frameworks, additionally a large variety of mathematical algorithms and possible applications for the framework has to be handled. We propose to use concepts of software product line engineering to handle this variability.The contribution of this paper is a two-step process for reengineering a variability model out of a framework for scientific software. This process is explained with a real case study. Furthermore, we sketch how the variability model can be used to systematically derive system test applications for the framework.},
booktitle = {Proceedings of the 4th International Workshop on Software Engineering for Computational Science and Engineering},
pages = {10–18},
numpages = {9},
keywords = {framework, scientific software, software product line engineering, testing, variability modeling},
location = {Waikiki, Honolulu, HI, USA},
series = {SECSE '11}
}

@inproceedings{10.1145/2480362.2480694,
author = {Diwan, Piyush and Carey, Patricia and Franz, Eric and Li, Yixue and Bitterman, Thomas and Hudak, David E. and Ramnath, Rajiv},
title = {Applying software product line engineering in building web portals for supercomputing services},
year = {2013},
isbn = {9781450316569},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2480362.2480694},
doi = {10.1145/2480362.2480694},
abstract = {Supercomputing centers, typically non-profit, government or university-based organizations with scarce resources, are increasingly being requested to provide customized web portals for user-centered access to their services in order to support a demanding customer base. These portals often have very similar architectures and meet similar requirements, with the variations primarily being in the specialized analysis applications, and in the input and output of these applications. Given these characteristics, Software Production Line Engineering (SPLE) approaches will be valuable in enabling development teams to cost-effectively meet demands. In this paper, we demonstrate a suite of web portals developed at The Ohio Supercomputer Center (OSC) by applying SPLE methodologies. We show how we applied feature modeling on these applications to identify commonalities in their application level features despite differences in their problem domains. We describe a common framework (we term it Per User DrupaL, or PUDL), which serves as the common foundation for these portals. We demonstrate the effectiveness of SPLE in terms of reduced development time and effort, and discuss the technical challenges faced in this process. Finally we propose, as an extension to our work, an automation framework for portal generation, which users could build their own customized portals.},
booktitle = {Proceedings of the 28th Annual ACM Symposium on Applied Computing},
pages = {1765–1771},
numpages = {7},
keywords = {drupal, end-user computing, feature modeling, high performance computing, portals, software product line engineering, software-as-a-service, supercomputing},
location = {Coimbra, Portugal},
series = {SAC '13}
}

@inbook{10.1007/978-3-642-03764-1_4,
author = {Groher, Iris and Voelter, Markus},
title = {Aspect-Oriented Model-Driven Software Product Line Engineering},
year = {2009},
isbn = {9783642037634},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-03764-1_4},
abstract = {Software product line engineering aims to reduce development time, effort, cost, and complexity by taking advantage of the commonality within a portfolio of similar products. The effectiveness of a software product line approach directly depends on how well feature variability within the portfolio is implemented and managed throughout the development lifecycle, from early analysis through maintenance and evolution. This article presents an approach that facilitates variability implementation, management, and tracing by integrating model-driven and aspect-oriented software development. Features are separated in models and composed of aspect-oriented composition techniques on model level. Model transformations support the transition from problem to solution space models. Aspect-oriented techniques enable the explicit expression and modularization of variability on model, template, and code level. The presented concepts are illustrated with a case study of a home automation system.},
booktitle = {Transactions on Aspect-Oriented Software Development VI: Special Issue on Aspects and Model-Driven Engineering},
pages = {111–152},
numpages = {42}
}

@inproceedings{10.1145/2420942.2420948,
author = {Gonz\'{a}lez-Huerta, Javier and Insfran, Emilio and Abrah\~{a}o, Silvia and McGregor, John D.},
title = {Non-functional requirements in model-driven software product line engineering},
year = {2012},
isbn = {9781450318075},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2420942.2420948},
doi = {10.1145/2420942.2420948},
abstract = {Developing variant-rich software systems through the application of the software product line approach requires the management of a wide set of requirements. However, in most cases, the focus of those requirements is limited to the functional requirements. The non-functional requirements are often informally defined and their management does not provide traceability mechanisms for their validation. In this paper, we present a multimodel approach that allows the explicit representation of non-functional requirements for software product lines both at domain engineering, and application engineering levels. The multimodel allows the representation of different viewpoints of a software product line, including the non-functional requirements and the relationships that these non-functional requirements might have with features and functionalities. The feasibility of this approach is illustrated through a specific example from the automotive domain.},
booktitle = {Proceedings of the Fourth International Workshop on Nonfunctional System Properties in Domain Specific Modeling Languages},
articleno = {6},
numpages = {6},
keywords = {model driven engineering, non-functional requirements, software product lines},
location = {Innsbruck, Austria},
series = {NFPinDSML '12}
}

@article{10.1016/j.procs.2020.03.380,
author = {Hitesh and Chhikara, Rita and Kumari, A. Charan},
title = {Feature Selection Optimization of HealthCare Software Product Line using BBO},
year = {2020},
issue_date = {2020},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {167},
number = {C},
issn = {1877-0509},
url = {https://doi.org/10.1016/j.procs.2020.03.380},
doi = {10.1016/j.procs.2020.03.380},
journal = {Procedia Comput. Sci.},
month = jan,
pages = {1696–1704},
numpages = {9},
keywords = {Software Product Line, Biogeography based optimization(BBO), Feature Model(FM), Genetic Algorithm(GA)}
}

@inproceedings{10.1145/3422392.3422402,
author = {da Silva, Leandro Flores and Oliveira, Edson},
title = {Evaluating usefulness, ease of use and usability of an UML-based Software Product Line Tool},
year = {2020},
isbn = {9781450387538},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3422392.3422402},
doi = {10.1145/3422392.3422402},
abstract = {Software Product Line (SPL) is a software development approach that systematically applies reuse of artifacts in a specific domain. In the last years, the industry has increasingly required the support of tools for most SPL life cycle activities, targeting feature models and related diagrams, variability management and SPL specific products configuration. However, existing literature does not present any tools with native support to UML-based SPLs. In addition, relying on manipulating XMI files for general-purpose UML tools for such SPLs takes significant effort, and it is time-consuming and error-prone. In this scenario, we developed SMartyModeling, with support to UML stereotype-based variability management. To evolve our tool, we evaluated it throughout a survey answered by 37 participants. We adopted questions from the Technology Acceptance Model (TAM) and the System Usability Scale (SUS). We organized it into three sections of Likert-scaled questions for usefulness, ease of use, and usability. A last section consisted of open questions focused on positive and negative aspects and an overview of the evalaution. SMartyModeling was well evaluated in relation to usefulness, ease of use, and usability. We analyzed and interpreted the respondents quotes using correlation techniques and open and axial coding. The analysis of open questions allowed us a direct identification of points to improve the tool, its limitations and positive aspects.},
booktitle = {Proceedings of the XXXIV Brazilian Symposium on Software Engineering},
pages = {798–807},
numpages = {10},
keywords = {SPL tool support, Software Product Line, UML},
location = {Natal, Brazil},
series = {SBES '20}
}

@inproceedings{10.1145/3425269.3425271,
author = {Nicolodi, Luciane Baldo and Colanzi, Thelma Elita and Assun\c{c}\~{a}o, Wesley K. G.},
title = {Architectural Feature Re-Modularization for Software Product Line Evolution},
year = {2020},
isbn = {9781450387545},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3425269.3425271},
doi = {10.1145/3425269.3425271},
abstract = {Extensive maintenance leads to the Software Product Line Architecture (PLA) degradation over time. When there is the need of evolving the Software Product Line (SPL) to include new features, or move to a new platform, a degraded PLA requires considerable effort to understand and modify, demanding expensive refactoring activity. In the state of the art, search-based algorithms are used to improve PLA at package level. However, recent studies have shown that the most variability and implementation details of an SPL are described in the level of classes. There is a gap between existing approaches and existing practical needs. In this work, we extend the current state of the art to deal with feature modularization in the level of classes by introducing a new search operator and a set of objective functions to deal with feature modularization in a finer granularity of the architectural elements, namely at class level. We evaluated the proposal in an exploratory study with a PLA widely investigated and a real-world PLA. The results of quantitative and qualitative analysis point out that our proposal provides solutions to properly re-modularize features in a PLA, being preferred by practitioners, in order to support the evolution of SPLs.},
booktitle = {Proceedings of the 14th Brazilian Symposium on Software Components, Architectures, and Reuse},
pages = {31–40},
numpages = {10},
keywords = {Architectural Degradation, Feature Modularization, Search-based Software Engineering, Software Evolution},
location = {Natal, Brazil},
series = {SBCARS '20}
}

@article{10.1145/3442389,
author = {Castro, Thiago and Teixeira, Leopoldo and Alves, Vander and Apel, Sven and Cordy, Maxime and Gheyi, Rohit},
title = {A Formal Framework of Software Product Line Analyses},
year = {2021},
issue_date = {July 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {30},
number = {3},
issn = {1049-331X},
url = {https://doi.org/10.1145/3442389},
doi = {10.1145/3442389},
abstract = {A number of product-line analysis approaches lift analyses such as type checking, model checking, and theorem proving from the level of single programs to the level of product lines. These approaches share concepts and mechanisms that suggest an unexplored potential for reuse of key analysis steps and properties, implementation, and verification efforts. Despite the availability of taxonomies synthesizing such approaches, there still remains the underlying problem of not being able to describe product-line analyses and their properties precisely and uniformly. We propose a formal framework that models product-line analyses in a compositional manner, providing an overall understanding of the space of family-based, feature-based, and product-based analysis strategies. It defines precisely how the different types of product-line analyses compose and inter-relate. To ensure soundness, we formalize the framework, providing mechanized specification and proofs of key concepts and properties of the individual analyses. The formalization provides unambiguous definitions of domain terminology and assumptions as well as solid evidence of key properties based on rigorous formal proofs. To qualitatively assess the generality of the framework, we discuss to what extent it describes five representative product-line analyses targeting the following properties: safety, performance, dataflow facts, security, and functional program properties.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = apr,
articleno = {34},
numpages = {37},
keywords = {Software product lines, product-line analysis}
}

@inproceedings{10.1145/3275245.3275254,
author = {Nepomuceno, Thais S. and Oliveira, Edson},
title = {Configuring Software Product Line Specific Products with SMarty and PLUS: An Experimental Study on Use Case Diagrams},
year = {2018},
isbn = {9781450365659},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3275245.3275254},
doi = {10.1145/3275245.3275254},
abstract = {Software Product Line (SPL) represents a set of systems that share common and variable elements, to meet the specific needs of a particular market segment, providing the necessary flexibility for product customization and diversification. The adoption of SPL provides several benefits, such as, the decreasing in time for building a system and reducing its cost. One of the main SPL development activities is variability management. To manage variabilities, there are several approaches widely known in literature, such as, PLUS and SMarty. Literature has no reports of experimental evaluations comparing existing approaches. With the creation of the SMarty approach, a continuous experimental evaluation process was started in relation to other approaches with the same purpose. Thus, experimental studies have been developed in recent years to demonstrate the effectiveness of SMarty in relation to other similar approaches. Thus, in this paper, we continue the process of continuous experimentation and evolution of SMarty comparing it with the PLUS method with regard to the ability to configure SPL specifics products from use case diagrams. The results did not point to the advantages of the SMarty approach over PLUS, but point out discussion points and improvements for SMarty and the experimentation process followed.},
booktitle = {Proceedings of the XVII Brazilian Symposium on Software Quality},
pages = {81–90},
numpages = {10},
keywords = {Experimental Study, Software Product Line, UML, Use Cases, Variability Management},
location = {Curitiba, Brazil},
series = {SBQS '18}
}

@inproceedings{10.1109/ECOWS.2011.13,
author = {Alferez, Germ\'{a}n H. and Pelechano, Vicente},
title = {Systematic Reuse of Web Services through Software Product Line Engineering},
year = {2011},
isbn = {9780769545363},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ECOWS.2011.13},
doi = {10.1109/ECOWS.2011.13},
abstract = {In SOA, reusability logic is divided into services to support reuse. However, SOA lacks support for systematic reusability of Web services or composite Web services, making it more difficult to reuse them in mass production environments. On the other hand, SPL engineering supports systematic reuse by selecting the features that are part of a product while removing others that are not part of it. We propose a method in which SPL features are used to represent Web services and composite Web services. As a result, the selection or deselection of reusable features in a feature model guide the construction of particular service compositions. We have validated our approach based on a case study. Results related to systematic reuse demonstrate the value of our method.},
booktitle = {Proceedings of the 2011 IEEE Ninth European Conference on Web Services},
pages = {192–199},
numpages = {8},
keywords = {Web service, model driven development, service-oriented architecture, software product line, systematic reuse},
series = {ECOWS '11}
}

@inproceedings{10.1145/3297156.3297203,
author = {Hasbi, Muhamad and Budiardjo, Eko K. and Wibowo, Wahyu C.},
title = {Reverse Engineering in Software Product Line - A Systematic Literature Review},
year = {2018},
isbn = {9781450366069},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297156.3297203},
doi = {10.1145/3297156.3297203},
abstract = {Reverse engineering is the information extraction process on system by identifying and analyzing the components that are part of that system. We analyze existing research that related with reverse engineering process on software product line. There are two product line processes according to Software product line engineering framework they are domain engineering process and application engineering process. We investigate reverse engineering in domain engineering process (domain requirements, domain design, and domain realization, domain quality assurance). We performed a systematic literature review. A manual search resulting 71 papers considered for analysis. Results: The majority of reverse engineering studied in three domain activity in domain engineering process. That is requirement engineering, domain design and domain realization. There are inconsistent correlations between features in the reverse engineering process. These approaches extract features without constraints between its features. Conclusions: Reverse engineering methods are needed that are able to identify and maintain a consistent correlation between features in application engineering and domain engineering in the reverse engineering process. Finally, we provide gaps from existing research and show opportunities for future research.},
booktitle = {Proceedings of the 2018 2nd International Conference on Computer Science and Artificial Intelligence},
pages = {174–179},
numpages = {6},
keywords = {Reverse engineering, domain engineering, software product line, systematic review},
location = {Shenzhen, China},
series = {CSAI '18}
}

@inproceedings{10.1007/978-3-030-83903-1_9,
author = {Shahin, Ramy and Kokaly, Sahar and Chechik, Marsha},
title = {Towards Certified Analysis of Software Product Line Safety Cases},
year = {2021},
isbn = {978-3-030-83902-4},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-030-83903-1_9},
doi = {10.1007/978-3-030-83903-1_9},
abstract = {Safety-critical software systems are in many cases designed and implemented as families of products, usually referred to as Software Product Lines (SPLs). Products within an SPL vary from each other in terms of which features they include. Applying existing analysis techniques to SPLs and their safety cases is usually challenging because of the potentially exponential number of products with respect to the number of supported features. In this paper, we present a methodology and infrastructure for certified lifting of existing single-product safety analyses to product lines. To ensure certified safety of our infrastructure, we implement it in an interactive theorem prover, including formal definitions, lemmas, correctness criteria theorems, and proofs.We apply this infrastructure to formalize and lift a Change Impact Assessment (CIA) algorithm. We present a formal definition of the lifted algorithm, outline its correctness proof (with the full machine-checked proof available online), and discuss its implementation within a model management framework.},
booktitle = {Computer Safety, Reliability, and Security: 40th International Conference, SAFECOMP 2021, York, UK, September 8–10, 2021, Proceedings},
pages = {130–145},
numpages = {16},
keywords = {Safety cases, Product lines, Lean, Certified analysis},
location = {York, United Kingdom}
}

@inproceedings{10.1145/2791060.2791067,
author = {Yue, Tao and Ali, Shaukat and Selic, Bran},
title = {Cyber-physical system product line engineering: comprehensive domain analysis and experience report},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791067},
doi = {10.1145/2791060.2791067},
abstract = {Cyber-Physical Systems (CPSs) are the future generation of highly connected embedded systems having applications in diverse domains including Oil and Gas. Employing Product Line Engineering (PLE) is believed to bring potential benefits with respect to reduced cost, higher productivity, higher quality, and faster time-to-market. However, relatively few industrial field studies are reported regarding the application of PLE to develop large-scale systems, and more specifically CPSs. In this paper, we report about our experiences and insights gained from investigating the application of model-based PLE at a large international organization developing subsea production systems (typical CPSs) to manage the exploitation of oil and gas production fields. We report in this paper 1) how two systematic domain analyses (on requirements engineering and product configuration/derivation) were conducted to elicit CPS PLE requirements and challenges, 2) key results of the domain analysis (commonly observed in other domains), and 3) our initial experience of developing and applying two Model Based System Engineering (MBSE) PLE solution to address some of the requirements and challenges elicited during the domain analyses.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {338–347},
numpages = {10},
keywords = {cyber physical system (CPS), domain analysis, model based system engineering, product line engineering (PLE), requirements engineering},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2934466.2934491,
author = {Fogdal, Thomas and Scherrebeck, Helene and Kuusela, Juha and Becker, Martin and Zhang, Bo},
title = {Ten years of product line engineering at Danfoss: lessons learned and way ahead},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934491},
doi = {10.1145/2934466.2934491},
abstract = {Software and systems product line engineering (PLE) has been an established approach for reducing time to market as well as cost and increasing quality in a set of related products for two decades now. Although there is a huge body of knowledge on PLE, adopting a concrete PLE approach is still not a trivial endeavor for interested companies. With the increasing importance of development speed, the advent of agile engineering approaches, and decreasing management interest in improvements that require large organizational transformations and only show benefits after several years, companies are facing challenges in successfully adopting this approach. They often hesitate as there is no clear adoption path, nor any certainty, that the intended improvement steps will also provide added value in the short- and mid-term perspective. In consequence, a considerable amount of PLE potential still remains unexploited.To help such companies with the adoption of PLE, the goal of this paper is to provide inspiration and evidence that PLE is a sound approach and its successful introduction is possible even in settings that differ substantially from those of pioneer product lines.To this end, this paper presents the following main contributions with the PLE adoption case at Danfoss Drives: an overview of the key change drivers and the motivation for adopting a PLE approach, a discussion of incremental PLE introduction in an agile engineering context, a presentation of the current PLE setting with a focus on key concepts, and finally a presentation of motivators and directions for future improvements.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {252–261},
numpages = {10},
keywords = {industrial experiences, product line adoption, product line evaluation},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2491627.2499881,
author = {Botterweck, Goetz and Dhungana, Deepak and Noda, Natsuko and Rabiser, Rick and Washizaki, Hironori},
title = {Joint Workshop of the 5th International Workshop on Model-Driven Approaches in Software Product Line Engineering and the 4th Workshop on Scalable Modeling Techniques for Software Product Lines (MAPLE/SCALE 2013)},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2499881},
doi = {10.1145/2491627.2499881},
abstract = {One of the greatest barriers on the way to the efficient creation, handling, and evolution of product lines is the complexity and scale of the underlying artifacts. In this context, the MAPLE/SCALE workshop focuses on the investigation of scalability issues and the application of model-driven concepts and techniques in software product line engineering (SPLE). The workshop explores how to handle product lines of realistic complexity and how to facilitate systematic and efficient product derivation.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {268},
numpages = {1},
keywords = {model-driven software engineering, product derivation, product line engineering, scalability, variability modeling},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2791060.2791071,
author = {Wozniak, Len and Clements, Paul},
title = {How automotive engineering is taking product line engineering to the extreme},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791071},
doi = {10.1145/2791060.2791071},
abstract = {Automotive manufacturing ranks among the most extreme instances of systems and software product line engineering (PLE). The product family numbers in the millions, each product is highly complex in its own right, and the variation across products is literally astronomical in scale. This paper explores the aspects that make the domain extreme and the very specific implications they have for PLE. These implications include the need for efficient manufacturing, complexity management, concurrent development streams, globally distributed engineering and production, a hierarchical product family tree, multi-level variation binding, constraint management, and a highly robust and integrated PLE tooling environment. Happily, the PLE paradigm supporting these implications brings about a number of opportunities for analysis and automation that provide efficiencies of production previously unattainable. We focus on one example in depth: The management and automated generation of the many thousands of calibration parameters that determine vehicle-specific software behavior. Throughout, we use the vehicle product line at General Motors, which we believe to be the world's largest, to illustrate and ground our journey through automotive PLE.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {327–336},
numpages = {10},
keywords = {automotive product lines, bill-of-features, feature modeling, feature profiles, product configurator, product line engineering, product portfolio, second generation product line engineering, software product lines, variation points},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2362536.2362545,
author = {Lee, Jihyun and Kang, Sungwon and Lee, Danhyung},
title = {A survey on software product line testing},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362545},
doi = {10.1145/2362536.2362545},
abstract = {Software product line (SPL) testing consists of two separate but closely related test engineering activities: domain testing and application testing. Various software product line testing approaches have been developed over the last decade, and surveys have been conducted on them. However, thus far none of them deeply addressed the questions of what researches have been conducted in order to overcome the challenges posed by the two separate testing activities and their relationships. Thus, this paper surveys the current software product line testing approaches by defining a reference SPL testing processes and identifying, based on them, key research perspectives that are important in SPL testing. Through this survey, we identify the researches that addressed the challenges and also derive open research opportunities from each perspective.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {31–40},
numpages = {10},
keywords = {software product line engineering, software product line testing, software testing},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3106195.3106227,
author = {Troya, Javier and Tolvanen, Juha-Pekka and Segura, Sergio},
title = {Domain-Specific Languages and Model Transformations for Software Product Line},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106227},
doi = {10.1145/3106195.3106227},
abstract = {This tutorial introduces and demonstrates the use of Model-Driven Engineering in Software Product Lines. In particular, it teaches participants about domain-specific languages, metamodeling and modeling, and where these techniques can be best used (and where not). Along with modeling, tutorial teaches various model transformation approaches and how they can be effectively used to bring software product lines to a different domain and to optimize them. The use of models for handling product variation is demonstrated with real-life examples from various industries and product lines.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {254},
numpages = {1},
keywords = {ATL, Domain-Specific Language, Feature Model, Model Transformation, Software Product Line, Tutorial},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1007/978-3-642-33678-2_30,
author = {Braga, Rosana T. Vaccare and Trindade Junior, Onofre and Castelo Branco, Kalinka Regina and Neris, Luciano De Oliveira and Lee, Jaejoon},
title = {Adapting a software product line engineering process for certifying safety critical embedded systems},
year = {2012},
isbn = {9783642336775},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-33678-2_30},
doi = {10.1007/978-3-642-33678-2_30},
abstract = {Software Product Line Engineering (SPLE) is a software development paradigm that aims at reducing the development effort and shorting time-to-market through systematic software reuse. While this paradigm has been successfully applied for the development of embedded systems in various domains, new challenges have emerged from the development of safety critical systems that require certification against a specific standard. Existing SPLE approaches do not explicitly consider the various certification standards or levels that products should satisfy. In this paper, we focus on several practical issues involved in the SPLE process, establishing an infrastructure of a product line engineering for certified products. A metamodel is proposed to capture the entities involved in SPL certification and the relationships among them. ProLiCES, which is a model-driven process for the development of SPLs, was modified to serve as an example of our approach, in the context of the UAV (Unmanned Aerial Vehicle) domain.},
booktitle = {Proceedings of the 31st International Conference on Computer Safety, Reliability, and Security},
pages = {352–363},
numpages = {12},
keywords = {development process, safety-critical embedded systems, software certification},
location = {Magdeburg, Germany},
series = {SAFECOMP'12}
}

@inproceedings{10.1109/ICSE43902.2021.00147,
author = {Mahmood, Wardah and Str\"{u}ber, Daniel and Berger, Thorsten and L\"{a}mmel, Ralf and Mukelabai, Mukelabai},
title = {Seamless Variability Management With the Virtual Platform},
year = {2021},
isbn = {9781450390859},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE43902.2021.00147},
doi = {10.1109/ICSE43902.2021.00147},
abstract = {Customization is a general trend in software engineering, demanding systems that support variable stakeholder requirements. Two opposing strategies are commonly used to create variants: software clone&amp;own and software configuration with an integrated platform. Organizations often start with the former, which is cheap, agile, and supports quick innovation, but does not scale. The latter scales by establishing an integrated platform that shares software assets between variants, but requires high up-front investments or risky migration processes. So, could we have a method that allows an easy transition or even combine the benefits of both strategies? We propose a method and tool that supports a truly incremental development of variant-rich systems, exploiting a spectrum between both opposing strategies. We design, formalize, and prototype the variability-management framework virtual platform. It bridges clone&amp;own and platform-oriented development. Relying on programming-language-independent conceptual structures representing software assets, it offers operators for engineering and evolving a system, comprising: traditional, asset-oriented operators and novel, feature-oriented operators for incrementally adopting concepts of an integrated platform. The operators record meta-data that is exploited by other operators to support the transition. Among others, they eliminate expensive feature-location effort or the need to trace clones. Our evaluation simulates the evolution of a real-world, clone-based system, measuring its costs and benefits.},
booktitle = {Proceedings of the 43rd International Conference on Software Engineering},
pages = {1658–1670},
numpages = {13},
keywords = {clone management, framework, re-engineering, software product lines, variability management},
location = {Madrid, Spain},
series = {ICSE '21}
}

@inproceedings{10.1109/SPLC.2011.55,
author = {Dao, Tung M. and Lee, Hyesun and Kang, Kyo C.},
title = {Problem Frames-Based Approach to Achieving Quality Attributes in Software Product Line Engineering},
year = {2011},
isbn = {9780769544878},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SPLC.2011.55},
doi = {10.1109/SPLC.2011.55},
abstract = {In software product line engineering (SPLE), commonality and variability across products of a product line domain are captured typically by a feature model. Reusable components are then developed from features. However, mapping features to components remains a complex task requiring a systematic way of exploring and analyzing various concerns arising from inadequate/insufficient domain assumptions. Essentially, those concerns prevent SPLE from achieving various quality attributes. This paper proposes a problem frames-based approach to addressing this problem. An elevator product line example is used to demonstrate the feasibility of the approach.},
booktitle = {Proceedings of the 2011 15th International Software Product Line Conference},
pages = {175–180},
numpages = {6},
keywords = {Feature Models, Goal Models, Problem Frames, Quality Attributes},
series = {SPLC '11}
}

@inproceedings{10.5555/1753235.1753277,
author = {Botterweck, Goetz and Groher, Iris and Polzer, Andreas and Schwanninger, Christa and Thiel, Steffen and V\"{o}lter, Markus},
title = {1st International Workshop on Model-driven Approaches in Software Product Line Engineering: (MAPLE 2009)},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {The MAPLE workshop focuses on the combination of Model-driven Software Engineering and Software Product Lines (SPL). It explores how model-driven approaches can help to achieve the goals of product lines in terms of reducing cost and time to market and increasing quality and productivity. In particular the workshop revolves around three themes: Efficient product derivation, the link between SPL research and industry practice, and SPL models with a meaning.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {297–298},
numpages = {2},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.1145/2647908.2655967,
author = {Assun\c{c}\~{a}o, Wesley Klewerton Guez and Vergilio, Silvia Regina},
title = {Feature location for software product line migration: a mapping study},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655967},
doi = {10.1145/2647908.2655967},
abstract = {Developing software from scratch is a high cost and error-prone activity. A possible solution to reduce time-to-market and produce high quality software is the reuse of existing software. But when the number of features in the system grows, the maintenance becomes more complex. In such cases, to adopt a systematic approach, such as Software Product Line Engineering, is necessary. Existing systems are generally migrated to a product line, allowing systematic reuse of artefacts and easing maintenance. To this end, some approaches have been proposed in the literature in the last years. A mapping of works on this subject and the identification of some research gaps can lead to an improvement of such approaches. This paper describes the main outcomes of a systematic mapping study on the evolution and migration of systems to SPL. The main works found are presented and classified according to adopted strategy, artefacts used, and evaluation conducted. Analysis of the evolution along the past years are also presented. At the end, we summarize some trends and open issues to serve as reference to new researches.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {52–59},
numpages = {8},
keywords = {evolution, reengineering, reuse, software product line},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2648511.2648545,
author = {Nasr, Sana Ben and Sannier, Nicolas and Acher, Mathieu and Baudry, Benoit},
title = {Moving toward product line engineering in a nuclear industry consortium},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648545},
doi = {10.1145/2648511.2648545},
abstract = {Nuclear power plants are some of the most sophisticated and complex energy systems ever designed. These systems perform safety critical functions and must conform to national safety institutions and international regulations. In many cases, regulatory documents provide very high level and ambiguous requirements that leave a large margin for interpretation. As the French nuclear industry is now seeking to spread its activities outside France, it is but necessary to master the ins and the outs of the variability between countries safety culture and regulations. This sets both an industrial and a scientific challenge to introduce and propose a product line engineering approach to an unaware industry whose safety culture is made of interpretations, specificities, and exceptions.This paper presents our current work within the French R&amp;D project CONNEXION, while introducing variability modeling to the French nuclear industry. In particular, we discuss the background, the quest for the best variability paradigm, the practical modeling of requirements variability as well as the mapping between variable requirements and variable architecture elements.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {294–303},
numpages = {10},
keywords = {product line engineering, regulations, requirements variability modeling, variability mining},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3233027.3233028,
author = {Rabiser, Rick and Schmid, Klaus and Becker, Martin and Botterweck, Goetz and Galster, Matthias and Groher, Iris and Weyns, Danny},
title = {A study and comparison of industrial vs. academic software product line research published at SPLC},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233028},
doi = {10.1145/3233027.3233028},
abstract = {The study presented in this paper aims to provide evidence for the hypothesis that software product line research has been changing and that the works in industry and academia have diverged over time. We analysed a subset (140) of all (593) papers published at the Software Product Line Conference (SPLC) until 2017. The subset was randomly selected to cover all years as well as types of papers. We assessed the research type of the papers (academic or industry), the kind of evaluation (application example, empirical, etc.), and the application domain. Also, we assessed which product line life-cycle phases, development practices, and topics the papers address. We present an analysis of the topics covered by academic vs. industry research and discuss the evolution of these topics and their relation over the years. We also discuss implications for researchers and practitioners. We conclude that even though several topics have received more attention than others, academic and industry research on software product lines are actually rather in line with each other.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {14–24},
numpages = {11},
keywords = {SPLC, academia, industry, software product lines},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@article{10.1016/j.csi.2016.03.003,
author = {Afzal, Uzma and Mahmood, Tariq and Shaikh, Zubair},
title = {Intelligent software product line configurations},
year = {2016},
issue_date = {November 2016},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {48},
number = {C},
issn = {0920-5489},
url = {https://doi.org/10.1016/j.csi.2016.03.003},
doi = {10.1016/j.csi.2016.03.003},
abstract = {A software product line (SPL) is a set of industrial software-intensive systems for configuring similar software products in which personalized feature sets are configured by different business teams. The integration of these feature sets can generate inconsistencies that are typically resolved through manual deliberation. This is a time-consuming process and leads to a potential loss of business resources. Artificial intelligence (AI) techniques can provide the best solution to address this issue autonomously through more efficient configurations, lesser inconsistencies and optimized resources. This paper presents the first literature review of both research and industrial AI applications to SPL configuration issues. Our results reveal only 19 relevant research works which employ traditional AI techniques on small feature sets with no real-life testing or application in industry. We categorize these works in a typology by identifying 8 perspectives of SPL. We also show that only 2 standard industrial SPL tools employ AI in a limited way to resolve inconsistencies. To inject more interest and application in this domain, we motivate and present future research directions. Particularly, using real-world SPL data, we demonstrate how predictive analytics (a state of the art AI technique) can separately model inconsistent and consistent patterns, and then predict inconsistencies in advance to help SPL designers during the configuration of a product. Literature review of AI applications to SPL configuration issuesDevelop a taxonomy based on eight different problem domainsThis review shows use of logic, constraint satisfaction, reasoning, ontology and optimization.Several important future research directions are proposed.We justify advanced analytics and swarm intelligence as better future applications.},
journal = {Comput. Stand. Interfaces},
month = nov,
pages = {30–48},
numpages = {19},
keywords = {Artificial intelligence, Automated feature selection, Inconsistencies, Industrial SPL tools, Literature review, Predictive analytics, Software product line}
}

@inproceedings{10.1145/2364412.2364445,
author = {Martinez, Jabier and Thurimella, Anil Kumar},
title = {Collaboration and source code driven bottom-up product line engineering},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364445},
doi = {10.1145/2364412.2364445},
abstract = {Companies that develop similar software systems often transition from single-system development to software product line development. In this transition, reusable assets are identified and incrementally created over a period of time. Bottom-up Software Product Line Engineering approaches aid stakeholders to identify variability from the legacy artifacts. One of these artifacts is the legacy source code. In this paper, we contribute the Collaboration and Source Code Driven Bottom-up approach, with two main enhancements. We apply clone detection and architecture reengineering techniques for identifying variability from the legacy artifacts. These techniques which have been traditionally used for maintaining software are now used for identifying variability and analyze code coupling and cohesion from the legacy code. Our second enhancement is improving stakeholder collaboration by guiding the domain experts in order to decide on variability. In particular, we apply Questions, Options and Criteria technique for capturing rationale and supporting collaboration.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {196–200},
numpages = {5},
keywords = {architecture reengineering, clone detection, knowledge management, rationale, software product line engineering, variability modeling},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2362536.2362571,
author = {Flores, Rick and Krueger, Charles and Clements, Paul},
title = {Mega-scale product line engineering at General Motors},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362571},
doi = {10.1145/2362536.2362571},
abstract = {General Motors faces probably the most complex Systems and Software Product Line Engineering (PLE) challenges ever, in terms of product complexity, richness of variation, size of organization, and an unforgiving requirement to support over a dozen simultaneous development streams all geared towards each new model year. To meet this challenge, GM turned to an advanced set of explicitly defined product line engineering solutions, which have been referred to as Second Generation PLE (2GPLE). This includes reliance on features as the lingua franca to express product differences in all phases of the lifecycle, deeply nested hierarchical product lines, industrial strength automation to provide modeling consistency throughout, and more. This paper explains how 2GPLE is being applied at General Motors, and the technical and organizational lessons learned so far.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {259–268},
numpages = {10},
keywords = {bill-of-features, feature modeling, feature profiles, hierarchical product lines, product baselines, product configurator, product line engineering, product portfolio, software product lines, variation points},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.5555/1885639.1885707,
author = {Krueger, Charles W.},
title = {Systems and software product line engineering with the SPL lifecycle framework},
year = {2010},
isbn = {3642155782},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {Mainstream forces are driving Software Product Line (SPL) approaches to take a more holistic perspective that is deeply integrated into the systems and software engineering lifecycle. These forces illustrate that SPL challenges will not be solved at any one stage in the product engineering lifecycle, nor will they be solved in independent and disparate silos in each of the different stages of the lifecycle. We explore our response to these forces - a SPL Lifecycle Framework. The motivation for this technology framework is to ease the integration of tools, assets and processes across the full systems and software development lifecycle. The goal is to provide product line engineers with a common set of SPL concepts and constructs for all of their tools and assets, at every stage of the lifecycle, and to assure that product line development traceability and processes flow cleanly from one stage of the lifecycle to another.},
booktitle = {Proceedings of the 14th International Conference on Software Product Lines: Going Beyond},
pages = {511–512},
numpages = {2},
location = {Jeju Island, South Korea},
series = {SPLC'10}
}

@inproceedings{10.1145/2648511.2648548,
author = {Sierszecki, Krzysztof and Steffens, Michaela and Hojrup, Helene H. and Savolainen, Juha and Beuche, Danilo},
title = {Extending variability management to the next level},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648548},
doi = {10.1145/2648511.2648548},
abstract = {Danfoss Power Electronics is a centre with both extensive power electronics know-how and many competencies within frequency converters and solar inverters. Development of embedded controllers built in Danfoss products raises similar challenges found in many other companies: creation of product series with an increasing number of variants, while at the same time decreasing time-to-market and keeping development costs low. Introduction of a Software Product Line approach into product development is a challenge that Danfoss Power Electronics decided to take in order to reduce software development efforts few years ago. The approach has been successful allowing for development of a number of highly engineered products. However, the software product line is in a constant evolution. It grows over time as new functionality is added in the form of extra software artefacts and further products are configured from it. As a result, the overall complexity and maintenance of assets hinders further efficiency of the approach. This paper presents extension of the variability management that goes beyond the scope of software assets reuse previously introduced into the organization. A prototype of the technique linking multi-level variability management is further elaborated using pure::variants.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {320–329},
numpages = {10},
keywords = {industrial experience, product specifications, variability management},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1007/978-3-642-10520-3_82,
author = {Cawley, Ciar\'{a}n and Botterweck, Goetz and Healy, Patrick and Abid, Saad Bin and Thiel, Steffen},
title = {A 3D Visualisation to Enhance Cognition in Software Product Line Engineering},
year = {2009},
isbn = {9783642105197},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-10520-3_82},
doi = {10.1007/978-3-642-10520-3_82},
abstract = {Software Product Line (SPL) Engineering is a development paradigm where core artefacts are developed and subsequently configured into different software products dependent on a particular customer's requirements. In industrial product lines, the scale of the configuration (variability management) can become extremely complex and very difficult to manage. Visualisation is widely used in software engineering and has proven useful to amplify cognition in data intensive applications. Adopting this approach within software product line engineering can help stakeholders in supporting essential work tasks by enhancing their understanding of large and complex product lines. In this paper we present our research into the application of visualisation techniques and cognitive theory to address SPL complexity and to enhance cognition in support of the SPL engineering processes. Specifically we present a 3D visualisation approach to enhance stakeholder cognition and thus support variability management and decision making during feature configuration.},
booktitle = {Proceedings of the 5th International Symposium on Advances in Visual Computing: Part II},
pages = {857–868},
numpages = {12},
location = {Las Vegas, Nevada},
series = {ISVC '09}
}

@inproceedings{10.1145/2031759.2031769,
author = {Pichler, Christian and Huemer, Christian},
title = {Towards variability management in business document types using product line engineering},
year = {2011},
isbn = {9781450306188},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2031759.2031769},
doi = {10.1145/2031759.2031769},
abstract = {Electronic Data Interchange (EDI) is based on the standardization of business document types. Usually, a standard business document type is defined in an all-embracing manner covering all elements needed in any business context, such as geopolitical context, industry context, and others. Before exchanging business documents in a particular business context, business partners have to agree on an implementation guide resulting in a subset of the standard document type. Different subsets of a standard document type may also be considered as variants of the standard document type. Since no agreed methodology for building variants of standard documents types exists, the domain of EDI may learn from Software Engineering. In fact, we are facing the need for managing variants which is typically addressed in Software Configuration Management. In this position paper, we propose utilizing concepts from Product Line Engineering (PLE) for managing variability in business document models. Therefore, we present the challenges encountered in managing variability in business documents. Furthermore, we provide a profound discussion why concepts from PLE are promising for managing business document variants.},
booktitle = {Proceedings of the 5th European Conference on Software Architecture: Companion Volume},
articleno = {8},
numpages = {5},
keywords = {business document models, product line engineering, software configuration management, variants},
location = {Essen, Germany},
series = {ECSA '11}
}

@inproceedings{10.1145/2791060.2791094,
author = {Vasilevskiy, Anatoly and Haugen, \O{}ystein and Chauvel, Franck and Johansen, Martin Fagereng and Shimbara, Daisuke},
title = {The BVR tool bundle to support product line engineering},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791094},
doi = {10.1145/2791060.2791094},
abstract = {The Base Variability Resolution (BVR) is a modern language to build software product lines (SPL). The language incorporates advanced concepts for feature modeling, reuse and realization of components in SPL. The BVR bundle implements and supports the language. The tool covers design, implementation and quality assurance to close the development cycle. The bundle enables feature modeling, resolution, realization and derivation of products, their testing and analysis. We integrate the SPLCA additions to provide the state of the art algorithms for analysis. The project is open-source and available for practitioners. The tool consists of Eclipse plug-ins which work seamlessly together as well as separate stand-alone components. We describe how the tool collaboration contributes to variability modeling. In addition, we present how the bundle applies well-known design patterns, principals to achieve synergy between components.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {380–384},
numpages = {5},
keywords = {BVR, analysis, feature, multiplicity, realization, tool},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1109/CEC48606.2020.9185675,
author = {Ibias, Alfredo and Llana, Luis},
title = {Feature Selection using Evolutionary Computation Techniques for Software Product Line Testing},
year = {2020},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/CEC48606.2020.9185675},
doi = {10.1109/CEC48606.2020.9185675},
abstract = {Software product lines are an excellent mechanism in the development of software. Testing software product lines is an intensive process where selecting the right features where to focus it can be a critical task. Selecting the best combination of features from a software product line is a complex problem addressed in the literature. In this paper, we address the problem of finding the combination of features with the highest probability of being requested from a software product line with probabilities. We use Evolutive Computation techniques to address this problem. Specifically, we use the Ant Colony Optimization algorithm to find the best combination of features. Our results report that our framework overcomes the limitations of the brute force algorithm.},
booktitle = {2020 IEEE Congress on Evolutionary Computation (CEC)},
pages = {1–8},
numpages = {8},
location = {Glasgow, United Kingdom}
}

@article{10.1007/s11219-011-9165-4,
author = {Lochau, Malte and Oster, Sebastian and Goltz, Ursula and Sch\"{u}rr, Andy},
title = {Model-based pairwise testing for feature interaction coverage in software product line engineering},
year = {2012},
issue_date = {September 2012},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {20},
number = {3–4},
issn = {0963-9314},
url = {https://doi.org/10.1007/s11219-011-9165-4},
doi = {10.1007/s11219-011-9165-4},
abstract = {Testing software product lines (SPLs) is very challenging due to a high degree of variability leading to an enormous number of possible products. The vast majority of today's testing approaches for SPLs validate products individually using different kinds of reuse techniques for testing. Because of their reusability and adaptability capabilities, model-based approaches are suitable to describe variability and are therefore frequently used for implementation and testing purposes of SPLs. Due to the enormous number of possible products, individual product testing becomes more and more infeasible. Pairwise testing offers one possibility to test a subset of all possible products. However, according to the best of our knowledge, there is no contribution discussing and rating this approach in the SPL context. In this contribution, we provide a mapping between feature models describing the common and variable parts of an SPL and a reusable test model in the form of statecharts. Thereby, we interrelate feature model-based coverage criteria and test model-based coverage criteria such as control and data flow coverage and are therefore able to discuss the potentials and limitations of pairwise testing. We pay particular attention to test requirements for feature interactions constituting a major challenge in SPL engineering. We give a concise definition of feature dependencies and feature interactions from a testing point of view, and we discuss adequacy criteria for SPL coverage under pairwise feature interaction testing and give a generalization to the T-wise case. The concept and implementation of our approach are evaluated by means of a case study from the automotive domain.},
journal = {Software Quality Journal},
month = sep,
pages = {567–604},
numpages = {38},
keywords = {Combinatorial testing, Feature interaction, Model-based engineering and testing, Software product lines, Test generation and coverage}
}

@article{10.1016/j.jss.2010.02.018,
author = {Dhungana, Deepak and Gr\"{u}nbacher, Paul and Rabiser, Rick and Neumayer, Thomas},
title = {Structuring the modeling space and supporting evolution in software product line engineering},
year = {2010},
issue_date = {July, 2010},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {83},
number = {7},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2010.02.018},
doi = {10.1016/j.jss.2010.02.018},
abstract = {The scale and complexity of product lines means that it is practically infeasible to develop a single model of the entire system, regardless of the languages or notations used. The dynamic nature of real-world systems means that product line models need to evolve continuously to meet new customer requirements and to reflect changes of product line artifacts. To address these challenges, product line engineers need to apply different strategies for structuring the modeling space to ease the creation and maintenance of models. This paper presents an approach that aims at reducing the maintenance effort by organizing product lines as a set of interrelated model fragments defining the variability of particular parts of the system. We provide support to semi-automatically merge fragments into complete product line models. We also provide support to automatically detect inconsistencies between product line artifacts and the models representing these artifacts after changes. Furthermore, our approach supports the co-evolution of models and their respective meta-models. We discuss strategies for structuring the modeling space and show the usefulness of our approach using real-world examples from our ongoing industry collaboration.},
journal = {J. Syst. Softw.},
month = jul,
pages = {1108–1122},
numpages = {15},
keywords = {Model evolution, Product line engineering, Variability modeling}
}

@inproceedings{10.1145/3425269.3425275,
author = {Becker, Alex Malmann and Lucr\'{e}dio, Daniel},
title = {The Impact of Microservices on the Evolution of a Software Product Line},
year = {2020},
isbn = {9781450387545},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3425269.3425275},
doi = {10.1145/3425269.3425275},
abstract = {Sharing a software product among multiple customers requires dealing with common and variable features. A Software Product Line approach may be used to manage these issues both during initial development and evolution. Many technologies can be used to implement a product line, and the micro services architectural style is a way to make the evolution process easier, since it can contain the impact of changes within smaller units, which are individually developed and deployed. Although this is an important subject, widely used in the industry, not many research papers investigate the impact of micro services in a real software product line, specially during evolution, when they are supposed to bring the most benefits. This research evaluated how the evolution of a software product line can benefit from the use of micro services. The study was based on a real software product line for the Enterprise Resource Planning domain, involving two versions of the product line: one without micro services, which was the original architecture and one with micro services, obtained after a migration from the original architecture to a micro services architecture. The results show that micro services brought benefits to the evolution of the software product line, but only in adaptive maintenance tasks. In evolutive tasks, where new services had to be created, the developers had to spend extra effort. The paper also describes some lessons learned during the migration. These may serve as guidance for researchers and practitioners interested in using micro services in a software product line.},
booktitle = {Proceedings of the 14th Brazilian Symposium on Software Components, Architectures, and Reuse},
pages = {51–60},
numpages = {10},
keywords = {experimental software engineering, microsservices, software product lines},
location = {Natal, Brazil},
series = {SBCARS '20}
}

@inproceedings{10.1145/2362536.2362572,
author = {Leitner, Andrea and Zehetner, Josef and Toeglhofer, Philipp and Watzenig, Daniel},
title = {Requirement identification for variability management in a co-simulation environment},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362572},
doi = {10.1145/2362536.2362572},
abstract = {Co-simulation is a powerful approach to verify a system design and to support concept decisions early in the automotive development process. Due to the heterogeneous nature of the co-simulation framework there is a lot of potential for variability requiring the systematic handling of it.We identified two main scenarios for variability management techniques in a co-simulation environment. Variability management capabilities can be included in the co-simulation tool itself or provide variability mechanisms to configure the co-simulation externally from a software product line. Depending on the context, one or even both scenarios can be applied.This work addresses different types of variability in an independent co-simulation framework (ICOS) and defines requirements for a realization concept.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {269–274},
numpages = {6},
keywords = {co-simulation, software product line engineering, variability management},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.5555/1885639.1885696,
author = {Kim, Jeong Ah},
title = {Case study of software product line engineering in insurance product},
year = {2010},
isbn = {3642155782},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
booktitle = {Proceedings of the 14th International Conference on Software Product Lines: Going Beyond},
pages = {495},
numpages = {1},
location = {Jeju Island, South Korea},
series = {SPLC'10}
}

@inproceedings{10.1145/3183440.3183441,
author = {Gerling, Lea},
title = {Automated migration support for software product line co-evolution},
year = {2018},
isbn = {9781450356633},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3183440.3183441},
doi = {10.1145/3183440.3183441},
abstract = {The idea of automated migration support arises from the problems observed in practice and the missing solutions for software product line (SPL) co-evolution support. In practice it is common to realize new functionality via unsystematic code cloning: A product is separated from its related SPL and then modified. When a separated product and the SPL evolve over time, this is called SPL co-evolution. During this process, developers have to manually migrate, for example, features or bugfixes between the SPL and the product. Currently, there exist only partially automated solutions for this use case. The proposed approach is the first, which aims at using semantic merging to migrate arbitrary semantic units, like features or bugfixes, between a SPL and separated products.},
booktitle = {Proceedings of the 40th International Conference on Software Engineering: Companion Proceeedings},
pages = {456–457},
numpages = {2},
keywords = {evolution support, feature migration, semantic merging, software product line co-evolution},
location = {Gothenburg, Sweden},
series = {ICSE '18}
}

@inproceedings{10.1145/3233027.3233050,
author = {Kuiter, Elias and Kr\"{u}ger, Jacob and Krieter, Sebastian and Leich, Thomas and Saake, Gunter},
title = {Getting rid of clone-and-own: moving to a software product line for temperature monitoring},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233050},
doi = {10.1145/3233027.3233050},
abstract = {Due to its fast and simple applicability, clone-and-own is widely used in industry to develop software variants. In cooperation with different companies for thermoelectric products, we implemented multiple variants of a heat monitoring tool based on clone-and-own. After encountering redundancy-related problems during development and maintenance, we decided to migrate towards a software product line. Within this paper, we describe this case study of migrating cloned variants to a software product line based on the extractive approach. The resulting software product line encapsulates variability on several levels, including the underlying hardware systems, interfaces, and use cases. Currently, we support monitoring hardware from three different companies that use the same core system and provide a configurable front-end. We share our experiences and encountered problems with cloning and migration towards a software product line---focusing on feature extraction and modeling in particular. Furthermore, we provide a lightweight, web-based tool for modeling, configuring, and implementing software product lines, which we use to migrate and manage features. Besides this experience report, we contribute most of the created artifacts as open-source and freely available for the research community.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {179–189},
numpages = {11},
keywords = {case study, extraction, feature modeling, software product line},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@article{10.1007/s10664-019-09787-6,
author = {Berger, Thorsten and Stegh\"{o}fer, Jan-Philipp and Ziadi, Tewfik and Robin, Jacques and Martinez, Jabier},
title = {The state of adoption and the challenges of systematic variability management in industry},
year = {2020},
issue_date = {May 2020},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {25},
number = {3},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-019-09787-6},
doi = {10.1007/s10664-019-09787-6},
abstract = {Handling large-scale software variability is still a challenge for many organizations. After decades of research on variability management concepts, many industrial organizations have introduced techniques known from research, but still lament that pure textbook approaches are not applicable or efficient. For instance, software product line engineering—an approach to systematically develop portfolios of products—is difficult to adopt given the high upfront investments; and even when adopted, organizations are challenged by evolving their complex product lines. Consequently, the research community now mainly focuses on re-engineering and evolution techniques for product lines; yet, understanding the current state of adoption and the industrial challenges for organizations is necessary to conceive effective techniques. In this multiple-case study, we analyze the current adoption of variability management techniques in twelve medium- to large-scale industrial cases in domains such as automotive, aerospace or railway systems. We identify the current state of variability management, emphasizing the techniques and concepts they adopted. We elicit the needs and challenges expressed for these cases, triangulated with results from a literature review. We believe our results help to understand the current state of adoption and shed light on gaps to address in industrial practice.},
journal = {Empirical Softw. Engg.},
month = may,
pages = {1755–1797},
numpages = {43},
keywords = {Variability management, Software product lines, Multiple-case study, Challenges}
}

@article{10.1007/s10664-012-9234-8,
author = {Reinhartz-Berger, Iris and Sturm, Arnon},
title = {Comprehensibility of UML-based software product line specifications},
year = {2014},
issue_date = {June      2014},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {19},
number = {3},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-012-9234-8},
doi = {10.1007/s10664-012-9234-8},
abstract = {Software Product Line Engineering (SPLE) deals with developing artifacts that capture the common and variable aspects of software product families. Domain models are one kind of such artifacts. Being developed in early stages, domain models need to specify commonality and variability and guide the reuse of the artifacts in particular software products. Although different modeling methods have been proposed to manage and support these activities, the assessment of these methods is still in an inceptive stage. In this work, we examined the comprehensibility of domain models specified in ADOM, a UML-based SPLE method. In particular, we conducted a controlled experiment in which 116 undergraduate students were required to answer comprehension questions regarding a domain model that was equipped with explicit reuse guidance and/or variability specification. We found that explicit specification of reuse guidance within the domain model helped understand the model, whereas explicit specification of variability increased comprehensibility only to a limited extent. Explicit specification of both reuse guidance and variability often provided intermediate results, namely, results that were better than specification of variability without reuse guidance, but worse than specification of reuse guidance without variability. All these results were perceived in different UML diagram types, namely, use case, class, and sequence diagrams and for different commonality-, variability-, and reuse-related aspects.},
journal = {Empirical Softw. Engg.},
month = jun,
pages = {678–713},
numpages = {36},
keywords = {Domain models, Empirical evaluation, Software product line engineering, UML, Variability management}
}

@inproceedings{10.5555/2820656.2820660,
author = {Calefato, Fabio and De Nicol\`{o}, Roberto and Lanubile, Filippo and Lippolis, Fabrizio},
title = {Product line engineering for NGO projects},
year = {2015},
publisher = {IEEE Press},
abstract = {Non-governmental organizations (NGOs) are often plagued by very limited human and financial resources. In this paper, we show how product line engineering (PLE) offers an opportunity to increase the sustainability of software projects that rely on the help of NGO volunteers. Building on the case of an Italian NGO that supports assistive technologies, we propose a PLE model that only depends on the branching capability of a free version control system.},
booktitle = {Proceedings of the Fifth International Workshop on Product LinE Approaches in Software Engineering},
pages = {3–6},
numpages = {4},
keywords = {NGO, assistive technologies, branching, product line engineering, sustainable software development},
location = {Florence, Italy},
series = {PLEASE '15}
}

@inproceedings{10.1109/HICSS.2007.95,
author = {Gomaa, Hassan and Shin, Michael E.},
title = {Automated Software Product Line Engineering and Product Derivation},
year = {2007},
isbn = {0769527558},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/HICSS.2007.95},
doi = {10.1109/HICSS.2007.95},
abstract = {This paper describes a prototype automated software product line engineering environment, in which a multiple view model of the product line architecture and components are developed and stored in a product line repository. Automated software product derivation consists of tailoring the product line architecture given the product features and selecting the components to be included in the product. The automated environment is built on top of Rational Rose RT. Automated support is provided for developing multiple product line views, using the feature model as the unifying view, an underlying product line meta-model that provides a schema for a product line repository, support for consistency checking among the multiple views, and support for feature-based product line derivation.},
booktitle = {Proceedings of the 40th Annual Hawaii International Conference on System Sciences},
pages = {285a},
series = {HICSS '07}
}

@inproceedings{10.1145/3289402.3289504,
author = {Sebbaq, Hanane and Retbi, Asmaa and Idrissi, Mohammed Khalidi and Bennani, Samir},
title = {Software Product Line to overcome the variability issue in E-Learning: Systematic literature review},
year = {2018},
isbn = {9781450364621},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3289402.3289504},
doi = {10.1145/3289402.3289504},
abstract = {The disparity of educational technologies, pedagogies and learning styles implies a problem of variability when modeling E-learning systems. Furthermore, the current learning context, which has become very open and heterogeneous, raises the problem of automating the modeling, development and maintenance of personalized E-learning systems based on various pedagogies. For its part, the "Software Product Line" is a paradigm that aims to produce product families based on the principles of reuse, configuration and derivation. The main purpose of this literature review is to explore the different potential applications of "SPL" in the E-learning domain to figure out the problem of variability. We will adopt a protocol for a systematic review of literature, after which we will draw up an analysis report.},
booktitle = {Proceedings of the 12th International Conference on Intelligent Systems: Theories and Applications},
articleno = {4},
numpages = {8},
keywords = {E-learning, Software Product line, Variability, heterogeneity, scale, systematic literature review, variety},
location = {Rabat, Morocco},
series = {SITA'18}
}

@inproceedings{10.1145/2648511.2648532,
author = {Al-Hajjaji, Mustafa and Th\"{u}m, Thomas and Meinicke, Jens and Lochau, Malte and Saake, Gunter},
title = {Similarity-based prioritization in software product-line testing},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648532},
doi = {10.1145/2648511.2648532},
abstract = {Exhaustively testing every product of a software product line (SPL) is a difficult task due to the combinatorial explosion of the number of products. Combinatorial interaction testing is a technique to reduce the number of products under test. However, it is typically up-to the tester in which order these products are tested. We propose a similarity-based prioritization to be applied on these products before they are generated. The proposed approach does not guarantee to find more errors than sampling approaches, but it aims at increasing interaction coverage of an SPL under test as fast as possible over time. This is especially beneficial since usually the time budget for testing is limited. We implemented similarity-based prioritization in FeatureIDE and evaluated it by comparing its outcome to the default outcome of three sampling algorithms as well as to random orders. The experiment results indicate that the order with similarity-based prioritization is better than random orders and often better than the default order of existing sampling algorithms.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {197–206},
numpages = {10},
keywords = {combinatorial interaction testing, prioritization, product-line testing, software product lines},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2491627.2491647,
author = {Murashkin, Alexandr and Antkiewicz, Micha\l{} and Rayside, Derek and Czarnecki, Krzysztof},
title = {Visualization and exploration of optimal variants in product line engineering},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491647},
doi = {10.1145/2491627.2491647},
abstract = {The decision-making process in Product Line Engineering (PLE) is often concerned with variant qualities such as cost, battery life, or security. Pareto-optimal variants, with respect to a set of objectives such as minimizing a variant's cost while maximizing battery life and security, are variants in which no single quality can be improved without sacrificing other qualities. We propose a novel method and a tool for visualization and exploration of a multi-dimensional space of optimal variants (i.e., a Pareto front). The visualization method is an integrated, interactive, and synchronized set of complementary views onto a Pareto front specifically designed to support PLE scenarios, including: understanding differences among variants and their positioning with respect to quality dimensions; solving trade-offs; selecting the most desirable variants; and understanding the impact of changes during product line evolution on a variant's qualities. We present an initial experimental evaluation showing that the visualization method is a good basis for supporting these PLE scenarios.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {111–115},
numpages = {5},
keywords = {ClaferMoo, ClaferMoo visualizer, clafer, exploration, feature modeling, optimal variant, pareto front, product line engineering, visualization},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2647908.2655975,
author = {Wagner, Michael and Dudeck, Grit and Hein, Christian and Tcholtchev, Nikolay and Gebhardt, Christian and Korff, Andreas},
title = {VARIES framework to support tool integration in product line engineering},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655975},
doi = {10.1145/2647908.2655975},
abstract = {Even though product line technologies and methods are well established in today's development environments, various challenges still remain. Different ways of handling variability in system development tools have arisen posing an integration challenge to today's tool chains. This issue is further amplified by the variety of integration approaches. The VARIES framework addresses these challenges through technology adaptation, i.e. the utilization of model transformations and traceability support.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {117–120},
numpages = {4},
keywords = {CVL, ModelBus, OSLC, SPL, tool chain, traceability, transformation, variability management},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2364412.2364451,
author = {Machado, Ivan do Carmo},
title = {Towards a reasoning framework for software product line testing},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364451},
doi = {10.1145/2364412.2364451},
abstract = {Testing can still be considered a bottleneck for software product line engineering. The variability implemented in the source artifacts increases its complexity. Due to its key role for product line quality, testing requires cost-effective practices, such as techniques for test selection should be produced to enable companies to experience the substantial production cost savings. In this paper, we present the outline of a Ph.D. research aimed at developing a reasoning framework to improve SPL testing practices. Based on multiple sources of evidence, the framework intends to provide testers with an automated reasoner for determining which techniques may be suitable for a given variability implementation mechanism, and how these should be employed in order to makes testing in a SPL a more effective and efficient practice. We plan to perform empirical evaluations in order to assess the proposal effectiveness.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {229–232},
numpages = {4},
keywords = {fault models, software product lines, software testing, variability management},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@article{10.1007/s11704-016-6048-7,
author = {He, Fei and Gao, Yuan and Yin, Liangze},
title = {Efficient software product-line model checking using induction and a SAT solver},
year = {2018},
issue_date = {April     2018},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {12},
number = {2},
issn = {2095-2228},
url = {https://doi.org/10.1007/s11704-016-6048-7},
doi = {10.1007/s11704-016-6048-7},
abstract = {Software product line (SPL) engineering is increasingly being adopted in safety-critical systems. It is highly desirable to rigorously show that these systems are designed correctly. However, formal analysis for SPLs is more difficult than for single systems because an SPL may contain a large number of individual systems. In this paper, we propose an efficient model-checking technique for SPLs using induction and a SAT (Boolean satisfiability problem) solver. We show how an induction-based verification method can be adapted to the SPLs, with the help of a SAT solver. To combat the state space explosion problem, a novel technique that exploits the distinguishing characteristics of SPLs, called feature cube enlargement, is proposed to reduce the verification efforts. The incremental SAT mechanism is applied to further improve the efficiency. The correctness of our technique is proved. Experimental results show dramatic improvement of our technique over the existing binary decision diagram (BDD)-based techniques.},
journal = {Front. Comput. Sci.},
month = apr,
pages = {264–279},
numpages = {16},
keywords = {model checking, satisfiability, software product line}
}

@inproceedings{10.1145/2384716.2384733,
author = {Asaithambi, Suriya Priya R. and Jarzabek, Stan},
title = {Generic adaptable test cases for software product line testing: software product line},
year = {2012},
isbn = {9781450315630},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2384716.2384733},
doi = {10.1145/2384716.2384733},
abstract = {This research study is about constructing "generic adaptable test cases" to counter test case libraries explosion problem. Our work focuses on effort reduction via systematic reuse of generic test assets by taking advantage of common aspects and predicted variability in test cases. We envision that the proposed approach to organizing test case libraries will be particularly useful in the context of Software Product Line Testing (SPLT). By exploring strategies for generic test cases, I hope to address problems of domain-level testing. Our work will investigate existing testing (SPLT) practices in variability management context by conducting empirical studies. We plan to synthesize principles for "generic test case" design, identify gaps between required and exiting techniques, and finally propose new approach for generic adaptive test case construction.},
booktitle = {Proceedings of the 3rd Annual Conference on Systems, Programming, and Applications: Software for Humanity},
pages = {33–36},
numpages = {4},
keywords = {software product line testing},
location = {Tucson, Arizona, USA},
series = {SPLASH '12}
}

@article{10.1145/1183236.1183266,
author = {Lee, Jaejoon and Muthig, Dirk},
title = {Feature-oriented variability management in product line engineering},
year = {2006},
issue_date = {December 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {49},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/1183236.1183266},
doi = {10.1145/1183236.1183266},
abstract = {Implementing feature-oriented variability modeling throughout the life cycle.},
journal = {Commun. ACM},
month = dec,
pages = {55–59},
numpages = {5}
}

@inproceedings{10.1145/2491627.2491649,
author = {Lanman, Jeremy and Darbin, Rowland and Rivera, Jorge and Clements, Paul and Krueger, Charles},
title = {The challenges of applying service orientation to the U.S. Army's live training software product line},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491649},
doi = {10.1145/2491627.2491649},
abstract = {Live Training Transformation (LT2) is the product line strategy put in place by the United States Army Program Executive Office for Simulation, Training and Instrumentation (PEO STRI). The purpose of the LT2 product line is to provide a common set of core assets including architectures, software components, standards and processes that form the basis of all Army Live Training systems. As products consuming LT2 core assets evolve to meet the latest requirements of the military live training community, changes to the core product line architecture must also be made. Based on thorough analysis of the LT2 core capabilities and user trends toward web-enabled and mobile computing technologies, a Service Oriented Architecture (SOA) strategy was identified and adopted as the objective architecture for the evolving LT2 product line. Future success of the LT2 product line now depends on the alignment of product line engineering concepts with the business and technical benefits of SOA, and to ensure that systematic reuse continues to provide substantial return-on-investment for the Army. This paper addresses the challenges of adopting SOA into an existing software product line, the unique circumstances of the LT2 SOA environment, and present a set of analysis and design considerations for the product line engineering community.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {244–253},
numpages = {10},
keywords = {bill-of-features, feature modeling, feature profiles, hierarchical product lines, product audit, product baselines, product configurator, product derivation, product line engineering, product portfolio, second generation product line engineering, software product lines, variation points},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1007/978-3-030-63882-5_12,
author = {Alves, Thayonara and Teixeira, Leopoldo and Alves, Vander and Castro, Thiago},
title = {Porting the Software Product Line Refinement Theory to the Coq Proof&nbsp;Assistant},
year = {2020},
isbn = {978-3-030-63881-8},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-030-63882-5_12},
doi = {10.1007/978-3-030-63882-5_12},
abstract = {Software product lines are an engineering approach to systematically build similar software products from a common asset base. When evolving such systems, it is important to have assurance that we are not introducing errors or changing the behavior of existing products. The product line refinement theory establishes the necessary conditions for such assurance. This theory has been specified and proved using the PVS proof assistant. However, the Coq proof assistant is increasingly popular among researchers and practitioners, and, given that some programming languages are already formalized into such tool, the refinement theory might benefit from the potential integration. Therefore, in this work we present a case study on porting the PVS specification of the refinement theory to Coq. We compare the proof assistants based on the noted differences between the specifications and proofs of this theory, providing some reflections on the tactics and strategies used to compose the proofs. According to our study, PVS provided more succinct definitions than Coq, in several cases, as well as a greater number of successful automatic commands that resulted in shorter proofs. Despite that, Coq also brought facilities in definitions such as enumerated and recursive types, and features that support developers in their proofs.},
booktitle = {Formal Methods: Foundations and Applications: 23rd Brazilian Symposium, SBMF 2020, Ouro Preto, Brazil, November 25–27, 2020, Proceedings},
pages = {192–209},
numpages = {18},
keywords = {Software product lines, Theorem provers, Coq, PVS},
location = {Ouro Preto, Brazil}
}

@inproceedings{10.1145/2499777.2499779,
author = {Antkiewicz, Micha\l{} and B\k{a}k, Kacper and Murashkin, Alexandr and Olaechea, Rafael and Liang, Jia Hui (Jimmy) and Czarnecki, Krzysztof},
title = {Clafer tools for product line engineering},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2499779},
doi = {10.1145/2499777.2499779},
abstract = {Clafer is a lightweight yet expressive language for structural modeling: feature modeling and configuration, class and object modeling, and metamodeling. Clafer Tools is an integrated set of tools based on Clafer. In this paper, we describe some product-line variability modeling scenarios of Clafer Tools from the viewpoints of product-line owner, product-line engineer, and product engineer.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {130–135},
numpages = {6},
keywords = {Clafer, ClaferIG, ClaferMOO, ClaferMOO visualizer, ClaferWiki, clafer configurator},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/2647908.2655970,
author = {ter Beek, Maurice H. and de Vink, Erik P.},
title = {Software product line analysis with mCRL2},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655970},
doi = {10.1145/2647908.2655970},
abstract = {The mCRL2 language and supporting software provide a state-of-the-art tool suite for the verification of distributed systems. In this paper, we present the general principles, extrapolated from [7,8], which make us believe that mCRL2 can also be used for behavioral variability analysis of product families. The mCRL2 data language allows to smoothly deal with feature sets and attributes, its process language is sufficiently rich to model feature selection, as well as product behavior based on an FTS-like semantics. Because of the feature-orientation, our modeling strategy allows a natural refactoring of the semantic model of a product family into a parallel composition of components that reflects coherent sets of features. This opens the way for dedicated abstraction and reduction techniques that strengthen the prospect of a scalable verification approach to software product lines. In this paper, we sketch how to model product families in mCRL2 and how to apply a modular verification method, preparing the ground to further assess the scalability of our approach, in particular regarding model checking.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {78–85},
numpages = {8},
keywords = {behavioral analysis, model checking, modular verification, product families, variability},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/1083125.1083139,
author = {Saleh, Mazen and Gomaa, Hassan},
title = {Separation of concerns in software product line engineering},
year = {2005},
isbn = {1595931198},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1083125.1083139},
doi = {10.1145/1083125.1083139},
abstract = {A software product line consists of a family of software systems that have some common functionality and some variable functionality. A better understanding of the product line can be obtained by separating the concerns of the common software, in terms of common features, components, and source code, from the variable software. This paper describes an approach and prototype tool support for separation of concerns and automatic customization of target applications, which are members of the software product line.},
booktitle = {Proceedings of the 2005 Workshop on Modeling and Analysis of Concerns in Software},
pages = {1–5},
numpages = {5},
location = {St. Louis, Missouri},
series = {MACS '05}
}

@article{10.1016/j.cl.2016.07.007,
author = {Karimpour, Reza and Ruhe, Guenther},
title = {Evolutionary robust optimization for software product line scoping},
year = {2017},
issue_date = {January 2017},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {47},
number = {P2},
issn = {1477-8424},
url = {https://doi.org/10.1016/j.cl.2016.07.007},
doi = {10.1016/j.cl.2016.07.007},
abstract = {Background: Software product line (SPL) scoping is an important phase when planning for product line adoption. An SPL scope specifies: (1) the extent of the domain supported by the product line, (2) portfolio of products in the product line and (3) list of assets to be developed for reuse across the family of products.Issue: SPL scope planning is usually based on estimates about the state of the market and the engineering capabilities of the development team. One challenge with these estimates is that there are inaccuracies due to uncertainty in the environment or accuracy of measurement. This may result in issues ranging from suboptimal plans to infeasible plans.Objective: To address the above, we propose to include uncertainty as part of the SPL scoping model. Plans developed in consideration of uncertainty would be more robust against possible fluctuations in estimates.Approach: In this paper, a method to incorporate uncertainty in scoping optimization and its application to generate robust solutions is proposed. We capture uncertainty as part of the formulation and model scoping optimization as a multi-objective problem with profit and stability as fitness functions. Profit stability and feasibility stability are considered to represent stability concerns.Results: Results show that, compared to other scope optimization approaches, both performance stability and feasibility stability are improved while maintaining near optimal performance for profit objective. Also, generated results consist of solutions with trade-offs between profit and stability, providing the decision maker with enhanced decision support.Conclusion: Multi-objective optimization with stability consideration for SPL scoping provides project managers with a robust and flexible way to address uncertainty in the process of SPL scoping. HighlightsA robust multi-objective optimization approach for SPL scoping is proposed.Two types of stability are considered: performance stability and feasibility stability.Approach was able to find plans with higher stability.},
journal = {Comput. Lang. Syst. Struct.},
month = jan,
pages = {189–210},
numpages = {22},
keywords = {Evolutionary optimization, Robust optimization, Search-based software engineering, Software product line scoping}
}

@inproceedings{10.1145/2648511.2648537,
author = {Colanzi, Thelma Elita and Vergilio, Silvia Regina and Gimenes, Itana M. S. and Oizumi, Willian Nalepa},
title = {A search-based approach for software product line design},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648537},
doi = {10.1145/2648511.2648537},
abstract = {The Product Line Architecture (PLA) can be improved by taking into account key factors such as feature modularization, and by continuously evaluating its design according to metrics. Search-Based Software Engineering (SBSE) principles can be used to support an informed-design of PLAs. However, existing search-based design works address only traditional software design not considering intrinsic Software Product Line aspects. This paper presents MOA4PLA, a search-based approach to support the PLA design. It gives a multi-objective treatment to the design problem based on specific PLA metrics. A metamodel to represent the PLA and a novel search operator to improve feature modularization are proposed. Results point out that the application of MOA4PLA leads to PLA designs with well modularized features, contributing to improve features reusability and extensibility. It raises a set of solutions with different design trade-offs that can be used to improve the PLA design.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {237–241},
numpages = {5},
keywords = {multi-objective algorithms, searchbased PLA design, software product lines},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2647908.2655968,
author = {Lackner, Hartmut and Schmidt, Martin},
title = {Towards the assessment of software product line tests: a mutation system for variable systems},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655968},
doi = {10.1145/2647908.2655968},
abstract = {Software product line engineering is an emerging methodology for the development of variant-rich software systems. As software product lines are viable for this purpose, testing them is complicated in contrast to non-variable systems, as there is an increasingly amount of possible products due to the number of features. There exist many methods proposed for testing software product lines, but seldom the quality of the resulting tests was assessed. For assessing test quality mutation analysis is a well-known technique and is frequently applied to non-variable software systems. However, mutation analysis cannot be applied straight-forward onto software product lines.We present a mutation system for assessing the quality of software product line tests by means of fault detection capability. Our mutation system comprises model-based mutation operators, test case adaption, automated model and test execution, and automated mutation analysis. So far, we developed several mutation operators for feature models, UML state machines, and mapping models. We evaluated the mutation operators against tests that were generated from the specifications and applied them for three case studies. From the results we draw conclusions about the effectiveness of the individual mutation operators.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {62–69},
numpages = {8},
keywords = {mutation analysis, software product lines, software testing, test quality},
location = {Florence, Italy},
series = {SPLC '14}
}

@article{10.1016/j.chb.2017.04.026,
author = {Gharsellaoui, Hamza and Maazoun, Jihen and Bouassida, Nadia and Ahmed, Samir Ben and Ben-Abdallah, Hanene},
title = {A Software Product Line Design Based Approach for Real-time Scheduling of Reconfigurable Embedded Systems},
year = {2021},
issue_date = {Feb 2021},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {115},
number = {C},
issn = {0747-5632},
url = {https://doi.org/10.1016/j.chb.2017.04.026},
doi = {10.1016/j.chb.2017.04.026},
journal = {Comput. Hum. Behav.},
month = feb,
numpages = {11},
keywords = {Real-time scheduling, Reconfigurable embedded systems, SPL design, UML marte}
}

@inproceedings{10.1145/2666581.2666589,
author = {Shi, Yufeng and Wei, Ou and Zhou, Yu},
title = {Model checking partial software product line designs},
year = {2014},
isbn = {9781450332262},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2666581.2666589},
doi = {10.1145/2666581.2666589},
abstract = {Software product line (SPL) maximizes commonality between software products to reduce cost and improve productivity, where each product is represented by a selection of features that corresponds to particular customer requirements. SPL has been widely applied in critical systems such as communications, automobile, and aerospace, and ensuring correctness of the system is thus of great importance. In this paper, we consider model checking partial software product line designs, i.e., the incomplete designs in the early stage of software development, where the design decisions for a feature may be unknown. This enables detecting design errors earlier, reducing the cost of later development of final products. To this end, we first propose bilattice-based feature transitions systems (BFTSs) for modeling partial software product line designs, which support description of uncertainty and preserve features as a first class notion. We then express system behavioral properties using ACTL formulas and define its semantics over BFTSs. Finally, to leverage the power of existing model checking engine for verification, we provide the procedures that translate BFTSs and ACTL formulas to the inputs of the symbolic model checker $Chi$Chek. We implement our approach and illustrate its effectiveness on a benchmark from literature.},
booktitle = {Proceedings of the International Workshop on Innovative Software Development Methodologies and Practices},
pages = {21–29},
numpages = {9},
keywords = {Model Checking, Partial Model, Software Product Line},
location = {Hong Kong, China},
series = {InnoSWDev 2014}
}

@article{10.1016/j.knosys.2019.104883,
author = {Ayala, Inmaculada and Amor, Mercedes and Horcas, Jose-Miguel and Fuentes, Lidia},
title = {A goal-driven software product line approach for evolving multi-agent systems in the Internet of Things},
year = {2019},
issue_date = {Nov 2019},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {184},
number = {C},
issn = {0950-7051},
url = {https://doi.org/10.1016/j.knosys.2019.104883},
doi = {10.1016/j.knosys.2019.104883},
journal = {Know.-Based Syst.},
month = nov,
numpages = {18},
keywords = {Software product line, Evolution, Internet of Things, MAS-PL, Goal models, GORE}
}

@article{10.1007/s10586-017-0897-1,
author = {Leite, Alessandro Ferreira and Alves, Vander and Rodrigues, Gena\'{\i}na Nunes and Tadonki, Claude and Eisenbeis, Christine and Melo, Alba Cristina},
title = {Dohko: an autonomic system for provision, configuration, and management of inter-cloud environments based on a software product line engineering method},
year = {2017},
issue_date = {September 2017},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {20},
number = {3},
issn = {1386-7857},
url = {https://doi.org/10.1007/s10586-017-0897-1},
doi = {10.1007/s10586-017-0897-1},
abstract = {Configuring and executing applications across multiple clouds is a challenging task due to the various terminologies used by the cloud providers. Therefore, we advocate the use of autonomic systems to do this work automatically. Thus, in this paper, we propose and evaluate Dohko, an autonomic and goal-oriented system for inter-cloud environments. Dohko implements self-configuration, self-healing, and context-awareness properties. Likewise, it relies on a hierarchical P2P overlay (a) to manage the virtual machines running on the clouds and (b) to deal with inter-cloud communication. Furthermore, it depends on a software product line engineering method to enable applications' deployment and reconfiguration, without requiring pre-configured virtual machine images. Experimental results show that Dohko can free the users from the duty of executing non-native cloud application on single and over many clouds. In particular, it tackles the lack of middleware prototypes that can support different scenarios when using simultaneous services from multiple clouds.},
journal = {Cluster Computing},
month = sep,
pages = {1951–1976},
numpages = {26},
keywords = {Autonomic system, Feature modeling, Inter-cloud, Software product line engineering}
}

@inproceedings{10.1145/2614628.2614630,
author = {Eichberg, Michael and Hermann, Ben},
title = {A software product line for static analyses: the OPAL framework},
year = {2014},
isbn = {9781450329194},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2614628.2614630},
doi = {10.1145/2614628.2614630},
abstract = {Implementations of static analyses are usually tailored toward a single goal to be efficient, hampering reusability and adaptability of the components of an analysis. To solve these issues, we propose to implement static analyses as highly-configurable software product lines (SPLs). Furthermore, we also discuss an implementation of an SPL for static analyses -- called OPAL -- that uses advanced language features offered by the Scala programming language to get an easily adaptable and (type-)safe software product line.OPAL is a general purpose library for static analysis of Java Bytecode that is already successfully used. We present OPAL and show how a design based on software produce line engineering benefits the implementation of static analyses with the framework.},
booktitle = {Proceedings of the 3rd ACM SIGPLAN International Workshop on the State of the Art in Java Program Analysis},
pages = {1–6},
numpages = {6},
keywords = {abstract interpretation, design, program analysis, software product line engineering, static analysis},
location = {Edinburgh, United Kingdom},
series = {SOAP '14}
}

@article{10.1016/j.jss.2016.07.039,
author = {Shatnawi, Anas and Seriai, Abdelhak-Djamel and Sahraoui, Houari},
title = {Recovering software product line architecture of a family of object-oriented product variants},
year = {2017},
issue_date = {September 2017},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {131},
number = {C},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2016.07.039},
doi = {10.1016/j.jss.2016.07.039},
abstract = {Automatic architecture recovery from a set of software product variants.Recovering variability concerning component, configuration, and dependencies.Experimented on two families of product variants. Software Product Line Engineering (SPLE) aims at applying a pre-planned systematic reuse of large-grained software artifacts to increase the software productivity and reduce the development cost. The idea of SPLE is to analyze the business domain of a family of products to identify the common and the variable parts between the products. However, it is common for companies to develop, in an ad-hoc manner (e.g. clone and own), a set of products that share common services and differ in terms of others. Thus, many recent research contributions are proposed to re-engineer existing product variants to a software product line. These contributions are mostly focused on managing the variability at the requirement level. Very few contributions address the variability at the architectural level despite its major importance. Starting from this observation, we propose an approach to reverse engineer the architecture of a set of product variants. Our goal is to identify the variability and dependencies among architectural-element variants. Our work relies on formal concept analysis to analyze the variability. To validate the proposed approach, we evaluated on two families of open-source product variants; Mobile Media and Health Watcher. The results of precision and recall metrics of the recovered architectural variability and dependencies are 81%, 91%, 67% and 100%, respectively.},
journal = {J. Syst. Softw.},
month = sep,
pages = {325–346},
numpages = {22},
keywords = {Formal concept analysis, Object-oriented product variants, Software architecture recovery, Software component, Software product line, Software reuse}
}

@article{10.1007/s10270-017-0614-9,
author = {Guizzo, Giovani and Colanzi, Thelma Elita and Vergilio, Silvia Regina},
title = {Applying design patterns in the search-based optimization of software product line architectures},
year = {2019},
issue_date = {Apr 2019},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {18},
number = {2},
issn = {1619-1366},
url = {https://doi.org/10.1007/s10270-017-0614-9},
doi = {10.1007/s10270-017-0614-9},
abstract = {The design of the product line architecture (PLA) is a difficult activity that can benefit from the application of design patterns and from the use of a search-based optimization approach, which is generally guided by different objectives related, for instance, to cohesion, coupling and PLA extensibility. The use of design patterns for PLAs is a recent research field, not completely explored yet. Some works apply the patterns manually and for a specific domain. Approaches to search-based PLA design do not consider the usage of these patterns. To allow such use, this paper introduces a mutation operator named “Pattern-Driven Mutation Operator” that includes methods to automatically identify suitable scopes and apply the patterns Strategy, Bridge and Mediator with the search-based approach multi-objective optimization approach for PLA. A metamodel is proposed to represent and identify suitable scopes to receive each one of the patterns, avoiding the introduction of architectural anomalies. Empirical results are also presented, showing evidences that the use of the proposed operator produces a greater diversity of solutions and improves the quality of the PLAs obtained in the search-based optimization process, regarding the values of software metrics.},
journal = {Softw. Syst. Model.},
month = apr,
pages = {1487–1512},
numpages = {26},
keywords = {Design pattern, Search-based software engineering, Software product line architecture}
}

@article{10.1007/s10270-015-0479-8,
author = {Devroey, Xavier and Perrouin, Gilles and Cordy, Maxime and Samih, Hamza and Legay, Axel and Schobbens, Pierre-Yves and Heymans, Patrick},
title = {Statistical prioritization for software product line testing: an experience report},
year = {2017},
issue_date = {February  2017},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {16},
number = {1},
issn = {1619-1366},
url = {https://doi.org/10.1007/s10270-015-0479-8},
doi = {10.1007/s10270-015-0479-8},
abstract = {Software product lines (SPLs) are families of software systems sharing common assets and exhibiting variabilities specific to each product member of the family. Commonalities and variabilities are often represented as features organized in a feature model. Due to combinatorial explosion of the number of products induced by possible features combinations, exhaustive testing of SPLs is intractable. Therefore, sampling and prioritization techniques have been proposed to generate sorted lists of products based on coverage criteria or weights assigned to features. Solely based on the feature model, these techniques do not take into account behavioural usage of such products as a source of prioritization. In this paper, we assess the feasibility of integrating usage models into the testing process to derive statistical testing approaches for SPLs. Usage models are given as Markov chains, enabling prioritization of probable/rare behaviours. We used featured transition systems, compactly modelling variability and behaviour for SPLs, to determine which products are realizing prioritized behaviours. Statistical prioritization can achieve a significant reduction in the state space, and modelling efforts can be rewarded by better automation. In particular, we used MaTeLo, a statistical test cases generation suite developed at ALL4TEC. We assess feasibility criteria on two systems: Claroline, a configurable course management system, and Sferion™, an embedded system providing helicopter landing assistance.},
journal = {Softw. Syst. Model.},
month = feb,
pages = {153–171},
numpages = {19},
keywords = {D.2.5, D.2.7, Prioritization, Software product line testing, Statistical testing}
}

@inproceedings{10.1145/3178298.3178300,
author = {Elmoniem, Mohamed A. Abd and Nasr, Eman S. and Gheith, Mervat H.},
title = {A Requirements Elicitation Tool for Cloud-Based ERP Software Product Line},
year = {2017},
isbn = {9781450355124},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3178298.3178300},
doi = {10.1145/3178298.3178300},
abstract = {Software Product Line (SPL) 1 is a very promising trend of software reusability. It could be applied in different fields in order to enhance and facilitate the software development process. In the last years, SPLs have broken into Enterprise Resource Planning (ERP) systems. An increasing need showed up for techniques, approaches and tools that combine SPL with ERP. Cloud ERP systems offer many benefits for Small and Medium Enterprises (SME). Managing the requirements elicitation process for Cloud ERP SPLs is a challenging process that faces many difficulties, such as the indirect interaction and the larger context of the target consumers. Facilitating the requirements elicitation process for cloud-based ERP SPLs by using automated tools will help to solve the faced difficulties. To the best of our knowledge, in the context of ERP SPLs, there are no tools for eliciting the requirements of cloud--based ERP SPLs nor even for ERP SPL. This paper exploits the advantages of the Form-Based Model (FBM) as a conceptual model to integrate it with cloud based ERP SPL. In addition, based on this integration, the paper presents a tool for eliciting the requirements of cloud-based ERP SPLs},
booktitle = {Proceedings of the 3rd Africa and Middle East Conference on Software Engineering},
pages = {1–6},
numpages = {6},
keywords = {Cloud SPLs, ERP, SaaS ERP, SaaS ERP tool, SaaS SPLs, extended feature model, feature model, form-based model, mapping functional requirements, requirements engineering, requirements engineering tool, software product line},
location = {Cairo, Egypt},
series = {AMECSE '17}
}

@inproceedings{10.1145/2648511.2648515,
author = {Wang, Shuai and Buchmann, David and Ali, Shaukat and Gotlieb, Arnaud and Pradhan, Dipesh and Liaaen, Marius},
title = {Multi-objective test prioritization in software product line testing: an industrial case study},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648515},
doi = {10.1145/2648511.2648515},
abstract = {Test prioritization is crucial for testing products in a product line considering limited budget in terms of available time and resources. In general, it is not practically feasible to execute all the possible test cases and so, ordering test case execution permits test engineers to discover faults earlier in the testing process. An efficient prioritization of test cases for one or more products requires a clear consideration of the tradeoff among various costs (e.g., time, required resources) and effectiveness (e.g., feature coverage) objectives. As an integral part of the future Cisco's test scheduling system for validating video conferencing products, we introduce a search-based multi-objective test prioritization technique, considering multiple cost and effectiveness measures. In particular, our multi-objective optimization setup includes the minimization of execution cost (e.g., time), and the maximization of number of prioritized test cases, feature pairwise coverage and fault detection capability. Based on cost-effectiveness measures, a novel fitness function is defined for such test prioritization problem. The fitness function is empirically evaluated together with three commonly used search algorithms (e.g., (1+1) Evolutionary algorithm (EA)) and Random Search as a comparison baseline based on the Cisco's industrial case study and 500 artificial designed problems. The results show that (1+1) EA achieves the best performance for solving the test prioritization problem and it scales up to solve the problems of varying complexity.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {32–41},
numpages = {10},
keywords = {multi-objective optimization, search algorithms, software product lines, test prioritization},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2491627.2491653,
author = {Muthig, Dirk and Schroeter, Julia},
title = {A framework for role-based feature management in software product line organizations},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491653},
doi = {10.1145/2491627.2491653},
abstract = {Product line engineering requires changes in approaching software development. Two main processes are to be established: creating a reusable infrastructure, and utilizing it for developing products. In practice, these two processes cannot strictly be separated as product enhancements are requested frequently by customers and a changeable infrastructure is essential to react on market needs. Thus, various approaches, such as proactive, reactive, or agile, have been introduced to handle changes. At a finer level of granularity, however, changes comprise many activities with variable duration and thus result in sets of concurrent and overlapping software development activities. This paper, therefore, investigates changes in more detail and assumes that provisioning comprehensive information on changes and respective states are crucial to organizations for keeping a software product line manageable. As features are a common notion used in software engineering to reflect customer requirements, the paper proposes a conceptual framework for managing feature information and for defining role-specific views throughout all life cycle processes. Its concepts have been derived from an industrial context.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {178–187},
numpages = {10},
keywords = {development process support, feature information management, feature life cycle},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@article{10.1016/j.jss.2019.110419,
author = {Jung, Pilsu and Kang, Sungwon and Lee, Jihyun},
title = {Automated code-based test selection for software product line regression testing},
year = {2019},
issue_date = {Dec 2019},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {158},
number = {C},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2019.110419},
doi = {10.1016/j.jss.2019.110419},
journal = {J. Syst. Softw.},
month = dec,
numpages = {19},
keywords = {Product lines testing, Regression test selection, Software maintenance, Software evolution}
}

@article{10.1016/j.jbi.2015.05.014,
author = {Costa, Gabriella Castro B. and Braga, Regina and David, Jos\'{e} Maria N. and Campos, Fernanda},
title = {A Scientific Software Product Line for the Bioinformatics domain},
year = {2015},
issue_date = {August 2015},
publisher = {Elsevier Science},
address = {San Diego, CA, USA},
volume = {56},
number = {C},
issn = {1532-0464},
url = {https://doi.org/10.1016/j.jbi.2015.05.014},
doi = {10.1016/j.jbi.2015.05.014},
abstract = {Display Omitted An architecture to support a SPL for scientific applications.An approach where the semantics is highlighted.Use of ontologies in conjunction with feature models.The implementation of an SSPL.Case studies in the bioinformatics area (sequencing/genetic alignment). ContextMost specialized users (scientists) that use bioinformatics applications do not have suitable training on software development. Software Product Line (SPL) employs the concept of reuse considering that it is defined as a set of systems that are developed from a common set of base artifacts. In some contexts, such as in bioinformatics applications, it is advantageous to develop a collection of related software products, using SPL approach. If software products are similar enough, there is the possibility of predicting their commonalities, differences and then reuse these common features to support the development of new applications in the bioinformatics area. ObjectivesThis paper presents the PL-Science approach which considers the context of SPL and ontology in order to assist scientists to define a scientific experiment, and to specify a workflow that encompasses bioinformatics applications of a given experiment. This paper also focuses on the use of ontologies to enable the use of Software Product Line in biological domains. MethodIn the context of this paper, Scientific Software Product Line (SSPL) differs from the Software Product Line due to the fact that SSPL uses an abstract scientific workflow model. This workflow is defined according to a scientific domain and using this abstract workflow model the products (scientific applications/algorithms) are instantiated. ResultsThrough the use of ontology as a knowledge representation model, we can provide domain restrictions as well as add semantic aspects in order to facilitate the selection and organization of bioinformatics workflows in a Scientific Software Product Line. The use of ontologies enables not only the expression of formal restrictions but also the inferences on these restrictions, considering that a scientific domain needs a formal specification. ConclusionsThis paper presents the development of the PL-Science approach, encompassing a methodology and an infrastructure, and also presents an approach evaluation. This evaluation presents case studies in bioinformatics, which were conducted in two renowned research institutions in Brazil.},
journal = {J. of Biomedical Informatics},
month = aug,
pages = {239–264},
numpages = {26},
keywords = {Feature model, Ontology, Scientific workflow, Sequence alignment, Software Product Line}
}

@inproceedings{10.1145/2019136.2019165,
author = {Lettner, Daniela and Thaller, Daniel and Vierhauser, Michael and Rabiser, Rick and Gr\"{u}nbacher, Paul and Heider, Wolfgang},
title = {Supporting business calculations in a product line engineering tool suite},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019165},
doi = {10.1145/2019136.2019165},
abstract = {Software Product Line Engineering (SPLE) involves defining the commonalities and variability of similar products to leverage extensive reuse and to accelerate the derivation of customized products. However, sales people and customers do not only care about technical properties of product features during product derivation. They also need information concerning the business value of product features. Existing approaches have addressed this issue by combining business information with variability models, e.g., by defining feature attributes or by integrating third party tools. However, a solution that seamlessly integrates variability and business calculations within a SPLE tool is still lacking. We report on our ongoing efforts to integrate business calculations in the DOPLER tool suite. We use examples of product lines from the industrial plant automation domain to motivate and demonstrate our solution.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {26},
numpages = {4},
keywords = {business calculations, tool support, value-based software engineering, variability models},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3266237.3266275,
author = {Filho, Helson Luiz Jakubovski and Ferreira, Thiago Nascimento and Vergilio, Silvia Regina},
title = {Multiple objective test set selection for software product line testing: evaluating different preference-based algorithms},
year = {2018},
isbn = {9781450365031},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3266237.3266275},
doi = {10.1145/3266237.3266275},
abstract = {The selection of optimal test sets for Software Product Lines (SPLs) is a complex task impacted by many factors and that needs to consider the tester's preferences. To help in this task, Preference-based Evolutionary Multi-objective Algorithms (PEMOAs) have been explored. They use a Reference Point (RP), which represents the user preference and guides the search, resulting in a greater number of solutions in the ROI (Region of Interest). This region contains solutions that are more interesting from the tester's point of view. However, the explored PEMOAs have not been compared yet and the results reported in the literature do not consider many-objective formulations. Such an evaluation is important because in the presence of more than three objectives the performance of the algorithms may change and the number of solutions increases. Considering this fact, this work presents evaluation results of four PEMOAs for selection of products in the SPL testing considering cost, testing criteria coverage, products similarity, and the number of revealed faults, given by the mutation score. The PEMOAs present better performance than traditional algorithms, avoiding uninteresting solutions. We introduce a hyper-heuristic version of the PEMOA R-NSGA-II that presents the best results in a general case.},
booktitle = {Proceedings of the XXXII Brazilian Symposium on Software Engineering},
pages = {162–171},
numpages = {10},
keywords = {preference-based multi-objective algorithms, search-based software engineering, software product line testing},
location = {Sao Carlos, Brazil},
series = {SBES '18}
}

@inproceedings{10.1145/2648511.2648527,
author = {Villela, Karina and Silva, Adeline and Vale, Tassio and de Almeida, Eduardo Santana},
title = {A survey on software variability management approaches},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648527},
doi = {10.1145/2648511.2648527},
abstract = {Variability Management (VM) is a key practice in the development of variant-rich systems. Over the years, attention has been paid to VM approaches adopted by traditional software product lines. The increasing demand for dynamic and highly configurable systems, however, calls for a closer look at the approaches used to develop these systems. We therefore conducted a survey with practitioners from organizations developing variant-rich systems in order to characterize the state of the practice. We also wanted to identify factors that might influence the adoption of specific VM approaches as well as the perception of problems/difficulties posed by those. We analyzed the answers of 31 respondents from thirteen countries and found that there is a correlation between the business domain and the adopted VM approaches. With regard to the problems/difficulties, the difficulty of assuring the quality of maintenance due to the explosion of dependencies was a major issue. This paper reports on relevant findings that could help companies to better understand their problems and researchers to design new/improved solutions.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {147–156},
numpages = {10},
keywords = {product line, state-of-the-practice, survey, variability, variability management},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.5220/0005370300710081,
author = {Tang, Yutian and Leung, Hareton},
title = {Top-down Feature Mining Framework for Software Product Line},
year = {2015},
isbn = {9789897580970},
publisher = {SCITEPRESS - Science and Technology Publications, Lda},
address = {Setubal, PRT},
url = {https://doi.org/10.5220/0005370300710081},
doi = {10.5220/0005370300710081},
abstract = {Software product line engineering is regarded as a promising approach to generate tailored software productsby referencing shared software artefacts. However, converting software legacy into a product line is extremelydifficult, given the complexity, risk of the task and insufficient tool support. To cope with this, in this paper,we proposed a top-down feature-mining framework to facilitate developers extracting code fragments forfeatures concerned. Our work aims to fulfill the following targets: (1) identify features at a fine granularity,(2) locate code fragments for concerned feature hierarchically and consistently, and (3) combine programanalysis techniques and feature location strategies to improve mining performance. From our preliminary casestudies, the top-down framework can effectively locate features and performs as good as Christians approachand performs better than the topology feature location approach.},
booktitle = {Proceedings of the 17th International Conference on Enterprise Information Systems - Volume 2},
pages = {71–81},
numpages = {11},
keywords = {Concept Location, Feature Mining, Software Product Line., Top-down Framework, Variability},
location = {Barcelona, Spain},
series = {ICEIS 2015}
}

@inproceedings{10.1145/2591062.2591126,
author = {Antkiewicz, Micha\l{} and Ji, Wenbin and Berger, Thorsten and Czarnecki, Krzysztof and Schmorleiz, Thomas and L\"{a}mmel, Ralf and St\u{a}nciulescu, undefinedtefan and W\k{a}sowski, Andrzej and Schaefer, Ina},
title = {Flexible product line engineering with a virtual platform},
year = {2014},
isbn = {9781450327688},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2591062.2591126},
doi = {10.1145/2591062.2591126},
abstract = {Cloning is widely used for creating new product variants. While it has low adoption costs, it often leads to maintenance problems. Long term reliance on cloning is discouraged in favor of systematic reuse offered by product line engineering (PLE) with a central platform integrating all reusable assets. Unfortunately, adopting an integrated platform requires a risky and costly migration. However, industrial experience shows that some benefits of an integrated platform can be achieved by properly managing a set of cloned variants.  In this paper, we propose an incremental and minimally invasive PLE adoption strategy called virtual platform. Virtual platform covers a spectrum of strategies between ad-hoc clone and own and PLE with a fully-integrated platform divided into six governance levels. Transitioning to a governance level requires some effort and it provides some incremental benefits. We discuss tradeoffs among the levels and illustrate the strategy on an example implementation.},
booktitle = {Companion Proceedings of the 36th International Conference on Software Engineering},
pages = {532–535},
numpages = {4},
keywords = {clone management, features, product line engineering, virtual platform},
location = {Hyderabad, India},
series = {ICSE Companion 2014}
}

@inproceedings{10.1145/3056662.3056663,
author = {Kang, Sungwon and Kim, Jungmin and Baek, Haeun and Ahn, Hwi and Jung, Pilsu and Lee, Jihyun},
title = {Comparison of software product line test derivation methods from the reuse viewpoint},
year = {2017},
isbn = {9781450348577},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3056662.3056663},
doi = {10.1145/3056662.3056663},
abstract = {Product line test development is more complicated than test development for a single application, as the former has to deal with variability among assets (artifacts) and is carried out in two separate but related development phases, i.e. domain engineering and application engineering. Different software product test development methods provide different opportunities for reuse depending on how variability is represented in the domain test artifacts, when binding is formed and applied and also when test data are determined. This paper compares and analyzes the six major methods for the software product line test development in the literature. Through the comparison, we find out that existing software product line testing methods did not fully consider the aspects of software product line that are essential for reuse in software product line development such as variability representation, binding formation and application time and test data determination time. As the conclusion of this literature review, this paper suggests future research opportunities for software product line testing to explore.},
booktitle = {Proceedings of the 6th International Conference on Software and Computer Applications},
pages = {1–8},
numpages = {8},
keywords = {software product line development, software testing, systematic product line testing},
location = {Bangkok, Thailand},
series = {ICSCA '17}
}

@inproceedings{10.1145/2364412.2364428,
author = {Zhang, Bo and Becker, Martin},
title = {Code-based variability model extraction for software product line improvement},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364428},
doi = {10.1145/2364412.2364428},
abstract = {Successful Software Product Lines (SPLs) evolve over time. However, one practical problem is that during SPL evolution the core assets, especially the code, tend to become complicated and difficult to understand, use, and maintain. Typically, more and more problems arise over time with implicit or already lost adaptation knowledge about the interdependencies of the different system variants and the supported variability. In this paper, we present a model-based SPL improvement process that analyzes existing large-scale SPL reuse infrastructure to identify improvement potential with respective metrics. Since Conditional Compilation (CC) is one of the most widely used mechanisms to implement variability, we parse variability-related facts from preprocessor code. Then we automatically extract an implementation variability model, including product configuration and variation points that are structured in a hierarchical variability tree. The extraction process is presented with concrete measurement results from an industrial case study.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {91–98},
numpages = {8},
keywords = {conditional compilation, software product line maintenance, variability model},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@article{10.1007/s10664-014-9358-0,
author = {Koziolek, Heiko and Goldschmidt, Thomas and Gooijer, Thijmen and Domis, Dominik and Sehestedt, Stephan and Gamer, Thomas and Aleksy, Markus},
title = {Assessing software product line potential: an exploratory industrial case study},
year = {2016},
issue_date = {April     2016},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {21},
number = {2},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-014-9358-0},
doi = {10.1007/s10664-014-9358-0},
abstract = {Corporate organizations sometimes offer similar software products in certain domains due to former company mergers or due to the complexity of the organization. The functional overlap of such products is an opportunity for future systematic reuse to reduce software development and maintenance costs. Therefore, we have tailored existing domain analysis methods to our organization to identify commonalities and variabilities among such products and to assess the potential for software product line (SPL) approaches. As an exploratory case study, we report on our experiences and lessons learned from conducting the domain analysis in four application cases with large-scale software products. We learned that the outcome of a domain analysis was often a smaller integration scenario instead of an SPL and that business case calculations were less relevant for the stakeholders and managers from the business units during this phase. We also learned that architecture reconstruction using a simple block diagram notation aids domain analysis and that large parts of our approach were reusable across application cases.},
journal = {Empirical Softw. Engg.},
month = apr,
pages = {411–448},
numpages = {38},
keywords = {Business case, Domain analysis, Software product lines}
}

@article{10.1007/s10009-012-0242-1,
author = {Heymans, Patrick and Boucher, Quentin and Classen, Andreas and Bourdoux, Arnaud and Demonceau, Laurent},
title = {A code tagging approach to software product line development},
year = {2012},
issue_date = {October   2012},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {14},
number = {5},
issn = {1433-2779},
url = {https://doi.org/10.1007/s10009-012-0242-1},
doi = {10.1007/s10009-012-0242-1},
abstract = {Software product line engineering seeks to systematise reuse when developing families of similar software systems so as to minimise development time, cost and defects. To realise variability at the code level, product line methods classically advocate usage of inheritance, components, frameworks, aspects or generative techniques. However, these might require unaffordable paradigm shifts for developers if the software was not thought at the outset as a product line. Furthermore, these techniques can be conflicting with a company's coding practices or external regulations. These concerns were the motivation for the industry---university collaboration described in this paper in which we developed a minimally intrusive coding technique based on tags. The approach was complemented with traceability from code to feature diagrams which were exploited for automated configuration. It is supported by a toolchain and is now in use in the partner company for the development of flight-grade satellite communication software libraries.},
journal = {Int. J. Softw. Tools Technol. Transf.},
month = oct,
pages = {553–566},
numpages = {14},
keywords = {Automation, Code tagging, Feature diagrams, Software product line engineering}
}

@inproceedings{10.1145/2993236.2993251,
author = {Steindorfer, Michael J. and Vinju, Jurgen J.},
title = {Towards a software product line of trie-based collections},
year = {2016},
isbn = {9781450344463},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2993236.2993251},
doi = {10.1145/2993236.2993251},
abstract = {Collection data structures in standard libraries of programming languages are designed to excel for the average case by carefully balancing memory footprint and runtime performance. These implicit design decisions and hard-coded trade-offs do constrain users from using an optimal variant for a given problem. Although a wide range of specialized collections is available for the Java Virtual Machine (JVM), they introduce yet another dependency and complicate user adoption by requiring specific Application Program Interfaces (APIs) incompatible with the standard library.  A product line for collection data structures would relieve library designers from optimizing for the general case. Furthermore, a product line allows evolving the potentially large code base of a collection family efficiently. The challenge is to find a small core framework for collection data structures which covers all variations without exhaustively listing them, while supporting good performance at the same time.  We claim that the concept of Array Mapped Tries (AMTs) embodies a high degree of commonality in the sub-domain of immutable collection data structures. AMTs are flexible enough to cover most of the variability, while minimizing code bloat in the generator and the generated code. We implemented a Data Structure Code Generator (DSCG) that emits immutable collections based on an AMT skeleton foundation. The generated data structures outperform competitive hand-optimized implementations, and the generator still allows for customization towards specific workloads.},
booktitle = {Proceedings of the 2016 ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences},
pages = {168–172},
numpages = {5},
keywords = {Code generation, Hash trie, Immutability, Performance, Persistent data structure, Software product line},
location = {Amsterdam, Netherlands},
series = {GPCE 2016}
}

@inproceedings{10.1145/2648511.2648539,
author = {Knapp, Alexander and Roggenbach, Markus and Schlingloff, Bernd-Holger},
title = {On the use of test cases in model-based software product line development},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648539},
doi = {10.1145/2648511.2648539},
abstract = {We address the question of how to select test cases in a controlled model-based software product line development process. CVL, the common variability language, provides a framework for materialization of product models from a given variability model and resolution model. Reflecting common practice, we assume that test case development for product line is independent from product development. In such a setting, the question arises which test cases can be applied to which products. To this end, we describe a procedure and tool set for assigning the outcome of a test case on an arbitrary member of a software product line using UML base and CVL variability models. As a case study, we demonstrate our approach with the example of a product line of automatic espresso machines.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {247–251},
numpages = {5},
keywords = {UML, model-based testing, software product lines, test colouring},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2019136.2019182,
author = {McGregor, John D. and Monteith, J. Yates and Zhang, Jie},
title = {Quantifying value in software product line design},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019182},
doi = {10.1145/2019136.2019182},
abstract = {A software product line is a strategic investment for an organization. Besides the initial decision to use a product line approach other strategic decisions are made, including which variations to accommodate. In this paper we present an adaptation of an equation for computing option values. The equation can be used to understand the economic impact of adding a variation point to the product line architecture. The equation was exercised on multiple sets of hypothetical data and and produced the expected changes from one data set to another. In the future the equation will be validated with data from real projects. We describe some practical sources of values for the parameters of the equation.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {40},
numpages = {7},
keywords = {software engineering, strategic software design},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3461001.3473054,
author = {Assun\c{c}\~{a}o, Wesley K. G. and Lopez-Herrejon, Roberto E. and Ziadi, Tewfik and Martinez, Jabier},
title = {REVE 2021: 9th International Workshop on Reverse Variability Engineering},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3473054},
doi = {10.1145/3461001.3473054},
abstract = {Software Product Line (SPL) migration remains a challenging endeavour. From organizational issues to purely technical challenges, there is a wide range of barriers that complicates SPL adoption. This workshop aims to foster research about making the most of the two main inputs for SPL migration: 1) domain knowledge and 2) legacy assets. Domain knowledge, usually implicit and spread across an organization, is key to define the SPL scope and to validate the variability model and its semantics. At the technical level, domain expertise is also needed to create or extract the reusable software components. Legacy assets can be, for instance, similar product variants (e.g., requirements, models, source code, etc.) that were implemented using ad-hoc reuse techniques such as clone-and-own. More generally, the workshop REverse Variability Engineering attracts researchers and practitioners contributing to processes, techniques, tools, or empirical studies related to the automatic, semi-automatic or manual extraction or refinement of SPL assets.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {203},
numpages = {1},
keywords = {extractive software product line adoption, reverse engineering, software product lines, variability management},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3357765.3359515,
author = {Hinterreiter, Daniel and Nieke, Michael and Linsbauer, Lukas and Seidl, Christoph and Pr\"{a}hofer, Herbert and Gr\"{u}nbacher, Paul},
title = {Harmonized temporal feature modeling to uniformly perform, track, analyze, and replay software product line evolution},
year = {2019},
isbn = {9781450369800},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3357765.3359515},
doi = {10.1145/3357765.3359515},
abstract = {A feature model (FM) describes commonalities and variability within a software product line (SPL) and represents the configuration options at one point in time. A temporal feature model (TFM) additionally represents FM evolution, e.g., the change history or the planning of future releases. The increasing number of different TFM notations hampers research collaborations due to a lack of interoperability regarding notations, editors, and analyses. We present a common API for TFMs, which provides the core of a TFM ecosystem, to harmonize notations. We identified the requirements for the API based on systematically classifying and comparing the capabilities of existing TFM approaches. Our approach allows to work seamlessly with different TFM notations to perform, track, analyze and replay evolution. Our evaluation investigates two research questions on the expressiveness (RQ1) and utility (RQ2) of our approach by presenting implementations for several existing FM and TFM notations and replaying evolution histories from two case study systems.},
booktitle = {Proceedings of the 18th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences},
pages = {115–128},
numpages = {14},
keywords = {evolution, software product lines},
location = {Athens, Greece},
series = {GPCE 2019}
}

@inproceedings{10.1145/2897045.2897050,
author = {Humblet, Mathieu and Tran, Dang Vinh and Weber, Jens H. and Cleve, Anthony},
title = {Variability management in database applications},
year = {2016},
isbn = {9781450341769},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2897045.2897050},
doi = {10.1145/2897045.2897050},
abstract = {Complex software products are often subject to application context specific configuration and variations. Variability management is a critical aspect of engineering software product families efficiently. However, the variability management on the data aspect of systems has received less attention. In this paper, we present SVL Tool, a plug-in for the Case Tool DB-Main which enables software engineers to model feature models, map them to database schema elements, and finally produce a new database schema including only the selected features. We present the Simple Variability Language, a language designed on the basis of the Common Variability Language. We also present our results of applying SVL Tool to a case study, an Electronic Medical Records software program widely used in Canadian primary health care.},
booktitle = {Proceedings of the 1st International Workshop on Variability and Complexity in Software Design},
pages = {21–27},
numpages = {7},
keywords = {database applications, software product families, variability management},
location = {Austin, Texas},
series = {VACE '16}
}

@inproceedings{10.1145/3377024.3380451,
author = {Bencomo, Nelly},
title = {Next steps in variability management due to autonomous behaviour and runtime learning},
year = {2020},
isbn = {9781450375016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377024.3380451},
doi = {10.1145/3377024.3380451},
abstract = {One of the basic principles in product lines is to delay design decisions related to offered functionality and quality to later phases of the life cycle [25]. Instead of deciding on what system to develop in advance, a set of assets and a common reference architecture are specified and implemented during the Domain Engineering process. Later on, during Application Engineering, specific systems are developed to satisfy the requirements reusing the assets and architecture [16]. Traditionally, this is during the Application Engineering when delayed design decisions are solved. The realization of this delay relies heavily on the use of variability in the development of product lines and systems. However, as systems become more interconnected and diverse, software architects cannot easily foresee the software variants and the interconnections between components. Consequently, a generic a priori model is conceived to specify the system's dynamic behaviour and architecture. The corresponding design decisions are left to be solved at runtime [13].Surprisingly, few research initiatives have investigated variability models at runtime [9]. Further, they have been applied only at the level of goals and architecture, which contrasts to the needs claimed by the variability community, i.e., Software Product Lines (SPLC) and Dynamic Software Product Lines (DSPL) [2, 10, 14, 22]. Especially, the vision of DSPL with their ability to support runtime updates with virtually zero downtime for products of a software product line, denotes the obvious need of variability models being used at runtime to adapt the corresponding programs. A main challenge for dealing with runtime variability is that it should support a wide range of product customizations under various scenarios that might be unknown until the execution time, as new product variants can be identified only at runtime [10, 11]. Contemporary variability models face the challenge of representing runtime variability to therefore allow the modification of variation points during the system's execution, and underpin the automation of the system's reconfiguration [15]. The runtime representation of feature models (i.e. the runtime model of features) is required to automate the decision making [9].Software automation and adaptation techniques have traditionally required a priori models for the dynamic behaviour of systems [17]. With the uncertainty present in the scenarios involved, the a priori model is difficult to define [20, 23, 26]. Even if foreseen, its maintenance is labour-intensive and, due to architecture decay, it is also prone to get out-of-date. However, the use of models@runtime does not necessarily require defining the system's behaviour model beforehand. Instead, different techniques such as machine learning, or mining software component interactions from system execution traces can be used to build a model which is in turn used to analyze, plan, and execute adaptations [18], and synthesize emergent software on the fly [7].Another well-known problem posed by the uncertainty that characterize autonomous systems is that different stakeholders (e.g. end users, operators and even developers) may not understand them due to the emergent behaviour. In other words, the running system may surprise its customers and/or developers [4]. The lack of support for explanation in these cases may compromise the trust to stakeholders, who may eventually stop using a system [12, 24]. I speculate that variability models can offer great support for (i) explanation to understand the diversity of the causes and triggers of decisions during execution and their corresponding effects using traceability [5], and (ii) better understand the behaviour of the system and its environment.Further, an extension and potentially reframing of the techniques associated with variability management may be needed to help taming uncertainty and support explanation and understanding of the systems. The use of new techniques such as machine learning exacerbates the current situation. However, at the same time machine learning techniques can also help and be used, for example, to explore the variability space [1]. What can the community do to face the challenges associated?We need to meaningfully incorporate techniques from areas such as artificial intelligence, machine learning, optimization, planning, decision theory, and bio-inspired computing into our variability management techniques to provide explanation and management of the diversity of decisions, their causes and the effects associated. My own previous work has progressed [3, 5, 6, 8, 11, 12, 19, 21] to reflect what was discussed above.},
booktitle = {Proceedings of the 14th International Working Conference on Variability Modelling of Software-Intensive Systems},
articleno = {2},
numpages = {2},
keywords = {autonomous systems, dynamic software product lines, dynamic variability, machine learning, uncertainty, variability management},
location = {Magdeburg, Germany},
series = {VaMoS '20}
}

@article{10.4018/IJWSR.2019010103,
author = {Sun, Chang-ai and Wang, Zhen and Wang, Ke and Xue, Tieheng and Aiello, Marco},
title = {Adaptive BPEL Service Compositions via Variability Management: A Methodology and Supporting Platform},
year = {2019},
issue_date = {January 2019},
publisher = {IGI Global},
address = {USA},
volume = {16},
number = {1},
issn = {1545-7362},
url = {https://doi.org/10.4018/IJWSR.2019010103},
doi = {10.4018/IJWSR.2019010103},
abstract = {Service-Oriented Architectures are a popular development paradigm to enable distributed applications constructed from independent web services. When coordinated, web services are an infrastructure to fulfill dynamic and vertical integration of business. They may face frequent changes of both requirements and execution environments. Static and predefined service compositions using business process execution language BPEL are not able to cater for such rapid and unpredictable context shifts. The authors propose a variability management-based adaptive and configurable service composition approach that treats changes as first-class citizens and consists of identifying, expressing, realizing, and managing changes of service compositions. The proposed approach is realized with a language called VxBPEL to support variability in service compositions and a platform for design, execution, analysis, and maintenance of VxBPEL-based service compositions. Four case studies validate the feasibility of the proposed approach while exhibiting good performance of the supporting platform.},
journal = {Int. J. Web Serv. Res.},
month = jan,
pages = {37–69},
numpages = {33},
keywords = {Adaptive Systems, Business Process Execution Language, Service Composition, Service Oriented Architectures, Variability Management}
}

@inproceedings{10.1145/2648511.2648534,
author = {Dieumegard, Arnaud and Toom, Andres and Pantel, Marc},
title = {A software product line approach for semantic specification of block libraries in dataflow languages},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648534},
doi = {10.1145/2648511.2648534},
abstract = {Dataflow modelling languages such as SCADE or Simulink are the de-facto standard for the Model Driven Development of safety critical embedded control and command systems. Software is mainly being produced by Automated Code Generators whose correctness can only be assessed meaningfully if the input language semantics is well known. These semantics share a common part but are mainly defined through block libraries. The writing of a complete formal specification for the block libraries of the usual languages is highly challenging due to the high variability of the structure and semantics of each block. This contribution relates the use of software product line principles in the design of a domain specific language targeting the formal specification of block libraries. It summarises the advantages of this DSL regarding the writing, validation and formal verification of such specifications. These experiments have been carried out in the context of the GeneAuto embedded code generator project targeting Simulink and Scicos; and are being extended and applied in its follow up projects ProjetP and Hi-MoCo.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {217–226},
numpages = {10},
keywords = {Why3, Xcos, automated code generation, feature modelling, formal specification, model driven engineering, scicos, simulink, software qualification},
location = {Florence, Italy},
series = {SPLC '14}
}

@article{10.1016/j.scico.2012.06.006,
author = {Ubayashi, Naoyasu and Nakajima, Shin and Hirayama, Masayuki},
title = {Context-dependent product line engineering with lightweight formal approaches},
year = {2013},
issue_date = {December, 2013},
publisher = {Elsevier North-Holland, Inc.},
address = {USA},
volume = {78},
number = {12},
issn = {0167-6423},
url = {https://doi.org/10.1016/j.scico.2012.06.006},
doi = {10.1016/j.scico.2012.06.006},
abstract = {This paper proposes a new style of product line engineering methods. It focuses on constructing embedded systems that take into account the contexts such as the external physical environments. In current product line development projects, Feature Analysis is mainly conducted from the viewpoint of system configurations: how hardware and software components are configured to constitute a system. In most cases, contexts are not considered explicitly. As a result, unexpected and unfavorable behavior might emerge in a system if a developer does not recognize any possible conflicting combinations between the system and contexts. To deal with this problem, this paper provides the notion of a context-dependent product line, which is composed of the system and context lines. The former is obtained by analyzing a family of systems. The latter is obtained by analyzing features of contexts associated to the systems. The system and context lines contain reusable core assets. The configuration of selected system components and contexts can be formally checked at the specification level. In this paper, we show a development process that includes the creation of both product line assets as well as context assets.},
journal = {Sci. Comput. Program.},
month = dec,
pages = {2331–2346},
numpages = {16},
keywords = {Context analysis, Formal methods, Product line engineering}
}

@inproceedings{10.1145/3461002.3473947,
author = {Pinnecke, Marcus},
title = {Product-lining the elinvar wealthtech microservice platform},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473947},
doi = {10.1145/3461002.3473947},
abstract = {Software product lining is the act of providing different but related software products under the same brand, known as a software product line (SPL). As engineering, management and validation of SPLs is far from trivial, special solutions for software product line engineering (SPLE) have a continuous momentum in both academic and industry. In general, it is hard to judge when to reasonably favor SPLE over alternative solutions that are more common in the industry. In this paper, we illustrate how we as Elinvar manage variability within our WealthTech Platform as a Service (PaaS) at different granularity levels, and discuss methods for SPLE in this context. More in detail, we share our techniques and concepts to address configuration management, and show how we manage a single microservice SPL including inter-service communication. Finally, we provide insights into platform solutions by means of packages for our clients. We end with a discussion on SPLE techniques in context of service SPLs and our packaging strategy. We conclude that while we are good to go with industry-standard approaches for microservice SPLs, the variability modeling and analysis advantages within SPLE is promising for our packaging strategy.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {60–68},
numpages = {9},
keywords = {configuration management, microservice platforms, product families, technologies and concepts, variability management},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1109/ICGSE.2019.000-7,
author = {Aggarwal, Anirudh Kumar and Mani, V. S.},
title = {Using product line engineering in a globally distributed agile development team to shorten release cycles effectively},
year = {2019},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICGSE.2019.000-7},
doi = {10.1109/ICGSE.2019.000-7},
abstract = {We introduced Product Line Engineering (PLE) [1] with the objectives of 1) achieving shorter release cycles, 2) improving product quality, and 3) increasing cost-effectiveness.This paper shares our experiences in adopting PLE, describing the challenges faced in fulfilling these objectives. It also outlines the approaches that were used to overcome the architectural constraints, foster a culture of reuse, and enhance test automation [2]. The resulting changes in team dynamics of globally distributed teams are also mentioned. [3] We present the results and the extent to which the objectives were met. Finally, few challenges still faced by teams to move to shorter release cycle are highlighted.},
booktitle = {Proceedings of the 14th International Conference on Global Software Engineering},
pages = {48–51},
numpages = {4},
keywords = {InnerSource, PLE, agile, global development},
location = {Montreal, Quebec, Canada},
series = {ICGSE '19}
}

@article{10.1007/s10664-016-9494-9,
author = {Li, Xuelin and Wong, W. Eric and Gao, Ruizhi and Hu, Linghuan and Hosono, Shigeru},
title = {Genetic Algorithm-based Test Generation for Software Product Line with the Integration of Fault Localization Techniques},
year = {2018},
issue_date = {February  2018},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {23},
number = {1},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-016-9494-9},
doi = {10.1007/s10664-016-9494-9},
abstract = {In response to the highly competitive market and the pressure to cost-effectively release good-quality software, companies have adopted the concept of software product line to reduce development cost. However, testing and debugging of each product, even from the same family, is still done independently. This can be very expensive. To solve this problem, we need to explore how test cases generated for one product can be used for another product. We propose a genetic algorithm-based framework which integrates software fault localization techniques and focuses on reusing test specifications and input values whenever feasible. Case studies using four software product lines and eight fault localization techniques were conducted to demonstrate the effectiveness of our framework. Discussions on factors that may affect the effectiveness of the proposed framework is also presented. Our results indicate that test cases generated in such a way can be easily reused (with appropriate conversion) between different products of the same family and help reduce the overall testing and debugging cost.},
journal = {Empirical Softw. Engg.},
month = feb,
pages = {1–51},
numpages = {51},
keywords = {Coverage, Debugging/fault localization, EXAM score, Genetic algorithm, Software product line, Test generation}
}

@inproceedings{10.1145/2364412.2364447,
author = {Vianna, Alexandre and Pinto, Felipe and Sena, Dem\'{o}stenes and Kulesza, Uir\'{a} and Coelho, Roberta and Santos, Jadson and Lima, Jalerson and Lima, Gleydson},
title = {Squid: an extensible infrastructure for analyzing software product line implementations},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364447},
doi = {10.1145/2364412.2364447},
abstract = {Software product line engineering is about producing a set of related products that share more commonalities than variabilities. This approach promotes benefits such as cost reduction, product quality, productivity and time to market, but it brings new challenges that must be considered during the evolution of the software product line. In this context, recent research has explored and proposed automated approaches based on code analysis and traceability techniques for change impact analysis. This paper presents Squid, an extensible infrastructure for analyzing software product line implementations. The approach uses information from variability modeling, variability mapping to code assets, and dependency relationships between code assets to perform analysis of SPL implementations. A Squid instantiation example is presented to illustrate the usage of the tool in practical scenarios.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {209–216},
numpages = {8},
keywords = {software analysis, software product line, software product line evolution},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.5220/0005829801640171,
author = {Constantino, Kattiana and Pereira, Juliana Alves and Padilha, Juliana and Vasconcelos, Priscilla and Figueiredo, Eduardo},
title = {An Empirical Study of Two Software Product Line Tools},
year = {2016},
isbn = {9789897581892},
publisher = {SCITEPRESS - Science and Technology Publications, Lda},
address = {Setubal, PRT},
url = {https://doi.org/10.5220/0005829801640171},
doi = {10.5220/0005829801640171},
abstract = {In the last decades, software product lines (SPL) have proven to be an efficient software development technique in industries due its capability to increase quality and productivity and decrease cost and time-to-market through extensive reuse of software artifacts. To achieve these benefits, tool support is fundamental to guide industries during the SPL development life-cycle. However, many different SPL tools are available nowadays and the adoption of the appropriate tool is a big challenge in industries. In order to support engineers choosing a tool that best fits their needs, this paper presents the results of a controlled empirical study to assess two Eclipse-based tools, namely FeatureIDE and pure::variants. This empirical study involved 84 students who used and evaluated both tools. The main weakness we observe in both tools are the lack adequate mechanisms for managing the variability, such as for product configuration. As a strength, we observe the automated analysis and the feature model editor.},
booktitle = {Proceedings of the 11th International Conference on Evaluation of Novel Software Approaches to Software Engineering},
pages = {164–171},
numpages = {8},
keywords = {Feature Model, FeatureIDE, Software Product Lines, Variability Management, pure::variants.},
location = {Rome, Italy},
series = {ENASE 2016}
}

@article{10.1016/j.asoc.2016.08.024,
author = {dos Santos Neto, Pedro de Alcntara and Britto, Ricardo and Rablo, Ricardo de Andrade Lira and Cruz, Jonathas Jivago de Almeida and Lira, Werney Ayala Luz},
title = {A hybrid approach to suggest software product line portfolios},
year = {2016},
issue_date = {December 2016},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {49},
number = {C},
issn = {1568-4946},
url = {https://doi.org/10.1016/j.asoc.2016.08.024},
doi = {10.1016/j.asoc.2016.08.024},
abstract = {Graphical abstractDisplay Omitted HighlightsThe work proposes a hybrid approach to deal with the Product Portfolio Scope Problem.The approach is composed by a solution to deploy the feature relevance indicated by the customers into code assets of a SPL, based on a systematic method (SQFD).The approach includes a method to estimate the cost of an asset based on common and relevant measures related to source code, together with a fuzzy system to deal with the imprecision to set reference values.The work presents an application of an NSGA-II to search for products minimizing the cost and maximizing the relevance of the candidate products.The approach was evaluated using different scenarios, exploring the mains aspects related to method in the practice: size, granularity of features and products search space.The previous version of our hybrid approach was dependent on the employed technologies and algorithms. Herein we reformulate our approach, detaching it from any particular technique/algorithm.The data collection process associated with our approach was improved to facilitate the hybrid approach's usage and mitigate associated construct validity threats.A more comprehensive evaluation, which focused on show the real word usefulness and scalability of our hybrid approach. To validate the usefulness of our approach, it was used the SPL associated with a tool broadly employed in both industrial and academic contexts (ArgoUML-SPL). The scalability of our approach was evaluated using a synthetic SPL.All the experiments were based on the guidelines defined by Arcuri and Briand in order to evaluate the statistical significance of this kind of work. Software product line (SPL) development is a new approach to software engineering which aims at the development of a whole range of products. However, as long as SPL can be useful, there are many challenges regarding the use of that approach. One of the main problems which hinders the adoption of software product line (SPL) is the complexity regarding product management. In that context, we can remark the scoping problem. One of the existent ways to deal with scoping is the product portfolio scoping (PPS). PPS aims to define the products that should be developed as well as their key features. In general, that approach is driven by marketing aspects, like cost of the product and customer satisfaction. Defining a product portfolio by using the many different available aspects is a NP-hard problem. This work presents an improved hybrid approach to solve the feature model selection problem, aiming at supporting product portfolio scoping. The proposal is based in a hybrid approach not dependent on any particular algorithm/technology. We have evaluated the usefulness and scalability of our approach using one real SPL (ArgoUML-SPL) and synthetic SPLs. As per the evaluation results, our approach is both useful from a practitioner's perspective and scalable.},
journal = {Appl. Soft Comput.},
month = dec,
pages = {1243–1255},
numpages = {13},
keywords = {Feature model selection problem, Fuzzy inference systems, NSGA-II, Product portfolio scoping, Search based feature model selection, Search based software engineering, Software product lines}
}

@inproceedings{10.1109/ASE.2006.42,
author = {Dhungana, Deepak},
title = {Integrated Variability Modeling of Features and Architecture in Software Product Line Engineering},
year = {2006},
isbn = {0769525792},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ASE.2006.42},
doi = {10.1109/ASE.2006.42},
abstract = {Existing methods and tools supporting product line variability management typically emphasize either the feature or the architecture level. There have been attempts to combine these aspects, but no widely accepted method is available so far. This paper reports ongoing research in designing and implementing product line variability models, where the focus lies in treating features and architectural elements as parts of an integrated model. The research is carried together with our industry partner Siemens VAI.},
booktitle = {Proceedings of the 21st IEEE/ACM International Conference on Automated Software Engineering},
pages = {327–330},
numpages = {4},
series = {ASE '06}
}

@inproceedings{10.1145/1964138.1964139,
author = {Silva, Alan Pedro da and Costa, Evandro and Bittencourt, Ig Ibert and Brito, Patrick H. S. and Holanda, Olavo and Melo, Jean},
title = {Ontology-based software product line for building semantic web applications},
year = {2010},
isbn = {9781450305426},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1964138.1964139},
doi = {10.1145/1964138.1964139},
abstract = {The Software Product Lines (SPL) has proved very effective in building large-scale software. However, few works seek to adjust the approach of software product line to applications in the context of semantic web. This is because applications in this context assume the use of semantic services and intelligent agents. As a result, it is necessary that there are assets that provide adequate interoperability both semantic services and intelligent agents. In this sense, it is proposed in this paper the use of ontologies for the specification of entire a project of a SPL. With this, it can be a sufficiently formal specification that can be interpreted by both software engineers and computational algorithms.},
booktitle = {Proceedings of the 2010 Workshop on Knowledge-Oriented Product Line Engineering},
articleno = {1},
numpages = {6},
keywords = {ontology, semantic web, software product line},
location = {Reno, Nevada},
series = {KOPLE '10}
}

@inproceedings{10.1109/ASE.2015.106,
author = {Pietsch, Christopher and Kehrer, Timo and Kelter, Udo and Reuling, Dennis and Ohrndorf, Manuel},
title = {SiPL: a delta-based modeling framework for software product line engineering},
year = {2015},
isbn = {9781509000241},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ASE.2015.106},
doi = {10.1109/ASE.2015.106},
abstract = {Model-based development has become a widely-used approach to implement software, e.g. for embedded systems. Models replace source code as primary executable artifacts in these cases. Software product line technologies for these domains must be able to generate models as instances of an SPL. This need is addressed among others by an implementation technology for SPLs known as delta modeling. Current approaches to delta modeling require deltas to be written manually using delta languages, and they offer only very limited support for creating and testing a network of deltas. This paper presents a new approach to delta modeling and a supporting tool suite: the abstract notion of a delta is refined to be a consistency-preserving edit script which is generated by comparing two models. The rich structure of edit scripts allows us to detect conflicts and further relations between deltas statically and to implement restructurings in delta sets such as the merging of two deltas. We illustrate the tooling using a case study.},
booktitle = {Proceedings of the 30th IEEE/ACM International Conference on Automated Software Engineering},
pages = {852–857},
numpages = {6},
location = {Lincoln, Nebraska},
series = {ASE '15}
}

@inproceedings{10.5555/1753235.1753250,
author = {Jepsen, Hans Peter and Beuche, Danilo},
title = {Running a software product line: standing still is going backwards},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {Danfoss Drives - one of the largest producers of frequency converters in the world - has been doing Software Product Line development for its frequency converter products for about 3 years. This paper describes the approach used and the experiences with it. It discusses processes, ways to convince the unconvinced and arising tool issues when doing product line development.This paper is a follow-up on a previous article which described the product line migration process in detail.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {101–110},
numpages = {10},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.1145/3382025.3414946,
author = {Fritsch, Claudia and Abt, Richard and Renz, Burkhardt},
title = {The benefits of a feature model in banking},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414946},
doi = {10.1145/3382025.3414946},
abstract = {This experience report describes the surprisingly beneficial introduction of feature modeling at KfW, a government promotional bank. On behalf of the government and based on promotional directives, KfW grants retail loans to small and medium enterprises, business founders, self-employed professionals, municipalities and private individuals. The promotional directives, called programs, define mandatory and optional properties of these loans. We have now successfully built a feature model from these properties.Our feature model will be presented with its outstanding characteristic, which is an additional subtree containing the programs as features. Complete and correct cross-tree constraints will also allow us to analyze and scope the portfolio, reduce complexity, and speed-up time-to-market. This is the advent of product line development at KfW.In order to standardize our portfolio, we have subsequently developed tools on top of the feature model, namely, a browser-based, multi-user configurator assisting non-technical-affine users in their product design, and a generator producing complete product documentation from the feature model and partial configurations. More applications are currently underway.This is our story of applying Software Product Line Engineering in banking, a domain where it is unusual or even unknown. We share our ideas, analyses, progress, and findings where the results have been thrilling us for the past two years and will continue to do so.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {9},
numpages = {11},
keywords = {document generation, experience report, feature modeling, mass customization, partial configuration, retail loans, software product line engineering},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@article{10.1109/MCI.2017.2670461,
author = {Ferreira, Thiago N. and Lima, Jackson A. Prado and Strickler, Andrei and Kuk, Josiel N. and Vergilio, Silvia R. and Pozo, Aurora},
title = {Hyper-Heuristic Based Product Selection for Software Product Line Testing},
year = {2017},
issue_date = {May 2017},
publisher = {IEEE Press},
volume = {12},
number = {2},
issn = {1556-603X},
url = {https://doi.org/10.1109/MCI.2017.2670461},
doi = {10.1109/MCI.2017.2670461},
abstract = {A Software Product Line (SPL) is defined as a set of software systems that share a common and managed set of features satisfying specific needs of a particular market segment or domain [1]. The SPL offers a number of common artifacts for building products, including mandatory and variable elements. SPL approaches have been adopted by many software companies1 to ease reuse and reduce time and production costs. A feature represents a functionality that is visible to the user and can be designed as a variability, which represents a variable functionality that may or may not be present in a product. On the other hand, mandatory features are common to all SPL products. To facilitate feature management, most SPL methodologies use the Feature Model (FM) [2] to represent all the SPL variabilities and commonalities.},
journal = {Comp. Intell. Mag.},
month = may,
pages = {34–45},
numpages = {12}
}

@inproceedings{10.1145/2556624.2556643,
author = {Fenske, Wolfram and Th\"{u}m, Thomas and Saake, Gunter},
title = {A taxonomy of software product line reengineering},
year = {2014},
isbn = {9781450325561},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2556624.2556643},
doi = {10.1145/2556624.2556643},
abstract = {In the context of single software systems, refactoring is commonly accepted to be the process of restructuring an existing body of code in order to improve its internal structure without changing its external behavior. This process is vital to the maintenance and evolution of software systems.Software product line engineering is a paradigm for the construction and customization of large-scale software systems. As systems grow in complexity and size, maintaining a clean structure becomes arguably more important. However, product line literature uses the term "refactoring" for such a wide range of reengineering activities that it has become difficult to see how these activities pertain to maintenance and evolution and how they are related.We improve this situation in the following way: i) We identify the dimensions along which product line reengineering occurs. ii) We derive a taxonomy that distinguishes and relates these reengineering activities. iii) We propose definitions for the three main branches of this taxonomy. iv) We classify a corpus of existing work.},
booktitle = {Proceedings of the 8th International Workshop on Variability Modelling of Software-Intensive Systems},
articleno = {4},
numpages = {8},
keywords = {reengineering, refactoring, software product lines, taxonomy},
location = {Sophia Antipolis, France},
series = {VaMoS '14}
}

@inproceedings{10.1145/2364412.2364425,
author = {Cordy, Maxime and Schobbens, Pierre-Yves and Heymans, Patrick and Legay, Axel},
title = {Towards an incremental automata-based approach for software product-line model checking},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364425},
doi = {10.1145/2364412.2364425},
abstract = {Most model-checking algorithms are based on automata theory. For instance, determining whether or not a transition system satisfies a Linear Temporal Logic (LTL) formula requires computing strongly connected component of its transition graph. In Software Product-Line (SPL) engineering, the model checking problem is more complex due to the huge amount of software products that may compose the line. Indeed, one has to determine the exact subset of those products that do not satisfy an intended property. Efficient dedicated verification methods have been recently developed to answer this problem. However, most of them does not allow incremental verification. In this paper, we introduce an automata-based incremental approach for SPL model checking. Our method makes use of previous results to determine whether or not the addition of conservative features (i.e., features that do not remove behaviour from the system) preserves the satisfaction of properties expressed in LTL. We provide a detailed description of the approach and propose algorithms that implement it. We discuss how our method can be combined with SPL dedicated verification methods, viz. Featured Transition Systems.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {74–81},
numpages = {8},
keywords = {model checking, modularity, software product lines},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@article{10.1016/j.infsof.2012.02.005,
author = {Thurimella, Anil Kumar and Bruegge, Bernd},
title = {Issue-based variability management},
year = {2012},
issue_date = {September, 2012},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {54},
number = {9},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2012.02.005},
doi = {10.1016/j.infsof.2012.02.005},
abstract = {Context: Variability management is a key activity in software product line engineering. This paper focuses on managing rationale information during the decision-making activities that arise during variability management. By decision-making we refer to systematic problem solving by considering and evaluating various alternatives. Rationale management is a branch of science that enables decision-making based on the argumentation of stakeholders while capturing the reasons and justifications behind these decisions. Objective: Decision-making should be supported to identify variability in domain engineering and to resolve variation points in application engineering. We capture the rationale behind variability management decisions. The captured rationale information is useful to evaluate future changes of variability models as well as to handle future instantiations of variation points. We claim that maintaining rationale will enhance the longevity of variability models. Furthermore, decisions should be performed using a formal communication between domain engineering and application engineering. Method: We initiate the novel area of issue-based variability management (IVM) by extending variability management with rationale management. The key contributions of this paper are: (i) an issue-based variability management methodology (IVMM), which combines questions, options and criteria (QOC) and a specific variability approach; (ii) a meta-model for IVMM and a process for variability management and (iii) a tool for the methodology, which was developed by extending an open source rationale management tool. Results: Rationale approaches (e.g. questions, options and criteria) guide distributed stakeholders when selecting choices for instantiating variation points. Similarly, rationale approaches also aid the elicitation of variability and the evaluation of changes. The rationale captured within the decision-making process can be reused to perform future decisions on variability. Conclusion: IVMM was evaluated comparatively based on an experimental survey, which provided evidence that IVMM is more effective than a variability modeling approach that does not use issues.},
journal = {Inf. Softw. Technol.},
month = sep,
pages = {933–950},
numpages = {18},
keywords = {Empirical software engineering, Product line engineering, Rationale management, Requirements engineering}
}

@inproceedings{10.1145/3461001.3471147,
author = {Kenner, Andy and May, Richard and Kr\"{u}ger, Jacob and Saake, Gunter and Leich, Thomas},
title = {Safety, security, and configurable software systems: a systematic mapping study},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471147},
doi = {10.1145/3461001.3471147},
abstract = {Safety and security are important properties of any software system, particularly in safety-critical domains, such as embedded, automotive, or cyber-physical systems. Moreover, particularly those domains also employ highly-configurable systems to customize variants, for example, to different customer requirements or regulations. Unfortunately, we are missing an overview understanding of what research has been conducted on the intersection of safety and security with configurable systems. To address this gap, we conducted a systematic mapping study based on an automated search, covering ten years (2011--2020) and 65 relevant (out of 367) publications. We classified each publication based on established security and safety concerns (e.g., CIA triad) as well as the connection to configurable systems (e.g., ensuring security of such a system). In the end, we found that considerably more research has been conducted on safety concerns, but both properties seem under-explored in the context of configurable systems. Moreover, existing research focuses on two directions: Ensuring safety and security properties in product-line engineering; and applying product-line techniques to ensure safety and security properties. Our mapping study provides an overview of the current state-of-the-art as well as open issues, helping practitioners identify existing solutions and researchers define directions for future research.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {148–159},
numpages = {12},
keywords = {configurable systems, mapping study, safety, security, software product line engineering},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.5555/2337223.2337501,
author = {Thao, Cheng},
title = {Managing evolution of software product line},
year = {2012},
isbn = {9781467310673},
publisher = {IEEE Press},
abstract = {In software product line engineering, core assets are shared among multiple products. Core assets and products generally evolve independently. Developers need to capture evolution in both contexts and to propagate changes in both directions between the core assets and the products. We propose a version control system to support product line engineering by supporting the evolution of product line, product derivation, and change propagation from core assets to products and vice versa.},
booktitle = {Proceedings of the 34th International Conference on Software Engineering},
pages = {1619–1621},
numpages = {3},
location = {Zurich, Switzerland},
series = {ICSE '12}
}

@inproceedings{10.1145/2851613.2851977,
author = {Kim, Jin Hyun and Legay, Axel and Traonouez, Louis-Marie and Acher, Mathieu and Kang, Sungwon},
title = {A formal modeling and analysis framework for software product line of preemptive real-time systems},
year = {2016},
isbn = {9781450337397},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2851613.2851977},
doi = {10.1145/2851613.2851977},
abstract = {This paper presents a formal analysis framework to analyze a family of platform products w.r.t. real-time properties. First, we propose an extension of the widely-used feature model, called Property Feature Model (PFM), that distinguishes features and properties explicitly Second, we present formal behavioral models of components of a real-time scheduling unit such that all real-time scheduling units implied by a PFM are automatically composed to be analyzed against the properties given by the PFM. We apply our approach to the verification of the schedulability of a family of scheduling units using the symbolic and statistical model checkers of Uppaal.},
booktitle = {Proceedings of the 31st Annual ACM Symposium on Applied Computing},
pages = {1562–1565},
numpages = {4},
keywords = {model checking, platform-constrained, scheduling systems, software product line engineering},
location = {Pisa, Italy},
series = {SAC '16}
}

@inproceedings{10.1145/3168365.3168373,
author = {Pereira, Juliana Alves and Schulze, Sandro and Krieter, Sebastian and Ribeiro, M\'{a}rcio and Saake, Gunter},
title = {A Context-Aware Recommender System for Extended Software Product Line Configurations},
year = {2018},
isbn = {9781450353984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3168365.3168373},
doi = {10.1145/3168365.3168373},
abstract = {Mass customization of standardized products has become a trend to succeed in today's market environment. Software Product Lines (SPLs) address this trend by describing a family of software products that share a common set of features. However, choosing the appropriate set of features that matches a user's individual interests is hampered due to the overwhelming amount of possible SPL configurations. Recommender systems can address this challenge by filtering the number of configurations and suggesting a suitable set of features for the user's requirements. In this paper, we propose a context-aware recommender system for predicting feature selections in an extended SPL configuration scenario, i.e. taking nonfunctional properties of features into consideration. We present an empirical evaluation based on a large real-world dataset of configurations derived from industrial experience in the Enterprise Resource Planning domain. Our results indicate significant improvements in the predictive accuracy of our context-aware recommendation approach over a state-of-the-art binary-based approach.},
booktitle = {Proceedings of the 12th International Workshop on Variability Modelling of Software-Intensive Systems},
pages = {97–104},
numpages = {8},
keywords = {Configuration, Feature Model, Non-Functional Properties, Recommender Systems, Software Product Lines},
location = {Madrid, Spain},
series = {VAMOS '18}
}

@article{10.1007/s00766-013-0165-8,
author = {Bagheri, Ebrahim and Ensan, Faezeh},
title = {Dynamic decision models for staged software product line configuration},
year = {2014},
issue_date = {June      2014},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {19},
number = {2},
issn = {0947-3602},
url = {https://doi.org/10.1007/s00766-013-0165-8},
doi = {10.1007/s00766-013-0165-8},
abstract = {Software product line engineering practices offer desirable characteristics such as rapid product development, reduced time-to-market, and more affordable development costs as a result of systematic representation of the variabilities of a domain of discourse that leads to methodical reuse of software assets. The development lifecycle of a product line consists of two main phases: domain engineering, which deals with the understanding and formally modeling of the target domain, and application engineering that is concerned with the configuration of a product line into one concrete product based on the preferences and requirements of the stakeholders. The work presented in this paper focuses on the application engineering phase and builds both the theoretical and technological tools to assist the stakeholders in (a) understanding the complex interactions of the features of a product line; (b) eliciting the utility of each feature for the stakeholders and hence exposing the stakeholders' otherwise implicit preferences in a way that they can more easily make decisions; and (c) dynamically building a decision model through interaction with the stakeholders and by considering the structural characteristics of software product line feature models, which will guide the stakeholders through the product configuration process. Initial exploratory empirical experiments that we have performed show that our proposed approach for helping stakeholders understand their feature preferences and its associated staged feature model configuration process is able to positively impact the quality of the end results of the application engineering process within the context of the limited number of participants. In addition, it has been observed that the offered tooling support is able to ease the staged feature model configuration process.},
journal = {Requir. Eng.},
month = jun,
pages = {187–212},
numpages = {26},
keywords = {Feature models, Software product lines, Stakeholder preferences, Utility elicitation}
}

@inproceedings{10.1145/2944165.2944171,
author = {Ali, Mohamed and Nasr, Eman S. and Gheith, Mervat H.},
title = {A Requirements Elicitation Approach for Cloud Based Software Product Line ERPs},
year = {2016},
isbn = {9781450342933},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2944165.2944171},
doi = {10.1145/2944165.2944171},
abstract = {Implementing Enterprise Resource Planning (ERP) systems in business organizations aims to integrate all business units of an organization. Configuring and customizing ERP systems are the main challenges that face the implementation process. ERP systems contain many similar modules and units which can be implemented for most of the ERP systems. Software Product Lines (SPLs) as a trend in software engineering is very promising, as it can offer a lot of facilities and benefits for all types of stakeholders. Building SPLs for ERP systems will affect the implementation process of ERP systems and will increase the flexibility of configuration and customization. Moreover, moving ERPs to the cloud will facilitate the implementation process and will affect the Return On Investment (ROI) due to scalability plans in cloud services. This research introduces an SPLs requirements elicitation approach for cloud ERP systems. This approach combines the principles of SPLs with ERP systems in the cloud environment.},
booktitle = {Proceedings of the 2nd Africa and Middle East Conference on Software Engineering},
pages = {34–39},
numpages = {6},
keywords = {ERP customization, SaaS, Software product line, cloud computing, ecosystems, enterprise resource planning, requirements elicitation, systematic reuse},
location = {Cairo, Egypt},
series = {AMECSE '16}
}

@inproceedings{10.1145/2814204.2814212,
author = {Seidl, Christoph and Schuster, Sven and Schaefer, Ina},
title = {Generative software product line development using variability-aware design patterns},
year = {2015},
isbn = {9781450336871},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2814204.2814212},
doi = {10.1145/2814204.2814212},
abstract = {Software Product Lines (SPLs) are an approach to reuse in-the-large that models a set of closely related software systems in terms of commonalities and variabilities. Design patterns are best practices for addressing recurring design problems in object-oriented source code. In the practice of implementing an SPL, instances of certain design patterns are employed to handle variability, which makes these "variability-aware design patterns" a best practice for SPL design. However, there currently is no dedicated method for proactively developing SPL using design patterns suitable for realizing variable functionality. In this paper, we present a method to perform generative SPL development with design patterns. We use role models to capture design patterns and their relation to a variability model. We further allow mapping of individual design pattern roles to elements of realization artifacts to be generated (e.g., classes, methods) and check the conformance of the realization with the specification of the pattern. With this method, we support proactive development of SPL using design patterns to apply best practices for the realization of variability. We present an implementation of our approach within the Eclipse IDE and demonstrate it within a case study.},
booktitle = {Proceedings of the 2015 ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences},
pages = {151–160},
numpages = {10},
keywords = {Design Pattern, Generative Development, Role Modeling, Software Product Line (SPL)},
location = {Pittsburgh, PA, USA},
series = {GPCE 2015}
}

@inproceedings{10.1145/3382025.3414947,
author = {Assun\c{c}\~{a}o, Wesley K. G. and Acher, Mathieu and Ziadi, Tewfik and Martinez, Jabier},
title = {REVE 2020: 8th International Workshop on Reverse Variability Engineering},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414947},
doi = {10.1145/3382025.3414947},
abstract = {Software Product Line (SPL) migration remains a challenging endeavour. From organizational issues to purely technical challenges, there is a wide range of barriers that complicates SPL adoption. This workshop aims to foster research about making the most of the two main inputs for SPL migration: 1) domain knowledge and 2) legacy assets. Domain knowledge, usually implicit and spread across an organization, is key to define the SPL scope and to validate the variability model and its semantics. At the technical level, domain expertise is also needed to create or extract the reusable software components. Legacy assets can be, for instance, similar product variants (e.g., requirements, models, source code, etc.) that were implemented using ad-hoc reuse techniques such as clone-and-own. More generally, the workshop REverse Variability Engineering attracts researchers and practitioners contributing to processes, techniques, tools, or empirical studies related to the automatic, semi-automatic or manual extraction or refinement of SPL assets.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {35},
numpages = {1},
keywords = {extractive software product line adoption, reverse engineering, software product lines, variability management},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/2816839.2816850,
author = {Lahiani, Nesrine and Bennouar, Djamal},
title = {A Model Driven Approach to Derive e-Learning Applications in Software Product Line},
year = {2015},
isbn = {9781450334587},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2816839.2816850},
doi = {10.1145/2816839.2816850},
abstract = {Platforms such as Moodle aims to ease and improve the teaching-learning process by means of taking advantage of internet technologies. All existing e-learning platforms are pretty similar the concepts of activity, assignment, deliverable or grade. But also a wide range of differences among them exists. Software Product Line (SPL) has as goal the effective production of similar software systems.. Product derivation represents a fundamental aspect in SPL. It is also the main challenge that SPL faces. Despite its importance, there is only a little research on product derivation compared to the large work on developing product lines. In addition, the few available research reports guidance about how to derive a product from a product line. In this paper we describe a combination of SPL and MDA which both fit perfectly together in order to build applications in cost effective way. We proposed an approach for product derivation that adopts MDA with its organized layers of models to achieve SPL goals.},
booktitle = {Proceedings of the International Conference on Intelligent Information Processing, Security and Advanced Communication},
articleno = {78},
numpages = {6},
keywords = {Model Driven Architecture, Product Derivation, Software Product Line, e-learning},
location = {Batna, Algeria},
series = {IPAC '15}
}

@inproceedings{10.1145/3001867.3001872,
author = {Lity, Sascha and Kowal, Matthias and Schaefer, Ina},
title = {Higher-order delta modeling for software product line evolution},
year = {2016},
isbn = {9781450346474},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3001867.3001872},
doi = {10.1145/3001867.3001872},
abstract = {In software product lines (SPL), i.e., a family of similar software systems sharing common and variable artifacts, modeling evolution and reasoning about it is challenging, as not only a single system, but rather a set of system variants as well as their interdependencies change. An integrated modeling formalism for variability and evolution is required to allow the capturing of evolution operations that are applied to SPL artifacts, and to facilitate the impact analysis of evolution on the artifact level. Delta modeling is a flexible transformational variability modeling approach, where the variability and commonality between variants are explicitly documented and analyzable by means of transformations modeled as deltas. In this paper, we lift the notion of delta modeling to capture both, variability and evolution, by deltas. We evolve a delta model specifying a set of variants by applying higher-order deltas. A higher-order delta encapsulates evolution operations, i.e., additions, removals, or modifications of deltas, and transforms a delta model in its new version. In this way, we capture the complete evolution history of delta-oriented SPLs by higher-order delta models. By analyzing each higher-order delta application, we are further able to reason about the impact and, thus, the changes to the specified set of variants. We prototypically implement our formalism and show its applicability using a system from the automation engineering domain.},
booktitle = {Proceedings of the 7th International Workshop on Feature-Oriented Software Development},
pages = {39–48},
numpages = {10},
keywords = {Delta Modeling, Software Evolution, Software Product Lines},
location = {Amsterdam, Netherlands},
series = {FOSD 2016}
}

@inproceedings{10.5555/1753235.1753294,
author = {Voelter, Markus},
title = {Using domain specific languages for product line engineering},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {Domain specific languages together with code generation or interpreters (a.k.a. model driven development) are becoming more and more important. Since there is a certain overhead involved in building languages and processors, this approach is especially useful in environments where a specific set of languages and generators can be reused many times. Product lines are such an environment. Consequently, the use of DSLs for SPLE is becoming more relevant.However, to exploit DSLs in the context of product lines there is more than just defining and using languages. This tutorial explains the differences as well as commonalities between MDD and in SPLE and shows how the two approaches can be combined. Topics include when to use configuration over customization, how to combine domain specific languages and feature modeling, and how to build variability into code generators as an additional means of implementing variability.All the concepts will be illustrated with open source tools based on Eclipse.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {329},
numpages = {1},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.5555/1753235.1753247,
author = {Chen, Lianping and Ali Babar, Muhammad and Ali, Nour},
title = {Variability management in software product lines: a systematic review},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {Variability Management (VM) in Software Product Line (SPL) is a key activity that usually affects the degree to which a SPL is successful. SPL community has spent huge amount of resources on developing various approaches to dealing with variability related challenges over the last decade. To provide an overview of different aspects of the proposed VM approaches, we carried out a systematic literature review of the papers reporting VM in SPL. This paper presents and discusses the findings from this systematic literature review. The results reveal the chronological backgrounds of various approaches over the history of VM research, and summarize the key issues that drove the evolution of different approaches. This study has also identified several gaps that need to be filled by future efforts in this line of research.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {81–90},
numpages = {10},
keywords = {software product lines, systematic reviews, variability management},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.1145/2695664.2695797,
author = {Tizzei, Leonardo P. and Azevedo, Leonardo G. and de Bayser, Maximilien and Cerqueira, Renato F. G.},
title = {Architecting cloud tools using software product line techniques: an exploratory study},
year = {2015},
isbn = {9781450331968},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2695664.2695797},
doi = {10.1145/2695664.2695797},
abstract = {Multitenant cloud computing tools are usually complex and have to manage variabilities to support customization. Software Product Line (SPL) techniques have been successfully applied in the industry to manage variability in complex systems. However, few works in the literature discuss the application of SPL techniques to architect industry cloud computing tools, resulting in a lack of support to cloud architects on how to apply such techniques. This work presents how software product line techniques can be applied for architecting cloud tools, and discusses the benefits, drawbacks, and some challenges of applying such techniques to develop a real industry cloud tool, named as Installation Service.},
booktitle = {Proceedings of the 30th Annual ACM Symposium on Applied Computing},
pages = {1441–1448},
numpages = {8},
location = {Salamanca, Spain},
series = {SAC '15}
}

@article{10.4018/ijkss.2014100102,
author = {Tian, Kun},
title = {Adding More Agility to Software Product Line Methods: A Feasibility Study on Its Customization Using Agile Practices},
year = {2014},
issue_date = {October 2014},
publisher = {IGI Global},
address = {USA},
volume = {5},
number = {4},
issn = {1947-8208},
url = {https://doi.org/10.4018/ijkss.2014100102},
doi = {10.4018/ijkss.2014100102},
abstract = {Software Product Line Methods SPLMs have been continuously gaining attention, especially in practice, for on one hand, they address diverse market needs while controlling costs by planned systematic reuse in core assets development domain engineering, and on another hand, they reduce products' time-to-market, achieving a certain level of agility in product development application engineering. More cost-effective and agile as they are than traditional development methods for producing families of similar products, SPLMs still seem to be heavy weight in nature. In SPLMs, significant up-front commitments are involved in development of a flexible product platform, which will be modified into a range of products sharing common features. Agile Methods AMs share similar goals with SPLMs, e.g., on rapidly delivering high quality software that meets the changing needs of stakeholders. However, they appear to differ significantly practices. The purpose of this work is to compare Agile and Software Product line approaches from fundamental goals/principles, engineering, software quality assurance, sand project management perspectives, etc. The results of the study can be used to determine the feasibility of tailoring a software product line approach with Agile practices, resulting in a lighter-weight approach that provides mass customization, reduced time-to-market, and improved customer satisfaction.},
journal = {Int. J. Knowl. Syst. Sci.},
month = oct,
pages = {17–34},
numpages = {18},
keywords = {Agile Methods AMs, Customer Satisfaction, Software Product Line Methods SPLMs, Time-To-Market}
}

@inproceedings{10.5555/2819009.2819208,
author = {Klewerton, Wesley and Assun\c{c}\~{a}o, Guez},
title = {Search-based migration of model variants to software product line architectures},
year = {2015},
publisher = {IEEE Press},
abstract = {Software Product Lines (SPLs) are families of related software systems developed for specific market segments or domains. Commonly, SPLs emerge from sets of existing variants when their individual maintenance becomes infeasible. However, current approaches for SPL migration do not support design models, are partially automated, or do not reflect constraints from SPL domains. To tackle these limitations, the goal of this doctoral research plan is to propose an automated approach to the SPL migration process at the design level. This approach consists of three phases: detection, analysis and transformation. It uses as input the class diagrams and lists of features for each system variant, and relies on search-based algorithms to create a product line architecture that best captures the variability present in the variants. Our expected contribution is to support the adoption of SPL practices in companies that face the scenario of migrating variants to SPLs.},
booktitle = {Proceedings of the 37th International Conference on Software Engineering - Volume 2},
pages = {895–898},
numpages = {4},
keywords = {migration, re-engineering, reuse, search-based software engineering, software product line},
location = {Florence, Italy},
series = {ICSE '15}
}

@inproceedings{10.5555/1145675.1145695,
author = {Berg, Kathrin and Bishop, Judith and Muthig, Dirk},
title = {Tracing software product line variability: from problem to solution space},
year = {2005},
isbn = {1595932585},
publisher = {South African Institute for Computer Scientists and Information Technologists},
address = {ZAF},
abstract = {The management of variability plays an important role in successful software product line engineering. There is a need for a universal variability management approach to be consistent and scalable; it should provide traceability between variations at different levels of abstraction and across various generic development artifacts; and there should be a means for visualizing variability. Focusing specifically on the aspect of traceability in the context of such an approach, we define a conceptual variability model that captures variability information in a third dimension, and allows a 1-to-1 mapping of variability between the problem space and the solution space. Decision models, of which the feature model is most popular, are commonly used for, amongst others, managing traceability of variation. These, however, usually reside in a two dimensional space. We analyze the feature model in a small case study with regards to our conceptual variability model, and present our findings.},
booktitle = {Proceedings of the 2005 Annual Research Conference of the South African Institute of Computer Scientists and Information Technologists on IT Research in Developing Countries},
pages = {182–191},
numpages = {10},
keywords = {software product line engineering, traceability, variability management},
location = {White River, South Africa},
series = {SAICSIT '05}
}

@inproceedings{10.1145/3461002.3473951,
author = {Morais Ferreira, David and Tenev, Vasil L. and Becker, Martin},
title = {Product-line analysis cookbook: a classification system for complex analysis toolchains},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473951},
doi = {10.1145/3461002.3473951},
abstract = {Adopting Product Line Engineering (PLE) approaches in the context of software-intensive systems reduces overall development and maintenance costs, reduces time to market and leads to an overall improvement in product quality. The Software and System Product Line (SPL) community has provided a large number of different analysis approaches and tools, which were developed in different contexts, answer different questions, and can contribute to the fulfillment of different analysis goals. Typically, these analysis tools are initially developed as part of a research study, where they serve a specific purpose, e. g. for investigating the use of a new technology, or to demonstrate the transfer of methods from other fields. Generally, such purpose is aligned with a specific, but not explicitly stated, high-level goal. The pursuit of these goals requires holistic approaches, i. e. integrated toolchains and classification of analyses, which are documented as a centralized collection of wisdom. Therefore, we propose a classification system which describes existing analyses and reveals possible combinations, i. e. integrated toolchains, and provide first examples. This method supports the search for toolchains which address complex industrial needs. With the support of the SPL community, we hope to collaboratively document existing analyses and corresponding goals on an open platform.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {99–104},
numpages = {6},
keywords = {holistic toolchain, product line engineering, product-line aware analyses, reverse engineering},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1109/SPLC.2011.25,
author = {Voelter, Markus and Visser, Eelco},
title = {Product Line Engineering Using Domain-Specific Languages},
year = {2011},
isbn = {9780769544878},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SPLC.2011.25},
doi = {10.1109/SPLC.2011.25},
abstract = {This paper investigates the application of domain-specific languages in product line engineering (PLE). We start by analyzing the limits of expressivity of feature models. Feature models correspond to context-free grammars without recursion, which prevents the expression of multiple instances and references. We then show how domain-specific languages (DSLs) can serve as a middle ground between feature modeling and programming. They can be used in cases where feature models are too limited, while keeping the separation between problem space and solution space provided by feature models. We then categorize useful combinations between configuration with feature model and construction with DSLs and provide an integration of DSLs into the conceptual framework of PLE. Finally we show how use of a consistent, unified formalism for models, code, and configuration can yield important benefits for managing variability and trace ability. We illustrate the concepts with several examples from industrial case studies.},
booktitle = {Proceedings of the 2011 15th International Software Product Line Conference},
pages = {70–79},
numpages = {10},
series = {SPLC '11}
}

@inproceedings{10.1145/2364412.2364459,
author = {Lee, Hyesun and Yang, Jin-seok and Kang, Kyo C.},
title = {VULCAN: architecture-model-based workbench for product line engineering},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364459},
doi = {10.1145/2364412.2364459},
abstract = {Adaptability and reusability are important quality attributes for software targeted for global market due to diverse market needs, ever increasing number of features, rapidly changing technologies, and various laws/standards of different countries. In response to these requirements, software development organizations are interested in product line engineering and searching for support tools. However, most of the existing tools for supporting product line engineering focus only on providing mechanisms for instantiating products without adequately supporting development of software assets that are adaptable and reusable.To address this problem, we provide a CASE tool, called VULCAN, that provides architecture models/patterns that are adaptable/reusable and also supports mechanisms for instantiating products from assets. We have applied VULCAN to various product lines including glucose management systems and elevator control systems, and we could experience that maintainability of the assets has improved substantially because a large portion of the assets are specifications rather than low-level code and product-specific code is generated from the specifications.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {260–264},
numpages = {5},
keywords = {architecture-model-based, feature-oriented, software product line},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@article{10.1016/j.infsof.2012.09.007,
author = {Guana, Victor and Correal, Dario},
title = {Improving software product line configuration: A quality attribute-driven approach},
year = {2013},
issue_date = {March, 2013},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {55},
number = {3},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2012.09.007},
doi = {10.1016/j.infsof.2012.09.007},
abstract = {Context: During the definition of software product lines (SPLs) it is necessary to choose the components that appropriately fulfil a product's intended functionalities, including its quality requirements (i.e., security, performance, scalability). The selection of the appropriate set of assets from many possible combinations is usually done manually, turning this process into a complex, time-consuming, and error-prone task. Objective: Our main objective is to determine whether, with the use of modeling tools, we can simplify and automate the definition process of a SPL, improving the selection process of reusable assets. Method: We developed a model-driven strategy based on the identification of critical points (sensitivity points) inside the SPL architecture. This strategy automatically selects the components that appropriately match the product's functional and quality requirements. We validated our approach experimenting with different real configuration and derivation scenarios in a mobile healthcare SPL where we have worked during the last three years. Results: Through our SPL experiment, we established that our approach improved in nearly 98% the selection of reusable assets when compared with the unassisted analysis selection. However, using our approach there is an increment in the time required for the configuration corresponding to the learning curve of the proposed tools. Conclusion: We can conclude that our domain-specific modeling approach significantly improves the software architect's decision making when selecting the most suitable combinations of reusable components in the context of a SPL.},
journal = {Inf. Softw. Technol.},
month = mar,
pages = {541–562},
numpages = {22},
keywords = {Domain specific modeling, Model driven - software product lines, Quality evaluation, Sensitivity points, Software architecture, Variability management}
}

@article{10.1007/s10009-015-0386-x,
author = {Gnesi, Stefania and Jarzabek, Stan},
title = {Special section on the 17th International Software Product Line Conference},
year = {2015},
issue_date = {October   2015},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {17},
number = {5},
issn = {1433-2779},
url = {https://doi.org/10.1007/s10009-015-0386-x},
doi = {10.1007/s10009-015-0386-x},
abstract = {Today, companies develop, maintain and deploy families of similar software products (e.g., games for different models of smartphones) rather than a single product. Software product lines engineering refers to software engineering methods, tools and techniques for creating a collection of similar software systems from a shared set of software assets using a common means of production. Software Product Line Conferences started in 1996, as the premier forum for practitioners, researchers and educators to present and discuss the most recent ideas, innovations, trends, experiences, and concerns in the area of software product lines, software product family engineering and, more recently, systems family engineering, managing families of software products as a whole rather than each family member individually. This special section stems from the 17th SPL Conference held in Tokyo, Japan, in August 2013. The contributions to this special section are further elaborations of the papers presented at the conference.},
journal = {Int. J. Softw. Tools Technol. Transf.},
month = oct,
pages = {555–557},
numpages = {3},
keywords = {Software Engineering, Software Product Lines}
}

@article{10.1016/j.infsof.2012.06.014,
author = {Andersson, Henric and Herzog, Erik and \"{O}Lvander, Johan},
title = {Experience from model and software reuse in aircraft simulator product line engineering},
year = {2013},
issue_date = {March, 2013},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {55},
number = {3},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2012.06.014},
doi = {10.1016/j.infsof.2012.06.014},
abstract = {Context: ''Reuse'' and ''Model Based Development'' are two prominent trends for improving industrial development efficiency. Product lines are used to reduce the time to create product variants by reusing components. The model based approach provides the opportunity to enhance knowledge capture for a system in the early stages in order to be reused throughout its lifecycle. This paper describes how these two trends are combined to support development and support of a simulator product line for the SAAB 39 Gripen fighter aircraft. Objective: The work aims at improving the support (in terms of efficiency and quality) when creating simulation model configurations. Software based simulators are flexible so variants and versions of included models may easily be exchanged. The objective is to increase the reuse when combining models for usage in a range of development and training simulators. Method: The research has been conducted with an interactive approach using prototyping and demonstrations, and the evaluation is based on an iterative and a retrospective method. Results: A product line of simulator models for the SAAB 39 Gripen aircraft has been analyzed and defined in a Product Variant Master. A configurator system has been implemented for creation, integration, and customization of stringent simulator model configurations. The system is currently under incorporation in the standard development process at SAAB Aeronautics. Conclusion: The explicit and visual description of products and their variability through a configurator system enables better insights and a common understanding so that collaboration on possible product configurations improves and the potential of software reuse increases. The combination of application fields imposes constraints on how traditional tools and methods may be utilized. Solutions for Design Automation and Knowledge Based Engineering are available, but their application has limitations for Software Product Line engineering and the reuse of simulation models.},
journal = {Inf. Softw. Technol.},
month = mar,
pages = {595–606},
numpages = {12},
keywords = {Configurator, Knowledge Based Engineering, Model Based Development, PDM, SPL, Software Product Line}
}

@inproceedings{10.1145/1629716.1629720,
author = {Chae, Wonseok and Blume, Matthias},
title = {Language support for feature-oriented product line engineering},
year = {2009},
isbn = {9781605585673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1629716.1629720},
doi = {10.1145/1629716.1629720},
abstract = {Product line engineering is an emerging paradigm of developing a family of products. While product line analysis and design mainly focus on reasoning about commonality and variability of family members, product line implementation gives its attention to mechanisms of managing variability. In many cases, however, product line methods do not impose any specific synthesis mechanisms on product line implementation, so implementation details are left to developers. In our previous work, we adopted feature-oriented product line engineering to build a family of compilers and managed variations using the Standard ML module system. We demonstrated the applicability of this module system to product line implementation. Although we have benefited from the product line engineering paradigm, it mostly served us as a design paradigm to change the way we think about a set of closely related compilers, not to change the way we build them. The problem was that Standard ML did not fully realize this paradigm at the code level, which caused some difficulties when we were developing a set of compilers.In this paper, we address such issues with a language-based solution. MLPolyR is our choice of an implementation language. It supports three different programming styles. First, its first-class cases facilitate composable extensions at the expression levels. Second, its module language provides extensible and parameterized modules, which make large-scale extensible programming possible. Third, its macro system simplifies specification and composition of feature related code. We will show how the combination of these language features work together to facilitate the product line engineering paradigm.},
booktitle = {Proceedings of the First International Workshop on Feature-Oriented Software Development},
pages = {3–10},
numpages = {8},
keywords = {feature-oriented programming, product line engineering},
location = {Denver, Colorado, USA},
series = {FOSD '09}
}

@inproceedings{10.1145/2889443.2889451,
author = {Cafeo, Bruno B. P. and Hunsen, Claus and Garcia, Alessandro and Apel, Sven and Lee, Jaejoon},
title = {Segregating feature interfaces to support software product line maintenance},
year = {2016},
isbn = {9781450339957},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2889443.2889451},
doi = {10.1145/2889443.2889451},
abstract = {Although software product lines are widely used in practice, their maintenance is challenging. Features as units of behaviour can be heavily scattered across the source code of a product line, hindering modular reasoning. To alleviate this problem, feature interfaces aim at enhancing modular reasoning about features. However, considering all members of a feature interface is often cumbersome, especially due to the large number of members arising in practice. To address this problem, we present an approach to group members of a feature interface based on their mutual dependencies. We argue that often only a subset of all interface members is relevant to a maintenance task. Therefore, we propose a graph representation that is able to capture the collaboration between members and apply a clustering algorithm to it to group highly-related members and segregate non-related members. On a set of ten versions of a real-world product line, we evaluate the effectiveness of our approach, by comparing the two types of feature interfaces (segregated vs. original interfaces) with co-change information from the version-control system. We found a potential reduction of 62% of the interface members to be considered during maintenance. This way, the effort to reason about features can be reduced.},
booktitle = {Proceedings of the 15th International Conference on Modularity},
pages = {1–12},
numpages = {12},
keywords = {Feature Dependencies, Feature Interface, Software Product Lines},
location = {M\'{a}laga, Spain},
series = {MODULARITY 2016}
}

@inproceedings{10.1109/SBCARS.2013.13,
author = {Pereira, Juliana Alves and Souza, Carlos and Figueiredo, Eduardo and Abilio, Ramon and Vale, Gustavo and Costa, Heitor Augustus Xavier},
title = {Software Variability Management: An Exploratory Study with Two Feature Modeling Tools},
year = {2013},
isbn = {9781479925315},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SBCARS.2013.13},
doi = {10.1109/SBCARS.2013.13},
abstract = {Software Product Line (SPL) is becoming widely adopted in industry due to its capability of minimizing costs and improving quality of software systems through systematic reuse of software artifacts. An SPL is a set of software systems sharing a common, managed set of features that satisfies the specific needs of a particular market segment. A feature represents an increment in functionality relevant to some stakeholders. There are several tools to support variability management by modeling features in SPL. However, it is hard for a developer to choose the most appropriate feature modeling tool due to the several options available. This paper presents the results of an exploratory study aiming to support SPL engineers choosing the feature modeling tool that best fits their needs. This exploratory study compares and analyzes two feature modeling tools, namely FeatureIDE and SPLOT, based on data from 56 participants that used the analyzed tools. In this study, we performed a four-dimension qualitative analysis with respect to common functionalities provided by feature modeling tools: (i) Feature Model Editor, (ii) Automated Analysis of Feature Models, (iii) Product Configuration, and (iv) Tool Notation. The main issues we observed in SPLOT are related to its interface. FeatureIDE, on the other hand, revealed some constraints when creating feature models.},
booktitle = {Proceedings of the 2013 VII Brazilian Symposium on Software Components, Architectures and Reuse},
pages = {20–29},
numpages = {10},
keywords = {FeatureIDE, SPLOT, feature models, software product line},
series = {SBCARS '13}
}

@inproceedings{10.1145/3167132.3167350,
author = {Fischer, Stefan and Lopez-Herrejon, Roberto Erick and Egyed, Alexander},
title = {Towards a fault-detection benchmark for evaluating software product line testing approaches},
year = {2018},
isbn = {9781450351911},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3167132.3167350},
doi = {10.1145/3167132.3167350},
abstract = {Software Product Lines (SPLs) are families of related software systems distinguished by the set of features each one provides. The commonly large number of variants that can be derived from an SPL poses a unique set of challenges, because it is not feasible to test all the individual variants. Over the last few years many approaches for SPL testing have been devised. They usually select a set of variants to test based on some covering criterion. A problem when evaluating these testing approaches is properly comparing them to one another. Even though some benchmarks have been proposed, they focus on covering criteria and do not consider fault data in their analysis. Considering the dire lack of publicly available fault data, in this paper we present the first results of our ongoing project to introduce simulated faults into SPLs along with using evolutionary techniques for synthesizing unit test cases for SPL examples.},
booktitle = {Proceedings of the 33rd Annual ACM Symposium on Applied Computing},
pages = {2034–2041},
numpages = {8},
keywords = {mutation testing, software product lines},
location = {Pau, France},
series = {SAC '18}
}

@article{10.1016/j.jss.2016.01.039,
author = {Mariani, Thain\'{a} and Elita Colanzi, Thelma and Regina Vergilio, Silvia},
title = {Preserving architectural styles in the search based design of software product line architectures},
year = {2016},
issue_date = {May 2016},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {115},
number = {C},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2016.01.039},
doi = {10.1016/j.jss.2016.01.039},
abstract = {This paper presents search operators for layered and client/server architectures.The goal is to preserve the style of a PLA in a search based optimization approach.A representation for layered and client/server PLAs in a class diagram is presented.Rules for each style based on their representation are defined.The operators preserved the styles and contributed to improve quantitative results. Architectural styles help to improve the Product Line Architecture (PLA) design by providing a better organization of its elements, which results in some benefits, like flexibility, extensibility and maintainability. The PLA design can also be improved by using a search based optimization approach, taking into account different metrics, such as cohesion, coupling and feature modularization. However, the application of search operators changes the PLA organization, and consequently may violate the architectural styles rules, impacting negatively in the architecture understanding. To overcome such limitation, this work introduces a set of search operators to be used in the search based design with the goal of preserving the architectural styles during the optimization process. Such operators consider rules of the layered and client/server architectural styles, generally used in the search based design of conventional architectures and PLAs. The operators are implemented and evaluated in the context of MOA4PLA, a Multi-objective Optimization Approach for PLA Design. Results from an empirical evaluation show that the proposed operators contribute to obtain better solutions, preserving the adopted style and also improving some software metric values.},
journal = {J. Syst. Softw.},
month = may,
pages = {157–173},
numpages = {17},
keywords = {Architectural style, Search based design, Software product line}
}

@inproceedings{10.1109/SEAA.2010.14,
author = {Filho, Sindolfo Miranda and Mariano, Heitor and Kulesza, Uira and Batista, Thais},
title = {Automating Software Product Line Development: A Repository-Based Approach},
year = {2010},
isbn = {9780769541709},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SEAA.2010.14},
doi = {10.1109/SEAA.2010.14},
abstract = {Component-based software engineering (CBSE) focuses on the reuse of already available software assets aiming better productivity and quality. By adopting software product line (SPL) practices, an organization is able to develop a family of products, each one targeting a particular market segment or platform. In this context, this paper presents a repository that allows the management of CBSE and SPL assets and the automated product derivation. Our SPL repository supports registration of several SPLs and their related feature models, reference architectures and components. Furthermore, the proposed work provides an application assembly mechanism where users select features and the repository selects the architecture and the set of assets allowing product derivation. In order to verify the feasibility of our approach, we apply it to the variability management of a Digital TV middleware.},
booktitle = {Proceedings of the 2010 36th EUROMICRO Conference on Software Engineering and Advanced Applications},
pages = {141–144},
numpages = {4},
keywords = {Component-based software development, Ginga middleware, Software Product Line},
series = {SEAA '10}
}

@inproceedings{10.1145/2791060.2791065,
author = {Gregg, Susan P. and Scharadin, Rick and Clements, Paul},
title = {The more you do, the more you save: the superlinear cost avoidance effect of systems product line engineering},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791065},
doi = {10.1145/2791060.2791065},
abstract = {Product lines that use automated tools to configure shared assets (e.g., software or requirements or test cases or user documentation) based on product descriptions have long been known to bring about substantial development cost avoidance when compared to clone-and-own or product-specific development techniques. Now, however, it can be shown that the cost avoidance for configuring multiple shared assets is superlinear -- that is, the overall cost avoidance exceeds the sum of the that brought about by working with each of the shared assets in isolation. That is, a product line that configures (for example) requirements and code will avoid more cost than the sum of code-based plus requirements-based cost avoidance. In addition, we also observe a superlinear effect in terms of the number of products in the portfolio as well. This paper explores why these effects occur, and presents analytical and empirical evidence for their existence from one of the largest and most successful product lines in the literature, the AEGIS Weapon System. The result may lead to new insight into the economics of product line engineering in the systems engineering realm.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {303–310},
numpages = {8},
keywords = {AEGIS, feature modeling, product configurator, product derivation, product line economics, product line engineering, product line measurement, second generation product line engineering, systems and software product lines, variation points},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1109/CEC.2018.8477803,
author = {Luiz Jakubovski Filho, Helson and Nascimento Ferreira, Thiago and Regina Vergilio, Silvia},
title = {Incorporating User Preferences in a Software Product Line Testing Hyper-Heuristic Approach},
year = {2018},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/CEC.2018.8477803},
doi = {10.1109/CEC.2018.8477803},
abstract = {To perform the variability testing of Software Product Lines (SPLs) a set of products, represented in the Feature Model (FM), should be selected. Such selection is impacted by conflicting factors and has been efficiently solved by Evolutionary Multi-objective Algorithms in combination with hyper-heuristics. However, many times there is a cost budget or coverage level to be satisfied during the test, which are difficult to be incorporated as objective functions. Due to this, the choice of the best solution to be used in practice is not always easy. To deal with this situation, this paper introduces a preference-based hyper-heuristic approach to solve this problem. The approach implements the preference-based algorithm r-NSGA-II working with the random and FRRMAB selection methods. This last one uses a reward function based on r-dominance concept that takes into consideration a Reference Point provided by the tester. Our approach outperforms existing approaches, as well as the traditional algorithm r-NSGA-II, generating a reduced number of non-interesting solutions from the tester's point of view, that is, considering the provided Region of Interest (ROI).},
booktitle = {2018 IEEE Congress on Evolutionary Computation (CEC)},
pages = {1–8},
numpages = {8},
location = {Rio de Janeiro, Brazil}
}

@inproceedings{10.1145/3275245.3276245,
author = {de Pontes, Erick Sharlls Ramos and Kulesza, Uir\'{a} and Silva, Carlos Eduardo da and Adachi, Eiji and Cirilo, Elder},
title = {Extracting and Evolving a Software Product Line from Existing Web-based Systems: An Experience Report},
year = {2018},
isbn = {9781450365659},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3275245.3276245},
doi = {10.1145/3275245.3276245},
abstract = {This paper presents an experience report of extraction and evolution of software product lines (SPLs) from existing web-based systems. We describe the activities to succesfully refactor and evolve an web-based system of management of university rooms and laboratories by promoting the management and modularization of their variabilities. Several lessons learned are derived from that experience, includying the proposal of a method for the extraction and evolution of SPLs, as well as strategies for variability refactoring.},
booktitle = {Proceedings of the XVII Brazilian Symposium on Software Quality},
pages = {259–268},
numpages = {10},
keywords = {Extractive and reactive strategies, Software evolution, Software product lines},
location = {Curitiba, Brazil},
series = {SBQS '18}
}

@inproceedings{10.1007/978-3-319-13365-2_20,
author = {Rahman, Musfiqur and Ripon, Shamim},
title = {Using Bayesian Networks to Model and Analyze Software Product Line Feature Model},
year = {2014},
isbn = {9783319133645},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-319-13365-2_20},
doi = {10.1007/978-3-319-13365-2_20},
abstract = {Proper management of requirements plays a significant role in the successful development of any software product family. Application of AI, Bayesian Network (BN) in particular, is gaining much interest in Software Engineering, mainly in predicting software defects and software reliability. Feature analysis and its associated decision making is a suitable target area where BN can make remarkable effect. In SPL, a feature tree portrays various types of features as well as captures the relationships among them. This paper applies BN in modeling and analyzing features in a feature tree. Various feature analysis rules are first modeled and then verified in BN. The verification confirms the definition of the rules and thus these rules can be used in various decision making stages in SPL.},
booktitle = {Proceedings of the 8th International Workshop on Multi-Disciplinary Trends in Artificial Intelligence - Volume 8875},
pages = {220–231},
numpages = {12},
keywords = {Bayesian Networks, Dead feature, False Optional, Software Product Line},
location = {Bangalore, India},
series = {MIWAI 2014}
}

@inproceedings{10.1145/3132498.3133835,
author = {Cardoso, Mateus Passos Soares and Lima, Crescencio and de Almeida, Eduardo Santana and do Carmo Machado, Ivan and von Flach G. Chavez, Christina},
title = {Investigating the variability impact on the recovery of software product line architectures: an exploratory study},
year = {2017},
isbn = {9781450353250},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3132498.3133835},
doi = {10.1145/3132498.3133835},
abstract = {The Product Line Architecture (PLA) of a Software Product Line (SPL) is the core architecture that represents a high-level design for all the products of an SPL, including variation points and variants. If PLA documentation is missing, it can be recovered by reverse engineering the products. The recovered PLA is a relevant asset for developers and architects, that can be used to drive specific activities of SPL development and evolution, such as, understanding its structure and its variation points, and assessing reuse. This paper presents an exploratory study that investigated the effectiveness of recovered PLAs to address variability identification and support reuse assessment. We recovered the PLA of 15 open source SPL projects using the PLAR, a tool that supports PLA recovery and assessment based on information extracted from SPL products' source code. For each project, reuse assessment was supported by existing reuse metrics. The yielded results revealed that the number of products used in PLA recovery affected the variability identification, and the number of optional features affected the components reuse rate. These findings suggest that a minimum set of representative products should be identified and selected for PLA recovery, and the component reuse rate is a candidate metric for SPL reuse assessment.},
booktitle = {Proceedings of the 11th Brazilian Symposium on Software Components, Architectures, and Reuse},
articleno = {12},
numpages = {10},
keywords = {product line architecture, product line architecture recovery, software product lines, variability},
location = {Fortaleza, Cear\'{a}, Brazil},
series = {SBCARS '17}
}

@inproceedings{10.1145/3302333.3302339,
author = {Meixner, Kristof and Winkler, Dietmar and Biffl, Stefan},
title = {Towards Combined Process &amp; Tool Variability Management in Software Testing},
year = {2019},
isbn = {9781450366489},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3302333.3302339},
doi = {10.1145/3302333.3302339},
abstract = {Context. Modern software engineering approaches that rely on continuous and automated testing, like Agile Software Engineering and the late DevOps movement, require integrated and fully functional testing tool chain environment, to efficiently identify defects in software artifacts. Such an environment includes the implementation of established testing processes that are utilized by the development teams. However, in practice, different testing tool chains and processes are implemented depending on particular project requirements such as programming language, selected testing tool, or system architecture. This variety of required technologies and processes frequently results in an environment of isolated test automation solutions. Thus, there is a need for a managed and controllable set of testing tool chain variants that consider structured methods to integrate variability. Goal. In this paper, we show ongoing work, as part of a flexible Test Automation Framework (TAF), with focus on requirements for the variability of testing tool chains, established testing processes, and candidate solution approaches. Method. We build on best practices from software and systems testing and variability management to implement variability in the TAF. Results. First results showed that several Test Automation (TA) solutions exist, which support variability in a limited manner and, therefore, increase the need for modeling variability in a flexible TAF. Conclusion. In the context of Software Test Automation, a combination of Variability Modeling (VM) methods for testing architectures, business processes, and a definition of common interface definitions is promising towards a TAF that enables a flexible tool and process integration.},
booktitle = {Proceedings of the 13th International Workshop on Variability Modelling of Software-Intensive Systems},
articleno = {5},
numpages = {6},
keywords = {Process Variability, Software Testing, Test Architecture, Test automation, Testing Tool Chain, Variability Modeling},
location = {Leuven, Belgium},
series = {VaMoS '19}
}

@inproceedings{10.1145/2364412.2364469,
author = {Acher, Mathieu and Heymans, Patrick and Michel, Rapha\"{e}l},
title = {Next-generation model-based variability management: languages and tools},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364469},
doi = {10.1145/2364412.2364469},
abstract = {This tutorial aims at presenting new feature modelling tools directly applicable to a wide range of variability problems and application domains. Techniques and languages (TVL, FAMILIAR) for modelling, managing and configuring feature models will be illustrated and explained to participants (practitioners or academics, beginners or advanced).},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {276–277},
numpages = {2},
keywords = {configuration, feature model, variability},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3109729.3109759,
author = {Corti\~{n}as, Alejandro and Luaces, Miguel R. and Pedreira, Oscar and Places, \'{A}ngeles S.},
title = {Scaffolding and in-browser generation of web-based GIS applications in a SPL tool},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109759},
doi = {10.1145/3109729.3109759},
abstract = {The SME (Small and medium-sized enterprise) Enxenio has developed many web-based Geographic Information Systems within the last decade. Since the demand for GIS is increasing, Enxenio decided to apply Software Product Line Engineering to this domain to facilitate the development of complete web-based GIS applications, increasing their quality, improving the time-to-market and, at the same time, reducing their cost to its clients. This demo shows the resulting tool of this process, which is able to generate the source code of a web-based GIS from the set of desired features and the definition of its data model. This tool can be run within a web browser and the derivation engine in charge of generating the code is based on the scaffolding technique.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {46–49},
numpages = {4},
keywords = {Software product line engineering, scaffolding, web-based geographic information systems},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/1985484.1985489,
author = {Michalik, Bartosz and Weyns, Danny and Van Betsbrugge, Wim},
title = {On the problems with evolving Egemin's software product line},
year = {2011},
isbn = {9781450305846},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1985484.1985489},
doi = {10.1145/1985484.1985489},
abstract = {Egemin, an industrial manufacturer of logistic systems is adopting a Software Product Line (SPL) approach to manage the development of their product portfolio. However, due to the intrinsic complexity of the logistic systems and lack of explicitly documented architectural knowledge evolution of the products is error-prone. Faulty updates increase maintenance costs and harm the company's reputation. Therefore, Egemin searches for a systematic solution that can improve their SPL evolution strategy.},
booktitle = {Proceedings of the 2nd International Workshop on Product Line Approaches in Software Engineering},
pages = {15–19},
numpages = {5},
keywords = {evolution, software product line, spl},
location = {Waikiki, Honolulu, HI, USA},
series = {PLEASE '11}
}

@inproceedings{10.1145/1985484.1985495,
author = {Li, Dong},
title = {Identifying best practice by analyzing the evolution of the FISCAN MTMSIS software product line},
year = {2011},
isbn = {9781450305846},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1985484.1985495},
doi = {10.1145/1985484.1985495},
abstract = {In the face of development of a software-intensive products family in a domain, Software Product Line Engineering (SPLE) itself is a best practice that has been representatively demonstrated by the cases inducted into Software Product Line Hall of Fame. SPLE best practice is supported by various and vivid meta best practices generated from concrete activities through solution finding processes. This paper describes the evolution of the FISCAN MTMSIS software product line, nominated to the Hall of Fame at SPLC 2010. FISCAN applies SPLE in the security inspection domain and has identified SPLE best practices through years of experience in the past. This paper discusses some representative best practices and the lessons we learned during the process. More work, both development and research, are still in progress on the platform of the MTMSIS software product line and FISCAN will continue to apply SPLE in the future.},
booktitle = {Proceedings of the 2nd International Workshop on Product Line Approaches in Software Engineering},
pages = {40–44},
numpages = {5},
keywords = {best practice, mtmsis, software product line engineering},
location = {Waikiki, Honolulu, HI, USA},
series = {PLEASE '11}
}

@inproceedings{10.1145/2591062.2591089,
author = {Cafeo, Bruno B. P.},
title = {Enhancing feature interfaces for supporting software product line maintenance},
year = {2014},
isbn = {9781450327688},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2591062.2591089},
doi = {10.1145/2591062.2591089},
abstract = {Software product line (SPL) is a technology aimed at speeding up the development process. Although SPLs are widely used, their maintenance is a challenging task. In particular, when maintaining a SPL feature, developers need to know which parts of other dependent features might be affected by this maintenance. Otherwise, further maintenance problems can be introduced in the SPL implementation. However, the identification and understanding of the so-called feature dependencies in the source code are an exhaustive and error-prone task. In fact, developers often ignore unconsciously feature dependencies while reasoning about SPL maintenance. To overcome this problem, this PhD research aims at understanding the properties of feature dependencies in the source code that exert impact on SPL maintenance. Furthermore, we propose a way to structure and segregate feature interfaces in order to help developers to identify and understand feature dependencies, thus reducing the effort and avoiding undesirable side effects in SPL maintenance.},
booktitle = {Companion Proceedings of the 36th International Conference on Software Engineering},
pages = {710–713},
numpages = {4},
keywords = {Feature Dependencies, Feature Interface, Feature Modularisation, Software Maintenance, Software Product Lines},
location = {Hyderabad, India},
series = {ICSE Companion 2014}
}

@inproceedings{10.5555/2662572.2662582,
author = {Colanzi, Thelma Elita and Vergilio, Silvia Regina},
title = {Representation of software product line architectures for search-based design},
year = {2013},
isbn = {9781467362849},
publisher = {IEEE Press},
abstract = {The Product-Line Architecture (PLA) is the main artifact of a Software Product Line (SPL). Search-based approaches can provide automated discovery of near-optimal PLAs and make its design less dependent on human architects. To do this, it is necessary to adopt a suitable PLA representation to apply the search operators. In this sense, we review existing architecture representations proposed by related work, but all of them need to be extended to encompass specific characteristics of SPL. Then, the use of such representations for PLA is discussed and, based on the performed analysis, we introduce a novel direct PLA representation for search-based optimization. Some implementation aspects are discussed involving implementation details about the proposed PLA representation, constraints and impact on specific search operators. Ongoing work addresses the application of specific search operators for the proposed representation and the definition of a fitness function to be applied in a multi-objective search-based approach for the PLA design.},
booktitle = {Proceedings of the 1st International Workshop on Combining Modelling and Search-Based Software Engineering},
pages = {28–33},
numpages = {6},
keywords = {architecture modelling, multi-objective search-based approach, software product line},
location = {San Francisco, California},
series = {CMSBSE '13}
}

@inproceedings{10.1145/3233027.3236403,
author = {Kr\"{u}ger, Jacob and Fenske, Wolfram and Th\"{u}m, Thomas and Aporius, Dirk and Saake, Gunter and Leich, Thomas},
title = {Apo-games: a case study for reverse engineering variability from cloned Java variants},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3236403},
doi = {10.1145/3233027.3236403},
abstract = {Software-product-line engineering is an approach to systematically manage reusable software features and has been widely adopted in practice. Still, in most cases, organizations start with a single product that they clone and modify when new customer requirements arise (a.k.a. clone-and-own). With an increasing number of variants, maintenance can become challenging and organizations may consider migrating towards a software product line, which is referred to as extractive approach. While this is the most common approach in practice, techniques to extract variability from cloned variants still fall short in several regards. In particular, this accounts for the low accuracy of automated analyses and refactoring, our limited understanding of the costs involved, and the high manual effort. A main reason for these limitations is the lack of realistic case studies. To tackle this problem, we provide a set of cloned variants. In this paper, we characterize these variants and challenge the research community to apply techniques for reverse engineering feature models, feature location, code smell analysis, architecture recovery, and the migration towards a software product line. By evaluating solutions with the developer of these variants, we aim to contribute to a larger body of knowledge on this real-world case study.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {251–256},
numpages = {6},
keywords = {case study, data set, extractive approach, feature location, reverse engineering, software-product-line engineering},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2523599.2523604,
author = {Urli, Simon and Blay-Fornarino, Mireille and Collet, Philippe and Mosser, S\'{e}bastien},
title = {Using composite feature models to support agile software product line evolution},
year = {2012},
isbn = {9781450317986},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2523599.2523604},
doi = {10.1145/2523599.2523604},
abstract = {Managing continuous change in a Software Product Line (SPL) is one of the challenges now faced by the SPL engineering community. On the one hand, the SPL paradigm captures the intrinsic variability of a software based on a systemic vision of the software to model. On the other hand, Agile Software Development advocates the incremental development of software based on constant interaction with a customer community. In this paper, we present an approach based on Composite Feature Models (CFM) to support the agile evolution of a SPL. This study is driven by the refactoring of a daily used application (information broadcasting system), in the context of a nationally funded project. Preliminary results show that CFMs support the incremental development of a SPL based on interactions with a community, tackling the challenge of SPL continuous evolution.},
booktitle = {Proceedings of the 6th International Workshop on Models and Evolution},
pages = {21–26},
numpages = {6},
keywords = {agile, evolution, feature model, software product line},
location = {Innsbruck, Austria},
series = {ME '12}
}

@inproceedings{10.1145/3461001.3471148,
author = {Krieter, Sebastian and Arens, Rahel and Nieke, Michael and Sundermann, Chico and He\ss{}, Tobias and Th\"{u}m, Thomas and Seidl, Christoph},
title = {Incremental construction of modal implication graphs for evolving feature models},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471148},
doi = {10.1145/3461001.3471148},
abstract = {A feature model represents a set of variants as configurable features and dependencies between them. During variant configuration, (de)selection of a feature may entail that other features must or cannot be selected. A Modal Implication Graph (MIG) enables efficient decision propagation to perform automatic (de)selection of subsequent features. In addition, it facilitates other configuration-related activities such as t-wise sampling. Evolution of a feature model may change its configuration logic, thereby invalidating an existing MIG and forcing a full recomputation. However, repeated recomputation of a MIG is expensive, and thus hampers the overall usefulness of MIGs for frequently evolving feature models. In this paper, we devise a method to incrementally compute updated MIGs after feature model evolution. We identify expensive steps in the MIG construction algorithm, enable them for incremental computation, and measure performance compared to a full rebuild of a complete MIG within the evolution histories of four real-world feature models. Results show that our incremental method can increase the speed of MIG construction by orders of magnitude, depending on the given scenario and extent of evolutionary changes.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {64–74},
numpages = {11},
keywords = {configurable system, evolution, software product line},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3336294.3336308,
author = {Kuiter, Elias and Krieter, Sebastian and Kr\"{u}ger, Jacob and Leich, Thomas and Saake, Gunter},
title = {Foundations of Collaborative, Real-Time Feature Modeling},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336308},
doi = {10.1145/3336294.3336308},
abstract = {Feature models are core artifacts in software-product-line engineering to manage, maintain, and configure variability. Feature modeling can be a cross-cutting concern that integrates technical and business aspects of a software system. Consequently, for large systems, a team of developers and other stakeholders may be involved in the modeling process. In such scenarios, it can be useful to utilize collaborative, real-time feature modeling, analogous to collaborative text editing in Google Docs or Overleaf. However, current techniques and tools only support a single developer to work on a model at a time. Collaborative and simultaneous editing of the same model is often achieved by using version control systems, which can cause merge conflicts and do not allow immediate verification of a model, hampering real-time collaboration outside of face-to-face meetings. In this paper, we describe the formal foundations of collaborative, real-time feature modeling, focusing on concurrency control by synchronizing multiple actions of collaborators in a distributed network. We further report on preliminary results, including an initial prototype. Our contribution provides the basis for extending feature-modeling tools to enable advanced collaborative feature modeling and integrate it with related tasks.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {257–264},
numpages = {8},
keywords = {collaboration, consistency maintenance, feature modeling, groupware, software product line},
location = {Paris, France},
series = {SPLC '19}
}

@article{10.1002/spe.2428,
author = {Santos, Andr\'{e} L.},
title = {Variability management of plugin-based systems using feature models},
year = {2017},
issue_date = {July 2017},
publisher = {John Wiley &amp; Sons, Inc.},
address = {USA},
volume = {47},
number = {7},
issn = {0038-0644},
url = {https://doi.org/10.1002/spe.2428},
doi = {10.1002/spe.2428},
abstract = {Plugin-based systems are typically realized with resort to a component framework that offers an infrastructure for assembling plugin components, which can be composed to form system variants. Feature models have been proposed as an abstraction to manage software variability, where feature configurations describe variants of a software system. In this paper, we propose an automated approach to map the artifacts of plugin-based component frameworks to feature models. We describe a methodology for structuring the architecture of a plugin-based system, so that the variability space and variants are reflected in a feature model and its configurations. We materialized the proposed approach for the Eclipse Equinox component framework in a tool to visualize the variability of plugin-based systems in feature diagrams, which can be used to generate system variants. We carried out an experiment where we developed a small plugin-based product line on top of Equinox in the context of an advanced software development course. Copyright © 2016 John Wiley &amp; Sons, Ltd.},
journal = {Softw. Pract. Exper.},
month = jul,
pages = {959–970},
numpages = {12},
keywords = {Equinox, components, feature models, plugin-based systems, variability management}
}

@inproceedings{10.1145/2648511.2648552,
author = {Legay, Axel and de Vink, Erik},
title = {SPLat 2014: First International Workshop on Software Product Line Analysis Tools},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648552},
doi = {10.1145/2648511.2648552},
abstract = {The SPLat 2014 workshop aims to provide a platform for the presentation and positioning of formal analysis tools as used in Software Product Line Engineering for the identification of commonalities and differences of these tools as well as for the inventorying of challenges for their application. SPLat 2014 focuses on the underlying concepts and overall approach, in particular how to mitigate combinatorial explosion.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {353},
numpages = {1},
keywords = {formal methods, software product lines, state space explosion, variability, verification},
location = {Florence, Italy},
series = {SPLC '14}
}

@article{10.1145/2180921.2180941,
author = {Ripon, Shamim H.},
title = {A unified tabular method for modeling variants of software product line},
year = {2012},
issue_date = {May 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {37},
number = {3},
issn = {0163-5948},
url = {https://doi.org/10.1145/2180921.2180941},
doi = {10.1145/2180921.2180941},
abstract = {Reuse of software is a promising approach to improving the efficiency of software development regarding time, cost and quality. Reuse requires a systematic approach. The best results are achieved if we focus on systems in a specific domain, so-called product line. The key difference between the conventional software engineering and software product line engineering is variant management. The main idea of software product line is to identify the common core functionality which can be implemented once and reused afterwards for all members of the product line. To facilitate this reuse opportunity the domain engineering phase makes the domain model comprising the common as well as variant requirements. In principle, common requirements among systems in a family are easy to handle. However, problem arises during handling variants. Different variants have dependencies on each other; a single variant can affect several variants of the domain model. These problems become complex when the volume of information grows in a domain and there are a lot of variants with several interdependencies. Hence, a separate model is required for handling the variants. This paper presents a mechanism, which we call, Unified Tabular Method to facilitate the management of variant dependencies in product lines. The tabular method consists of a variant part to model the variants and their dependencies, and a decision table to depict the customization decision regarding each variant while deriving customized products. Tabular method alleviates the problem of possible explosion of variant combinations and facilitates the tracing of variant information in the domain model},
journal = {SIGSOFT Softw. Eng. Notes},
month = may,
pages = {1–7},
numpages = {7},
keywords = {modeling variants, software product line, unified tabular method}
}

@inproceedings{10.1145/3267183.3267188,
author = {Barbosa, Jefferson and Andrade, Rossana M. C. and Filho, Jo\~{a}o Bosco F. and Bezerra, Carla I. M. and Barreto, Isaac and Capilla, Rafael},
title = {Cloning in Customization Classes: A Case of a Worldwide Software Product Line},
year = {2018},
isbn = {9781450365543},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3267183.3267188},
doi = {10.1145/3267183.3267188},
abstract = {Cloning-and-owning, in the long run, can severely affect evolution, as changes in cloned fragments may require modifications in various parts of the system. This problem scales if cloning is used in classes that derive products in a Software Product Line, because these classes can impact in several features and products. However, it is hard to know to which extent cloning in customization classes can impact in a project. We conduct a study, within an SPL that generates mobile software for over 150 countries, to analyze cloning practices and how cloned parts relate to the maintainability of customization classes. We collect and identify clones inside customization classes during a period of 13 months, involving 70 customization classes and 5 branches. In parallel, we collect the respective issues from the issue tracking tool of the SPL project, obtaining over 140 issues related to customization classes. We then confront the time spent to solve each issue with its nature (i.e., if it relates to cloned code or not). As first result, we verify that issues related to cloning take in average 136% more time to be solved. Our study helps to understand how cloning relates to maintainability in the context of mass customization, giving insights about cloned code evolution and its impacts in a software product line project.},
booktitle = {Proceedings of the VII Brazilian Symposium on Software Components, Architectures, and Reuse},
pages = {43–52},
numpages = {10},
keywords = {Clone, Customization, Software Product Line},
location = {Sao Carlos, Brazil},
series = {SBCARS '18}
}

@inproceedings{10.1109/CLOUDCOM-ASIA.2013.65,
author = {Zhu, Jingjing and Cai, Hongming and Bu, Fenglin},
title = {Identifying Restful Web Services in Service-Oriented Software Product Line},
year = {2013},
isbn = {9781479928309},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/CLOUDCOM-ASIA.2013.65},
doi = {10.1109/CLOUDCOM-ASIA.2013.65},
abstract = {In cloud computing, SaaS provider provides applications as services through the Internet. In order to enable SaaS provider to meet the requirements of different tenants as much as possible, we used the method for core asset development in service-oriented software product line to develop the service set provided by SaaS provider. Feature-oriented domain analysis (FODA) is a common used method in the core asset development, but when it is applied to the service-oriented software product line, it has some limitations: 1) Before developing the core asset, we need to know what services are included in the core asset, but FODA is lack of the capability to identify what services need to be developed. 2) Multiple architecture styles of services in the core asset can lead to the result that the target system may use various methods to call for services and make the development of the target system complex. To solve these problems, firstly, we selected Restful web service as the service type in the core asset to enable the target system call for services in a unified way. Then we proposed an object-operation-independent feature model according to the characteristic of Restful web services. Finally, we designed a method to identify Restful web services from the object-operation-independent feature model. Through the verification, the proposed method can support the identification of services in the core asset and enable the target system call for services in a unified way.},
booktitle = {Proceedings of the 2013 International Conference on Cloud Computing and Big Data},
pages = {487–492},
numpages = {6},
keywords = {Restful web service, SaaS, feature model, service identification, service-oriented software product line},
series = {CLOUDCOM-ASIA '13}
}

@inproceedings{10.1109/COMPSAC.2014.29,
author = {Kang, Sungwon and Kim, Jingyu and Kang, Sungju and Eom, Seokhwan},
title = {A Formal Representation of Platform Feature-to-Requirement Traceability for Software Product Line Development},
year = {2014},
isbn = {9781479935758},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/COMPSAC.2014.29},
doi = {10.1109/COMPSAC.2014.29},
abstract = {Traceability enables the developer to keep track of changes in software development artifacts. Compared to that of single product development, traceability management in software product line development is much more complicated as it has to deal with traceability of individual products through the commonality and variability of the families of products. However, the existing traceability research treated traceability for families of products in an ad-hoc way and did not adequately address the relationship between traceability of domain engineering artifacts and that of application engineering artifacts. In this paper, we develop a formal representation that represents traceability between features and requirements at platform level. Also we present a procedure for constructing platform traceability from the trace abilities of a family of products. The proposed traceability representation and construction can be used as a basis for automated management of software product line trace abilities and for traceability representation and construction between artifacts of other stages of software product line.},
booktitle = {Proceedings of the 2014 IEEE 38th Annual Computer Software and Applications Conference},
pages = {211–218},
numpages = {8},
keywords = {Software product line development, traceability, platform},
series = {COMPSAC '14}
}

@article{10.4018/ijkss.2014100104,
author = {Ripon, Shamim H and Hossain, Sk. Jahir and Piash, Moshiur Mahamud},
title = {Logic-Based Analysis and Verification of Software Product Line Variant Requirement Model},
year = {2014},
issue_date = {October 2014},
publisher = {IGI Global},
address = {USA},
volume = {5},
number = {4},
issn = {1947-8208},
url = {https://doi.org/10.4018/ijkss.2014100104},
doi = {10.4018/ijkss.2014100104},
abstract = {Software Product Line SPL provides the facility to systematically reuse of software improving the efficiency of software development regarding time, cost and quality. The main idea of SPL is to identify the common core functionality that can be implemented once and reused afterwards. A variant model has also to be developed to manage the variants of the SPL. Usually, a domain model consisting of the common and variant requirements is developed during domain engineering phase to alleviate the reuse opportunity. The authors present a product line model comprising of a variant part for the management of variant and a decision table to depict the customization of decision regarding each variant. Feature diagrams are widely used to model SPL variants. Both feature diagram and our variant model, which is based on tabular method, lacks logically sound formal representation and hence, not amenable to formal verification. Formal representation and verification of SPL has gained much interest in recent years. This chapter presents a logical representation of the variant model by using first order logic. With this representation, the table based variant model as well as the graphical feature diagram can now be verified logically. Besides applying first-order-logic to model the features, the authors also present an approach to model and analyze SPL model by using semantic web approach using OWL-DL. The OWL-DL representation also facilitates the search and maintenance of feature models and support knowledge sharing within a reusable engineering context. Reasoning tools are used to verify the consistency of the feature configuration for both logic-based and semantic web-based approaches.},
journal = {Int. J. Knowl. Syst. Sci.},
month = oct,
pages = {52–76},
numpages = {25},
keywords = {Domain Model, Feature Diagrams, OWL-DL, Software Product Line SPL, Web-Based Approaches}
}

@inproceedings{10.1145/1810295.1810383,
author = {Zhang, Xiaorui},
title = {Synthesize software product line},
year = {2010},
isbn = {9781605587196},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1810295.1810383},
doi = {10.1145/1810295.1810383},
abstract = {In the development of a Software Product Line (SPL), it is useful to compare various products in order to identify reusable assets and synthesize them in an optimized way. Current differencing approaches provide the difference on a low level thus still leaves the SPL practitioner considerable manual synthesis work. This paper presents a comparison approach based on Common Variability Language (CVL), which is able to identify the difference on a higher conceptual level. We believe that our CVL Compare approach will offer better model comparison support in the context of identifying and synthesizing SPLs.},
booktitle = {Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering - Volume 2},
pages = {341–342},
numpages = {2},
location = {Cape Town, South Africa},
series = {ICSE '10}
}

@inproceedings{10.1109/SERA.2007.41,
author = {Lee, Soon-Bok and Kim, Jin-Woo and Song, Chee-Yang and Baik, Doo-Kwon},
title = {An Approach to Analyzing Commonality and Variability of Features using Ontology in a Software Product Line Engineering},
year = {2007},
isbn = {0769528678},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SERA.2007.41},
doi = {10.1109/SERA.2007.41},
abstract = {In a product line engineering, several studies have been made on analysis of feature which determines commonality and variability of product. Fundamentally, because the studies are based on developer's intuition and domain expert's experience, stakeholders lack common understanding of feature and a feature analysis is informal and subjective. Moreover, the reusability of software products, which were developed, is insufficient. This paper proposes an approach to analyzing commonality and variability of features using semantic-based analysis criteria which is able to change feature model of specific domain to featureontology. For the purpose, first feature attributes were made, create a feature model following the Meta model, transform it into feature-ontology, and save it to Meta feature-ontology repository. Henceforth, when we construct a feature model of the same product line, commonality and variability of the features can be extracted, comparing it with Meta feature ontology through a semantic similarity analysis method, which is proposed. Furthermore, a tool for a semantic similarity-comparing algorithm was implemented and an experiment with an electronic approval system domain in order to show the efficiency of the approach Was conducted. A Meta feature model can definitely be created through this approach, to construct a high-quality feature model based on common understanding of a feature. The main contributions are a formulating a method of extracting commonality and variability from features using ontology based on semantic similarity mapping and a enhancement of reusability of feature model.},
booktitle = {Proceedings of the 5th ACIS International Conference on Software Engineering Research, Management &amp; Applications},
pages = {727–734},
numpages = {8},
series = {SERA '07}
}

@inproceedings{10.1145/3461002.3473068,
author = {Santos, Edilton Lima dos},
title = {STARS: software technology for adaptable and reusable systems},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473068},
doi = {10.1145/3461002.3473068},
abstract = {Dynamic Software Product Lines (DSPLs) engineering implements self-adaptive systems by dynamically binding or unbinding features at runtime according to a feature model. However, these features may interact in unexpected and undesired ways leading to critical consequences for the DSPL. Moreover, (re)configurations may negatively affect the runtime system's architectural qualities, manifesting architectural bad smells. These issues are challenging to detect due to the combinatorial explosion of the number of interactions amongst features. As some of them may appear at runtime, we need a runtime approach to their analysis and mitigation. This thesis introduces the Behavioral Map (BM) formalism that captures information from different sources (feature model, code) to automatically detect these issues. We provide behavioral map inference algorithms. Using the Smart Home Environment (SHE) as a case study, we describe how a BM is helpful to identify critical feature interactions and architectural smells. Our preliminary results already show promising progress for both feature interactions and architectural bad smells identification at runtime.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {13–17},
numpages = {5},
keywords = {MAPE-K loop, dynamic software product lines engineering, self-adapting system, software architecture, software product line engineering, software testing},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/1842752.1842773,
author = {McGregor, John D.},
title = {A method for analyzing software product line ecosystems},
year = {2010},
isbn = {9781450301794},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1842752.1842773},
doi = {10.1145/1842752.1842773},
abstract = {The ecosystem for a software product line includes all of the entities with which the software product line organization interacts. Information, artifacts, customers, money and products move among these entities as a part of the planning, development, and deployment processes. In this paper we present an analysis technique that uses the economic notion of a transaction to examine the transfers between the entities. The result of the analysis is data that is used to evaluate and structure the organization. We illustrate with an example.},
booktitle = {Proceedings of the Fourth European Conference on Software Architecture: Companion Volume},
pages = {73–80},
numpages = {8},
keywords = {software ecosystem, software product line},
location = {Copenhagen, Denmark},
series = {ECSA '10}
}

@inproceedings{10.1145/2896982.2896988,
author = {Cu, Cuong and Zheng, Yongjie},
title = {Architecture-centric derivation of products in a software product line},
year = {2016},
isbn = {9781450341646},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2896982.2896988},
doi = {10.1145/2896982.2896988},
abstract = {It is essential to architecture-centric product line development that product line architecture can be used to drive activities specific to product line development, such as product derivation. This requires a mechanism that can automatically derive the architecture and code of a product instance from the customization of product line architecture. In this paper, we analyze the insufficiency of two existing solutions in this area and present an architecture-centric approach that meets the requirement. The approach can support product line differences in platforms and functions, and generate both product line code and product code. It is based on a product line implementation mechanism that combines a code generation and separation pattern with an architecture-based code annotation technique. We have implemented the approach, and finished a preliminary evaluation with a chat application.},
booktitle = {Proceedings of the 8th International Workshop on Modeling in Software Engineering},
pages = {27–33},
numpages = {7},
keywords = {architecture-centric development, product line architecture, software architecture},
location = {Austin, Texas},
series = {MiSE '16}
}

@inproceedings{10.1145/3382026.3431251,
author = {Mortara, Johann and Collet, Philippe and T\"{e}rnava, Xhevahire},
title = {Identifying and Mapping Implemented Variabilities in Java and C++ Systems using symfinder},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3431251},
doi = {10.1145/3382026.3431251},
abstract = {Variability is present in most modern object-oriented softwareintensive systems, despite that they commonly do not follow a product line approach. In these systems, variability is implicit and hardly documented as it is implemented by different traditional mechanisms, namely inheritance, overloading, or design patterns. This hampers variability management as automatic identification of variation points (vp-s) with variants is very difficult. symfinder is a symmetry-based tooled approach that enables automatic identification of potential vp-s with variants in such systems. Then, it visualizes them relying on their density in code assets. From the Java-only version presented at SPLC'2019, we present here several notable improvements. They concern an added support for C++ systems, the identification of vp-s implemented by Decorator and Template pattern instances, an enhanced visualization (e.g., to display all variants, and package coloring), as well as automation of the mapping of potential vp-s to domain features.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {9–12},
numpages = {4},
keywords = {Identifying software variability, object-oriented variability-rich systems, software product line engineering, tool support for understanding software variability, visualizing software variability},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3307630.3342395,
author = {Reuling, Dennis and Pietsch, Christopher and Kelter, Udo and Ohrndorf, Manuel},
title = {FlexiPLE: A Tool for Flexible Binding Times in Annotated Model-Based SPLs},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342395},
doi = {10.1145/3307630.3342395},
abstract = {Annotative approaches are commonly used to specify variation points in a Model-based software product line (MBSPL) implementation. Variant-specific parts are marked using annotated presence conditions in a so-called 150% model. Such approaches lead to a static feature selection (or binding), which is appropriate, i.e., for platform-specific features. However, dynamic binding, i.e. feature selection at run time, is a necessity in many (industrial) contexts. We present our tool FlexiPLE which allows for a feature-wise binding time selection, even after a MBSPL implementation. To this end, our tool a) supports the definition of binding time constraints, b) aids the user in the adaption process based upon variability analysis and c) ensures that only valid feature combinations can be selected statically and dynamically by incorporating a staged configuration approach. Our tool builds upon a robust stack of state-of-the-art technologies and tools in the context of MBSPLs.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {9–12},
numpages = {4},
keywords = {binding times, model-based software product line engineering, staged configuration, variability encoding},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3336294.3336299,
author = {Pietsch, Christopher and Kelter, Udo and Kehrer, Timo and Seidl, Christoph},
title = {Formal Foundations for Analyzing and Refactoring Delta-Oriented Model-Based Software Product Lines},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336299},
doi = {10.1145/3336294.3336299},
abstract = {Model-Based Software Product Line (MBSPL) Engineering combines Model-Based Software Engineering (MBSE) and Software Product Line (SPL) Engineering by specifying variability in models and generating model variants as products of an MBSPL. Delta Modeling (DM) is a transformational approach for implementing MBSPLs by adding, removing or modifying model elements through delta modules to activate individual features. To date, the applicability of DM to real-world MBSPLs is severely hindered due to the resulting complex network of interrelated delta modules in which errors are hard to identify and fix without unintentionally harming overall consistency. To address this challenge, we present a set of analyses to identify problems in a network of delta modules as well as a construction kit to assemble refactorings to remedy these problems and simplify the network. We give a modeling-language independent formalization of delta modules based on graph transformation concepts. This is the basis for our analyses which, in turn, build the basis for our refactorings to prevent unintended side-effects.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {207–217},
numpages = {11},
keywords = {analysis, delta modeling, graph transformation, model-based software product line engineering, refactoring},
location = {Paris, France},
series = {SPLC '19}
}

@article{10.1016/j.infsof.2010.03.007,
author = {Heider, Wolfgang and Froschauer, Roman and Gr\"{u}nbacher, Paul and Rabiser, Rick and Dhungana, Deepak},
title = {Simulating evolution in model-based product line engineering},
year = {2010},
issue_date = {July, 2010},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {52},
number = {7},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2010.03.007},
doi = {10.1016/j.infsof.2010.03.007},
abstract = {Context: Numerous approaches are available for modeling product lines and their variability. However, the long-term impacts of model-based development on maintenance effort and model complexity can hardly be investigated due to a lack of empirical data. Conducting empirical research in product line engineering is difficult as companies are typically reluctant to provide access to data from their product lines. Also, many benefits of product lines can be measured only in longitudinal studies, which are difficult to perform in most environments. Objective: In this paper, we thus aim to explore the benefit of simulation to investigate the evolution of model-based product lines. Method: We present a simulation approach for exploring the effects of product line evolution on model complexity and maintenance effort. Our simulation considers characteristics of product lines (e.g., size, dependencies in models) and we experiment with different evolution profiles (e.g., technical refactoring vs. placement of new products). Results: We apply the approach in a simulation experiment that uses data from real-world product lines from the domain of industrial automation systems to demonstrate its feasibility. Conclusion: Our results demonstrate that simulation contributes to understanding the effects of maintenance and evolution in model-based product lines.},
journal = {Inf. Softw. Technol.},
month = jul,
pages = {758–769},
numpages = {12},
keywords = {Industrial automation systems, Maintenance and evolution, Model-based development, Product line engineering, Simulation}
}

@inproceedings{10.5555/2040660.2040676,
author = {Kuvaja, Pasi and Simil\"{a}, Jouni and Hanhela, Hanna},
title = {Software product line adoption: guidelines from a case study},
year = {2008},
isbn = {9783642223853},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {It is possible to proceed with software product line adoption only once without major reinvestments and loss of time and money. In the literature, reported experiences of using the adoption models are not to be found, and especially the suitability of the models has not been reported. The purpose of this research is to compare known adoption models by formulating general evaluation criteria for the selection of an adoption model. Next an adoption model is selected for empirical research based on the context of a multimedia unit of a global telecommunication company. The empirical part consists of a case study analyzing the present state of adoption and producing plans for proceeding with the adoption. The research results can be utilized when selecting an adoption model for an empirical case and adopting a software product line in a software intensive organization.},
booktitle = {Proceedings of the Third IFIP TC 2 Central and East European Conference on Software Engineering Techniques},
pages = {143–157},
numpages = {15},
keywords = {adoption, adoption model, adoption strategy, guidelines, software product line},
location = {Brno, Czech Republic},
series = {CEE-SET'08}
}

@inproceedings{10.1145/3461001.3471152,
author = {Silva, Publio and Bezerra, Carla I. M. and Machado, Ivan},
title = {A machine learning model to classify the feature model maintainability},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471152},
doi = {10.1145/3461001.3471152},
abstract = {Software Product Lines (SPL) are generally specified using a Feature Model (FM), an artifact designed in the early stages of the SPL development life cycle. This artifact can quickly become too complex, which makes it challenging to maintain an SPL. Therefore, it is essential to evaluate the artifact's maintainability continuously. The literature brings some approaches that evaluate FM maintainability through the aggregation of maintainability measures. Machine Learning (ML) models can be used to create these approaches. They can aggregate the values of independent variables into a single target data, also called a dependent variable. Besides, when using white-box ML models, it is possible to interpret and explain the ML model results. This work proposes white-box ML models intending to classify the FM maintainability based on 15 measures. To build the models, we performed the following steps: (i) we compared two approaches to evaluate the FM maintainability through a human-based oracle of FM maintainability classifications; (ii) we used the best approach to pre-classify the ML training dataset; (iii) we generated three ML models and compared them against classification accuracy, precision, recall, F1 and AUC-ROC; and, (iv) we used the best model to create a mechanism capable of providing improvement indicators to domain engineers. The best model used the decision tree algorithm that obtained accuracy, precision, and recall of 0.81, F1-Score of 0.79, and AUC-ROC of 0.91. Using this model, we could reduce the number of measures needed to evaluate the FM maintainability from 15 to 9 measures.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {35–45},
numpages = {11},
keywords = {feature model, machine learning, quality evaluation, software product line},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1007/978-3-642-34032-1_22,
author = {Ferrari, Alessio and Spagnolo, Giorgio Oronzo and Martelli, Giacomo and Menabeni, Simone},
title = {Product line engineering applied to CBTC systems development},
year = {2012},
isbn = {9783642340314},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-34032-1_22},
doi = {10.1007/978-3-642-34032-1_22},
abstract = {Communications-based Train Control (CBTC) systems are the new frontier of automated train control and operation. Currently developed CBTC platforms are actually very complex systems including several functionalities, and every installed system, developed by a different company, varies in extent, scope, number, and even names of the implemented functionalities. International standards have emerged, but they remain at a quite abstract level, mostly setting terminology.This paper reports intermediate results in an effort aimed at defining a global model of CBTC, by mixing semi-formal modelling and product line engineering. The effort has been based on an in-depth market analysis, not limiting to particular aspects but considering as far as possible the whole picture. The adopted methodology is discussed and a preliminary model is presented.},
booktitle = {Proceedings of the 5th International Conference on Leveraging Applications of Formal Methods, Verification and Validation: Applications and Case Studies - Volume Part II},
pages = {216–230},
numpages = {15},
location = {Heraklion, Crete, Greece},
series = {ISoLA'12}
}

@article{10.1007/s10515-014-0160-4,
author = {Devine, Thomas and Goseva-Popstojanova, Katerina and Krishnan, Sandeep and Lutz, Robyn R.},
title = {Assessment and cross-product prediction of software product line quality: accounting for reuse across products, over multiple releases},
year = {2016},
issue_date = {June      2016},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {23},
number = {2},
issn = {0928-8910},
url = {https://doi.org/10.1007/s10515-014-0160-4},
doi = {10.1007/s10515-014-0160-4},
abstract = {The goals of cross-product reuse in a software product line (SPL) are to mitigate production costs and improve the quality. In addition to reuse across products, due to the evolutionary development process, a SPL also exhibits reuse across releases. In this paper, we empirically explore how the two types of reuse--reuse across products and reuse across releases--affect the quality of a SPL and our ability to accurately predict fault proneness. We measure the quality in terms of post-release faults and consider different levels of reuse across products (i.e., common, high-reuse variation, low-reuse variation, and single-use packages), over multiple releases. Assessment results showed that quality improved for common, low-reuse variation, and single-use packages as they evolved across releases. Surprisingly, within each release, among preexisting (`old') packages, the cross-product reuse did not affect the change and fault proneness. Cross-product predictions based on pre-release data accurately ranked the packages according to their post-release faults and predicted the 20 % most faulty packages. The predictions benefited from data available for other products in the product line, with models producing better results (1) when making predictions on smaller products (consisting mostly of common packages) rather than on larger products and (2) when trained on larger products rather than on smaller products.},
journal = {Automated Software Engg.},
month = jun,
pages = {253–302},
numpages = {50},
keywords = {Assessment, Cross-product prediction, Cross-product reuse, Cross-release reuse, Fault proneness prediction, Longitudinal study, Software product lines}
}

@inproceedings{10.5555/2041790.2041807,
author = {Contieri, Antonio C. and Correia, Guilherme G. and Colanzi, Thelma E. and Gimenes, Itana M. S. and Oliveira, Edson A. and Ferrari, Sandra and Masiero, Paulo C. and Garcia, Alessandro F.},
title = {Extending UML components to develop software product-line architectures: lessons learned},
year = {2011},
isbn = {9783642237973},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {This paper presents an experience in extending and evaluating UML Components for guiding the derivation of component-based product-line architectures (PLAs). We present a quantitative and qualitative evaluation of such an extension when applied to the proactive design of two PLAs. We have found that our approach supported an agile conception of architectural designs that are modular and likely to be resilient to changes over time and good enough to serve as the basis for more specific design decisions made by the architects.},
booktitle = {Proceedings of the 5th European Conference on Software Architecture},
pages = {130–138},
numpages = {9},
keywords = {component-based development methods, software product-line architectures, variability management},
location = {Essen, Germany},
series = {ECSA'11}
}

@inproceedings{10.1007/978-3-662-43652-3_34,
author = {Zulkoski, Ed and Kleynhans, Chris and Yee, Ming-Ho and Rayside, Derek and Czarnecki, Krzysztof},
title = {Optimizing Alloy for Multi-objective Software Product Line Configuration},
year = {2014},
isbn = {9783662436516},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-662-43652-3_34},
doi = {10.1007/978-3-662-43652-3_34},
abstract = {Software product line SPL engineering involves the modeling, analysis, and configuration of variability-rich systems. We improve the performance of the multi-objective optimization of SPLs in Alloy by several orders of magnitude with two techniques.First, we rewrite the model to remove binary relations that map to integers, which enables removing most of the integer atoms from the universe. SPL models often require using large bitwidths, hence the number of integer atoms in the universe can be orders of magnitude more than the other atoms. In our approach, the tuples for these integer-valued relations are computed outside the sat solver before returning the solution to the user. Second, we add a checkpointing facility to Kodkod, which allows the multi-objective optimization algorithm to reuse previously computed internal sat solver state, after backtracking.Together these result in orders of magnitude improvement in using Alloy as a multi-objective optimization tool for software product lines.},
booktitle = {Proceedings of the 4th International Conference on Abstract State Machines, Alloy, B, TLA, VDM, and Z - Volume 8477},
pages = {328–333},
numpages = {6},
keywords = {Alloy, Kodkod, Multi-objective Optimization, Product Lines},
location = {Toulouse, France},
series = {ABZ 2014}
}

@inproceedings{10.1145/3382026.3425775,
author = {Nair, Suparna S. and Becker, Martin and Tenev, Vasil},
title = {A Comparative Study on Variability Code Analysis Technology},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3425775},
doi = {10.1145/3382026.3425775},
abstract = {Product line engineering is often conducted in an incremental way, in which the variability artifacts evolve in the space, the time, as well as the asset dimension. In order to cope with the evolution of the variability, the VITAL approach and tool have been developed and used in different industrial settings to analyze variability realizations relying on the C preprocessor. Over the last decade, further promising analysis approaches and tools have been developed. To understand, if and how they could enhance the VITAL approach, we have conducted an analysis of promising technologies.In this paper, we share some of our findings along our comparative study on variability code analysis technologies. As we have conducted the study in the light of the intended VITAL enhancement, the study does not claim completeness. Nevertheless, we believe that the findings can help researchers and industrial practitioners to gain an overview and find entry points for their own investigations.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {37–43},
numpages = {7},
keywords = {Variability realization, configuration knowledge, reverse engineering, software product line},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/2499777.2500715,
author = {Ishida, Yuzo},
title = {Scalable variability management for enterprise applications with data model driven development},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500715},
doi = {10.1145/2499777.2500715},
abstract = {Unlike embedded systems, some of enterprise systems are evolved over the decades. The predictability of requirements is a key to success in building reusable assets however it is very hard to predict future business context changes, which are driving factors of requirements. Thus, both functional and context variability must be managed in order to satisfy ever-changing requirements. Scalability does matter for enterprise systems in two aspects. One aspect comes from data volume. Once data become big, it is difficult to maintain performance requirements without de-normalizing database schema. Since database de-normalization is driven by non-functional properties, a model driven approach is not feasible if the model cannot express such properties. Another aspect comes from the unpredictability of future functional requirements. A functional decomposition of enterprise systems usually introduces ever-increasing complexity among systems' interactions due to cross-cutting requirements across functional systems. This paper reflects our empirical studies in data intensive large enterprise systems such as retail and telecommunication industries with industry independent application framework to separate functional and non-functional concerns. Our variability management technique is based on database schema modeling, which can be evolved incrementally in scaling an enterprise system with both data and functional aspects.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {90–93},
numpages = {4},
keywords = {core assets, higher-order simple predicate logic, quality attributes, relational algebra, type theory},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@article{10.5555/2747015.2747184,
author = {da Silva, Ivonei Freitas and da Mota Silveira Neto, Paulo Anselmo and O'Leary, P\'{a}draig and de Almeida, Eduardo Santana and Meira, Silvio Romero de Lemos},
title = {Software product line scoping and requirements engineering in a small and medium-sized enterprise},
year = {2014},
issue_date = {February 2014},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {88},
number = {C},
issn = {0164-1212},
abstract = {HighlightsWe described a detailed qualitative study on software product line scoping and requirements engineering.We examine weaknesses regarding the iterativeness, adaptability, and communication.Agile methods can mitigate the iterativeness, adaptability, and communication weaknesses. Software product line (SPL) engineering has been applied in several domains, especially in large-scale software development. Given the benefits experienced and reported, SPL engineering has increasingly garnered interest from small to medium-sized companies. It is possible to find a wide range of studies reporting on the challenges of running a SPL project in large companies. However, very little reports exist that consider the situation for small to medium-sized enterprises and these studies try develop universal truths for SPL without lessons learned from empirical evidence need to be contextualized. This study is a step towards bridging this gap in contextual evidence by characterizing the weaknesses discovered in the scoping (SC) and requirements (RE) disciplines of SPL. Moreover, in this study we conducted a case study in a small to medium sized enterprises (SMEs) to justify the use of agile methods when introducing the SPL SC and RE disciplines through the characterization of their bottlenecks. The results of the characterization indicated that ineffective communication and collaboration, long iteration cycles, and the absence of adaptability and flexibility can increase the effort and reduce motivation during project development. These issues can be mitigated by agile methods.},
journal = {J. Syst. Softw.},
month = feb,
pages = {189–206},
numpages = {18},
keywords = {Agile methods, Requirements engineering, Software product line scoping}
}

@article{10.1016/j.infsof.2011.01.001,
author = {Peng, Xin and Yu, Yijun and Zhao, Wenyun},
title = {Analyzing evolution of variability in a software product line: From contexts and requirements to features},
year = {2011},
issue_date = {July, 2011},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {53},
number = {7},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2011.01.001},
doi = {10.1016/j.infsof.2011.01.001},
abstract = {Context: In the long run, features of a software product line (SPL) evolve with respect to changes in stakeholder requirements and system contexts. Neither domain engineering nor requirements engineering handles such co-evolution of requirements and contexts explicitly, making it especially hard to reason about the impact of co-changes in complex scenarios. Objective: In this paper, we propose a problem-oriented and value-based analysis method for variability evolution analysis. The method takes into account both kinds of changes (requirements and contexts) during the life of an evolving software product line. Method: The proposed method extends the core requirements engineering ontology with the notions to represent variability-intensive problem decomposition and evolution. On the basis of problemorientation, the analysis method identifies candidate changes, detects influenced features, and evaluates their contributions to the value of the SPL. Results and Conclusion: The process of applying the analysis method is illustrated using a concrete case study of an evolving enterprise software system, which has confirmed that tracing back to requirements and contextual changes is an effective way to understand the evolution of variability in the software product line.},
journal = {Inf. Softw. Technol.},
month = jul,
pages = {707–721},
numpages = {15},
keywords = {Context, Evolution, Feature, Requirements, Software product line, Variability}
}

@article{10.1016/j.jss.2007.10.025,
author = {Hanssen, Geir K. and F\'{\i}gri, Tor E.},
title = {Process fusion: An industrial case study on agile software product line engineering},
year = {2008},
issue_date = {June, 2008},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {81},
number = {6},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2007.10.025},
doi = {10.1016/j.jss.2007.10.025},
abstract = {This paper presents a case study of a software product company that has successfully integrated practices from software product line engineering and agile software development. We show how practices from the two fields support the company's strategic and tactical ambitions, respectively. We also discuss how the company integrates strategic, tactical and operational processes to optimize collaboration and consequently improve its ability to meet market needs, opportunities and challenges. The findings from this study are relevant to software product companies seeking ways to balance agility and product management. The findings also contribute to research on industrializing software engineering.},
journal = {J. Syst. Softw.},
month = jun,
pages = {843–854},
numpages = {12},
keywords = {Agile software development, Software product development, Software product line engineering, Software product management}
}

@inproceedings{10.1145/2701319.2701330,
author = {Rabiser, Rick and Vierhauser, Michael and Gr\"{u}nbacher, Paul},
title = {Variability Management for a Runtime Monitoring Infrastructure},
year = {2015},
isbn = {9781450332736},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2701319.2701330},
doi = {10.1145/2701319.2701330},
abstract = {Many software systems today are systems of systems (SoS), which are difficult to analyze due to their size, complexity, heterogeneity, and variability. For instance, unexpected behavior of SoS is often caused by the complex interactions between the involved systems and their environment at runtime. Monitoring infrastructures (MIs) provide support for engineers and support staff analyzing the behavior of SoS during development and operation. Variability plays an important role in MIs, however, while some approaches exist, managing variability of MIs remains challenging. In this paper, we describe how we applied a variability management approach to support the reconfiguration of a SoS monitoring infrastructure (MI) at runtime. Our approach provides configuration support for setting up the MI to reflect system variability. It also supports runtime reconfiguration of the MI to reflect the different monitoring tasks of users and to support evolution. We motivate our work using the case of monitoring a real-world SoS from the domain of industrial automation and discuss variability-related challenges in four monitoring scenarios. We evaluate the feasibility of our approach by applying it to these scenarios. We also demonstrate that our approach reduces manual reconfiguration effort and helps to reduce the overhead of the MI.},
booktitle = {Proceedings of the 9th International Workshop on Variability Modelling of Software-Intensive Systems},
pages = {35–42},
numpages = {8},
keywords = {Software monitoring, large-scale systems, reconfiguration, variability management},
location = {Hildesheim, Germany},
series = {VaMoS '15}
}

@inproceedings{10.1145/1629716.1629724,
author = {Elsner, Christoph and Lohmann, Daniel and Schr\"{o}der-Preikschat, Wolfgang},
title = {Product derivation for solution-driven product line engineering},
year = {2009},
isbn = {9781605585673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1629716.1629724},
doi = {10.1145/1629716.1629724},
abstract = {Solution-driven product line engineering is a project business where products are created for each customer individually. Although reuse of results from former projects is widely done, configuration and integration of the results currently is often a manual, time-consuming, and error-prone task and needs considerable knowledge about implementation details.In this paper, we elaborate and approach the challenges when giving automated support for product derivation (i.e., product configuration and generation) in a large-scale solution-driven product line context. Our PLiC approach resembles the fact that, in practice, the domain of a large product line is divided into sub-domains. A PLiC (product line component) packages all results (configuration, generation, and implementation assets) of a sub-domain and offers interfaces for configuration and generation. With our approach we tackle the challenges of using multiple and different types of configuration models and text files, give support for automated product generation, and integrate feature modeling to support application engineering as an extensive development task.},
booktitle = {Proceedings of the First International Workshop on Feature-Oriented Software Development},
pages = {35–41},
numpages = {7},
keywords = {feature modeling, software product line development, solution-driven software development},
location = {Denver, Colorado, USA},
series = {FOSD '09}
}

@inproceedings{10.5555/1753235.1753258,
author = {Ganesan, Dharmalingam and Lindvall, Mikael and Ackermann, Chris and McComas, David and Bartholomew, Maureen},
title = {Verifying architectural design rules of the flight software product line},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {This paper presents experiences of verifying architectural design rules of the NASA Core Flight Software (CFS) product line implementation. The goal is to check whether the implementation is consistent with the CFS' architectural rules derived from the developer's guide. The results indicate that consistency checking helps a) identifying architecturally significant deviations that were eluded during code reviews, b) clarifying the design rules to the team, and c) assessing the overall implementation quality. Furthermore, it helps connecting business goals to architectural principles, and to the implementation. This paper is the first step in the definition of a method for analyzing and evaluating product line implementations from an architecture-centric perspective.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {161–170},
numpages = {10},
keywords = {architectural rules, business goals, flight software, implemented architecture},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@article{10.1016/j.tcs.2012.01.031,
author = {Borba, Paulo and Teixeira, Leopoldo and Gheyi, Rohit},
title = {A theory of software product line refinement},
year = {2012},
issue_date = {October, 2012},
publisher = {Elsevier Science Publishers Ltd.},
address = {GBR},
volume = {455},
issn = {0304-3975},
url = {https://doi.org/10.1016/j.tcs.2012.01.031},
doi = {10.1016/j.tcs.2012.01.031},
abstract = {To safely evolve a software product line, it is important to have a notion of product line refinement that assures behavior preservation of the original product line products. So in this article we present a language independent theory of product line refinement, establishing refinement properties that justify stepwise and compositional product line evolution. Moreover, we instantiate our theory with the formalization of specific languages for typical product lines artifacts, and then introduce and prove soundness of a number of associated product line refinement transformation templates. These templates can be used to reason about specific product lines and as a basis to derive comprehensive product line refinement catalogues.},
journal = {Theor. Comput. Sci.},
month = oct,
pages = {2–30},
numpages = {29},
keywords = {Refactoring, Refinement, Software evolution, Software product lines}
}

@inproceedings{10.1109/ICCET.2009.125,
author = {Luo, Daizhong and Diao, Shanhui},
title = {Feature Dependency Modeling for Software Product Line},
year = {2009},
isbn = {9780769535210},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICCET.2009.125},
doi = {10.1109/ICCET.2009.125},
abstract = {Feature dependency Modeling describes model of mutual constraints among features. It is essential activities for development of software product line. This paper introduces local dependency and global dependency of feature. With analyzing relationship of feature dependency, we propose an approach of feature dependency modeling. It not only provides specification of local dependency such as decomposition and generalization, but also provides global dependency modeling such as configuration dependency, operational dependency and impact dependency. Finally a case study of feature dependency modeling in air-condition controlling software product line is presented to demonstrate our method.},
booktitle = {Proceedings of the 2009 International Conference on Computer Engineering and Technology - Volume 02},
pages = {256–260},
numpages = {5},
keywords = {feature dependency, global dependency, local dependency, modeling, software product line},
series = {ICCET '09}
}

@inproceedings{10.1145/2430502.2430529,
author = {Zhang, Bo and Becker, Martin},
title = {Mining complex feature correlations from software product line configurations},
year = {2013},
isbn = {9781450315418},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2430502.2430529},
doi = {10.1145/2430502.2430529},
abstract = {As a Software Product Line (SPL) evolves with increasing number of features and feature values, the feature correlations become extremely intricate, and the specifications of these correlations tend to be either incomplete or inconsistent with their realizations, causing misconfigurations in practice. In order to guide product configuration processes, we present a solution framework to recover complex feature correlations from existing product configurations. These correlations are further pruned automatically and validated by domain experts. During implementation, we use association mining techniques to automatically extract strong association rules as potential feature correlations. This approach is evaluated using a large-scale industrial SPL in the embedded system domain, and finally we identify a large number of complex feature correlations.},
booktitle = {Proceedings of the 7th International Workshop on Variability Modelling of Software-Intensive Systems},
articleno = {19},
numpages = {7},
keywords = {association mining, feature correlation, product line configuration},
location = {Pisa, Italy},
series = {VaMoS '13}
}

@inproceedings{10.1109/ASE.2009.16,
author = {Lauenroth, Kim and Pohl, Klaus and Toehning, Simon},
title = {Model Checking of Domain Artifacts in Product Line Engineering},
year = {2009},
isbn = {9780769538914},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ASE.2009.16},
doi = {10.1109/ASE.2009.16},
abstract = {In product line engineering individual products are derived from the domain artifacts of the product line. The reuse of the domain artifacts is constraint by the product line variability. Since domain artifacts are reused in several products, product line engineering benefits from the verification of domain artifacts. For verifying development artifacts, model checking is a well-established technique in single system development. However, existing model checking approaches do not incorporate the product line variability and are hence of limited use for verifying domain artifacts. In this paper we present an extended model checking approach which takes the product line variability into account when verifying domain artifacts. Our approach is thus able to verify that every permissible product (specified with I/O-automata) which can be derived from the product line fulfills the specified properties (specified with CTL). Moreover, we use two examples to validate the applicability of our approach and report on the preliminary validation results.},
booktitle = {Proceedings of the 24th IEEE/ACM International Conference on Automated Software Engineering},
pages = {269–280},
numpages = {12},
keywords = {Domain Artifact Verification, Model Checking, Product Line Engineering, Variability},
series = {ASE '09}
}

@inproceedings{10.1145/2996890.3007893,
author = {Ruiz, Carlos and Duran-Limon, Hector A. and Parlavantzas, Nikos},
title = {Towards a software product line-based approach to adapt IaaS cloud configurations},
year = {2016},
isbn = {9781450346160},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2996890.3007893},
doi = {10.1145/2996890.3007893},
abstract = {Cloud computing is nowadays one of the most promising IT technologies, since it provides seemingly unlimited resources on demand at low costs. Hence, different types of applications have been migrated to IaaS environments, e.g. multi-tier (distributed) applications. However, in order to benefit from such characteristics, cloud configurations (i.e. virtual resource configurations) should be designed accordingly to the necessities of the applications. Furthermore, such configurations have to provide the required resources not only at the application deployment-time, but also during the whole application execution time. Hence, adaptive paradigms are required when designing solutions to cloud applications with dynamic resource requirements. Software Product Lines (SPLs) provide great flexibility and a high level of abstraction to describe complete system configurations. Even though SPLs are not commonly used to describe changes after an initial product (configuration) has been created, their inherent characteristics can enable producing the required virtual resource configuration to adapt applications after their initial deployment, i.e., at runtime. In this paper, we present an approach to create and adapt cloud configurations at the IaaS level by using SPLs. We focus on the architectural design of our solution as well as on the possible implementation challenges we could face.},
booktitle = {Proceedings of the 9th International Conference on Utility and Cloud Computing},
pages = {398–403},
numpages = {6},
keywords = {cloud computing, self-adaptation, software product lines},
location = {Shanghai, China},
series = {UCC '16}
}

@inproceedings{10.1145/1808937.1808942,
author = {Estublier, Jacky and Dieng, Idrissa A. and Leveque, Thomas},
title = {Software product line evolution: the Selecta system},
year = {2010},
isbn = {9781605589688},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1808937.1808942},
doi = {10.1145/1808937.1808942},
abstract = {The current technology gives little room for the different kinds of evolution needed for any software product line (SPL): evolution of the associated engineering environment, evolution of the market and SPL scope, evolution of the products and variability. The paper describes how these different evolution needs are addressed in the CADSE and Selecta systems. The solution we propose uses metamodeling and generation for the engineering environment evolution, composition for scope and market evolution, a component database and a selection language for the product and variability evolution. The paper presents the Selecta system and shortly discusses the experience.},
booktitle = {Proceedings of the 2010 ICSE Workshop on Product Line Approaches in Software Engineering},
pages = {32–39},
numpages = {8},
keywords = {IDE, evolution, product families, product lines, software environments},
location = {Cape Town, South Africa},
series = {PLEASE '10}
}

@article{10.1016/j.advengsoft.2014.01.011,
author = {Rossel, Pedro O. and Bastarrica, Mar\'{\i}a Cecilia and Hitschfeld-Kahler, Nancy and D\'{\i}az, Violeta and Medina, Mario},
title = {Domain modeling as a basis for building a meshing tool software product line},
year = {2014},
issue_date = {April, 2014},
publisher = {Elsevier Science Ltd.},
address = {GBR},
volume = {70},
issn = {0965-9978},
url = {https://doi.org/10.1016/j.advengsoft.2014.01.011},
doi = {10.1016/j.advengsoft.2014.01.011},
abstract = {Meshing tools are highly complex software for generating and managing geometrical discretizations. Due to their complexity, they have generally been developed by end users - physicists, forest engineers, mechanical engineers - with ad hoc methodologies and not by applying well established software engineering practices. Different meshing tools have been developed over the years, making them a good application domain for Software Product Lines (SPLs). This paper proposes building a domain model that captures the different domain characteristics such as features, goals, scenarios and a lexicon, and the relationships among them. The model is partly specified using a formal language. The domain model captures product commonalities and variabilities as well as the particular characteristics of different SPL products. The paper presents a rigorous process for building the domain model, where specific roles, activities and artifacts are identified. This process also clearly establishes consistency and completeness conditions. The usefulness of the model and the process are validated by using them to generate a software product line of Tree Stem Deformation (TSD) meshing tools. We also present Meshing Tool Generator, a software that follows the SPL approach for generating meshing tools belonging to the TSD SPL. We show how an end user can easily generate three different TSD meshing tools using Meshing Tool Generator.},
journal = {Adv. Eng. Softw.},
month = apr,
pages = {77–89},
numpages = {13},
keywords = {Code generator, Domain analysis, Domain model, Meshing tools, Software product line, Tree stem deformation}
}

@article{10.1016/j.scico.2012.05.003,
author = {Laguna, Miguel A. and Crespo, Yania},
title = {A systematic mapping study on software product line evolution: From legacy system reengineering to product line refactoring},
year = {2013},
issue_date = {August, 2013},
publisher = {Elsevier North-Holland, Inc.},
address = {USA},
volume = {78},
number = {8},
issn = {0167-6423},
url = {https://doi.org/10.1016/j.scico.2012.05.003},
doi = {10.1016/j.scico.2012.05.003},
abstract = {Software product lines (SPLs) are used in industry to develop families of similar software systems. Legacy systems, either highly configurable or with a story of versions and local variations, are potential candidates for reconfiguration as SPLs using reengineering techniques. Existing SPLs can also be restructured using specific refactorings to improve their internal quality. Although many contributions (including industrial experiences) can be found in the literature, we lack a global vision covering the whole life cycle of an evolving product line. This study aims to survey existing research on the reengineering of legacy systems into SPLs and the refactoring of existing SPLs in order to identify proven approaches and pending challenges for future research in both subfields. We launched a systematic mapping study to find as much literature as possible, covering the diverse terms involved in the search string (restructuring, refactoring, reengineering, etc. always connected with SPLs) and filtering the papers using relevance criteria. The 74 papers selected were classified with respect to several dimensions: main focus, research and contribution type, academic or industrial validation if included, etc. We classified the research approaches and analyzed their feasibility for use in industry. The results of the study indicate that the initial works focused on the adaptation of generic reengineering processes to SPL extraction. Starting from that foundation, several trends have been detected in recent research: the integrated or guided reengineering of (typically object-oriented) legacy code and requirements; specific aspect-oriented or feature-oriented refactoring into SPLs, and more recently, refactoring for the evolution of existing product lines. A majority of papers include academic or industrial case studies, though only a few are based on quantitative data. The degree of maturity of both subfields is different: Industry examples for the reengineering of the legacy system subfield are abundant, although more evaluation research is needed to provide better evidence for adoption in industry. Product line evolution through refactoring is an emerging topic with some pending challenges. Although it has recently received some attention, the theoretical foundation is rather limited in this subfield and should be addressed in the near future. To sum up, the main contributions of this work are the classification of research approaches as well as the analysis of remaining challenges, open issues, and research opportunities.},
journal = {Sci. Comput. Program.},
month = aug,
pages = {1010–1034},
numpages = {25},
keywords = {Evolution, Legacy system, Reengineering, Refactoring, Software product line}
}

@article{10.1016/j.infsof.2007.10.013,
author = {Ahmed, Faheem and Capretz, Luiz Fernando},
title = {The software product line architecture: An empirical investigation of key process activities},
year = {2008},
issue_date = {October, 2008},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {50},
number = {11},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2007.10.013},
doi = {10.1016/j.infsof.2007.10.013},
abstract = {Software architecture has been a key area of concern in software industry due to its profound impact on the productivity and quality of software products. This is even more crucial in case of software product line, because it deals with the development of a line of products sharing common architecture and having controlled variability. The main contributions of this paper is to increase the understanding of the influence of key software product line architecture process activities on the overall performance of software product line by conducting a comprehensive empirical investigation covering a broad range of organizations currently involved in the business of software product lines. This is the first study to empirically investigate and demonstrate the relationships between some of the software product line architecture process activities and the overall software product line performance of an organization at the best of our knowledge. The results of this investigation provide empirical evidence that software product line architecture process activities play a significant role in successfully developing and managing a software product line.},
journal = {Inf. Softw. Technol.},
month = oct,
pages = {1098–1113},
numpages = {16},
keywords = {Domain engineering, Empirical study, Software architecture, Software engineering, Software product line}
}

@inproceedings{10.1145/3336294.3336309,
author = {Temple, Paul and Acher, Mathieu and Perrouin, Gilles and Biggio, Battista and Jezequel, Jean-Marc and Roli, Fabio},
title = {Towards Quality Assurance of Software Product Lines with Adversarial Configurations},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336309},
doi = {10.1145/3336294.3336309},
abstract = {Software product line (SPL) engineers put a lot of effort to ensure that, through the setting of a large number of possible configuration options, products are acceptable and well-tailored to customers' needs. Unfortunately, options and their mutual interactions create a huge configuration space which is intractable to exhaustively explore. Instead of testing all products, machine learning is increasingly employed to approximate the set of acceptable products out of a small training sample of configurations. Machine learning (ML) techniques can refine a software product line through learned constraints and a priori prevent non-acceptable products to be derived. In this paper, we use adversarial ML techniques to generate adversarial configurations fooling ML classifiers and pinpoint incorrect classifications of products (videos) derived from an industrial video generator. Our attacks yield (up to) a 100% misclassification rate and a drop in accuracy of 5%. We discuss the implications these results have on SPL quality assurance.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {277–288},
numpages = {12},
keywords = {machine learning, quality assurance, software product line, software testing, software variability},
location = {Paris, France},
series = {SPLC '19}
}

@article{10.1145/3034827,
author = {Bashroush, Rabih and Garba, Muhammad and Rabiser, Rick and Groher, Iris and Botterweck, Goetz},
title = {CASE Tool Support for Variability Management in Software Product Lines},
year = {2017},
issue_date = {January 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {50},
number = {1},
issn = {0360-0300},
url = {https://doi.org/10.1145/3034827},
doi = {10.1145/3034827},
abstract = {Software product lines (SPL) aim at reducing time-to-market and increasing software quality through extensive, planned reuse of artifacts. An essential activity in SPL is variability management, i.e., defining and managing commonality and variability among member products. Due to the large scale and complexity of today's software-intensive systems, variability management has become increasingly complex to conduct. Accordingly, tool support for variability management has been gathering increasing momentum over the last few years and can be considered a key success factor for developing and maintaining SPLs. While several studies have already been conducted on variability management, none of these analyzed the available tool support in detail. In this work, we report on a survey in which we analyzed 37 existing variability management tools identified using a systematic literature review to understand the tools’ characteristics, maturity, and the challenges in the field. We conclude that while most studies on variability management tools provide a good motivation and description of the research context and challenges, they often lack empirical data to support their claims and findings. It was also found that quality attributes important for the practical use of tools such as usability, integration, scalability, and performance were out of scope for most studies.},
journal = {ACM Comput. Surv.},
month = mar,
articleno = {14},
numpages = {45},
keywords = {Software engineering, computer-aided software engineering, software variability}
}

@article{10.1007/s10270-015-0471-3,
author = {Bonif\'{a}cio, Rodrigo and Borba, Paulo and Ferraz, Cristiano and Accioly, Paola},
title = {Empirical assessment of two approaches for specifying software product line use case scenarios},
year = {2017},
issue_date = {February  2017},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {16},
number = {1},
issn = {1619-1366},
url = {https://doi.org/10.1007/s10270-015-0471-3},
doi = {10.1007/s10270-015-0471-3},
abstract = {Modularity benefits, including the independent maintenance and comprehension of individual modules, have been widely advocated. However, empirical assessments to investigate those benefits have mostly focused on source code, and thus, the relevance of modularity to earlier artifacts is still not so clear (such as requirements and design models). In this paper, we use a multimethod technique, including designed experiments, to empirically evaluate the benefits of modularity in the context of two approaches for specifying product line use case scenarios: PLUSS and MSVCM. The first uses an annotative approach for specifying variability, whereas the second relies on aspect-oriented constructs for separating common and variant scenario specifications. After evaluating these approaches through the specifications of several systems, we find out that MSVCM reduces feature scattering and improves scenario cohesion. These results suggest that evolving a product line specification using MSVCM requires only localized changes. On the other hand, the results of six experiments reveal that MSVCM requires more time to derive the product line specifications and, contrasting with the modularity results, reduces the time to evolve a product line specification only when the subjects have been well trained and are used to the task of evolving product line specifications.},
journal = {Softw. Syst. Model.},
month = feb,
pages = {97–123},
numpages = {27},
keywords = {Experimentation in software engineering, Requirements engineering, Software modularity, Software product lines, Usage scenarios}
}

@inproceedings{10.1145/3233027.3241371,
author = {Ziadi, Tewfik and Lopez-Herrejon, Roberto E. and Acher, Mathieu and Martinez, Jabier},
title = {REVE 2018: 6th international workshop on reverse variability engineering},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3241371},
doi = {10.1145/3233027.3241371},
abstract = {Software Product Line (SPL) migration remains a challenging endeavour. From organizational issues to purely technical challenges, there is a wide range of barriers that complicates SPL adoption. The workshop REverse Variability Engineering (REVE) aims to foster research about making the most of the two main inputs for SPL migration: 1) domain knowledge and 2) legacy assets. Domain knowledge, usually implicit and spread across an organization, is key to define the SPL scope and to validate the variability model and its semantics. At the technical level, domain expertise is also needed to create or extract the reusable software components. Legacy assets can be, for instance, similar product variants (e.g., requirements, models, source code) that were implemented using ad-hoc reuse techniques such as clone-and-own. More generally, the workshop attracts researchers and practitioners contributing to processes, techniques, tools, or empirical studies related to the automatic, semi-automatic or manual extraction or refinement of SPL assets.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {296},
numpages = {1},
keywords = {extractive software product line adoption, reverse engineering, software product lines, variability management},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1109/SBCARS.2012.18,
author = {Ferreira, Felype and Borba, Paulo and Soares, Gustavo and Gheyi, Rohit},
title = {Making Software Product Line Evolution Safer},
year = {2012},
isbn = {9780769549170},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SBCARS.2012.18},
doi = {10.1109/SBCARS.2012.18},
abstract = {Developers evolve software product lines (SPLs) manually or using typical program refactoring tools. However, when evolving a product line to introduce new features or to improve its design, it is important to make sure that the behavior of existing products is not affected. Typical program refactorings cannot guarantee that because the SPL context goes beyond code and other kinds of core assets, and involves additional artifacts such as feature models and configuration knowledge. Besides that, in a SPL we typically have to deal with a set of possibly alternative assets that do not constitute a well-formed program. As a result, manual changes and existing program refactoring tools may introduce behavioral changes or invalidate existing product configurations. To avoid that, we propose approaches and implement tools for making product line evolution safer; these tools check whether SPL transformations are refinements in the sense that they preserve the behavior of the original SPL products. They implement different and practical approximations of a formal definition of SPL refinement. We evaluate the approaches in concrete SPL evolution scenarios where existing product's behavior must be preserved. However, our tools found that some transformations introduced behavioral changes. Moreover, we evaluate defective refinements, and the toolset detects the behavioral changes.},
booktitle = {Proceedings of the 2012 Sixth Brazilian Symposium on Software Components, Architectures and Reuse},
pages = {21–30},
numpages = {10},
keywords = {checking tools, product line evolution, refactoring, refinement, safe evolution, software product lines},
series = {SBCARS '12}
}

@inproceedings{10.1007/978-3-642-33176-3_7,
author = {ter Beek, Maurice H. and Muccini, Henry and Pelliccione, Patrizio},
title = {Assume-guarantee testing of evolving software product line architectures},
year = {2012},
isbn = {9783642331756},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-33176-3_7},
doi = {10.1007/978-3-642-33176-3_7},
abstract = {Despite some work on testing software product lines, maintaining the quality of products when a software product line evolves is still an open problem. In this paper, we propose a novel assume-guarantee testing approach as a solution to the following research question: how can we verify the correct functioning of products of an software product line when core components evolve? The underlying idea is to retest only some of the products that conform to the software product line architecture and to infer, using assume-guarantee reasoning, the correctness of the other products. Assume-guarantee reasoning moreover permits the retesting of only those components that are affected by the changes.},
booktitle = {Proceedings of the 4th International Conference on Software Engineering for Resilient Systems},
pages = {91–105},
numpages = {15},
keywords = {assume-guarantee testing, compositional verification, evolving software product lines, software testing},
location = {Pisa, Italy},
series = {SERENE'12}
}

@inproceedings{10.1145/2791060.2791062,
author = {Lopez-Herrejon, Roberto E. and Ziadi, Tewfik and Martinez, Jabier and Thurimella, Anil Kumar and Acher, Mathieu},
title = {Third International Workshop on Reverse Variability Engineering (REVE 2015)},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791062},
doi = {10.1145/2791060.2791062},
abstract = {Variability management of a product family is the core aspect of Software Product Line Engineering. The adoption of this mature approach requires a high upfront investment before being able to automatically generate product instances based on customer requirements. However, this adoption costs and risks could be reduced with an incremental approach, which mines existing assets and then transitions to full product line engineering. Those existing assets can be for instance similar product variants that were implemented using ad-hoc reuse techniques such as clone-and-own. Hence, there is a great need of bottom-up approaches that extract variability from the artifacts (across all the life cycle) of the legacy product variants and manage the consolidated variability. The REVE workshop series aims to bring together the Reengineering and Software Product Line Engineering communities to address this gap.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {394},
numpages = {1},
keywords = {constraint mining, feature location, feature model synthesis, legacy assets mining, reverse engineering, software product line engineering},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.4108/eai.3-12-2015.2262534,
author = {Vidal, Cristian and Benavides, David and Leger, Paul and Galindo, Jos\'{e} and Fukuda, Hiroaki},
title = {Mixing of Join Point Interfaces and Feature-Oriented Programming for Modular Software Product Line},
year = {2016},
isbn = {9781631901003},
publisher = {ICST (Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering)},
address = {Brussels, BEL},
url = {https://doi.org/10.4108/eai.3-12-2015.2262534},
doi = {10.4108/eai.3-12-2015.2262534},
abstract = {Feature-oriented programming (FOP) and aspect-oriented programming (AOP) focus are to modularize additional classes behavior and crosscutting concerns, respectively, for soft- ware evolution. So, these software development approaches represent advanced paradigms for modular software product lines development. Thereby, a FOP and AOP symbiosis would permit reaching pros and cons of both approaches.FOP allows developers to modularly refine classes collaboration for Software Product Lines (SPLs), an adequate approach to represent heterogeneous crosscutting concerns. Similarly, traditional AOP structurally modularizes in a re- fined manner homogeneous crosscutting concerns. Since traditional AOP presents implicit dependencies and strong coupling between classes and aspects, these AOP issues are solved by the Join Point Interface JPI approach. This article presents JPI Feature Modules for FOP + JPI SPL components modularization, i.e., classes, aspects, and join point interfaces along with their evolution, for a SPL transparent implementation in a FOP + JPI context. In addition, this article shows JPI Feature Modules of a case study to highlight mutual benefits of FOP and JPI approaches for a modular SPL software conception.},
booktitle = {Proceedings of the 9th EAI International Conference on Bio-Inspired Information and Communications Technologies (Formerly BIONETICS)},
pages = {433–437},
numpages = {5},
keywords = {classic aop, fop, jpi, jpi-fm, modular software, spl},
location = {New York City, United States},
series = {BICT'15}
}

@inproceedings{10.1109/SPLC.2011.35,
author = {Boutkova, Ekaterina},
title = {Experience with Variability Management in Requirement Specifications},
year = {2011},
isbn = {9780769544878},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SPLC.2011.35},
doi = {10.1109/SPLC.2011.35},
abstract = {The efficient reuse of requirements is a main challenge in industries that offer products with a high degree of reuse in their components, like the automotive industry. Here, an efficient and effective variability management (VM) that is highly integrated with the requirements specification process is an essential prerequisite for successful reuse of requirements. This paper presents experiences gained while introducing VM-based requirements reuse for natural language specifications at Daimler passenger car development. Here, out-of-the-box approaches were inappropriate due to poor scalability, inappropriate tool support, and the need to use decentralized variability models. As a consequence, we had to modify existing approaches to make them work in our environment. The paper briefly describes these modifications along with observations gained while implementing them in real-world specification processes.},
booktitle = {Proceedings of the 2011 15th International Software Product Line Conference},
pages = {303–312},
numpages = {10},
keywords = {feature, feature modelling, requirement specification, variability management},
series = {SPLC '11}
}

@inproceedings{10.5555/2820656.2820666,
author = {Tzeremes, Vasilios and Gomaa, Hassan},
title = {A software product line approach for end user development of smart spaces},
year = {2015},
publisher = {IEEE Press},
abstract = {Several End User Development (EUD) tools have been proposed that enable end users to create software applications for smart spaces. Even though most of the tools focus on architecture and usability they don't take into account the end user background. For instance some end users are domain experts, experienced software developers, and others have very limited computer skills. Furthermore current EUD approaches do not address reuse. In this paper we present XANA, an EUD framework that extends existing EUD tools with Software Product Line (SPL) concepts. The framework targets two types of users: the application designers and the end users. Application designers create the SPL for end users. End users select SPL features and derive applications for their smart spaces. XANA promotes reuse by allowing end users to reuse features and components to create applications. We illustrate its use with examples in a smart home setting.},
booktitle = {Proceedings of the Fifth International Workshop on Product LinE Approaches in Software Engineering},
pages = {23–26},
numpages = {4},
keywords = {end user development, feature modeling, smart spaces, software product lines, software reuse},
location = {Florence, Italy},
series = {PLEASE '15}
}

@article{10.1016/j.eswa.2012.01.109,
author = {Heradio, Ruben and Fernandez-Amoros, David and Torre-Cubillo, Luis and Perez Garcia-Plaza, Alberto},
title = {Improving the accuracy of COPLIMO to estimate the payoff of a software product line},
year = {2012},
issue_date = {July, 2012},
publisher = {Pergamon Press, Inc.},
address = {USA},
volume = {39},
number = {9},
issn = {0957-4174},
url = {https://doi.org/10.1016/j.eswa.2012.01.109},
doi = {10.1016/j.eswa.2012.01.109},
abstract = {Software product line engineering pursues the efficient development of families of similar products. COPLIMO is an economic model that relies on COCOMO II to estimate the benefits of adopting a product line approach compared to developing the products one by one. Although COPLIMO is an ideal economic model to support decision making on the incremental development of a product line, it makes some simplifying assumptions that may produce high distortions in the estimates (e.g., COPLIMO takes for granted that all the products have the same size). This paper proposes a COPLIMO reformulation that avoids such assumptions and, consequently, improves the accuracy of the estimates. To support our proposal, we present an algorithm that infers the additional information that our COPLIMO reformulation requires from feature diagrams, which is a widespread notation to model the domain of a product line.},
journal = {Expert Syst. Appl.},
month = jul,
pages = {7919–7928},
numpages = {10},
keywords = {Decision support, Economic model, Feature diagram, Product counting, Software product line}
}

@inproceedings{10.1109/SPLC.2011.24,
author = {Zhang, Xiaorui and Haugen, \O{}ystein and Moller-Pedersen, Birger},
title = {Model Comparison to Synthesize a Model-Driven Software Product Line},
year = {2011},
isbn = {9780769544878},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SPLC.2011.24},
doi = {10.1109/SPLC.2011.24},
abstract = {Current model-driven software product line development is mostly based on feature/variability modeling techniques, however, we see the potential for automatic assistance in identifying the commonality and variability of a set of models within the domain and synthesizing the product line model based on those. This paper presents a generic approach for synthesizing a software product line using model comparison. For model difference detection, the approach applies EMF Compare, a generic model comparison tool. For specifying the variability, the approach applies the Common Variability Language (CVL), a generic language for expressing variability. The SPL developer starts with comparing the existing potential product models in order to identify reusable assets (model fragments). Our tool prototype CVL Compare detects the difference between the existing product models and performs higher-order comparisons to explore the commonality and variability of the domain. Based on the comparison results, a preliminary product line model (CVL model) can be automatically induced and the SPL developer may further enhance the product line model. The approach is illustrated with an example of train control product line.},
booktitle = {Proceedings of the 2011 15th International Software Product Line Conference},
pages = {90–99},
numpages = {10},
keywords = {Common Variability Language, model comparison, model-driven software product lines, synthesize a product line model, variability identification},
series = {SPLC '11}
}

@inproceedings{10.1145/3461001.3471150,
author = {Pietsch, Christopher and Kelter, Udo and Kehrer, Timo},
title = {From pairwise to family-based generic analysis of delta-oriented model-based SPLs},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471150},
doi = {10.1145/3461001.3471150},
abstract = {One way to implement model-based software product lines (MBSPLs) is to use a transformational approach known as Delta Modeling (DM). Here, an MBSPL is implemented by one core model and a set of delta modules. Delta modules define model transformations using edit operations which add, remove or modify model elements. Editings of different delta modules can be in conflict or depend on each other, leading to conflict and dependency relations between delta modules. Conflicts and unfulfilled dependencies can cause the generation of a product to fail or to lead to invalid models. In order to spot such defects, one needs analysis tools for each modeling (sub-)language used. Existing generic approaches to statically detect such defects in a language-agnostic manner analyze pairs of delta modules. However, the pairwise approach can lead to false positives, i.e., conflicts and unfulfilled dependencies are reported although product generation does not fail. Following the idea of family-based analysis, this paper presents a new approach to detect pseudo defects resolved by "healing effects" implied by the network of dependencies. These effects typically occur when a delta module (partially) reverts the effect of a preceding delta module. We have implemented our approach within the SiPL framework and evaluated our family-based analysis using a realistic MBSPL known as Body Comfort System (BCS).},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {13–24},
numpages = {12},
keywords = {conflicts and dependencies, delta modeling, family-based analysis, graph transformation, model-based software product line engineering},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@article{10.1109/MS.2010.30,
author = {Lee, Jaejoon and Kotonya, Gerald},
title = {Combining Service-Orientation with Product Line Engineering},
year = {2010},
issue_date = {May 2010},
publisher = {IEEE Computer Society Press},
address = {Washington, DC, USA},
volume = {27},
number = {3},
issn = {0740-7459},
url = {https://doi.org/10.1109/MS.2010.30},
doi = {10.1109/MS.2010.30},
abstract = {Software product line engineering is a paradigm of software reuse for developing a family of products with reduced time to market and improved quality. Current product line approaches focus on developing statically configured products using core assets. But some researchers are investigating reusable and dynamically reconfigurable core assets, called dynamic software product lines (DSPLs). In this article, the authors discuss the challenges they faced in developing a service-oriented product line, which is a DSPL application domain that's built on services and a service-oriented architecture. These challenges include different notions of first-class objects as engineering drivers (features versus services), dynamic characteristics of a service-based system, involvement of third-party service providers, and variation (product configuration) control and management. The authors also briefly describe, as a possible solution, a QoS-aware framework that provides automated runtime support for service discovery, negotiation, monitoring, and service provider rating.},
journal = {IEEE Softw.},
month = may,
pages = {35–41},
numpages = {7},
keywords = {QoS-aware framework, dynamic product line, feature-oriented product line method, service orientation, service-oriented architecture, service-oriented product line, software, software engineering}
}

@inproceedings{10.1145/3236405.3237203,
author = {Quinton, Cl\'{e}ment},
title = {Giving students a glimpse of the SPL lifecycle in six hours: challenge accepted!},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3237203},
doi = {10.1145/3236405.3237203},
abstract = {As part of their second year of Master's course at University of Lille, students in software engineering get an insight into software product line engineering and variability management techniques. This paper describes my own experience in teaching these two concepts, spread over two classes of three hours each mixing lecture and lab sessions. It also reports on my impressions and on feedback provided by the students who were asked to answer a short questionary after the course.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {42–43},
numpages = {2},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@article{10.1007/s10515-011-0099-7,
author = {Bagheri, Ebrahim and Ensan, Faezeh and Gasevic, Dragan},
title = {Decision support for the software product line domain engineering lifecycle},
year = {2012},
issue_date = {September 2012},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {19},
number = {3},
issn = {0928-8910},
url = {https://doi.org/10.1007/s10515-011-0099-7},
doi = {10.1007/s10515-011-0099-7},
abstract = {Software product line engineering is a paradigm that advocates the reusability of software engineering assets and the rapid development of new applications for a target domain. These objectives are achieved by capturing the commonalities and variabilities between the applications of the target domain and through the development of comprehensive and variability-covering feature models. The feature models developed within the software product line development process need to cover the relevant features and aspects of the target domain. In other words, the feature models should be elaborate representations of the feature space of that domain. Given that feature models, i.e., software product line feature models, are developed mostly by domain analysts by sifting through domain documentation, corporate records and transcribed interviews, the process is a cumbersome and error-prone one. In this paper, we propose a decision support platform that assists domain analysts throughout the domain engineering lifecycle by: (1) automatically performing natural language processing tasks over domain documents and identifying important information for the domain analysts such as the features and integrity constraints that exist in the domain documents; (2) providing a collaboration platform around the domain documents such that multiple domain analysts can collaborate with each other during the process using a Wiki; (3) formulating semantic links between domain terminology with external widely used ontologies such as WordNet in order to disambiguate the terms used in domain documents; and (4) developing traceability links between the unstructured information available in the domain documents and their formal counterparts within the formal feature model representations. Results obtained from our controlled experimentations show that the decision support platform is effective in increasing the performance of the domain analysts during the domain engineering lifecycle in terms of both the coverage and accuracy measures.},
journal = {Automated Software Engg.},
month = sep,
pages = {335–377},
numpages = {43},
keywords = {Domain engineering, Feature models, NLP model inference, Software product lines}
}

@inproceedings{10.1145/2791060.2791064,
author = {Perrouin, Gilles and Legay, Axel},
title = {SPLat 2015: Second International Workshop on Software Product Line Analysis Tools},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791064},
doi = {10.1145/2791060.2791064},
abstract = {SPLat 2015 workshop aims to provide a forum where various approaches to formal analysis and testing of variability-intensive systems can be presented, evaluated and discussed. In particular, the workshop tries to identify commonalities and variabilities regarding the choice of underlying concepts that capture variability as well as strengths and weaknesses of approaches in their effort to defeat combinatorial explosion. The long term goal of the workshop is to provide guidance to practitioners on where and when to use the aforementioned techniques while validating variability-intensive systems.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {395},
numpages = {1},
keywords = {analysis, software product lines, testing, validation, variability, verification},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3233027.3236402,
author = {Martinez, Jabier and Ordo\~{n}ez, Nicolas and T\"{e}rnava, Xhevahire and Ziadi, Tewfik and Aponte, Jairo and Figueiredo, Eduardo and Valente, Marco Tulio},
title = {Feature location benchmark with argoUML SPL},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3236402},
doi = {10.1145/3233027.3236402},
abstract = {Feature location is a traceability recovery activity to identify the implementation elements associated to a characteristic of a system. Besides its relevance for software maintenance of a single system, feature location in a collection of systems received a lot of attention as a first step to re-engineer system variants (created through clone-and-own) into a Software Product Line (SPL). In this context, the objective is to unambiguously identify the boundaries of a feature inside a family of systems to later create reusable assets from these implementation elements. Among all the case studies in the SPL literature, variants derived from ArgoUML SPL stands out as the most used one. However, the use of different settings, or the omission of relevant information (e.g., the exact configurations of the variants or the way the metrics are calculated), makes it difficult to reproduce or benchmark the different feature location techniques even if the same ArgoUML SPL is used. With the objective to foster the research area on feature location, we provide a set of common scenarios using ArgoUML SPL and a set of utils to obtain metrics based on the results of existing and novel feature location techniques.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {257–263},
numpages = {7},
keywords = {argoUML, benchmark, extractive software product line adoption, feature location, reverse-engineering, software product lines},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.5555/2399776.2399785,
author = {Bagheri, Ebrahim and Ensan, Faezeh and Gasevic, Dragan},
title = {Grammar-based test generation for software product line feature models},
year = {2012},
publisher = {IBM Corp.},
address = {USA},
abstract = {Product lines are often employed for the facilitation of software re-use, rapid application development and increase in productivity. Despite the numerous advantages of software product lines, the task of testing them is a cumbersome process due to the fact that the number of applications that need to be tested is exponential to the number of features represented in the product line. In this paper, we attempt to reduce the number of required tests for testing a software product line while at the same time preserving an acceptable fault coverage. For this purpose, we introduce eight coverage criteria based on the transformation of software product line feature models into formal context-free grammars. The theoretical foundation for the proposed coverage criteria is based on the development of equivalence partitions on the software product line configuration space and the use of boundary value analysis for test suite generation. We have performed experiments on several SPLOT feature models, the results of which show that the test suite generation strategies based on the proposed coverage criteria are effective in significantly reducing the number of required tests and at the same time maintaining a high fault coverage ratio.},
booktitle = {Proceedings of the 2012 Conference of the Center for Advanced Studies on Collaborative Research},
pages = {87–101},
numpages = {15},
location = {Toronto, Ontario, Canada},
series = {CASCON '12}
}

@inproceedings{10.1145/3382026.3425767,
author = {Marchezan, Luciano and Carbonell, Jo\~{a}o and Rodrigues, Elder and Bernardino, Maicon and Basso, F\'{a}bio Paulo and Assun\c{c}\~{a}o, Wesley K. G.},
title = {Enhancing the Feature Retrieval Process with Scoping and Tool Support: PAxSPL_v2},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3425767},
doi = {10.1145/3382026.3425767},
abstract = {Software Product Lines (SPLs) are commonly adopted with an extractive approach, by performing a reengineering process in legacy systems, when dealing with variability and reuse became challenging. As a starting activity of the process, the legacy systems are analyzed to retrieve, categorize, and group their features in terms of commonality and variability. Due to the importance of this feature retrieving, we proposed the Prepare, Assemble, and Execute framework for SPL reengineering (PAxSPL). PAxSPL aims at guiding users to customize the feature retrieval for their scenario. In an initial evaluation of the PAxSPL in a real-world scenario, we could observe the need for including scoping activities and implementing a tool to make the framework more adoptable in practice. In this paper, we describe how we performed these improvements. We performed the evolution of PAxSPL by including SPL scoping concepts and activities into our framework as well as developing a supporting tool. We also conducted a pilot study to evaluate how PAxSPL allows instantiating a scenario where the SPL reengineering were conducted. The results show that all artifacts, activities, and techniques from the scenario could be properly represented. However, we also identified a potential limitation during the assembly of techniques regarding parallel activities. The main contribution is PAxSPL_v2 that makes the framework more adherent to industries performing the reengineering of legacy systems into SPLs.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {29–36},
numpages = {8},
keywords = {automated support, software product lines, variability management},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1109/APSEC.2009.73,
author = {Halim, Shahliza Abd and Jawawi, Dayang Norhayati A. and Deris, Safaai},
title = {Requirements Identification and Representation in Software Product Line},
year = {2009},
isbn = {9780769539096},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/APSEC.2009.73},
doi = {10.1109/APSEC.2009.73},
abstract = {Software Product Line (SPL) core assets development is an effective approach in software reuse in which core assets can be shared among the members of the product line with an explicit treatment of variability. Considering reuse early in development phase can promise the increase in reuse and understanding reuse at a later development phase. This paper concentrates on identifying and representing variability at requirement level. The proposed approach differs slightly from other approaches where identification of the variant requirements is done with commonality and variability analysis and using two important requirements model, feature and use case model. Relation between both requirements model is through matrix table. This paper illustrates the application of this approach using the library systems product line example.},
booktitle = {Proceedings of the 2009 16th Asia-Pacific Software Engineering Conference},
pages = {340–346},
numpages = {7},
keywords = {feature model, requirements, software product line, use case model, variability},
series = {APSEC '09}
}

@inproceedings{10.1109/PLEASE.2015.14,
author = {Tzeremes, Vasilios and Gomaa, Hassan},
title = {A Software Product Line Approach for End User Development of Smart Spaces},
year = {2015},
isbn = {9781467370615},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/PLEASE.2015.14},
doi = {10.1109/PLEASE.2015.14},
abstract = {Several End User Development (EUD) tools have been proposed that enable end users to create software applications for smart spaces. Even though most of the tools focus on architecture and usability they don't take into account the end user background. For instance some end users are domain experts, experienced software developers, and others have very limited computer skills. Furthermore current EUD approaches do not address reuse. In this paper we present XANA, an EUD framework that extends existing EUD tools with Software Product Line (SPL) concepts. The framework targets two types of users: the application designers and the end users. Application designers create the SPL for end users. End users select SPL features and derive applications for their smart spaces. XANA promotes reuse by allowing end users to reuse features and components to create applications. We illustrate its use with examples in a smart home setting.},
booktitle = {Proceedings of the 2015 IEEE/ACM 5th International Workshop on Product LinE Approaches in Software Engineering},
pages = {23–26},
numpages = {4},
keywords = {End User Development, Feature Modeling, Smart Spaces, Software Product Lines, Software Reuse},
series = {PLEASE '15}
}

@inproceedings{10.1145/3461002.3473941,
author = {Fadhlillah, Hafiyyan Sayyid and Feichtinger, Kevin and Sonnleithner, Lisa and Rabiser, Rick and Zoitl, Alois},
title = {Towards heterogeneous multi-dimensional variability modeling in cyber-physical production systems},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473941},
doi = {10.1145/3461002.3473941},
abstract = {Cyber-Physical Production Systems (CPPSs) are complex systems interacting with their environment by sensors and actuators. Such systems typically have a long lifespan, over which a plethora of variants are developed and maintained. The heterogeneity of hardware and software components used in CPPSs and the multiple disciplines (mechanical, electrical, software engineering) involved in the development and maintenance of CPPSs, however, make it difficult to manage their variability. Specifically, variability needs to be expressed in and across multiple disciplines, which use heterogeneous methods and tools. This also affects configuration as well as co-evolution of models and artifacts. In this short paper, we discuss our first ideas towards a Heterogeneous Multi-Dimensional Variability Modeling approach for CPPSs. Our approach builds on and extends existing work to address the challenges of modeling the variability of CPPSs and supporting their configuration and evolution. We showcase our idea using a case study system and outline a research agenda.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {123–129},
numpages = {7},
keywords = {cyber-physical production system, software configuration, software product line, variability modeling},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/2554850.2554987,
author = {Parra, Carlos and Joya, Diego and Giral, Leonardo and Infante, Alvaro},
title = {An SOA approach for automating software product line adoption},
year = {2014},
isbn = {9781450324694},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2554850.2554987},
doi = {10.1145/2554850.2554987},
abstract = {Nowadays, the software industry is faced with challenges regarding complexity, time to market, quality standards and evolution. To face those challenges, two strategies that are gaining interest both in academy and industry are Service Oriented Architecture (SOA) and Software Product Lines (SPL). While SOA aims at building applications from an orchestration of services, SPL consists in building a set of core-assets and a derivation strategy based on such assets. Adopting such approaches involves important challenges with regard to existing software artifacts that must be transformed in order to respect an architecture that focus on modularity and reuse. This paper presents an industrial experience of such transformation. We propose a non-intrusive reverse engineering process for the development of modular services obtained automatically from existing software artifacts, and a variability-driven derivation process to assembly products out of such services. To validate our approach, we have implemented the reverse engineering and derivation processes using real software JEE artifacts from a component framework of reusable functionalities in several different enterprise applications. The results show important benefits in terms of the development time and flexibility.},
booktitle = {Proceedings of the 29th Annual ACM Symposium on Applied Computing},
pages = {1231–1238},
numpages = {8},
keywords = {model-driven engineering, reverse engineering, service oriented architecture, software product lines},
location = {Gyeongju, Republic of Korea},
series = {SAC '14}
}

@article{10.1007/s11219-010-9127-2,
author = {Bagheri, Ebrahim and Gasevic, Dragan},
title = {Assessing the maintainability of software product line feature models using structural metrics},
year = {2011},
issue_date = {September 2011},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {19},
number = {3},
issn = {0963-9314},
url = {https://doi.org/10.1007/s11219-010-9127-2},
doi = {10.1007/s11219-010-9127-2},
abstract = {A software product line is a unified representation of a set of conceptually similar software systems that share many common features and satisfy the requirements of a particular domain. Within the context of software product lines, feature models are tree-like structures that are widely used for modeling and representing the inherent commonality and variability of software product lines. Given the fact that many different software systems can be spawned from a single software product line, it can be anticipated that a low-quality design can ripple through to many spawned software systems. Therefore, the need for early indicators of external quality attributes is recognized in order to avoid the implications of defective and low-quality design during the late stages of production. In this paper, we propose a set of structural metrics for software product line feature models and theoretically validate them using valid measurement-theoretic principles. Further, we investigate through controlled experimentation whether these structural metrics can be good predictors (early indicators) of the three main subcharacteristics of maintainability: analyzability, changeability, and understandability. More specifically, a four-step analysis is conducted: (1) investigating whether feature model structural metrics are correlated with feature model maintainability through the employment of classical statistical correlation techniques; (2) understanding how well each of the structural metrics can serve as discriminatory references for maintainability; (3) identifying the sufficient set of structural metrics for evaluating each of the subcharacteristics of maintainability; and (4) evaluating how well different prediction models based on the proposed structural metrics can perform in indicating the maintainability of a feature model. Results obtained from the controlled experiment support the idea that useful prediction models can be built for the purpose of evaluating feature model maintainability using early structural metrics. Some of the structural metrics show significant correlation with the subjective perception of the subjects about the maintainability of the feature models.},
journal = {Software Quality Journal},
month = sep,
pages = {579–612},
numpages = {34},
keywords = {Controlled experimentation, Feature model, Maintainability, Quality attributes, Software prediction model, Software product line, Structural complexity}
}

@inproceedings{10.1145/3382025.3414991,
author = {Marchezan, Luciano and Rodrigues, Elder and Bernardino, Maicon and Basso, F\'{a}bio Paulo},
title = {PAxSPL: a feature retrieval process for SPL reengineering},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414991},
doi = {10.1145/3382025.3414991},
abstract = {In this extended abstract, we discuss the Journal First summary of our work published in the Journal of Software: Practice and Experience (SPE) [1].},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {1},
numpages = {1},
keywords = {software product line reengineering, software product lines, software reuse},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3307630.3342705,
author = {Krieter, Sebastian},
title = {Enabling Efficient Automated Configuration Generation and Management},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342705},
doi = {10.1145/3307630.3342705},
abstract = {Creating and managing valid configurations is one of the main tasks in software product line engineering. Due to the often complex constraints from a feature model, some kind of automated configuration generation is required to facilitate the configuration process for users and developers. For instance, decision propagation can be applied to support users in configuring a product from a software product line (SPL) with less manual effort and error potential, leading to a semi-automatic configuration process. Furthermore, fully-automatic configuration processes, such as random sampling or t-wise interaction sampling can be employed to test or to optimize an SPL. However, current techniques for automated configuration generation still do not scale well to SPLs with large and complex feature models. Within our thesis, we identify current challenges regarding the efficiency and effectiveness of the semi- and fully-automatic configuration process and aim to address these challenges by introducing novel techniques and improving current ones. Our preliminary results show already show promising progress for both, the semi- and fully-automatic configuration process.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {215–221},
numpages = {7},
keywords = {configurable system, decision propagation, software product lines, t-wise sampling, uniform random sampling},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3382025.3414975,
author = {Becker, Martin and Sch\"{a}fer, Andreas},
title = {Variability realization in UML/SysML models},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414975},
doi = {10.1145/3382025.3414975},
abstract = {Motivated by experiences from different industrial settings, the tutorial reveals the increasing need for guidance and decision support on how to handle variants and variability in SysML and UML models. While a substantial amount of variability realization approaches has already been discussed on the level of source code, there is little guidance for practitioners on the model level. With this, there is major uncertainty in dealing with concurrent changes and parallel modeling of similar system variants.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {39},
numpages = {1},
keywords = {SysML, UML, decision support, model-based systems engineering, system and software product line engineering, variability mechanism, variability realization, variant management},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@article{10.1016/j.jss.2015.11.005,
author = {Horcas, Jose-Miguel and Pinto, M\'{o}nica and Fuentes, Lidia},
title = {An automatic process for weaving functional quality attributes using a software product line approach},
year = {2016},
issue_date = {February 2016},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {112},
number = {C},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2015.11.005},
doi = {10.1016/j.jss.2015.11.005},
abstract = {We define a family of FQAs ready to be reused in many software architectures.We define an Aspect-Oriented SPL to inject customized FQAs into the applications.Two different implementations of the SPL are provided and compared.Modelling FQAs separately from the applications increases reusability.The final architectures exhibit a high degree of separation of concerns. Some quality attributes can be modelled using software components, and are normally known as Functional Quality Attributes (FQAs). Applications may require different FQAs, and each FQA (e.g., security) can be composed of many concerns (e.g., access control or authentication). They normally have dependencies between them and crosscut the system architecture. The goal of the work presented here is to provide the means for software architects to focus only on application functionality, without having to worry about FQAs. The idea is to model FQAs separately from application functionality following a Software Product Line (SPL) approach. By combining SPL and aspect-oriented mechanisms, we will define a generic process to model and automatically inject FQAs into the application without breaking the base architecture. We will provide and compare two implementations of our generic approach using different variability and architecture description languages: (i) feature models and an aspect-oriented architecture description language; and (ii) the Common Variability Language (CVL) and a MOF-compliant language (e.g., UML). We also discuss the benefits and limitations of our approach. Modelling FQAs separately from the base application has many advantages (e.g., reusability, less coupled components, high cohesive architectures).},
journal = {J. Syst. Softw.},
month = feb,
pages = {78–95},
numpages = {18},
keywords = {Quality attributes, Software product lines, Weaving}
}

@inproceedings{10.5555/1753235.1753272,
author = {Dordowsky, Frank and Hipp, Walter},
title = {Adopting software product line principles to manage software variants in a complex avionics system},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {Eurocopter is the majority partner in NH Industries, the international consortium that develops and produces the medium weight multi-role helicopter NH90. AgustaWestland and Stork Fokker are additional partners. The NH90 has been successfully sold to 14 nations and their armed forces. The software division at Eurocopter Germany develops the on-board software for three computers of the NH90 avionics CORE and MISSION Systems. The growing number of customers and their specific application domains for the NH90 has led to an increasing number of functionally different helicopter variants. Moreover, during the long development time that is typical for complex military avionics projects, the computing technology has changed considerably over time so that the current operational software has to fit to several processor architectures. In order to cope with the high number of software variants and technology variations, the NH90 software team developed concepts and strategies for SW architecture and tool modifications based on Software Product Line (SPL) principles.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {265–274},
numpages = {10},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.1145/2755567.2755568,
author = {Oliveira, Edson and Allian, Ana P.},
title = {Do Reference Architectures can Contribute to Standardizing Variability Management Tools?},
year = {2015},
isbn = {9781450334457},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2755567.2755568},
doi = {10.1145/2755567.2755568},
abstract = {Variability Management (VM) is one of the core activities for the success of software reuse. Several VM tools developed in academia and industry support mass customization of new software products and decrease time to market. Despite of a significant number of VM tools, in most cases, industry has adopted different techniques for managing variability, including producing their own tools. Such a heterogeneity provides difficulties in establishing VM, product customization and derivation, and standardization. From another perspective, reference architectures (RA) are a special type of software architecture as it encompasses specific domain knowledge, making it easier the development, standardization and evolution of software systems. Concepts from reference architectures can mitigate the lacking of VM tools standardization. Therefore, this position paper presents a vision towards supporting architectural standardization of VM tools, through reference architectures, for achieving a well-recognized understanding of such a domain and promoting reuse of design expertise. In this context, the main contribution of this paper is providing a discussion with regard to reference architectures and variability management tools towards supporting answering the following research question: "Do reference architectures can contribute to standardizing VM tools"?. Such standardization is useful as it fosters interoperability and reuse.},
booktitle = {Proceedings of the 1st International Workshop on Exploring Component-Based Techniques for Constructing Reference Architectures},
pages = {9–12},
numpages = {4},
keywords = {reference architectures, standardization, variability management tools},
location = {Montr\'{e}al, QC, Canada},
series = {CobRA '15}
}

@inproceedings{10.1007/978-3-642-11266-9_10,
author = {Sch\"{u}rr, Andy and Oster, Sebastian and Markert, Florian},
title = {Model-Driven Software Product Line Testing: An Integrated Approach},
year = {2009},
isbn = {9783642112652},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-11266-9_10},
doi = {10.1007/978-3-642-11266-9_10},
abstract = {Software Product Line engineering is a popular approach which improves reusability of software in a large number of products that share a common set of features. Feature Models (FMs) are often used to model commonalities and variabilities within a Software Product Line (SPL). Due to their variability, testing SPLs is very challenging and many different approaches exist. Classification Trees (CTs) are a well-known and in practice popular black-box approach for the systematic derivation of a set of test cases of a single software system instance. In this paper, we explore the relations and similarities between FMs and CTs. Our contribution is the introduction of an integrated approach  Feature Model for Testing  (FMT) marrying properties and abilities of CTs and FMs.},
booktitle = {Proceedings of the 36th Conference on Current Trends in Theory and Practice of Computer Science},
pages = {112–131},
numpages = {20},
location = {`pindlerov Ml\'{y}n, Czech Republic},
series = {SOFSEM '10}
}

@article{10.1007/s10009-012-0229-y,
author = {Heider, Wolfgang and Rabiser, Rick and Gr\"{u}nbacher, Paul},
title = {Facilitating the evolution of products in product line engineering by capturing and replaying configuration decisions},
year = {2012},
issue_date = {October   2012},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {14},
number = {5},
issn = {1433-2779},
url = {https://doi.org/10.1007/s10009-012-0229-y},
doi = {10.1007/s10009-012-0229-y},
abstract = {Software product lines rely on developing reusable artifacts and defining their variability in models to support and accelerate the derivation of individual products. A major challenge in product lines is the continuous evolution of both the reusable artifacts and derived products. Products that have been derived from a product line have to be updated regularly, e.g., after bugfixes or the development of new features. Changes to reusable artifacts and variability models have to be propagated to derived products. The aim of our research is to provide automated support for the evolution of products derived from product lines by capturing and replaying configuration decisions. Our PUPLE (Product Updates in Product Line Engineering) approach supports updating derived products after changes to the product line they have been derived from. It exploits the structure of variability models and uses change-tracking data to minimize user intervention. The paper first explores how different types of product line changes influence the derived products. It then presents extensions to our decision-oriented product line approach DOPLER to support product line evolution. We evaluate the feasibility of the PUPLE approach with evolution tasks that were performed by engineers of an industry partner on a product line of an Eclipse-based tool suite with six derived products. We conclude with lessons learned and limitations of our approach.},
journal = {Int. J. Softw. Tools Technol. Transf.},
month = oct,
pages = {613–630},
numpages = {18},
keywords = {Product line engineering, Product update tool, Software evolution}
}

@inproceedings{10.1145/2304676.2304679,
author = {Klatt, Benjamin and K\"{u}ster, Martin},
title = {Respecting component architecture to migrate product copies to a software product line},
year = {2012},
isbn = {9781450313483},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2304676.2304679},
doi = {10.1145/2304676.2304679},
abstract = {Software product lines (SPL) are a well-known concept to efficiently develop product variants. However, migrating existing, customised product copies to a product line is still an open issue due to the required comprehension of differences among products and SPL design decisions. Most existing SPL approaches are focused on forward engineering. Only few aim to handle SPL evolution, but even those lack support of variability reverse engineering, which is necessary for migrating product copies to a product line. In this paper, we present how component architecture information can be used to enhance a variabilty reverse engineering process to target this challenge and show the relevance of component architecture in the individual requirements on the resulting SPL. We further provide an illustrating example to show how the concept is applied.},
booktitle = {Proceedings of the 17th International Doctoral Symposium on Components and Architecture},
pages = {7–12},
numpages = {6},
keywords = {component architecture, reverse engineering, software product line},
location = {Bertinoro, Italy},
series = {WCOP '12}
}

@inproceedings{10.1145/3336294.3336318,
author = {Ebert, Rolf and Jolianis, Jahir and Kriebel, Stefan and Markthaler, Matthias and Pruenster, Benjamin and Rumpe, Bernhard and Salman, Karin Samira},
title = {Applying Product Line Testing for the Electric Drive System},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336318},
doi = {10.1145/3336294.3336318},
abstract = {The growth in electrification and digitalization of vehicles leads to increasing variability and complexity of automotive systems. This poses new challenges for verification and validation, identified in a Product Line Engineering case study for the electric drive system. To overcome those challenges we developed a Product Line Testing methodology called TIGRE. In this paper, we present the TIGRE methodology. TIGRE comprises the identification and documentation of relevant data for efficient product line testing and the application of this data in the test management of an agile project environment. Furthermore, we present our experiences from the introduction into a large-scale industrial context. Based on our results from the introduction, we conclude that the TIGRE approach reduces the testing effort for automotive product lines significantly and, furthermore, allows us to transfer the results to untested products.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {14–24},
numpages = {11},
keywords = {automotive industry, product line engineering, product line testing, software product lines},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/1985484.1985487,
author = {Livengood, Steve},
title = {Issues in software product line evolution: complex changes in variability models},
year = {2011},
isbn = {9781450305846},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1985484.1985487},
doi = {10.1145/1985484.1985487},
abstract = {This paper describes industrial experience with the evolution of a software product line of multifunction printers, specifically, experience with modification of the variability model in ways that alter constraints and other relationships between variation points. Evaluating the impact of such changes has proven to be difficult in practice and is an unsolved problem for the organization described.},
booktitle = {Proceedings of the 2nd International Workshop on Product Line Approaches in Software Engineering},
pages = {6–9},
numpages = {4},
keywords = {evolution, impact assessment, scope, software product families, software product lines, variability, variation point},
location = {Waikiki, Honolulu, HI, USA},
series = {PLEASE '11}
}

@article{10.1016/j.jss.2013.12.038,
author = {Capilla, Rafael and Bosch, Jan and Trinidad, Pablo and Ruiz-Cort\'{e}s, Antonio and Hinchey, Mike},
title = {An overview of Dynamic Software Product Line architectures and techniques: Observations from research and industry},
year = {2014},
issue_date = {May, 2014},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {91},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2013.12.038},
doi = {10.1016/j.jss.2013.12.038},
abstract = {Over the last two decades, software product lines have been used successfully in industry for building families of systems of related products, maximizing reuse, and exploiting their variable and configurable options. In a changing world, modern software demands more and more adaptive features, many of them performed dynamically, and the requirements on the software architecture to support adaptation capabilities of systems are increasing in importance. Today, many embedded system families and application domains such as ecosystems, service-based applications, and self-adaptive systems demand runtime capabilities for flexible adaptation, reconfiguration, and post-deployment activities. However, as traditional software product line architectures fail to provide mechanisms for runtime adaptation and behavior of products, there is a shift toward designing more dynamic software architectures and building more adaptable software able to handle autonomous decision-making, according to varying conditions. Recent development approaches such as Dynamic Software Product Lines (DSPLs) attempt to face the challenges of the dynamic conditions of such systems but the state of these solution architectures is still immature. In order to provide a more comprehensive treatment of DSPL models and their solution architectures, in this research work we provide an overview of the state of the art and current techniques that, partially, attempt to face the many challenges of runtime variability mechanisms in the context of Dynamic Software Product Lines. We also provide an integrated view of the challenges and solutions that are necessary to support runtime variability mechanisms in DSPL models and software architectures.},
journal = {J. Syst. Softw.},
month = may,
pages = {3–23},
numpages = {21},
keywords = {Dynamic Software Product Lines, Dynamic variability, Feature models, Software architecture}
}

@inproceedings{10.1109/SPLC.2011.48,
author = {Pohjalainen, Pietu},
title = {Bottom-up Modeling for a Software Product Line: An Experience Report on Agile Modeling of Governmental Mobile Networks},
year = {2011},
isbn = {9780769544878},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SPLC.2011.48},
doi = {10.1109/SPLC.2011.48},
abstract = {Agile software development has been gaining increasing attention during the last decade. In agile process models, attention is paid to building the ability to respond to change. This is problematic in view of product line engineering and formal modeling, since traditionally these two require heavy up-front planning. We are presenting our experiences on combining these three in an industrial setting of building a telecommunication network provisioning product line. We avoided the up-front planning by building our modeling toolset in a bottom-up way and improving the toolset whenever required by the needs of the on-going iteration.},
booktitle = {Proceedings of the 2011 15th International Software Product Line Conference},
pages = {323–332},
numpages = {10},
keywords = {agile software development, feature modeling, telecommunication service provisioning},
series = {SPLC '11}
}

@inproceedings{10.1007/978-3-642-34059-8_10,
author = {Haber, Arne and Rendel, Holger and Rumpe, Bernhard and Schaefer, Ina},
title = {Evolving delta-oriented software product line architectures},
year = {2012},
isbn = {9783642340581},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-34059-8_10},
doi = {10.1007/978-3-642-34059-8_10},
abstract = {Diversity is prevalent in modern software systems. Several system variants exist at the same time in order to adapt to changing user requirements. Additionally, software systems evolve over time in order to adjust to unanticipated changes in their application environment. In modern software development, software architecture modeling is an important means to deal with system complexity by architectural decomposition. This leads to the need of architectural description languages that can represent spatial and temporal variability. In this paper, we present delta modeling of software architectures as a uniform modeling formalism for architectural variability in space and in time. In order to avoid degeneration of the product line model under system evolution, we present refactoring techniques to maintain and improve the quality of the variability model. Using a running example from the automotive domain, we evaluate our approach by carrying out a case study that compares delta modeling with annotative variability modeling.},
booktitle = {Proceedings of the 17th Monterey Conference on Large-Scale Complex IT Systems: Development, Operation and Management},
pages = {183–208},
numpages = {26},
location = {Oxford, UK}
}

@inproceedings{10.1109/WICSA-ECSA.212.42,
author = {Groher, Iris and Weinreich, Rainer},
title = {Integrating Variability Management and Software Architecture},
year = {2012},
isbn = {9780769548272},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/WICSA-ECSA.212.42},
doi = {10.1109/WICSA-ECSA.212.42},
abstract = {Effective variability support has become an important attribute of modern software development practices. Organizations show an increasing interest in the development of software applications using software platforms, reusable components, and mass customization. Even though many variability management tools exist, an approach that integrates support for variability management (e.g. features, decisions, variation points, and variants) directly into architecture models is still missing. Making variability concepts an integral part of architecture models has many benefits. Variability management and architecture development can be integrated into one consistent information model and development environment supporting full traceability of architectural artifacts (e.g. requirements, features, components) on all levels of the development lifecycle. In this paper we show how we integrated orthogonal variability modeling and feature modeling into LISA, an approach and toolkit for architecture management and analysis. Variability management is no longer a separate activity but an integral part of the architecture development lifecycle.},
booktitle = {Proceedings of the 2012 Joint Working IEEE/IFIP Conference on Software Architecture and European Conference on Software Architecture},
pages = {262–266},
numpages = {5},
keywords = {architectural modeling, domain engineering, variability management},
series = {WICSA-ECSA '12}
}

@inproceedings{10.1145/2491627.2491655,
author = {Dumitrescu, Cosmin and Mazo, Raul and Salinesi, Camille and Dauron, Alain},
title = {Bridging the gap between product lines and systems engineering: an experience in variability management for automotive model based systems engineering},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491655},
doi = {10.1145/2491627.2491655},
abstract = {We present in this paper an experience in modeling a family of parking brake systems, with shared assets and alternative solutions, and relate them to the needs of Renault in terms of variability management. The models are realized using a set of customized tools for model based systems engineering and variability management, based on SysML models. The purpose is to present an industrial context that requires the adoption of a product line approach and of variability modeling techniques, outside of a pure-software domain. At Renault, the interest is in identifying variations and reuse opportunities early in the product development cycle, as well as in preparing vehicle configuration specifications during the systems engineering process. This would lead to lowering the engineering effort and to higher quality and confidence in carry-over and carry across based solutions. We advocate for a tight integration of variability management with the model based systems engineering approach, which needs to address methodological support, modeling techniques and efficient tools for interactive configuration, adapted for engineering activities.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {254–263},
numpages = {10},
keywords = {systems engineering, variability management},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.5555/2022115.2022131,
author = {Wu, Yijian and Peng, Xin and Zhao, Wenyun},
title = {Architecture evolution in software product line: an industrial case study},
year = {2011},
isbn = {9783642213465},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {A software product line (SPL) usually involves a shared set of core assets and a series of application products. To ensure consistency, the evolution of the core assets and all the application products should be coordinated and synchronized under a unified evolution process. Therefore, SPL evolution often involves cross-product propagation and synchronization besides application derivation based on core assets, presenting quite different characteristic from the evolution of individual software products. As software architectures, including the product line architecture (PLA) and application architectures, play a central role in SPL engineering and evolution, architecture-based evolution analysis is a natural way for analyzing and managing SPL evolution. In this paper, we explore common practices of architecture evolution and the rationale behind in industrial SPL development. To this end, we conduct a case study with Wingsoft examination system product line (WES-PL), an industrial product line with an evolution history of eight years and more than 10 application products. In the case study, we reviewed the evolution history of WES-PL architecture and analyzed several typical evolution cases. Based on the historical analysis, we identify some special problems in industrial SPL practice from the aspect of architecture evolution and summarize some useful experiences about SPL evolution decisions to complement classical SPL methodology. On the other hand, we also propose some possible improvements for the evolution management in WES-PL.},
booktitle = {Proceedings of the 12th International Conference on Top Productivity through Software Reuse},
pages = {135–150},
numpages = {16},
location = {Pohang, South Korea},
series = {ICSR'11}
}

@inproceedings{10.1145/3307630.3342409,
author = {Ignaim, Karam and Fernandes, Jo\~{a}o M.},
title = {An Industrial Case Study for Adopting Software Product Lines in Automotive Industry: An Evolution-Based Approach for Software Product Lines (EVOA-SPL)},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342409},
doi = {10.1145/3307630.3342409},
abstract = {Software Product Lines (SPLs) seek to achieve gains in productivity and time to market. Many companies in several domains are constantly adopting SPLs. Dealing with SPLs begin after companies find themselves with successful variants of a product in a particular domain. The adoption of an SPL-based approach in the automotive industry may provide a significant return on investment. To switch to an SPL-based approach, practitioners lack a reengineering approach that supports SPL migration and evolution in a systematic fashion.This paper presents a practical evolution-based approach to migrate and evolve a set of variants of a given product into an SPL and describes a case study from the automotive domain. The case study considers the need to handle the classical sensor variants family (CSVF) at Bosch Company.Using this study, we performed a contributed step toward future switch of the CSVF into the SPL. We investigated the applicability of the proposed evolution-based approach with a real variants family (using the textual requirements of the CSVF) and we evaluated our approach using several data collection methods. The results reveal that our approach can be suitable for the automotive domain in the case study.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {183–190},
numpages = {8},
keywords = {case study, feature model, software product line, variability},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3461001.3461660,
author = {Michelon, Gabriela Karoline and Obermann, David and Assun\c{c}\~{a}o, Wesley K. G. and Linsbauer, Lukas and Gr\"{u}nbacher, Paul and Egyed, Alexander},
title = {Managing systems evolving in space and time: four challenges for maintenance, evolution and composition of variants},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3461660},
doi = {10.1145/3461001.3461660},
abstract = {Software companies need to provide a large set of features satisfying functional and non-functional requirements of diverse customers, thereby leading to variability in space. Feature location techniques have been proposed to support software maintenance and evolution in space. However, so far only one feature location technique also analyses the evolution in time of system variants, which is required for feature enhancements and bug fixing. Specifically, existing tools for managing a set of systems over time do not offer proper support for keeping track of feature revisions, updating existing variants, and creating new product configurations based on feature revisions. This paper presents four challenges concerning such capabilities for feature (revision) location and composition of new product configurations based on feature/s (revisions). We also provide a benchmark containing a ground truth and support for computing metrics. We hope that this will motivate researchers to provide and evaluate tool-supported approaches aiming at managing systems evolving in space and time. Further, we do not limit the evaluation of techniques to only this benchmark: we introduce and provide instructions on how to use a benchmark extractor for generating ground truth data for other systems. We expect that the feature (revision) location techniques maximize information retrieval in terms of precision, recall, and F-score, while keeping execution time and memory consumption low.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {75–80},
numpages = {6},
keywords = {benchmark extractor, feature location, feature revision, repository mining, software product line},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@article{10.1145/1183236.1183265,
author = {Eriksson, Magnus and B\"{o}rstler, J\"{u}rgen and Borg, Kjell},
title = {Software product line modeling made practical},
year = {2006},
issue_date = {December 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {49},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/1183236.1183265},
doi = {10.1145/1183236.1183265},
abstract = {An example from the Swedish Defense Industry.},
journal = {Commun. ACM},
month = dec,
pages = {49–54},
numpages = {6}
}

@inproceedings{10.1145/3307630.3342703,
author = {Hlad, Nicolas},
title = {Facilitating the Development of Software Product Lines in Small and Medium-Sized Enterprises},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342703},
doi = {10.1145/3307630.3342703},
abstract = {Software Product Lines (SPLs) are Software Engineering methodologies that manage the development and evolution of families of product variants. They aim at handling the commonality and variability of these products. SPLs reduce the development cost, time-to-market, and increase overall quality of the product variants.But Small and Medium-sized Enterprises (SMEs) can find the development of an SPL to be expensive and challenging, especially the process regarding the domain engineering. They can be forced to hire or train dedicated SPL-experts to work on the SPL development. This extra cost can be a significant obstacle toward the adoption of this technology by these enterprises.In this paper we present our work on an new approach to reduce and facilitate the adoption of the SPL techniques in SMEs. The goal of this approach is to automatically and incrementally build SPLs. This is based on an original combination of existing extractive and reactive approaches.We advocate the need for new solutions to facilitate the adoption of SPL technology by SMEs. We discuss a global solution based on an original combination of the existing extractive and reactive approaches. Our solution is a new approach that automatically and incrementally build SPLs. We present our global solution under the form of five research questions, of which we discuss the motivations and the methodologies. We also present early results of the first three questions, while the remaining two are the matter of future work.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {230–237},
numpages = {8},
keywords = {asset, extraction, feature, reactive, software product line},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.5555/1881833.1881836,
author = {Borba, Paulo and Teixeira, Leopoldo and Gheyi, Rohit},
title = {A theory of software product line refinement},
year = {2010},
isbn = {3642148077},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {To safely derive and evolve a software product line, it is important to have a notion of product line refactoring and its underlying refinement notion, which assures behavior preservation. In this paper we present a general theory of product line refinement by extending a previous formalization with explicit interfaces between our theory and the different languages that can be used to create product line artifacts. More important, we establish product line refinement properties that justify stepwise and compositional product line development and evolution.},
booktitle = {Proceedings of the 7th International Colloquium Conference on Theoretical Aspects of Computing},
pages = {15–43},
numpages = {29},
location = {Natal, Rio Grande do Norte, Brazil},
series = {ICTAC'10}
}

@article{10.1016/j.infsof.2016.01.007,
author = {Ayora, Clara and Torres, Victoria and de la Vara, Jose Luis and Pelechano, Vicente},
title = {Variability management in process families through change patterns},
year = {2016},
issue_date = {June 2016},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {74},
number = {C},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2016.01.007},
doi = {10.1016/j.infsof.2016.01.007},
abstract = {We present a set of change patterns for managing process families.The patters are derived from existing process variability-specific constructs.The patterns aim to reduce the effort for modeling and evolving a process family.They are validated through a case study to show the feasibility of their application. Context: The increasing adoption of process-aware information systems together with the high variability in business processes has resulted in collections of process families. These families correspond to a business process model and its variants, which can comprise hundreds or thousands of different ways of realizing this process. Managing process variability in this context can be very challenging, labor-intensive, and error-prone, and new approaches for managing process families are necessary.Objective: We aim to facilitate variability management in process families, ensure process family correctness, and reduce the effort needed for such purposes.Method: We have derived a set of change patterns for process families from variability-specific language constructs identified in the literature. For validation, we have conducted a case study with a safety standard in which we have measured the number of operations needed to model and evolve the variability of the standard with and without the patterns.Results: We present 10 change patterns for managing variability in process families and show how they can be implemented. The patterns support the modeling and evolution of process families and ensure process family correctness by automatically introducing and deleting modeling elements. The case study results show that the application of the defined change patterns can reduce the number of operations when modeling a process family by 34% and when evolving it by 40%.Conclusions: The application of the change patterns can help in effectively modeling and evolving large and highly-variable process families. Their application can also considerably reduce variability management effort.},
journal = {Inf. Softw. Technol.},
month = jun,
pages = {86–104},
numpages = {19},
keywords = {Business process modeling, Business process variability, Change patterns, Process family, Process-aware information system}
}

@phdthesis{10.5555/1354263,
author = {Ahmed, Faheem},
title = {Process maturity model for software product line},
year = {2007},
isbn = {9780494307748},
publisher = {University of Western Ontario},
address = {CAN},
abstract = {The recent trend of switching from single software product development to lines of software products in the software industry has made the software product line concept viable. As a result of its popularity, a methodology is required for the process assessment of software product lines. Although researchers and practitioners understand that current software process assessment approaches cannot be directly applied to assess the software product line process, apart from some initial conceptual work, no direct methodology has yet been proposed. The primary purpose of this research is to study the software product line process and to put forward a Process Maturity Model for Software Product Line in order to fill the research gap of a process maturity assessment methodology. The maturity models for business, organization, and architecture are proposed in this research so as to cover the three essential dimensions of the software product line process. Three separate empirical investigations are conducted to determine certain key factors that contribute to and have an impact on the performance of the business, organization, and architecture dimensions of the software product line. The methodology to evaluate an organization's maturity profile once the assessment results of the individual dimensions like business, architecture, process, and organization are evident is also an integral feature of this  Process Maturity Model for Software Product Line. This work further contributes to defining the overall maturity level scales for the software product line process. The Process Maturity Model for Software Product Line will assist organizations in carrying out process assessment of the software product line in order to determine the capability of the organization to define, manage, and control the software product line process. Keywords. software product line, software process assessment, software architecture, software engineering economics, organizational management and fuzzy logic.},
note = {AAINR30774}
}

@article{10.1016/j.scico.2012.02.006,
author = {Ganesan, Dharmalingam and Lindvall, Mikael and Mccomas, David and Bartholomew, Maureen and Slegel, Steve and Medina, Barbara and Krikhaar, Rene and Verhoef, Chris and Montgomery, Lisa P.},
title = {An analysis of unit tests of a flight software product line},
year = {2013},
issue_date = {December, 2013},
publisher = {Elsevier North-Holland, Inc.},
address = {USA},
volume = {78},
number = {12},
issn = {0167-6423},
url = {https://doi.org/10.1016/j.scico.2012.02.006},
doi = {10.1016/j.scico.2012.02.006},
abstract = {This paper presents an analysis of the unit testing approach developed and used by the Core Flight Software System (CFS) product line team at the NASA Goddard Space Flight Center (GSFC). The goal of the analysis is to understand, review, and recommend strategies for improving the CFS' existing unit testing infrastructure as well as to capture lessons learned and best practices that can be used by other software product line (SPL) teams for their unit testing. The results of the analysis show that the core and application modules of the CFS are unit tested in isolation using a stub framework developed by the CFS team. The application developers can unit test their code without waiting for the core modules to be completed, and vice versa. The analysis found that this unit testing approach incorporates many practical and useful solutions such as allowing for unit testing without requiring hardware and special OS features in-the-loop by defining stub implementations of dependent modules. These solutions are worth considering when deciding how to design the testing architecture for a SPL.},
journal = {Sci. Comput. Program.},
month = dec,
pages = {2360–2380},
numpages = {21},
keywords = {Flight software, Metrics, Self-testable components, Software architecture, Stub, Unit testing}
}

@inproceedings{10.1145/2364412.2364455,
author = {Abele, Andreas and L\"{o}nn, Henrik and Reiser, Mark-Oliver and Weber, Matthias and Glathe, Helko},
title = {EPM: a prototype tool for variability management in component hierarchies},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364455},
doi = {10.1145/2364412.2364455},
abstract = {EPM is a prototypical research tool that combines traditional component modeling means with a comprehensive variability management support. In addition to ordinary containment hierarchies of components, the tool provides a few selected system modeling and product management capabilities, e.g. separate modeling of the system's software and hardware architecture and an end-customer / marketing-oriented view on the system's variability. In this article we present EPM and briefly describe its main functionality.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {246–249},
numpages = {4},
keywords = {feature modeling, product line engineering},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.5555/2337223.2337302,
author = {Cordy, Maxime and Classen, Andreas and Perrouin, Gilles and Schobbens, Pierre-Yves and Heymans, Patrick and Legay, Axel},
title = {Simulation-based abstractions for software product-line model checking},
year = {2012},
isbn = {9781467310673},
publisher = {IEEE Press},
abstract = {Software Product Line (SPL) engineering is a software engineering paradigm that exploits the commonality between similar software products to reduce life cycle costs and time-to-market. Many SPLs are critical and would benefit from efficient verification through model checking. Model checking SPLs is more difficult than for single systems, since the number of different products is potentially huge. In previous work, we introduced Featured Transition Systems (FTS), a formal, compact representation of SPL behaviour, and provided efficient algorithms to verify FTS. Yet, we still face the state explosion problem, like any model checking-based verification. Model abstraction is the most relevant answer to state explosion. In this paper, we define a novel simulation relation for FTS and provide an algorithm to compute it. We extend well-known simulation preservation properties to FTS and thus lay the theoretical foundations for abstraction-based model checking of SPLs. We evaluate our approach by comparing the cost of FTS-based simulation and abstraction with respect to product-by-product methods. Our results show that FTS are a solid foundation for simulation-based model checking of SPL.},
booktitle = {Proceedings of the 34th International Conference on Software Engineering},
pages = {672–682},
numpages = {11},
location = {Zurich, Switzerland},
series = {ICSE '12}
}

@inproceedings{10.1007/978-3-642-12107-4_8,
author = {Alf\'{e}rez, Mauricio and Santos, Jo\~{a}o and Moreira, Ana and Garcia, Alessandro and Kulesza, Uir\'{a} and Ara\'{u}jo, Jo\~{a}o and Amaral, Vasco},
title = {Multi-view composition language for software product line requirements},
year = {2009},
isbn = {3642121063},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-12107-4_8},
doi = {10.1007/978-3-642-12107-4_8},
abstract = {Composition of requirements models in Software Product Line (SPL) development enables stakeholders to derive the requirements of target software products and, very important, to reason about them. Given the growing complexity of SPL development and the various stakeholders involved, their requirements are often specified from heterogeneous, partial views. However, existing requirements composition languages are very limited to generate specific requirements views for SPL products. They do not provide specialized composition rules for referencing and composing elements in recurring requirements models, such as use cases and activity models. This paper presents a multi-view composition language for SPL requirements, the Variability Modeling Language for Requirements (VML4RE). This language describes how requirements elements expressed in different models should be composed to generate a specific SPL product. The use of VML4RE is illustrated with UML-based requirements models defined for a home automation SPL case study. The language is evaluated with additional case studies from different application domains, such as mobile phones and sales management.},
booktitle = {Proceedings of the Second International Conference on Software Language Engineering},
pages = {103–122},
numpages = {20},
keywords = {cmposition languages, requirements engineering, requirements reuse, software product lines, variability management},
location = {Denver, CO},
series = {SLE'09}
}

@article{10.1007/s11390-009-9227-2,
author = {Peng, Xin and Lee, Seok-Won and Zhao, Wen-Yun},
title = {Feature-oriented nonfunctional requirement analysis for software product line},
year = {2009},
issue_date = {March 2009},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {24},
number = {2},
issn = {1000-9000},
url = {https://doi.org/10.1007/s11390-009-9227-2},
doi = {10.1007/s11390-009-9227-2},
abstract = {Domain analysis in software product line (SPL) development provides a basis for core assets design and implementation by a systematic and comprehensive commonality/variability analysis. In feature-oriented SPL methods, products of the domain analysis are domain feature models and corresponding feature decision models to facilitate application-oriented customization. As in requirement analysis for a single system, the domain analysis in the SPL development should consider both functional and nonfunctional domain requirements. However, the nonfunctional requirements (NFRs) are often neglected in the existing domain analysis methods. In this paper, we propose a context-based method of the NFR analysis for the SPL development. In the method, NFRs are materialized by connecting nonfunctional goals with real-world context, thus NFR dicitation and variability analysis can be performed by context analysis for the whole domain with the assistance of NFR templates and NFR graphs. After the variability analysis, our method integrates both functional and nonfunctional perspectives by incorporating the nonfunctional goals and operationalizations into an initial functional feature model. NFR-related constraints are also elicited and integrated. Finally, a decision model with both functional and nonfunctional perspectives is constructed to facilitate application-oriented feature model customization. A computer-aided grading system (CAGS) product line is employed to demonstrate the method throughout the paper.},
journal = {J. Comput. Sci. Technol.},
month = mar,
pages = {319–338},
numpages = {20},
keywords = {domain analysis, feature-oriented method, nonfunctional requirement, software product line, variability analysis}
}

@inproceedings{10.5555/2022115.2022129,
author = {Gamez, Nadia and Fuentes, Lidia},
title = {Software product line evolution with cardinality-based feature models},
year = {2011},
isbn = {9783642213465},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {Feature models are widely used for modelling variability present in a Software Product Line family. We propose using cardinality-based feature models and clonable features to model and manage the evolution of the structural variability present in pervasive systems, composed by a large variety of heterogeneous devices. The use of clonable features increases the expressiveness of feature models, but also greatly increases the complexity of the resulting configurations. So, supporting the evolution of product configurations becomes an intractable task to do it manually. In this paper, we propose a model driven development process to propagate changes made in an evolved feature model, into existing configurations. Furthermore, our process allows us to calculate the effort needed to perform the evolution changes in the customized products. To do this, we have defined two operators, one to calculate the differences between two configurations and another to create a new configuration from a previous one. Finally, we validate our approach, showing that by using our tool support we can generate new configurations for a family of products with thousands of cloned features.},
booktitle = {Proceedings of the 12th International Conference on Top Productivity through Software Reuse},
pages = {102–118},
numpages = {17},
keywords = {evolution, feature models, software product lines},
location = {Pohang, South Korea},
series = {ICSR'11}
}

@inproceedings{10.5555/1885639.1885671,
author = {Marinho, Fabiana G. and Lima, Fabr\'{\i}cio and Filho, Jo\~{a}o B. Ferreira and Rocha, Lincoln and Maia, Marcio E. F. and de Aguiar, Saulo B. and Dantas, Val\'{e}ria L. L. and Viana, Windson and Andrade, Rossana M. C. and Teixeira, Eld\^{a}nae and Werner, Cl\'{a}udia},
title = {A software product line for the mobile and context-aware applications domain},
year = {2010},
isbn = {3642155782},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {The mobile and context-aware application domain presents challenging requirements to software development. Although several solutions have been proposed for this type of application, reuse is not systematically used throughout the software development lifecycle. Then, in this paper we propose an approach for the development of a mobile and context-aware Software Product Line (SPL). A SPL for the mobile and context-ware mobile guide domain is presented in order to illustrate the steps of the proposed approach. Furthermore, the lessons learned in the SPL development are discussed. Both approach and SPL are the main contributions of this paper.},
booktitle = {Proceedings of the 14th International Conference on Software Product Lines: Going Beyond},
pages = {346–360},
numpages = {15},
keywords = {context-awareness, mobility, software product line},
location = {Jeju Island, South Korea},
series = {SPLC'10}
}

@inproceedings{10.5555/2486788.2487011,
author = {Gonzalez-Sanchez, Javier},
title = {Toward a software product line for affective-driven self-adaptive systems},
year = {2013},
isbn = {9781467330763},
publisher = {IEEE Press},
abstract = {One expected characteristic in modern systems is self-adaptation, the capability of monitoring and reacting to changes into the environment. A particular case of self-adaptation is affective-driven self-adaptation. Affective-driven self-adaptation is about having consciousness of user’s affects (emotions) and drive self-adaptation reacting to changes in those affects. Most of the previous work around self-adaptive systems deals with performance, resources, and error recovery as variables that trigger a system reaction. Moreover, most effort around affect recognition has been put towards offline analysis of affect, and to date only few applications exist that are able to infer user’s affect in real-time and trigger self-adaptation mechanisms. In response to this deficit, this work proposes a software product line approach to jump-start the development of affect-driven self-adaptive systems by offering the definition of a domain-specific architecture, a set of components (organized as a framework), and guidelines to tailor those components. Study cases with systems for learning and gaming will confirm the capability of the software product line to provide desired functionalities and qualities.},
booktitle = {Proceedings of the 2013 International Conference on Software Engineering},
pages = {1381–1384},
numpages = {4},
location = {San Francisco, CA, USA},
series = {ICSE '13}
}

@article{10.1016/j.infsof.2012.11.008,
author = {Krishnan, Sandeep and Strasburg, Chris and Lutz, Robyn R. and Goseva-Popstojanova, Katerina and Dorman, Karin S.},
title = {Predicting failure-proneness in an evolving software product line},
year = {2013},
issue_date = {August 2013},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {55},
number = {8},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2012.11.008},
doi = {10.1016/j.infsof.2012.11.008},
abstract = {ContextPrevious work by researchers on 3years of early data for an Eclipse product has identified some predictors of failure-prone files that work well. Eclipse has also been used previously by researchers to study characteristics of product line software. ObjectiveThe work reported here investigates whether classification-based prediction of failure-prone files improves as the product line evolves. MethodThis investigation first repeats, to the extent possible, the previous study and then extends it by including four more recent years of data, comparing the prominent predictors with the previous results. The research then looks at the data for three additional Eclipse products as they evolve over time. The analysis compares results from three different types of datasets with alternative data collection and prediction periods. ResultsOur experiments with a variety of learners show that the difference between the performance of J48, used in this work, and the other top learners is not statistically significant. Furthermore, new results show that the effectiveness of classification significantly depends on the data collection period and prediction period. The study identifies change metrics that are prominent predictors across all four releases of all four products in the product line for the three different types of datasets. From the product line perspective, prediction of failure-prone files for the four products studied in the Eclipse product line shows statistically significant improvement in accuracy but not in recall across releases. ConclusionAs the product line matures, the learner performance improves significantly for two of the three datasets, but not for prediction of post-release failure-prone files using only pre-release change data. This suggests that it may be difficult to detect failure-prone files in the evolving product line. At least in part, this may be due to the continuous change, even for commonalities and high-reuse variation components, which we previously have shown to exist.},
journal = {Inf. Softw. Technol.},
month = aug,
pages = {1479–1495},
numpages = {17},
keywords = {Change metrics, Failure-prone files, Post-release defects, Prediction, Reuse, Software product lines}
}

@inproceedings{10.1145/3382025.3414969,
author = {Bilic, Damir and Carlson, Jan and Sundmark, Daniel and Afzal, Wasif and Wallin, Peter},
title = {Detecting inconsistencies in annotated product line models},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414969},
doi = {10.1145/3382025.3414969},
abstract = {Model-based product line engineering applies the reuse practices from product line engineering with graphical modeling for the specification of software intensive systems. Variability is usually described in separate variability models, while the implementation of the variable systems is specified in system models that use modeling languages such as SysML. Most of the SysML modeling tools with variability support, implement the annotation-based modeling approach. Annotated product line models tend to be error-prone since the modeler implicitly describes every possible variant in a single system model. To identifying variability-related inconsistencies, in this paper, we firstly define restrictions on the use of SysML for annotative modeling in order to avoid situations where resulting instances of the annotated model may contain ambiguous model constructs. Secondly, inter-feature constraints are extracted from the annotated model, based on relations between elements that are annotated with features. By analyzing the constraints, we can identify if the combined variability- and system model can result in incorrect or ambiguous instances. The evaluation of our prototype implementation shows the potential of our approach by identifying inconsistencies in the product line model of our industrial partner which went undetected through several iterations of the model.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {20},
numpages = {11},
keywords = {SysML, consistency checking, model-based systems engineering, product line engineering, variability modeling},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@article{10.1007/s11219-011-9156-5,
author = {Roos-Frantz, Fabricia and Benavides, David and Ruiz-Cort\'{e}s, Antonio and Heuer, Andr\'{e} and Lauenroth, Kim},
title = {Quality-aware analysis in product line engineering with the orthogonal variability model},
year = {2012},
issue_date = {September 2012},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {20},
number = {3–4},
issn = {0963-9314},
url = {https://doi.org/10.1007/s11219-011-9156-5},
doi = {10.1007/s11219-011-9156-5},
abstract = {Software product line engineering is about producing a set of similar products in a certain domain. A variability model documents the variability amongst products in a product line. The specification of variability can be extended with quality information, such as measurable quality attributes (e.g., CPU and memory consumption) and constraints on these attributes (e.g., memory consumption should be in a range of values). However, the wrong use of constraints may cause anomalies in the specification which must be detected (e.g., the model could represent no products). Furthermore, based on such quality information, it is possible to carry out quality-aware analyses, i.e., the product line engineer may want to verify whether it is possible to build a product that satisfies a desired quality. The challenge for quality-aware specification and analysis is threefold. First, there should be a way to specify quality information in variability models. Second, it should be possible to detect anomalies in the variability specification associated with quality information. Third, there should be mechanisms to verify the variability model to extract useful information, such as the possibility to build a product that fulfils certain quality conditions (e.g., is there any product that requires less than 512 MB of memory?). In this article, we present an approach for quality-aware analysis in software product lines using the orthogonal variability model (OVM) to represent variability. We propose to map variability represented in the OVM associated with quality information to a constraint satisfaction problem and to use an off-the-shelf constraint programming solver to automatically perform the verification task. To illustrate our approach, we use a product line in the automotive domain which is an example that was created in a national project by a leading car company. We have developed a prototype tool named FaMa-OVM, which works as a proof of concepts. We were able to identify void models, dead and false optional elements, and check whether the product line example satisfies quality conditions.},
journal = {Software Quality Journal},
month = sep,
pages = {519–565},
numpages = {47},
keywords = {Automated analysis, Orthogonal variability model, Quality modelling, Quality-aware analysis, Software product lines}
}

@inproceedings{10.1145/3106195.3106199,
author = {Martinez, Jabier and Lopez-Herrejon, Roberto E. and Ziadi, Tewfik and Acher, Mathieu},
title = {REVE 2017: 5th International Workshop on REverse Variability Engineering},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106199},
doi = {10.1145/3106195.3106199},
abstract = {Software Product Line (SPL) migration remains a challenging endeavour. From organizational issues to purely technical challenges, there is a wide range of barriers that complicates SPL adoption. The workshop REverse Variability Engineering (REVE) aims to foster research about making the most of the two main inputs for SPL migration: 1) domain knowledge and 2) legacy assets. Domain knowledge, usually implicit and spread across an organization, is key to define the SPL scope and to validate the variability model and its semantics. At the technical level, domain expertise is also needed to create or extract the reusable software components. Legacy assets can be, for instance, similar product variants (e.g., requirements, models, source code) that were implemented using ad-hoc reuse techniques such as clone-and-own. More generally, the workshop attracts researchers and practitioners contributing to processes, techniques, tools, or empirical studies related to the automatic, semi-automatic or manual extraction or refinement of SPL assets.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {245},
numpages = {1},
keywords = {Software product lines, extractive software product line adoption, reverse engineering, variability management},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1007/978-3-540-72586-2_156,
author = {Li, Yiyuan and Yin, Jianwei and Shi, Dongcai and Li, Ying and Dong, Jinxiang},
title = {Software Product Line Oriented Feature Map},
year = {2007},
isbn = {9783540725855},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-540-72586-2_156},
doi = {10.1007/978-3-540-72586-2_156},
abstract = {The core idea of software product line engineering is to develop a reusable infrastructure that supports the software development of a family of products. On the base of domain analysis, feature modeling identifies commonalities and variability of software products in terms of features to provide an acknowledged abstract to various stakeholders. The concept of feature map is proposed to perfect feature model. It supports customized feature dependencies and constraint expresses, provides the capability to navigate and locate the resource entities of features. Ontology is introduced as the representation basis for the meta-model of feature maps. By the means of selecting features to construct the reusable infrastructure, the components of feature implementation are rapidly located and assembled to produce a family of software products meeting certain dependencies and constraints.},
booktitle = {Proceedings of the 7th International Conference on Computational Science, Part II},
pages = {1115–1122},
numpages = {8},
keywords = {Feature map, Ontology, Resource navigation, Variability},
location = {Beijing, China},
series = {ICCS '07}
}

@article{10.1007/s00766-013-0185-4,
author = {Derakhshanmanesh, Mahdi and Fox, Joachim and Ebert, J\"{u}rgen},
title = {Requirements-driven incremental adoption of variability management techniques and tools: an industrial experience report},
year = {2014},
issue_date = {November  2014},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {19},
number = {4},
issn = {0947-3602},
url = {https://doi.org/10.1007/s00766-013-0185-4},
doi = {10.1007/s00766-013-0185-4},
abstract = {In theory, software product line engineering has reached a mature state. In practice though, implementing a variability management approach remains a tough case-by-case challenge for any organization. To tame the complexity of this undertaking, it is inevitable to handle variability from multiple perspectives and to manage variability consistently across artifacts, tools, and workflows. Especially, a solid understanding and management of the requirements to be met by the products is an inevitable prerequisite. In this article, we share experiences from the ongoing incremental adoption of explicit variability management at TRW Automotive's department for automotive slip control systems--located in Koblenz, Germany. On the technical side, the three key drivers of this adoption effort are (a) domain modeling and scoping, (b) handling of variability in requirements and (c) tighter integration of software engineering focus areas (e.g., domain modeling, requirements engineering, architectural modeling) to make use of variability-related data. In addition to implementation challenges with using and integrating concrete third-party tools, social and workflow-related issues are covered as well. The lessons learned are presented, discussed, and thoroughly compared with the state of the art in research.},
journal = {Requir. Eng.},
month = nov,
pages = {333–354},
numpages = {22},
keywords = {Features, Incremental adoption, Requirements, Reuse, Software product lines, Tool integration}
}

@inproceedings{10.1145/3461001.3473057,
author = {Chavarriaga, Jaime and Hurtado, Julio Ariel},
title = {Fourth International Workshop on Experiences and Empirical Studies on Software Reuse (WEESR 2021)},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3473057},
doi = {10.1145/3461001.3473057},
abstract = {In the Workshop on Experiences and Empirical Studies on Software Reuse (WEESR) researchers and practitioners discusses in-progress research regarding experiences and empirical studies applying reuse techniques in non-academic environments. The fourth edition of this workshop, the WEESR 2021, was co-located with the 25th International Systems and Software Product Line Conference (SPLC'21). There, attendants discussed a original paper and a journal-first paper presenting empirical studies regarding variability models for real cyber-physical products and the software product line practices in large companies.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {206},
numpages = {1},
keywords = {empirical software engineering, software reuse},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1007/978-3-642-33119-0_19,
author = {Colanzi, Thelma Elita and Vergilio, Silvia Regina},
title = {Applying search based optimization to software product line architectures: lessons learned},
year = {2012},
isbn = {9783642331183},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-33119-0_19},
doi = {10.1007/978-3-642-33119-0_19},
abstract = {The Product-Line Architecture (PLA) is a fundamental SPL artifact. However, PLA design is a people-intensive and non-trivial task, and to find the best architecture can be formulated as an optimization problem with many objectives. We found several approaches that address search-based design of software architectures by using multi-objective evolutionary algorithms. However, such approaches have not been applied to PLAs. Considering such fact, in this work, we explore the use of these approaches to optimize PLAs. An extension of existing approaches is investigated, which uses specific metrics to evaluate the PLA characteristics. Then, we performed a case study involving one SPL. From the experience acquired during this study, we can relate some lessons learned, which are discussed in this work. Furthermore, the results point out that, in the case of PLAs, it is necessary to use SPL specific measures and evolutionary operators more sensitive to the SPL context.},
booktitle = {Proceedings of the 4th International Conference on Search Based Software Engineering},
pages = {259–266},
numpages = {8},
keywords = {MOEAs, SPL, software architecture optimization},
location = {Riva del Garda, Italy},
series = {SSBSE'12}
}

@inproceedings{10.1145/1297846.1297968,
author = {Bell, Peter},
title = {A practical high volume software product line},
year = {2007},
isbn = {9781595938657},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1297846.1297968},
doi = {10.1145/1297846.1297968},
abstract = {Many Software Product Line case studies focus on the fact that an ROI can be achieved in 3-5 projects. This paper asks the question "what has to be done differently to be able to generate 10,000 custom applications a year?".As wholesalers of custom web applications for Small to Medium Sized Businesses, we have to create highly customizable web applications in minutes -- not months. After 18 months of research and experimentation we have developed a layered system that focuses on the reuse of declarative executable specifications rather than the reuse of imperative code, allowing us to blend speed of development with flexibility of the generated solutions.The system uses a feature modeler to select common functionality and a decision support system to de-skill the customization process. It has a collection of Domain Specific Languages for describing the vast majority of custom functionality required by our clients and an extensible framework allowing any system functionality to be overloaded/extended using custom code if necessary.In this paper we provide an introduction to the key theoretical concepts required to understand the system. We then introduce our domain specific languages for describing web applications. We then look at the process of building applications using SystemsForge and then we highlight our conclusions to date and document some of the outstanding issues that we are still investigating relating to managing Domain Specific Language evolution and interactions.},
booktitle = {Companion to the 22nd ACM SIGPLAN Conference on Object-Oriented Programming Systems and Applications Companion},
pages = {994–1003},
numpages = {10},
keywords = {architecture, configuration management, domain specific language, experience, feature modeling, language oriented programming, practitioner report, software product line},
location = {Montreal, Quebec, Canada},
series = {OOPSLA '07}
}

@inproceedings{10.1109/COMPSACW.2011.65,
author = {Jaroucheh, Zakwan and Liu, Xiaodong and Smith, Sally and Zhao, Huiqun},
title = {Lightweight Software Product Line Based Privacy Protection Scheme for Pervasive Applications},
year = {2011},
isbn = {9780769544595},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/COMPSACW.2011.65},
doi = {10.1109/COMPSACW.2011.65},
abstract = {Protecting user's privacy is one of the main concerns for the deployment of pervasive computing systems in the real world. In pervasive environments, the user context information is naturally distributed among different spatial or logical domains. Many efforts have been done to match the service privacy policy with the user's privacy preferences. However, since the pervasive environments are characterized by a large number of available services as well as a large amount of context information, the privacy protection mechanism poses two main requirements. Firstly, policies are created on a per task basis. We argue here that specifying the privacy on a per domain basis facilitates specifying the privacy preferences for the user. Secondly, to ease specifying the user' privacy preferences, an intuitive mechanisms to specifying the context information that can be consumed by services are thus needed. In this paper, and in order to bridge the gap of the context information perception by the developers and by the users, we propose to represent the available context information in each domain as a feature model. In this way, the developers are able to configure this feature model to get the context information they need, the users can easily specify the context features they are willing to share. The result is a domain-oriented user-centric privacy protection scheme.},
booktitle = {Proceedings of the 2011 IEEE 35th Annual Computer Software and Applications Conference Workshops},
pages = {351–355},
numpages = {5},
keywords = {pervasive application, privacy, software product line},
series = {COMPSACW '11}
}

@inproceedings{10.1145/3336294.3336311,
author = {T\"{e}rnava, Xhevahire and Mortara, Johann and Collet, Philippe},
title = {Identifying and Visualizing Variability in Object-Oriented Variability-Rich Systems},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336311},
doi = {10.1145/3336294.3336311},
abstract = {In many variability-intensive systems, variability is implemented in code units provided by a host language, such as classes or functions, which do not align well with the domain features. Annotating or creating an orthogonal decomposition of code in terms of features implies extra effort, as well as massive and cumbersome refactoring activities. In this paper, we introduce an approach for identifying and visualizing the variability implementation places within the main decomposition structure of object-oriented code assets in a single variability-rich system. First, we propose to use symmetry, as a common property of some main implementation techniques, such as inheritance or overloading, to identify uniformly these places. We study symmetry in different constructs (e.g., classes), techniques (e.g., subtyping, overloading) and design patterns (e.g., strategy, factory), and we also show how we can use such symmetries to find variation points with variants. We then report on the implementation and application of a toolchain, symfinder, which automatically identifies and visualizes places with symmetry. The publicly available application to several large open-source systems shows that symfinder can help in characterizing code bases that are variability-rich or not, as well as in discerning zones of interest w.r.t. variability.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {231–243},
numpages = {13},
keywords = {identifying software variability, object-oriented variability-rich systems, software product line engineering, tool support for understanding software variability, visualizing software variability},
location = {Paris, France},
series = {SPLC '19}
}

@article{10.1016/j.jss.2007.12.797,
author = {Ajila, Samuel A. and Kaba, Ali B.},
title = {Evolution support mechanisms for software product line process},
year = {2008},
issue_date = {October, 2008},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {81},
number = {10},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2007.12.797},
doi = {10.1016/j.jss.2007.12.797},
abstract = {Software product family process evolution needs specific support for incremental change. Product line process evolution involves in addition to identifying new requirements the building of a meta-process describing the migration from the old process to the new one. This paper presents basic mechanisms to support software product line process evolution. These mechanisms share four strategies - change identification, change impact, change propagation, and change validation. It also examines three kinds of evolution processes - architecture, product line, and product. In addition, change management mechanisms are identified. Specifically we propose support mechanisms for static local entity evolution and complex entity evolution including transient evolution process. An evolution model prototype based on dependency relationships structure of the various product line artifacts is developed.},
journal = {J. Syst. Softw.},
month = oct,
pages = {1784–1801},
numpages = {18},
keywords = {Feature-based object oriented model, Meta-process, Product line architecture, Software development process, Software product line process evolution, Transient process, Use case modeling}
}

@article{10.1016/j.infsof.2010.12.006,
author = {Chen, Lianping and Ali Babar, Muhammad},
title = {A systematic review of evaluation of variability management approaches in software product lines},
year = {2011},
issue_date = {April, 2011},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {53},
number = {4},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2010.12.006},
doi = {10.1016/j.infsof.2010.12.006},
abstract = {ContextVariability management (VM) is one of the most important activities of software product-line engineering (SPLE), which intends to develop software-intensive systems using platforms and mass customization. VM encompasses the activities of eliciting and representing variability in software artefacts, establishing and managing dependencies among different variabilities, and supporting the exploitation of the variabilities for building and evolving a family of software systems. Software product line (SPL) community has allocated huge amount of effort to develop various approaches to dealing with variability related challenges during the last two decade. Several dozens of VM approaches have been reported. However, there has been no systematic effort to study how the reported VM approaches have been evaluated. ObjectiveThe objectives of this research are to review the status of evaluation of reported VM approaches and to synthesize the available evidence about the effects of the reported approaches. MethodWe carried out a systematic literature review of the VM approaches in SPLE reported from 1990s until December 2007. ResultsWe selected 97 papers according to our inclusion and exclusion criteria. The selected papers appeared in 56 publication venues. We found that only a small number of the reviewed approaches had been evaluated using rigorous scientific methods. A detailed investigation of the reviewed studies employing empirical research methods revealed significant quality deficiencies in various aspects of the used quality assessment criteria. The synthesis of the available evidence showed that all studies, except one, reported only positive effects. ConclusionThe findings from this systematic review show that a large majority of the reported VM approaches have not been sufficiently evaluated using scientifically rigorous methods. The available evidence is sparse and the quality of the presented evidence is quite low. The findings highlight the areas in need of improvement, i.e., rigorous evaluation of VM approaches. However, the reported evidence is quite consistent across different studies. That means the proposed approaches may be very beneficial when they are applied properly in appropriate situations. Hence, it can be concluded that further investigations need to pay more attention to the contexts under which different approaches can be more beneficial.},
journal = {Inf. Softw. Technol.},
month = apr,
pages = {344–362},
numpages = {19},
keywords = {Empirical studies, Software product line, Systematic literature reviews, Variability management}
}

@inproceedings{10.1145/3307630.3342394,
author = {Mortara, Johann and T\"{e}rnava, Xhevahire and Collet, Philippe},
title = {symfinder: A Toolchain for the Identification and Visualization of Object-Oriented Variability Implementations},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342394},
doi = {10.1145/3307630.3342394},
abstract = {When variability is implemented into a single variability-rich system with object-oriented techniques (e.g., inheritance, overloading, design patterns), the variation points and variants usually do not align with the domain features. It is then very hard and time consuming to manually identify these variation points to manage variability at the implementation level. symfinder is a toolchain to automatically identify and visualize these variability implementation locations inside a single object-oriented code base. For the identification part, it relies on the notion of symmetry between classes or methods to characterize uniformly some implementation techniques such as inheritance, overloading, or design patterns like Factory. The toolchain also generates an interactive Web-based visualization in which classes that are variation points are nodes linked together through their inheritance relationships, while the size, color, and texture of the nodes are used to represent some metrics on the number of overloaded constructors or methods. As a result, the visualization enables one to discern zones of interest where variation points are strongly present and to get relevant information over concerned classes. The toolchain, publicly available with its source code and an online demo, has been applied to several large open source projects.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {5–8},
numpages = {4},
keywords = {identifying software variability, object-oriented variability-rich systems, software product line engineering, tool support for understanding software variability, visualizing software variability},
location = {Paris, France},
series = {SPLC '19}
}

@article{10.1016/j.infsof.2006.05.004,
author = {Ahmed, Faheem and Capretz, Luiz Fernando},
title = {Managing the business of software product line: An empirical investigation of key business factors},
year = {2007},
issue_date = {February, 2007},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {49},
number = {2},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2006.05.004},
doi = {10.1016/j.infsof.2006.05.004},
abstract = {Business has been highlighted as a one of the critical dimensions of software product line engineering. This paper's main contribution is to increase the understanding of the influence of key business factors by showing empirically that they play an imperative role in managing a successful software product line. A quantitative survey of software organizations currently involved in the business of developing software product lines over a wide range of operations, including consumer electronics, telecommunications, avionics, and information technology, was designed to test the conceptual model and hypotheses of the study. This is the first study to demonstrate the relationships between the key business factors and software product lines. The results provide evidence that organizations in the business of software product line development have to cope with multiple key business factors to improve the overall performance of the business, in addition to their efforts in software development. The conclusions of this investigation reinforce current perceptions of the significance of key business factors in successful software product line business.},
journal = {Inf. Softw. Technol.},
month = feb,
pages = {194–208},
numpages = {15},
keywords = {Key business factor, Management, Marketing strategy, Software engineering economics, Software product line, Strategic planning}
}

@article{10.4018/ijismd.2014070103,
author = {Lotz, Alex and Ingl\'{e}s-Romero, Juan F. and Stampfer, Dennis and Lutz, Matthias and Vicente-Chicote, Cristina and Schlegel, Christian},
title = {Towards a Stepwise Variability Management Process for Complex Systems: A Robotics Perspective},
year = {2014},
issue_date = {July 2014},
publisher = {IGI Global},
address = {USA},
volume = {5},
number = {3},
issn = {1947-8186},
url = {https://doi.org/10.4018/ijismd.2014070103},
doi = {10.4018/ijismd.2014070103},
abstract = {Complex systems are executed in environments with a huge number of potential situations and contingencies, therefore a mechanism is required to express dynamic variability at design-time that can be efficiently resolved in the application at run-time based on the then available information. We present an approach for dynamic variability modeling and its exploitation at run-time. It supports different developer roles and allows the separation of two different kinds of dynamic variability at design-time: (i) variability related to the system operation, and (ii) variability associated with QoS. The former provides robustness to contingencies, maintaining a high success rate in task fulfillment. The latter focuses on the quality of the application execution (defined in terms of non-functional properties like safety or task efficiency) under changing situations and limited resources. The authors also discuss different alternatives for the run-time integration of the two variability management mechanisms, and show real-world robotic examples to illustrate them.},
journal = {Int. J. Inf. Syst. Model. Des.},
month = jul,
pages = {55–74},
numpages = {20},
keywords = {Modeling Run-Time Variability, Service Robotics, SmartTCL, VML, Variability Management}
}

@article{10.1145/1183236.1183262,
author = {Krueger, Charles W.},
title = {New methods in software product line practice},
year = {2006},
issue_date = {December 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {49},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/1183236.1183262},
doi = {10.1145/1183236.1183262},
abstract = {Examining the benefits of next-generation SPL methods.},
journal = {Commun. ACM},
month = dec,
pages = {37–40},
numpages = {4}
}

@article{10.1007/s10270-020-00839-w,
author = {Pol’la, Matias and Buccella, Agustina and Cechich, Alejandra},
title = {Analysis of variability models: a systematic literature review},
year = {2021},
issue_date = {Aug 2021},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {20},
number = {4},
issn = {1619-1366},
url = {https://doi.org/10.1007/s10270-020-00839-w},
doi = {10.1007/s10270-020-00839-w},
abstract = {Dealing with variability, during Software Product Line Engineering (SPLE), means trying to allow software engineers to develop a set of similar applications based on a manageable range of variable functionalities according to expert users’ needs. Particularly, variability management (VM) is an activity that allows flexibility and a high level of reuse during software development. In the last years, we have witnessed a proliferation of methods, techniques and supporting tools for VM in general, and for its analysis in particular. More precisely, a specific field has emerged, named (automated) variability analysis, focusing on verifying variability models across the SPLE’s phases. In this paper, we introduce a systematic literature review of existing proposals (as primary studies) focused on analyzing variability models. We define a classification framework, which is composed of 20 sub-characteristics addressing general aspects, such as scope and validation, as well as model-specific aspects, such as variability primitives, reasoner type. The framework allows to look at the analysis of variability models during its whole life cycle—from design to derivation—according to the activities involved during an SPL development. Also, the framework helps us answer three research questions defined for showing the state of the art and drawing challenges for the near future. Among the more interesting challenges, we can highlight the needs of more applications in industry, the existence of more mature tools, and the needs of providing more semantics in the way of variability primitives for identifying inconsistencies in the models.},
journal = {Softw. Syst. Model.},
month = aug,
pages = {1043–1077},
numpages = {35},
keywords = {Variability analysis, Software Product Line, Variability management, Supporting tools}
}

@inproceedings{10.1145/3109729.3109754,
author = {Beuche, Danilo},
title = {Using pure: variants Across The Product Line Lifecycle},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109754},
doi = {10.1145/3109729.3109754},
abstract = {The paper describes a demonstration of pure::variants [2], a commercial tool for variant and variability management for product lines. The demonstration shows how flexible product line (PL) architectures can be built, tested and maintained by using the modeling and integration capabilities provided by pure::variants. With pure::variants being available for a long time, the demonstration (and the paper) combines both basics of pure::variants, known to parts of the audience, and new capabilities, introduced within the last year.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {50},
numpages = {1},
keywords = {Feature Models, Product Line Engineering, Variability},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1109/ICWS.2015.20,
author = {Gamez, Nadia and El Haddad, Joyce and Fuentes, Lidia},
title = {SPL-TQSSS: A Software Product Line Approach for Stateful Service Selection},
year = {2015},
isbn = {9781467372725},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICWS.2015.20},
doi = {10.1109/ICWS.2015.20},
abstract = {An important problem in Web services composition process is optimal selection of services meeting the user functional requirements (tasks of a workflow) and ensuring a reliable execution of the composition. Therefore, non-functional properties of services such as their transactional behavior as well as their Quality of Service (QoS) must be considered. In this context, a challenging objective is to assist users in integrating on the fly the operations of services to realize their required tasks by further meeting their transactional and QoS preferences. Towards this purpose, we present SPLTQSSS, a Software Product Line based approach for Stateful (conversation-based) Service Selection problem with Transactional and QoS support. SPL-TQSSS considers the set of functionally-equivalent services as part of a service family by modeling their internal operations using Feature Models. Then, SPL-TQSSS chooses the best services, from the service families matching with every task of the workflow, which fit with the user transactional preference and satisfy QoS constraints.},
booktitle = {Proceedings of the 2015 IEEE International Conference on Web Services},
pages = {73–80},
numpages = {8},
keywords = {Feature Model, QoS, Service Selection, Software Product Line, Transactional, Variability},
series = {ICWS '15}
}

@inproceedings{10.1007/978-3-642-31095-9_40,
author = {Ensan, Faezeh and Bagheri, Ebrahim and Ga\v{s}evi\'{c}, Dragan},
title = {Evolutionary search-based test generation for software product line feature models},
year = {2012},
isbn = {9783642310942},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-31095-9_40},
doi = {10.1007/978-3-642-31095-9_40},
abstract = {Product line-based software engineering is a paradigm that models the commonalities and variabilities of different applications of a given domain of interest within a unique framework and enhances rapid and low cost development of new applications based on reuse engineering principles. Despite the numerous advantages of software product lines, it is quite challenging to comprehensively test them. This is due to the fact that a product line can potentially represent many different applications; therefore, testing a single product line requires the test of its various applications. Theoretically, a product line with n software features can be a source for the development of 2n application. This requires the test of 2n applications if a brute-force comprehensive testing strategy is adopted. In this paper, we propose an evolutionary testing approach based on Genetic Algorithms to explore the configuration space of a software product line feature model in order to automatically generate test suites. We will show through the use of several publicly-available product line feature models that the proposed approach is able to generate test suites of O(n) size complexity as opposed to O(2n) while at the same time form a suitable tradeoff balance between error coverage and feature coverage in its generated test suites.},
booktitle = {Proceedings of the 24th International Conference on Advanced Information Systems Engineering},
pages = {613–628},
numpages = {16},
keywords = {evolutionary testing, feature models, software product lines},
location = {Gda\'{n}sk, Poland},
series = {CAiSE'12}
}

@inproceedings{10.1145/2934466.2946047,
author = {Li, Li and Martinez, Jabier and Ziadi, Tewfik and Bissyand\'{e}, Tegawend\'{e} F. and Klein, Jacques and Traon, Yves Le},
title = {Mining families of android applications for extractive SPL adoption},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2946047},
doi = {10.1145/2934466.2946047},
abstract = {The myriads of smart phones around the globe gave rise to a vast proliferation of mobile applications. These applications target an increasing number of user profiles and tasks. In this context, Android is a leading technology for their development and on-line markets are the main means for their distribution. In this paper we motivate, from two perspectives, the mining of these markets with the objective to identify families of apps variants in the wild. The first perspective is related to research activities where building realistic case studies for evaluating extractive SPL adoption techniques are needed. The second is related to a large-scale, world-wide and time-aware study of reuse practice in an industry which is now flourishing among all others within the software engineering community. This study is relevant to assess potential for SPLE practices adoption. We present initial implementations of the mining process and we discuss analyses of variant families.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {271–275},
numpages = {5},
keywords = {android, appvariants, mining software repositories, reverse engineering, software product line engineering},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2362536.2362548,
author = {Soltani, Samaneh and Asadi, Mohsen and Ga\v{s}evi\'{c}, Dragan and Hatala, Marek and Bagheri, Ebrahim},
title = {Automated planning for feature model configuration based on functional and non-functional requirements},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362548},
doi = {10.1145/2362536.2362548},
abstract = {Feature modeling is one of the main techniques used in Software Product Line Engineering to manage the variability within the products of a family. Concrete products of the family can be generated through a configuration process. The configuration process selects and/or removes features from the feature model according to the stakeholders' requirements. Selecting the right set of features for one product from amongst all of the available features in the feature model is a complex task because: 1) the multiplicity of stakeholders' functional requirements; 2) the positive or negative impact of features on non-functional properties; and 3) the stakeholders' preferences w.r.t. the desirable non-functional properties of the final product. Many configurations techniques have already been proposed to facilitate automated product derivation. However, most of the current proposals are not designed to consider stakeholders' preferences and constraints especially with regard to non-functional properties. We address the software product line configuration problem and propose a framework, which employs an artificial intelligence planning technique to automatically select suitable features that satisfy both the stakeholders' functional and non-functional preferences and constraints. We also provide tooling support to facilitate the use of our framework. Our experiments show that despite the complexity involved with the simultaneous consideration of both functional and non-functional properties our configuration technique is scalable.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {56–65},
numpages = {10},
keywords = {artificial intelligence, configuration, feature model, planning techniques, software product line engineering},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3307630.3342399,
author = {Rabiser, Rick},
title = {Feature Modeling vs. Decision Modeling: History, Comparison and Perspectives},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342399},
doi = {10.1145/3307630.3342399},
abstract = {Modeling variability, i.e., defining the commonalities and variability of reusable artifacts, is a central task of software product line engineering. Numerous variability modeling approaches have been proposed in the last three decades. Most of these approaches are based on feature modeling (FM) or decision modeling (DM), two classes of variability approaches that go back to initial proposals made in the early 1990ies, i.e., FODA for FM and Synthesis for DM. This extended abstract summarizes the history of FM and DM as well as the results of a systematic comparison between FM and DM published earlier. We also outline perspectives, especially regarding potential synergies and key common elements that should be part of a standard variability modeling language.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {134–136},
numpages = {3},
keywords = {decision modeling, feature modeling, variability modeling},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3336294.3342372,
author = {Kr\"{u}ger, Jacob and Al-Hajjaji, Mustafa and Leich, Thomas and Saake, Gunter},
title = {Mutation Operators for Feature-Oriented Software Product Lines},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342372},
doi = {10.1145/3336294.3342372},
abstract = {In this extended abstract, we describe the Journal First summary of our article with the same title published in the Journal of Software: Testing, Verification and Reliability (STVR) [1].},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {12},
numpages = {1},
keywords = {mutation testing, software product line, variability faults},
location = {Paris, France},
series = {SPLC '19}
}

@article{10.1109/MC.2013.299,
author = {Lamprecht, Anna-Lena and Naujokat, Stefan and Schaefer, Ina},
title = {Variability Management beyond Feature Models},
year = {2013},
issue_date = {November 2013},
publisher = {IEEE Computer Society Press},
address = {Washington, DC, USA},
volume = {46},
number = {11},
issn = {0018-9162},
url = {https://doi.org/10.1109/MC.2013.299},
doi = {10.1109/MC.2013.299},
abstract = {When new customer and regulatory requirements arise, the ability to quickly adapt business information system processes is crucial to stay ahead of competitors. A proposed synthesis-based framework enables the development of business processes that automatically yield fully executable variants.},
journal = {Computer},
month = nov,
pages = {48–54},
numpages = {7},
keywords = {Business, Information systems, Process management, business processes, process synthesis, simplicity in IT, variability modeling, variant-rich software systems}
}

@inproceedings{10.1145/3109729.3109748,
author = {Martinez, Jabier and Assun\c{c}\~{a}o, Wesley K. G. and Ziadi, Tewfik},
title = {ESPLA: A Catalog of Extractive SPL Adoption Case Studies},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109748},
doi = {10.1145/3109729.3109748},
abstract = {Building Software Product Lines (SPLs) from existing artefacts is known as the extractive approach for SPL adoption. The traditional case is that variants are created with ad-hoc reuse (e.g., copy-paste-modify to quickly respond to different customer needs) and practitioners want to reengineer them to an SPL. Several industrial cases have been presented in the literature to motivate the interest of the extraction and many case studies are used to validate methods and techniques for different activities during this adoption process.However, there is no catalog or repository that gather together case studies and artefacts related to extractive SPL adoption. In this paper we present ESPLA, a catalog of Extractive SPL Adoption case studies that aims to foster the advance of this field by providing comprehensive information about case studies that will be otherwise scattered in the literature. Researchers, practitioners and educators can use this catalog to find the case studies that better fit to their particular needs. Currently, ESPLA contains information about 123 case studies and it is intended to be a catalog that can be updated and extended by the community.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {38–41},
numpages = {4},
keywords = {Software product lines, extractive software product line adoption, reverse engineering, variability management},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@article{10.1504/IJIIDS.2012.045848,
author = {Mar\'{\i}, &nbsp; and Espinosa, a. Eugenia Cabello and Salavert, Isidro Ramos and Guti\'{e}, Jorge Rafael and Pulido, rrez and G\'{o}, Abel and Llana, mez and Lim\'{o}, Rogelio and Cordero, n.},
title = {SPL variability management, cardinality and types: an MDA approach},
year = {2012},
issue_date = {March 2012},
publisher = {Inderscience Publishers},
address = {Geneva 15, CHE},
volume = {6},
number = {2},
issn = {1751-5858},
url = {https://doi.org/10.1504/IJIIDS.2012.045848},
doi = {10.1504/IJIIDS.2012.045848},
abstract = {This paper presents a baseline-oriented modelling (BOM) approach to develop families of software products. BOM is a generic solution implemented as a framework that automatically generates software applications using executable architectural models by means of software product line (SPL) techniques. In order to cope with the variability problem, BOM considers its cardinality and type and implements two solutions: the BOM-EAGER and the BOM-LAZY approaches. BOM has been designed following the model-driven architecture (MDA) standard: all the SPL software artefacts are models, and model transformations enact the SPL production plan.},
journal = {Int. J. Intell. Inf. Database Syst.},
month = mar,
pages = {129–153},
numpages = {25}
}

@inproceedings{10.1145/2430502.2430516,
author = {Lanceloti, Leandro A. and Maldonado, Jos\'{e} C. and Gimenes, Itana M. S. and Oliveira, Edson A.},
title = {SMartyParser: a XMI parser for UML-based software product line variability models},
year = {2013},
isbn = {9781450315418},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2430502.2430516},
doi = {10.1145/2430502.2430516},
abstract = {Variability management is an important issue for the software-intensive systems domain. Such an issue is essential for the success of software product line (SPL) adoption strategies. Although it is a well-discussed subject in the SPL community, there is a lack of tool support for environments that handle UML-based SPL variabilities, as several variability management approaches take UML as a basis, specially its profiling mechanism. Such environments might handle variabilities for several reasons, such as, evaluating SPLs, defining and applying metrics based on a SPL modeling, and automating the product generation. Therefore, this paper presents the SMartyParser, a parser for processing UML-based SPL models. Such models can be obtained, in the XMI format, from every UML specification-compliant tool. Such a parser provides several services to make it easier the handling of variability data in a particular SPL environment/tool. SMartyParser was built by taking the Open Core framework as a basis for processing XMI files. A parser use example is presented by taking into account the SPL Arcade Game Maker UML models.},
booktitle = {Proceedings of the 7th International Workshop on Variability Modelling of Software-Intensive Systems},
articleno = {10},
numpages = {5},
keywords = {UML, XMI, parser, software product line, stereotype, variability management},
location = {Pisa, Italy},
series = {VaMoS '13}
}

@inproceedings{10.1145/1629716.1629729,
author = {Liebig, J\"{o}rg and Apel, Sven and Lengauer, Christian and Leich, Thomas},
title = {RobbyDBMS: a case study on hardware/software product line engineering},
year = {2009},
isbn = {9781605585673},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1629716.1629729},
doi = {10.1145/1629716.1629729},
abstract = {The development of a highly configurable data management system is a challenging task, especially if it is to be implemented on an embedded system that provides limited resources. We present a case study of such a data management system, called RobbyDBMS, and give it a feature-oriented design. In our case study, we evaluate the system's efficiency and variability. We pay particular attention to the interaction between the features of the data management system and the components of the underlying embedded platform. We also propose an integrated development process covering both hardware and software.},
booktitle = {Proceedings of the First International Workshop on Feature-Oriented Software Development},
pages = {63–68},
numpages = {6},
keywords = {FeatureC++, domain engineering, feature oriented software development, hardware product lines, software product lines},
location = {Denver, Colorado, USA},
series = {FOSD '09}
}

@inproceedings{10.1109/SPLC.2011.27,
author = {Tawhid, Rasha and Petriu, Dorina C.},
title = {Automatic Derivation of a Product Performance Model from a Software Product Line Model},
year = {2011},
isbn = {9780769544878},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SPLC.2011.27},
doi = {10.1109/SPLC.2011.27},
abstract = {We propose to integrate performance analysis in the early phases of the model-driven development process for Software Product Lines (SPL). We start with a multi-view UML model of the core family assets representing the commonality and variability between different products, which we call the SPL model. We add another perspective to the SPL model, annotating it with generic performance specifications expressed in the standard UML profile MARTE, recently adopted by OMG. The runtime performance of a product is affected by factors contained in the UML model of the product (derived from the SPL model), but also by external factors depending on the implementation and execution environments. The external factors not contained in the SPL model need to be eventually represented in the performance model. In order to do so, we propose to represent the variability space of different possible implementation and execution environments through a so called "performance completion (PC) feature model". These PC features are mapped to MARTE performance-related stereotypes and attributes attached to the SPL model elements. A first model transformation realized in the Atlas Transformation Language (ATL) derives the UML model of a specific product with concrete MARTE annotations from the SPL model. A second transformation generates a Layered Queueing Network (LQN) performance model for the given product by applying an existing transformation named PUMA, developed in previous work. The proposed technique is illustrated with an e-commerce case study. A LQN model is derived for a product and the impact of different levels of secure communication channels on its performance is analyzed by using the LQN model.},
booktitle = {Proceedings of the 2011 15th International Software Product Line Conference},
pages = {80–89},
numpages = {10},
keywords = {ATL, MARTE, Model-driven development, Performance Completion, Performance analysis, SPL, UML},
series = {SPLC '11}
}

@inproceedings{10.1145/3336294.3336320,
author = {Dahlem, Marc and Rahm, Ricarda and Becker, Martin},
title = {App Variants and Their Impact on Mobile Architecture: An Experience Report},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336320},
doi = {10.1145/3336294.3336320},
abstract = {In order to raise the awareness of industrial practitioners and researchers regarding specific PLE-related issues and approaches, this paper shares some experiences made by Insiders Technologies regarding the development and provisioning of mobile app variants and the impact of variability on the app architecture. Using the smart MOBILE app product line as an example, the paper characterizes the mobile app market, identifies key variant drivers, introduces influential technologies and their constraints, and discusses viable tactics to support adequate variability in the architecture of a mobile app.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {33–38},
numpages = {6},
keywords = {mobile app development, mobile application, software architecture, software product line},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/1858996.1859021,
author = {Kim, Chang Hwan Peter and Batory, Don and Khurshid, Sarfraz},
title = {Eliminating products to test in a software product line},
year = {2010},
isbn = {9781450301169},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1858996.1859021},
doi = {10.1145/1858996.1859021},
abstract = {A Software Product Line (SPL) is a family of programs where each program is defined by a unique combination of features. Developing a set of programs with commonalities and variabilities in this way can significantly reduce both the time and cost of software development. However, as the number of programs may be exponential in the number of features, testing an SPL, the phase to which the majority of software development is dedicated, becomes especially challenging [12].Indeed, scale is the biggest challenge in testing or checking the properties of programs in a product line. Even a product line with just 10 optional features has over a thousand (210) distinct programs. As an example of a situation where every program must be considered, suppose that every program of an SPL outputs a String that each feature might modify.},
booktitle = {Proceedings of the 25th IEEE/ACM International Conference on Automated Software Engineering},
pages = {139–142},
numpages = {4},
keywords = {feature oriented programming, software product lines, static analysis, testing},
location = {Antwerp, Belgium},
series = {ASE '10}
}

@inproceedings{10.5555/1753235.1753293,
author = {Jarzabek, Stan},
title = {Pragmatic strategies for variability management in product lines in small- to medium-size companies},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {If you deploy multiple product variants for variety of customers, you are already in the software Product Line (SPL) business. Most SPLs in small- to medium-size companies evolve from a single successful product. Each new product variant is often developed by ad hoc reuse - copy and modify - of source code files implementing existing products. As maintaining product variants and implementing new ones become more and more time-consuming, managing variability using more systematic SPL techniques can help a company sustain the business growth.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {327},
numpages = {1},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.1145/3233027.3236397,
author = {Mendon\c{c}a, Willian D. F. and Assun\c{c}\~{a}o, Wesley K. G. and Linsbauer, Lukas},
title = {Multi-objective optimization for reverse engineering of apo-games feature models},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3236397},
doi = {10.1145/3233027.3236397},
abstract = {Software Product Lines Engineering (SPLE) is a software development approach intended for the development and maintenance of variable systems, i.e. systems that exist in many different variants. In the long run SPLE has many advantages. However, it requires a large upfront investment of time and money, which is why in practice Software Product Lines (SPLs) are rarely developed from scratch. Instead, they are often built using an extractive approach by which a set of existing system variants is consolidated (i.e. reverse engineered) into an SPL. A crucial part of this process is the construction of a variability model like a Feature Model (FM) that describes the common and variable parts of the system variants. In this paper we apply an approach for reverse engineering feature models based on a multi-objective optimization algorithm to the given challenge of constructing a feature model for a set of game variants and we present the results.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {279–283},
numpages = {5},
keywords = {feature model, reverse engineering, software product line},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3461001.3473056,
author = {Th\"{u}m, Thomas and Collet, Philippe and Acher, Mathieu},
title = {Fourth International Workshop on Languages for Modelling Variability (MODEVAR@SPLC 2021)},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3473056},
doi = {10.1145/3461001.3473056},
abstract = {Feature models were invented in 1990 and have been recognised as one of the main contributions to the Software Product Line community. Although there have been several attempts to establish and study a sort of standard variability modelling language, there is still no consensus on a simple feature modelling language. There can be many motivations to have one but among others, there is one that is very important: information sharing among researchers, tools or developers. Following the spirit of the first three editions, this workshop is an interactive event where all participants shall share knowledge, but also ongoing realizations about how to build up a simple feature modelling language that all the community can agree on.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {205},
numpages = {1},
keywords = {feature models, variability modelling languages and tools},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@article{10.1504/IJIIDS.2008.021444,
author = {Bubak, Oldrich and Gomaa, Hassan},
title = {Applying software product line concepts in service orientation},
year = {2008},
issue_date = {November 2008},
publisher = {Inderscience Publishers},
address = {Geneva 15, CHE},
volume = {2},
number = {4},
issn = {1751-5858},
url = {https://doi.org/10.1504/IJIIDS.2008.021444},
doi = {10.1504/IJIIDS.2008.021444},
abstract = {Today's competitive business environment commands innovation, increasingly shorter time-to-market and efficiency. Product line technology, pioneered in manufacturing, is increasingly finding its way to the software sector allowing companies to sustain growth and achieve market success. Regardless of the domain, however, information systems have been behind all facets of business operations. Here, the emerging service oriented architectures can help provide the answers to the need for agility, versatility and economies. This effort introduces the concepts of software product lines and service orientation and explores their parallels. Next, it attempts to show the applicability of software product line methods to service orientation. Finally, the work discusses the main obstacles on the road to realising the synergy between these cutting-edge technologies.},
journal = {Int. J. Intell. Inf. Database Syst.},
month = nov,
pages = {383–396},
numpages = {14},
keywords = {SOA, SPL, enterprise architecture, reusable architecture, service orientation, service oriented architecture, software product lines}
}

@inproceedings{10.5555/1887899.1887951,
author = {Lopez-Herrejon, Roberto E.},
title = {On the need of safe software product line architectures},
year = {2010},
isbn = {3642151132},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {A Software Product Line (SPL) is a family of related software systems distinguished by the different sets of features each system provides. Over the last decade, the substantial benefits of SPL practices have been extensively documented and corroborated both in academia and industry. Several architecture methods have been proposed that employ different artifacts for expressing the components of a SPL, their properties and relationships. Of crucial importance for any SPL architecture method is to guarantee that the variability, for instance as expressed in feature models, is not only preserved but also kept consistent across all artifacts used. In this research challenge paper we argue that Safe Composition - the guarantee that all programs of a product line are type safe - can be leveraged to address this guarantee for structural properties of SPL architectures and the challenges that that entails.},
booktitle = {Proceedings of the 4th European Conference on Software Architecture},
pages = {493–496},
numpages = {4},
location = {Copenhagen, Denmark},
series = {ECSA'10}
}

@inproceedings{10.1145/3307630.3342420,
author = {Ojeda, Marta Cecilia Camacho and Rodriguez, Francisco \'{A}lvarez and Collazos, C\'{e}sar A.},
title = {Identifying Collaborative Aspects During Software Product Lines Scoping},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342420},
doi = {10.1145/3307630.3342420},
abstract = {The software product line engineering (SPLE) is a reuse strategy that allows software companies to save effort when they develop products with common features. There, the software product line scoping is one of most essential and complex activities because (1) a correct scope for the line has a high impact in its success and (2) it implies an interdisciplinary activity involving stakeholders with different visions about the products. In this paper, we report an exploratory study aimed to identify problems related to the collaborative work at scoping SPL in practice. We studied problems related to the participation and interaction of stakeholders in projects where groups of students must develop SPLs of serious video games for training employees in a company. Our study revealed problems related to low levels of communication, participants with different project objectives and stakeholders requesting different types of programs. Problems that are exacerbated by the staff rotation and inconveniences scheduling working sessions. In addition, our study revealed other problems regarding developers misunderstandings the artifacts related to the scope and their use in the further development activities. In this paper, we also present the first version of a collaborative method for SPL scoping, which seeks to combine scoping practices with collaborative patterns and thinkLets, with this combination we seek the effective participation of the required roles in this activity.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {98–105},
numpages = {8},
keywords = {SPL scoping, collaboration engineering, collaborative work, software product lines},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.5555/1939399.1939424,
author = {Kim, Chang Hwan Peter and Bodden, Eric and Batory, Don and Khurshid, Sarfraz},
title = {Reducing configurations to monitor in a software product line},
year = {2010},
isbn = {3642166113},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {A software product line is a family of programs where each program is defined by a unique combination of features. Product lines, like conventional programs, can be checked for safety properties through execution monitoring. However, because a product line induces a number of programs that is potentially exponential in the number of features, it would be very expensive to use existing monitoring techniques: one would have to apply those techniques to every single program. Doing so would also be wasteful because many programs can provably never violate the stated property. We introduce a monitoring technique dedicated to product lines that, given a safety property, statically determines the feature combinations that cannot possibly violate the property, thus reducing the number of programs to monitor. Experiments show that our technique is effective, particularly for safety properties that crosscut many optional features.},
booktitle = {Proceedings of the First International Conference on Runtime Verification},
pages = {285–299},
numpages = {15},
location = {St. Julians, Malta},
series = {RV'10}
}

@inproceedings{10.1145/2973839.2973850,
author = {Dias, Jaime W. and OliveiraJr, Edson and Silva, Marco A. Graciotto},
title = {Preliminary Empirical Evidence on SPrL Variability Management with EPF and SMartySPEM},
year = {2016},
isbn = {9781450342018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2973839.2973850},
doi = {10.1145/2973839.2973850},
abstract = {Every day increases the level of demand by customers in regard to the quality and complexity of software systems. Because of this, companies are increasingly customizing their software processes according to market and project needs. A systematic way is the use of the Software Process Line strategy (SPrL), in which each product derived from the line is a specific software process. Therefore, variability management is an essential activity. This paper presents an empirical study comparing the compositional and the annotative approaches in representing variability in SPrLs taking into consideration a SCRUM-based SPrL. Eclipse Process Framework was chosen to represent the compositional approach, whereas SMartySPEM was considered to the annotative approach. The approaches were compared taking into account the sequential exploratory strategy based on mixed-methods. A qualitative empirical study comparing these approaches was planned, executed and previously published with relation to the following set of criteria: modularity, traceability, error detection, granularity and systematic management of variability. Such study was based on the expertise of software process experts and provided important information for the hypothesis formulation about systematic management of variability, the main dependent variable of this quantitative study. Thus, the quantitative study presented in this paper analyzes the effectiveness of variability representation. As the main contribution of this paper, we present preliminary evidence on the effectiveness of variability management, allowing supporting the gathering of solid evidence for further research in academic and industrial set about the compositional and annotative approaches for variability management in SPrLs. As a result of this quantitative empirical study it was not statistically possible to confirm that the annotative approach is more effective than the compositional approach.},
booktitle = {Proceedings of the XXX Brazilian Symposium on Software Engineering},
pages = {133–142},
numpages = {10},
keywords = {Eclipse Process Framework, Estudo Emp\'{\i}rico, SMartySPEM, Variabilidade em Processo de Software},
location = {Maring\'{a}, Brazil},
series = {SBES '16}
}

@inproceedings{10.1145/3382025.3414974,
author = {Mannion, Mike and Kaindl, Hermann},
title = {Software reuse and mass personalization},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414974},
doi = {10.1145/3382025.3414974},
abstract = {This tutorial explores the impact of the socio-economic trends of customization and mass personalization on software reuse through software product line development.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {38},
numpages = {1},
keywords = {mass personalization, product lines, software reuse},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3461001.3471141,
author = {Casquina, Junior Cupe and Montecchi, Leonardo},
title = {A proposal for organizing source code variability in the git version control system},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471141},
doi = {10.1145/3461001.3471141},
abstract = {Often, either to expand the target market or to satisfy specific new requirements, software systems inside a company are cloned, refactored, and customized, generating new derived software systems. Although this is a practical solution, it is not effective in the long-term because of the high maintenance costs when maintaining each of these derived software systems. Software product lines (SPLs) were proposed to reduce these costs; however, the lack of integration between variability realization mechanisms and version control systems reduces its attractiveness in the software development industry, especially in small and medium software companies. In this paper we propose an approach to integrate the conditional compilation mechanism used to implement the SPL variabilities and the Git version control system used to manage software versions in order to increase the attractiveness of the SPLs in the industry. The proposed solution also could be seen as a method to manage software system families' evolution in space and time.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {82–88},
numpages = {7},
keywords = {Git, SPL, VarCS, conditional compilation, software product lines},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.5555/1885639.1885650,
author = {Svendsen, Andreas and Zhang, Xiaorui and Lind-Tviberg, Roy and Fleurey, Franck and Haugen, \O{}ystein and M\o{}ller-Pedersen, Birger and Olsen, G\o{}ran K.},
title = {Developing a software product line for train control: a case study of CVL},
year = {2010},
isbn = {3642155782},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {This paper presents a case study of creating a software product line for the train signaling domain. The Train Control Language (TCL) is a DSL which automates the production of source code for computers controlling train stations. By applying the Common Variability Language (CVL), which is a separate and generic language to define variability on base models, we form a software product line of stations. We discuss the process and experience of using CVL to automate the production of three real train stations. A brief discussion about the verification needed for the generated products is also included.},
booktitle = {Proceedings of the 14th International Conference on Software Product Lines: Going Beyond},
pages = {106–120},
numpages = {15},
location = {Jeju Island, South Korea},
series = {SPLC'10}
}

@phdthesis{10.5555/1750958,
author = {White, Christopher Jules},
advisor = {Schmidt, Douglas C.},
title = {Optimizing the configuration of software product line variants},
year = {2008},
isbn = {9781109261172},
publisher = {Vanderbilt University},
address = {USA},
abstract = {Software Product-Lines (SPLs) are software architectures that provide reusable components that can be configured into variants to meet different requirement sets. A key part of an SPL is a specification of the rules governing how the reusable components can be configured into variants. One of the most widely used modeling techniques for capturing these configuration rules is called feature modeling. This dissertation describes a research approach for addressing the challenges of configuring and optimizing SPL variants. We show that constraint programming techniques can be used to select optimal or good feature selections from feature models. Furthermore, we show how these constraint-based automation techniques can be used to perform modeling guidance to improve manual modeling steps. Finally, we show that a key missing component of SPL automation is the ability to automatically diagnose SPL configuration errors and offer good remedies. We provide a constraint-based diagnosis method for identifying SPL configuration errors.},
note = {AAI3365673}
}

@inproceedings{10.1145/1321211.1321255,
author = {Nestor, Daren and O'Malley, Luke and Healy, Patrick and Quigley, Aaron and Thiel, Steffen},
title = {Visualisation techniques to support derivation tasks in software product line development},
year = {2007},
publisher = {IBM Corp.},
address = {USA},
url = {https://doi.org/10.1145/1321211.1321255},
doi = {10.1145/1321211.1321255},
abstract = {Adopting a software product line approach allows companies to realise significant improvements in time-to-market, cost, productivity, and system quality, A fundamental problem in software product line engineering is the fact that a product line of industrial size can easily incorporate several thousand variation points. The scale and interdependencies can lead to variability management and product derivation tasks that are extremely complex to manage. This paper investigates visualisation techniques to support and improve the effectiveness of these tasks.},
booktitle = {Proceedings of the 2007 Conference of the Center for Advanced Studies on Collaborative Research},
pages = {315–325},
numpages = {11},
location = {Richmond Hill, Ontario, Canada},
series = {CASCON '07}
}

@inproceedings{10.1145/3307630.3342403,
author = {Berger, Thorsten and Collet, Philippe},
title = {Usage Scenarios for a Common Feature Modeling Language},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342403},
doi = {10.1145/3307630.3342403},
abstract = {Feature models are recognized as a de facto standard for variability modeling. Presented almost three decades ago, dozens of different variations and extensions to the original feature-modeling notation have been proposed, together with hundreds of variability management techniques building upon feature models. Unfortunately, despite several attempts to establish a unified language, there is still no emerging consensus on a feature-modeling language that is both intuitive and simple, but also expressive enough to cover a range of important usage scenarios. There is not even a documented and commonly agreed set of such scenarios.Following an initiative among product-line engineering researchers in September 2018, we present 14 usage scenarios together with examples and requirements detailing each scenario. The scenario descriptions are the result of a systematic process, where members of the initiative authored original descriptions, which received feedback via a survey, and which we then refined and extended based on the survey results, reviewers' comments, and our own expertise. We also report the relevance of supporting each usage scenario for the language, as perceived by the initiative's members, prioritizing each scenario. We present a roadmap to build and implement a first version of the envisaged common language.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {174–181},
numpages = {8},
keywords = {feature models, software product lines, unified language},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3307630.3342390,
author = {Rodas-Silva, Jorge and Galindo, Jos\'{e} A. and Garc\'{\i}a-Guti\'{e}rrez, Jorge and Benavides, David},
title = {RESDEC: Online Management Tool for Implementation Components Selection in Software Product Lines Using Recommender Systems},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342390},
doi = {10.1145/3307630.3342390},
abstract = {Software product lines (SPL) management is one of the most important activities for the software engineer and it represents one of the key pieces of software product line engineering. When a software system grow fast, configuring a product becomes a costly and error-prone activity due to the amount of features available for configuration. This process becomes more complex when for each feature, there is more than one component that implements it. Currently the tools available for configuration management do not have automated mechanisms to facilitate the optimal components selection that meet the functions required by a given product. In this paper, we introduce a prototype component-based recommender system called RESDEC (REcommender System that suggest implementation Components from selecteD fEatures) designed to manage the best implementation components alternatives. Our tool is validated using WordPress-based websites where the implementation components are represented by plugins and the recommendations generated by RESDEC help interested parties in the search and efficient plugins selection to configure websites.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {33–36},
numpages = {4},
keywords = {implementation components, recommender systems, software product lines, wordpress},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/1810295.1810379,
author = {Marinho, Fabiana G.},
title = {A proposal for consistency checking in dynamic software product line models using OCL},
year = {2010},
isbn = {9781605587196},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1810295.1810379},
doi = {10.1145/1810295.1810379},
abstract = {Ubiquitous applications use context information to provide services and relevant information for their users. On the other hand, in Software Product Line approaches, commonality and variability of a system family should be identified and documented through variability modeling. Thus, one of the challenges to build Context-Aware Product Lines, called Dynamic Software Product Lines, is the consistent representation of context information that influences the variability model. This work proposes the use of UML profiles and OCL to formalize and represent variability and context concepts in a consistent manner.},
booktitle = {Proceedings of the 32nd ACM/IEEE International Conference on Software Engineering - Volume 2},
pages = {333–334},
numpages = {2},
keywords = {consistency checking, dynamic software product line models},
location = {Cape Town, South Africa},
series = {ICSE '10}
}

@inproceedings{10.1145/3106195.3106222,
author = {Corti\~{n}as, Alejandro and Luaces, Miguel R. and Pedreira, Oscar and Places, \'{A}ngeles S. and P\'{e}rez, Jennifer},
title = {Web-based Geographic Information Systems SPLE: Domain Analysis and Experience Report},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106222},
doi = {10.1145/3106195.3106222},
abstract = {Geographic Information Systems (GIS) play a critical role for supporting the development of Cyber Physical Systems (CPS), since they allow geolocating users and the "things" or smart objects that constitute a CPS, providing a realistic vision in quasi real-time. This has increased the demand of developing web-based GIS applications to be deployed in the different devices and wearables of the CPS with short time-to-market. This demand and the fact that web-based GIS applications of CPS share many features and known variability justifies why they present the perfect setting to apply software product-lines engineering (SPLE). In this paper, we present the experience of developing a web-based GIS product line in the SME Enxenio, and the methodology applied to define the product line. In addition, we present the results obtained providing the GIS community with a reference SPL that is ready for its evolution and enrichment.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {190–194},
numpages = {5},
keywords = {Software product line engineering, scaffolding, web-based geographic information systems},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/1595808.1595819,
author = {Anastasopoulos, Michail},
title = {Increasing efficiency and effectiveness of software product line evolution: an infrastructure on top of configuration management},
year = {2009},
isbn = {9781605586786},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1595808.1595819},
doi = {10.1145/1595808.1595819},
abstract = {Software Product Line Engineering entails the strategic development of software assets that are to be reused many times across the members of a product line. Assuring that the investment in reuse holds over time is an important requirement in this case. To that end it is necessary that evolution is carefully managed: Changes in reusable assets and their customized instances need to be tracked and propagated efficiently. Configuration Management is a mature discipline for that purpose. However traditional configuration management does not address product line evolution scenarios explicitly. Over time this can lead to great evolution management effort. This paper presents an infrastructure - in particular its validation - that sits on top of traditional configuration management and is tailored to evolution scenarios in Product Line Engineering. The result is a reduction of effort and an increase of correctness},
booktitle = {Proceedings of the Joint International and Annual ERCIM Workshops on Principles of Software Evolution (IWPSE) and Software Evolution (Evol) Workshops},
pages = {47–56},
numpages = {10},
keywords = {evolution, software product lines},
location = {Amsterdam, The Netherlands},
series = {IWPSE-Evol '09}
}

@inproceedings{10.1109/ICSTW.2013.30,
author = {Henard, Christopher and Papadakis, Mike and Perrouin, Gilles and Klein, Jacques and Traon, Yves Le},
title = {Assessing Software Product Line Testing Via Model-Based Mutation: An Application to Similarity Testing},
year = {2013},
isbn = {9780769549934},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICSTW.2013.30},
doi = {10.1109/ICSTW.2013.30},
abstract = {Needs for mass customization and economies of scale have pushed engineers to develop Software Product Lines (SPLs). SPLs are families of products sharing commonalities and exhibiting differences, built by reusing software assets abstractly represented by features. Feature models describe the constraints that link the features and allow the configuration of tailored software products. Common SPLs involve hundreds, even thousands of features, leading to billions of possible software products. As a result, testing a product line is challenging due to the enormous size of the possible products. Existing techniques focus on testing based on the product line's feature model by selecting a limited set of products to test. Being created manually or reverse-engineered, feature models are prone to errors impacting the generated test suites. In this paper, we examine ability of test suites to detect such errors. In particular, we propose two mutation operators to derive erroneous feature models (mutants) from an original feature model and assess the capability of the generated original test suite to kill the mutants. Experimentation on real feature models demonstrate that dissimilar tests suites have a higher mutant detection ability than similar ones, thus validating the relevance of similarity-driven product line testing.},
booktitle = {Proceedings of the 2013 IEEE Sixth International Conference on Software Testing, Verification and Validation Workshops},
pages = {188–197},
numpages = {10},
keywords = {Feature Models, Mutation, Similarity, Software Product Lines, Testing},
series = {ICSTW '13}
}

@inproceedings{10.1145/2934466.2962731,
author = {Kr\"{u}ger, Jacob and Fenske, Wolfram and Meinicke, Jens and Leich, Thomas and Saake, Gunter},
title = {Extracting software product lines: a cost estimation perspective},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2962731},
doi = {10.1145/2934466.2962731},
abstract = {Companies are often forced to customize their software products. Thus, a common practice is to clone and adapt existing systems to new customer requirements. With the extractive approach, those derived variants can be migrated into a software product line. However, changing to a new development process is risky and may result in unnecessary costs. Therefore, companies apply cost estimations to predict whether another development approach is beneficial. Existing cost models for software-product-line engineering focus on development from scratch. Contrarily, the extractive approach is more common in practice but specialized models are missing. Thus, in this work we focus on product-line extraction from a set of legacy systems. We i) describe according cost factors, ii) put them in context with the development process and cost curves, and iii) identify open challenges in product-line economics. This way, our work supports cost estimations for the extractive approach and provides a basis for further research.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {354–361},
numpages = {8},
keywords = {cost estimation, extractive approach, investment analysis, risk assessment, software product line},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.5220/0005329105460552,
author = {Sottet, Jean-S\'{e}bastien and Vagner, Alain and Garc\'{\i}a Frey, Alfonso},
title = {Variability Management supporting the Model-Driven Design of User Interfaces},
year = {2015},
isbn = {9789897580833},
publisher = {SCITEPRESS - Science and Technology Publications, Lda},
address = {Setubal, PRT},
url = {https://doi.org/10.5220/0005329105460552},
doi = {10.5220/0005329105460552},
abstract = {User Interfaces (UI) design is a complex and multi-faceted problem. It depends on devices, users, and their environments and involves various stakeholders with different backgrounds. Moreover, user requirements are difficult to evaluate precisely upfront and require iterative design cycles based on trial and error. All this variability is complex and should be managed efficiently to ensure moderate design costs. One solution is to implement in the UI design process Model-Driven Engineering (MDE) and Software Product Lines (SPL). However, current SPL approaches do not consider problems related to specific UI design models. We propose an approach based on multiple feature models that supports the separation of concerns through multi-step partial configuration of UI features. This makes easier to reach a consensus among stakeholders including end-users. The approach is implemented in our existing MDE UI generation framework.},
booktitle = {Proceedings of the 3rd International Conference on Model-Driven Engineering and Software Development},
pages = {546–552},
numpages = {7},
keywords = {Model-Driven Software Product Line, Model-Driven User Interfaces Engineering, Multi-Step Configuration, Partial Configuration},
location = {ESEO, Angers, Loire Valley, France},
series = {MODELSWARD 2015}
}

@inproceedings{10.1145/3382025.3414952,
author = {Varela-Vaca, \'{A}ngel Jes\'{u}s and Gasca, Rafael M. and Carmona-Fombella, Jose Antonio and G\'{o}mez-L\'{o}pez, Mar\'{\i}a Teresa},
title = {AMADEUS: towards the AutoMAteD secUrity teSting},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414952},
doi = {10.1145/3382025.3414952},
abstract = {The proper configuration of systems has become a fundamental factor to avoid cybersecurity risks. Thereby, the analysis of cybersecurity vulnerabilities is a mandatory task, but the number of vulnerabilities and system configurations that can be threatened is extremely high. In this paper, we propose a method that uses software product line techniques to analyse the vulnerable configuration of the systems. We propose a solution, entitled AMADEUS, to enable and support the automatic analysis and testing of cybersecurity vulnerabilities of configuration systems based on feature models. AMADEUS is a holistic solution that is able to automate the analysis of the specific infrastructures in the organisations, the existing vulnerabilities, and the possible configurations extracted from the vulnerability repositories. By using this information, AMADEUS generates automatically the feature models, that are used for reasoning capabilities to extract knowledge, such as to determine attack vectors with certain features. AMADEUS has been validated by demonstrating the capacities of feature models to support the threat scenario, in which a wide variety of vulnerabilities extracted from a real repository are involved. Furthermore, we open the door to new applications where software product line engineering and cybersecurity can be empowered.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {11},
numpages = {12},
keywords = {cybersecurity, feature model, pentesting, reasoning, testing, vulnerabilities, vulnerable configuration},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3461001.3473059,
author = {Azanza, Maider and Montalvillo, Leticia and D\'{\i}az, Oscar},
title = {20 years of industrial experience at SPLC: a systematic mapping study},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3473059},
doi = {10.1145/3461001.3473059},
abstract = {Software Product Lines (SPLs) have been around since the late 1970s and have established themselves as a way to deal with product variability. Tens of companies around the globe can pay testament to their advantages. Practitioners, however, have lamented the lack of data on other practitioners' experiences that would help them in the SPL journey. This work intends to analyze the application of SPLs in industry in the last 20 years. We departed from 194 industrial studies that were published at the Software Product Line Conference, the premier venue for SPL research. After the filtering process we selected 66 primary studies, from 43 different companies and 15 countries. The studies were classified to answer three research questions: (i) which contexts have SPLs been applied in?, (ii) what phenomena have been reported? and, (iii) what evidences have been collected in terms of obtained benefits, encountered issues and lessons learned? Regarding the context, SPLs have mainly been reported in USA and Germany (50%) and are used to develop embedded systems (76%). The most cited reason to adopt SPLs is the need to increase product variants (42.42%). As for the phenomena, the most reported problem area is adoption (39.39%). Last, as for evidences the most cited benefit is a cost reduction (53.03%), the issue is evolution (13.13%) and the learned lesson is that architecture is essential (24.24%). We believe the findings will be of interest to the community as a whole in quest to bridge the gap between industry and academia while balancing rigor, authenticity and relevance.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {172–183},
numpages = {12},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3461001.3471151,
author = {Mortara, Johann and Collet, Philippe},
title = {Capturing the diversity of analyses on the Linux kernel variability},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471151},
doi = {10.1145/3461001.3471151},
abstract = {As its variability management architecture is complex, the Linux kernel is a constant subject of study for analyzing different aspects of its variability. It relies on a configuration-aware build system, preprocessor directives in the code, and a configuration tool. While many studies have focused on detecting anomalies within these parts or between them, all concepts and denominations are different among contributions, with similar properties devised with varied formalisms, or with no easy relationship between them. This actually hampers the understanding of all variability issues and proposed analyses, as well as their application to other highly configurable systems. In this paper, we analyse the different properties that have been studied on the variability of the kernel and propose a formalism based on the generic concepts of configurator and derivator. We instantiate them to represent the Kconfig, the Kbuild, and CPP in a unified model that enables to represent all the consistency properties. With this model, we manage to categorize the main related studies, establishing their coverage on the defined properties, showing also overlapping and divergences between studies.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {160–171},
numpages = {12},
keywords = {Linux, build system, configuration, variability, variability anomalies},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.5555/2022115.2022146,
author = {Jarzabek, Stan},
title = {Pragmatic strategies for variability management in software product lines},
year = {2011},
isbn = {9783642213465},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {After general introduction to Software Product Lines (SPL), we focus on variability management, a key technical challenge for effective reuse. We discuss reasons why commonly used variation techniques (pre-processing, configuration files) do not scale well. We present merits (visibility of feature impact on core assets, automation of product derivation, support for evolution and scalability), and trade-offs (need for skilful design and training) in applying uniform variation technique, design specifically to manage variability in SPLs.},
booktitle = {Proceedings of the 12th International Conference on Top Productivity through Software Reuse},
pages = {244–245},
numpages = {2},
keywords = {generation, software product lines, variability management},
location = {Pohang, South Korea},
series = {ICSR'11}
}

@inproceedings{10.1145/1869542.1869610,
author = {Hamza, Haitham S. and Martinez, Jabier and Mugartza, Joseba Laka},
title = {KOPLE: knowledge-oriented product line engineering},
year = {2010},
isbn = {9781450302401},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1869542.1869610},
doi = {10.1145/1869542.1869610},
abstract = {The maturity of Knowledge Engineering (KE) theory and practice presents a real opportunity for advancing the state-of-the-art and state-of-the-practice in software Product-line Engineering (PLE). Several challenges that face the adoption and implementation of PLE in practice can be addressed by exploiting advanced technique from KE. This paper introduces the concept of KOPLE and describes the related one-day workshop that will be held in conjunction with SPLASH 2010.},
booktitle = {Proceedings of the ACM International Conference Companion on Object Oriented Programming Systems Languages and Applications Companion},
pages = {275–276},
numpages = {2},
keywords = {assets mining, domain modeling, knowledge engineering, product-line engineering},
location = {Reno/Tahoe, Nevada, USA},
series = {OOPSLA '10}
}

@inproceedings{10.1145/3461001.3473065,
author = {Michelon, Gabriela K. and Sotto-Mayor, Bruno and Martinez, Jabier and Arrieta, Aitor and Abreu, Rui and Assun\c{c}\~{a}o, Wesley K. G.},
title = {Spectrum-based feature localization: a case study using ArgoUML},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3473065},
doi = {10.1145/3461001.3473065},
abstract = {Feature localization (FL) is a basic activity in re-engineering legacy systems into software product lines. In this work, we explore the use of the Spectrum-based localization technique for this task. This technique is traditionally used for fault localization but with practical applications in other tasks like the dynamic FL approach that we propose. The ArgoUML SPL benchmark is used as a case study and we compare it with a previous hybrid (static and dynamic) approach from which we reuse the manual and testing execution traces of the features. We conclude that it is feasible and sound to use the Spectrum-based approach providing promising results in the benchmark metrics.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {126–130},
numpages = {5},
keywords = {ArgoUML SPL benchmark, dynamic feature localization, spectrum-based localization},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3461002.3473942,
author = {Kahraman, G\"{o}khan and Cleophas, Loek},
title = {Automated derivation of variants in manufacturing systems design},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473942},
doi = {10.1145/3461002.3473942},
abstract = {The Logistics Specification and Analysis Tool (LSAT) is a modelbased engineering tool used for design-space exploration of flexible manufacturing systems. LSAT provides domain specific languages to model a manufacturing system and means to analyze the productivity characteristics of such a system. In LSAT, developers can specify a system and model its deterministic operations as a set of activities. Given a set of activities, it is possible to construct an individual activity sequence that represents one valid system execution, and with minor variations in the specification individual systems can be obtained. To avoid modeling each variant separately, which means cloning and maintaining the common parts, new functionality is needed to deal with the variability of system specifications. In this study, we aim to establish integration between LSAT and product line engineering techniques. Specifically, we provide a realization of a toolchain including variability representation of LSAT realization artifacts and automated variant derivation for the LSAT model variants. Delta modeling, a transformational variability realization mechanism, is employed to model the variability within LSAT realization artifacts. Using the toolchain, we develop an industry-related case for a product line, the so called Extended Twilight System, a Cyber Physical System (CPS) inspired by the CPSs of our industrial partner.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {45–50},
numpages = {6},
keywords = {delta modeling, manufacturing systems, model-based engineering, product lines, variability modeling},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1007/978-3-642-12107-4_7,
author = {Zschaler, Steffen and S\'{a}nchez, Pablo and Santos, Jo\~{a}o and Alf\'{e}rez, Mauricio and Rashid, Awais and Fuentes, Lidia and Moreira, Ana and Ara\'{u}jo, Jo\~{a}o and Kulesza, Uir\'{a}},
title = {VML* – a family of languages for variability management in software product lines},
year = {2009},
isbn = {3642121063},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-12107-4_7},
doi = {10.1007/978-3-642-12107-4_7},
abstract = {Managing variability is a challenging issue in software-product-line engineering. A key part of variability management is the ability to express explicitly the relationship between variability models (expressing the variability in the problem space, for example using feature models) and other artefacts of the product line, for example, requirements models and architecture models. Once these relations have been made explicit, they can be used for a number of purposes, most importantly for product derivation, but also for the generation of trace links or for checking the consistency of a product-line architecture. This paper bootstraps techniques from product-line engineering to produce a family of languages for variability management for easing the creation of new members of the family of languages. We show that developing such language families is feasible and demonstrate the flexibility of our language family by applying it to the development of two variability-management languages.},
booktitle = {Proceedings of the Second International Conference on Software Language Engineering},
pages = {82–102},
numpages = {21},
keywords = {domain-specific languages, family of languages, software product lines, variability management},
location = {Denver, CO},
series = {SLE'09}
}

@inproceedings{10.1109/CISIS.2013.86,
author = {Wang, Zhe},
title = {Evolution Feature Oriented Model Driven Product Line Engineering Approach for Synergistic and Dynamic Service Evolution in Clouds: Pattern Data Structure},
year = {2013},
isbn = {9780769549927},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/CISIS.2013.86},
doi = {10.1109/CISIS.2013.86},
abstract = {Evolution pattern will be defined as an Xml Schema document, the generation of pattern aspect is the process of generating xml instance from its related Xml Schema definition document. The process can be iterative until all the evolution requirement carried by the specific evolution feature has been realized by each evolution pattern aspect(Model Driven Architecture).},
booktitle = {Proceedings of the 2013 Seventh International Conference on Complex, Intelligent, and Software Intensive Systems},
pages = {471–474},
numpages = {4},
keywords = {Clouds Computing, Evolution Feature, Evolution Pattern, Model Driven Product Line Engineering, Service Evolution},
series = {CISIS '13}
}

@inproceedings{10.1145/1985793.1986009,
author = {Xue, Yinxing},
title = {Reengineering legacy software products into software product line based on automatic variability analysis},
year = {2011},
isbn = {9781450304450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1985793.1986009},
doi = {10.1145/1985793.1986009},
abstract = {In order to deliver the various and short time-to-market software products to customers, the paradigm of Software Product Line (SPL) represents a new endeavor to the software development. To migrate a family of legacy software products into SPL for effective reuse, one has to understand commonality and variability among existing products variants. The existing techniques rely on manual identification and modeling of variability, and the analysis based on those techniques is performed at several mutually independent levels of abstraction. We propose a sandwich approach that consolidates feature knowledge from top-down domain analysis with bottom-up analysis of code similarities in subject software products. Our proposed method integrates model differencing, clone detection, and information retrieval techniques, which can provide a systematic means to reengineer the legacy software products into SPL based on automatic variability analysis.},
booktitle = {Proceedings of the 33rd International Conference on Software Engineering},
pages = {1114–1117},
numpages = {4},
keywords = {legacy software, spl, variability analysis},
location = {Waikiki, Honolulu, HI, USA},
series = {ICSE '11}
}

@inproceedings{10.1145/3461001.3472730,
author = {Mannion, Mike and Kaindl, Hermann},
title = {Reuse for mass personalisation through feature models and similarities},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3472730},
doi = {10.1145/3461001.3472730},
abstract = {This tutorial explores the impact of the socio-economic trends of customization and personalization on software reuse and describes a product similarity evaluation process to support the management of a product line.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {211},
numpages = {1},
keywords = {mass personalization, product lines, software reuse},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3461001.3473058,
author = {Ngo, Kien-Tuan and Nguyen, Thu-Trang and Nguyen, Son and Vo, Hieu Dinh},
title = {Variability fault localization: a benchmark},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3473058},
doi = {10.1145/3461001.3473058},
abstract = {Software fault localization is one of the most expensive, tedious, and time-consuming activities in program debugging. This activity becomes even much more challenging in Software Product Line (SPL) systems due to the variability of failures in SPL systems. These unexpected behaviors are caused by variability faults which can only be exposed under some combinations of system features. Although localizing bugs in non-configurable code has been investigated in-depth, variability fault localization in SPL systems still remains mostly unexplored. To approach this challenge, we propose a benchmark for variability fault localization with a large set of 1,570 buggy versions of six SPL systems and baseline variability fault localization performance results. Our hope is to engage the community to propose new and better approaches to the problem of variability fault localization in SPL systems.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {120–125},
numpages = {6},
keywords = {benchmark, variability bug, variability fault localization},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.5555/1949925.1949927,
author = {Borba, Paulo},
title = {An introduction to software product line refactoring},
year = {2009},
isbn = {3642180221},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {Although software product lines (PLs) can bring significant productivity and quality improvements through strategic reuse, bootstrapping existing products into a PL, and extending a PL with more products, is often risky and expensive. These kinds of PL derivation and evolution might require substantial effort and can easily affect the behavior of existing products. To reduce these problems, we propose a notion of product line refactoring and associated transformation templates that should be part of a PL refactoring catalogue. We discuss how the notion guides and improves safety of the PL derivation and evolution processes; the transformation templates, particularly when automated, reduce the effort needed to perform these processes.},
booktitle = {Proceedings of the 3rd International Summer School Conference on Generative and Transformational Techniques in Software Engineering III},
pages = {1–26},
numpages = {26},
location = {Braga, Portugal},
series = {GTTSE'09}
}

@inproceedings{10.1145/3109729.3109735,
author = {Hellebrand, Robert and Schulze, Michael and Ryssel, Uwe},
title = {Reverse engineering challenges of the feedback scenario in co-evolving product lines},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109735},
doi = {10.1145/3109729.3109735},
abstract = {Product Line Engineering (PLE) with feature models has gained reputation in science and industry as a successful reuse strategy in the domain of systems engineering. But, initially developing every new functionality as a reusable feature does not always comply to companies' needs. To be able to profit from PLE and being free to develop new functionality in the scope of a specific product variant, a proper update and feedback strategy has to be in place to avoid that variants decouple from the product line and reuse is no longer possible. In this work we discuss the challenges that need to be solved to realize a successful feedback strategy based on four examples from industry.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {53–56},
numpages = {4},
keywords = {Product Line Engineering, Variant Management, co-evolution},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@article{10.1145/2000799.2000803,
author = {Dehlinger, Josh and Lutz, Robyn R.},
title = {Gaia-PL: A Product Line Engineering Approach for Efficiently Designing Multiagent Systems},
year = {2011},
issue_date = {September 2011},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {20},
number = {4},
issn = {1049-331X},
url = {https://doi.org/10.1145/2000799.2000803},
doi = {10.1145/2000799.2000803},
abstract = {Agent-oriented software engineering (AOSE) has provided powerful and natural, high-level abstractions in which software developers can understand, model and develop complex, distributed systems. Yet, the realization of AOSE partially depends on whether agent-based software systems can achieve reductions in development time and cost similar to other reuse-conscious development methods. Specifically, AOSE does not adequately address requirements specifications as reusable assets. Software product line engineering is a reuse technology that supports the systematic development of a set of similar software systems through understanding, controlling, and managing their common, core characteristics and their differing variation points. In this article, we present an extension to the Gaia AOSE methodology, named Gaia-PL (Gaia-Product Line), for agent-based distributed software systems that enables requirements specifications to be easily reused. We show how our methodology uses a product line perspective to promote reuse in agent-based software systems early in the development life cycle so that software assets can be reused throughout system development and evolution. We also present results from an application to show how Gaia-PL provided reuse that reduced the design and development effort for a large, multiagent system.},
journal = {ACM Trans. Softw. Eng. Methodol.},
month = sep,
articleno = {17},
numpages = {27},
keywords = {Agent-oriented software engineering, software product line engineering}
}

@article{10.1016/j.infsof.2006.08.008,
author = {Her, Jin Sun and Kim, Ji Hyeok and Oh, Sang Hun and Rhew, Sung Yul and Kim, Soo Dong},
title = {A framework for evaluating reusability of core asset in product line engineering},
year = {2007},
issue_date = {July, 2007},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {49},
number = {7},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2006.08.008},
doi = {10.1016/j.infsof.2006.08.008},
abstract = {Product line engineering (PLE) is a new effective approach to software reuse, where applications are generated by instantiating a core asset which is a large-grained reuse unit. Hence, a core asset is a key element of PLE, and therefore the reusability of the core asset largely determines the success of PLE projects. However, current quality models to evaluate reusability do not adequately address the unique characteristics of core assets in PLE. This paper proposes a comprehensive framework for evaluating the reusability of core assets. We first identify the key characteristics of core assets, and derive a set of quality attributes that characterizes the reusability of core assets. Then, we define metrics for each quality attribute and finally present practical guidelines for applying the evaluation framework in PLE projects. Using the proposed framework, the reusability of core assets can be more effectively and precisely evaluated.},
journal = {Inf. Softw. Technol.},
month = jul,
pages = {740–760},
numpages = {21},
keywords = {Core asset, Metric, Product line engineering, Quality model, Reusability}
}

@phdthesis{10.5555/2125747,
author = {Hendrickson, Scott Alton},
advisor = {Taylor, Richard N.},
title = {Modeling and evolving software product line architectures using change-sets and relationships},
year = {2011},
isbn = {9781124517650},
publisher = {California State University at Long Beach},
address = {USA},
abstract = {The essence of any product line architecture (PLA) modeling approach lies in its ability to express variability. Traditional approaches do so by explicitly specifying  variation points,  usually optional or alternative elements of some form, within a monolithic architectural specification of the entire PLA; each governed by its own guard to determine its inclusion within individual products. While the use of variation points adequately captures variability, it also leads to a sizable mismatch between  conceptual variability  (i.e., the features through which an architect logically views and interprets differences in product architectures) and  actual variability  (i.e., the modeling constructs through which these logical differences must be expressed). This mismatch results in highly redundant, scattered, and tangled specifications consisting of repetitive, brittle, and non-intuitive guards. The contribution of this dissertation is a new PLA modeling approach that unites conceptual and actual variability. Our approach uses  change-sets  to group related architectural differences and  relationships  to govern which change-set compositions form valid products. Additionally, we contribute an environment that retains an architect’s ability to visualize and manipulate these constructs within a single, overview representation. The result consolidates related variation points, lifts modeling of variability out of modeling architectural structure, and explicitly and separately manages their compatibilities.We evaluate change-sets and relationships by comparing five PLA's when represented using variation points and our approach. The results indicate that our approach exhibits a reduction in redundancy, scattering and tangling of concepts, but may be less compact than highly domain-specific representations that can take advantage of implicit information within the domain. We also discuss key differences between the overview representation made available when using change-sets and relationships vs. that available when using variation points. Finally, we identify limitations that our  mutable  change-sets have in performing functionalities normally reserved for  immutable  change-sets in version control systems.Together, change-sets and relationships form the basis on which features, feature models, and product line architectures are represented, manipulated, and tied together. With change-sets and relationships, the need for independent architectural variation points, with their implicit and redundant guards, is removed entirely and mismatch between conceptual and actual variability is reduced.},
note = {AAI3444298}
}

@inproceedings{10.5555/1887619.1887641,
author = {Buccella, Agustina and Cechich, Alejandra},
title = {Geographic e-services development through product-line engineering and standardization},
year = {2010},
isbn = {364215171X},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {Software product families provide an efficient means of reuse between a set of related products. Feature models have been widely adopted in domain requirements capturing and specifying. However, there are still few cases applying software product families to develop geographic services for citizens. This paper presents a framework that uses standard geographic information to model a product line. From this basis, it is possible to reuse different assets building new products easily. We illustrate the use of our framework through a case study that integrates geographic information of two governmental agencies.},
booktitle = {Proceedings of the First International Conference on Electronic Government and the Information Systems Perspective},
pages = {150–157},
numpages = {8},
keywords = {geographic information systems, services, software product lines},
location = {Bilbao, Spain},
series = {EGOVIS'10}
}

@inproceedings{10.1109/ICSM.2013.58,
author = {Lopez-Herrejon, Roberto E. and Chicano, Francisco and Ferrer, Javier and Egyed, Alexander and Alba, Enrique},
title = {Multi-objective Optimal Test Suite Computation for Software Product Line Pairwise Testing},
year = {2013},
isbn = {9780769549811},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICSM.2013.58},
doi = {10.1109/ICSM.2013.58},
abstract = {Software Product Lines (SPLs) are families of related software products, which usually provide a large number of feature combinations, a fact that poses a unique set of challenges for software testing. Recently, many SPL testing approaches have been proposed, among them pair wise combinatorial techniques that aim at selecting products to test based on the pairs of feature combinations such products provide. These approaches regard SPL testing as an optimization problem where either coverage (maximize) or test suite size (minimize) are considered as the main optimization objective. Instead, we take a multi-objective view where the two objectives are equally important. In this exploratory paper we propose a zero-one mathematical linear program for solving the multi-objective problem and present an algorithm to compute the true Pareto front, hence an optimal solution, from the feature model of a SPL. The evaluation with 118 feature models revealed an interesting trade-off between reducing the number of constraints in the linear program and the runtime which opens up several venues for future research.},
booktitle = {Proceedings of the 2013 IEEE International Conference on Software Maintenance},
pages = {404–407},
numpages = {4},
keywords = {multi-objective optimization, pairwise testing, software product lines},
series = {ICSM '13}
}

@inproceedings{10.1145/2791060.2791086,
author = {Martinez, Jabier and Ziadi, Tewfik and Bissyand\'{e}, Tegawend\'{e} F. and Klein, Jacques and Le Traon, Yves},
title = {Bottom-up adoption of software product lines: a generic and extensible approach},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791086},
doi = {10.1145/2791060.2791086},
abstract = {Although Software Product Lines are recurrently praised as an efficient paradigm for systematic reuse, practical adoption remains challenging. For bottom-up Software Product Line adoption, where a set of artefact variants already exists, practitioners lack end-to-end support for chaining (1) feature identification, (2) feature location, (3) feature constraints discovery, as well as (4) reengineering approaches. This challenge can be overcome if there exists a set of principles for building a framework to integrate various algorithms and to support different artefact types. In this paper, we propose the principles of such a framework and we provide insights on how it can be extended with adapters, algorithms and visualisations enabling their use in different scenarios. We describe its realization in BUT4Reuse (Bottom--Up Technologies for Reuse) and we assess its generic and extensible properties by implementing a variety of extensions. We further empirically assess the complexity of integration by reproducing case studies from the literature. Finally, we present an experiment where users realize a bottom-up Software Product Line adoption building on the case study of Eclipse variants.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {101–110},
numpages = {10},
keywords = {mining existing assets, reverse engineering, software product line engineering},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2648511.2648546,
author = {Van Landuyt, Dimitri and Op de beeck, Steven and Hovsepyan, Aram and Michiels, Sam and Joosen, Wouter and Meynckens, Sven and de Jong, Gjalt and Barais, Olivier and Acher, Mathieu},
title = {Towards managing variability in the safety design of an automotive hall effect sensor},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648546},
doi = {10.1145/2648511.2648546},
abstract = {This paper discusses the merits and challenges of adopting software product line engineering (SPLE) as the main development process for an automotive Hall Effect sensor. This versatile component is integrated into a number of automotive applications with varying safety requirements (e.g., windshield wipers and brake pedals).This paper provides a detailed explanation as to why the process of safety assessment and verification of the Hall Effect sensor is currently cumbersome and repetitive: it must be repeated entirely for every automotive application in which the sensor is to be used. In addition, no support is given to the engineer to select and configure the appropriate safety solutions and to explain the safety implications of his decisions.To address these problems, we present a tailored SPLE-based approach that combines model-driven development with advanced model composition techniques for applying and reasoning about specific safety solutions. In addition, we provide insights about how this approach can reduce the overall complexity, improve reusability, and facilitate safety assessment of the Hall Effect sensor.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {304–309},
numpages = {6},
keywords = {ASIL validation, automotive, hardware/software co-design, safety patterns, software product line engineering},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3382025.3414959,
author = {Horcas, Jose-Miguel and Pinto, M\'{o}nica and Fuentes, Lidia},
title = {Extensible and modular abstract syntax for feature modeling based on language constructs},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414959},
doi = {10.1145/3382025.3414959},
abstract = {Since the definition of feature models in 1990, a large number of language constructs have emerged. Each language construct usually comes with its own abstract and concrete syntax, its semantics, and even its complete language dialect and tool support. Nowadays, there is a consensus in the Software Product Line community about a need for defining a common variability modeling language. But the fact of the matter is that it is very complex to achieve a good compromise between how expressive the language should be and the effort of developing practical tools for a language with all possible language constructs. In this paper, we propose an extensible model-driven engineering approach for defining the abstract syntax of feature modeling language constructs that could be tailored to different needs and domains. We formalize our approach as a set of modular and reusable metamodels that allows practitioners to decide which subset of language constructs to use through: (1) generating a new variability language; and (2) managing feature models with different level of expressiveness. We provide an instantiation and implementation of our approach.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {10},
numpages = {7},
keywords = {SPL, abstract syntax, feature modeling, language construct, language level, metamodeling, model-driven engineering},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3382025.3414973,
author = {Schlie, Alexander and Kn\"{u}ppel, Alexander and Seidl, Christoph and Schaefer, Ina},
title = {Incremental feature model synthesis for clone-and-own software systems in MATLAB/Simulink},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414973},
doi = {10.1145/3382025.3414973},
abstract = {Families of related MATLAB/Simulink systems commonly emerge ad hoc using clone-and-own practices. Extractively migrating systems towards a software product line (SPL) can be a remedy. A feature model (FM) represents all potential configurations of an SPL, ideally, in non-technical domain terms. However, yielding a sensible FM from automated synthesis remains a major challenge due to domain knowledge being a prerequisite for features to be adequate abstractions. In incremental reverse engineering, subsequent generation of FMs may further overwrite changes and design decisions made during previous manual FM refinement.In this paper, we propose an approach to largely automate the synthesis of a suitable FM from a set of cloned MATLAB/Simulink models as part of reverse engineering an SPL. We fully automate the extraction of an initial, i.e., a technical, FM that closely aligns with realization artifacts and their variability, and further provide operations to manually refine it to incorporate domain knowledge. Most importantly, we provide concepts to capture such operations and to replay them on a structurally different technical FM stemming from a subsequent reverse engineering increment that included further systems of the portfolio. We further provide an implementation and demonstrate the feasibility of our approach using two MATLAB/Simulink data sets from the automotive domain.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {7},
numpages = {12},
keywords = {150% model, MATLAB/Simulink, clone-and-own, feature model, incremental, individual, mapping, refinement, synthesis, variability},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3236405.3237205,
author = {Ziadi, Tewfik and Martinez, Jabier and T\"{e}rnava, Xhevahire},
title = {Teaching projects and research objectives in SPL extraction},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3237205},
doi = {10.1145/3236405.3237205},
abstract = {This year at SPLC we present a teaching and research project where a group of master students analysed a variability-rich domain and extracted an SPL (The Robocode SPL). We present the results of such extraction augmented with an analysis and a quantification regarding the time and effort spent. The research objective was to get and share data about an end-to-end SPL extraction which is usually unavailable in industrial cases because of their large size, complexity, and duration. We provide all the material to replicate, reproduce or extend the case study so it can be easily reused for teaching by anyone in our community. However, we were asking ourselves how can we leverage such case study for teaching to pursue research objectives. In this position paper, we aim to outline our initial ideas that we want to enrich with the others' viewpoints during SPLTea. Towards planning the settings of future teaching projects around this Robocode SPL case study, which can be the timely research objectives that we can identify? Can we involve others in planning this project in their institutions to get further relevant results?},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {44–45},
numpages = {2},
keywords = {extractive software product line adoption, reverse-engineering, software product lines, teaching},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/1244002.1244266,
author = {Inoki, Mari and Fukazawa, Yoshiaki},
title = {Software product line evolution method based on kaizen approach},
year = {2007},
isbn = {1595934804},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1244002.1244266},
doi = {10.1145/1244002.1244266},
abstract = {Continuing optimal product line development needs to evolve core assets in response to market, technology or organization changes. In this paper, we propose a product line evolution method based on the kaizen approach. Kaizen is a continuous improvement method that is adopted in Japanese industry. The important points of the kaizen are to prepare a work standard and continue to improve processes by correcting the differences between the standard and actual results. Our core asset kaizen method provides a standard that includes core asset types based on simple metrics, kaizen patterns representing expertise, and kaizen processes for continuous improvement.},
booktitle = {Proceedings of the 2007 ACM Symposium on Applied Computing},
pages = {1207–1214},
numpages = {8},
keywords = {kaizen, core asset, evolution, pattern, software product line},
location = {Seoul, Korea},
series = {SAC '07}
}

@inproceedings{10.1145/1062455.1062551,
author = {Verlage, Martin and Kiesgen, Thomas},
title = {Five years of product line engineering in a small company},
year = {2005},
isbn = {1581139632},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1062455.1062551},
doi = {10.1145/1062455.1062551},
abstract = {In 1999, a new team at MARKET MAKER Software AG began to develop a software product line for managing and displaying stock market data and financial market news. The basic idea was to use web technology in all applications for delivering services to customers. It soon turned out that the company had to change both the processes and the organization. This report summarizes the changes made and the lessons learned over the past five years, when the product line idea was introduced into a small company which faced the pressure to quickly market the first product line instances.},
booktitle = {Proceedings of the 27th International Conference on Software Engineering},
pages = {534–543},
numpages = {10},
keywords = {SME, experience report, product line engineering, project management},
location = {St. Louis, MO, USA},
series = {ICSE '05}
}

@inproceedings{10.1145/3236405.3236410,
author = {Kr\"{o}her, Christian and El-Sharkawy, Sascha and Schmid, Klaus},
title = {KernelHaven: an open infrastructure for product line analysis},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3236410},
doi = {10.1145/3236405.3236410},
abstract = {KernelHaven is an open infrastructure for Software Product Line (SPL) analysis. It is intended both as a production-quality analysis tool set as well as a research support tool, e.g., to support researchers in systematically exploring research hypothesis. For flexibility and ease of experimentation KernelHaven components are plug-ins for extracting certain information from SPL artifacts and processing this information, e.g., to check the correctness and consistency of variability information or to apply metrics. A configuration-based setup along with automatic documentation functionality allows different experiments and supports their easy reproduction.Here, we describe KernelHaven as a product line analysis research tool and highlight its basic approach as well as its fundamental capabilities. In particular, we describe available information extraction and processing plug-ins and how to combine them. On this basis, researchers and interested professional users can rapidly conduct a first set of experiments. Further, we describe the concepts for extending KernelHaven by new plug-ins, which reduces development effort when realizing new experiments.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {5–10},
numpages = {6},
keywords = {empirical software engineering, software product line analysis, static analysis, variability extraction},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3336294.3342378,
author = {Mannion, Mike and Kaindl, Hermann},
title = {Software Reuse for Mass Customization},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342378},
doi = {10.1145/3336294.3342378},
abstract = {This tutorial explores the impact of the socio-economic trends of mass customization on software reuse through software product line development.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {327},
numpages = {1},
keywords = {mass customization, product lines, software reuse},
location = {Paris, France},
series = {SPLC '19}
}

@article{10.1016/j.infsof.2012.04.009,
author = {Engstr\"{o}M, Emelie and Runeson, Per},
title = {Test overlay in an emerging software product line - An industrial case study},
year = {2013},
issue_date = {March, 2013},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {55},
number = {3},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2012.04.009},
doi = {10.1016/j.infsof.2012.04.009},
abstract = {Context: In large software organizations with a product line development approach, system test planning and scope selection is a complex task. Due to repeated testing: across different testing levels, over time (test for regression) as well as of different variants, the risk of redundant testing is large as well as the risk of overlooking important tests, hidden by the huge amount of possible tests. Aims: This study assesses the amount and type of overlaid manual testing across feature, integration and system test in such context, it explores the causes of potential redundancy and elaborates on how to provide decision support in terms of visualization for the purpose of avoiding redundancy. Method: An in-depth case study was launched including both qualitative and quantitative observations. Results: A high degree of test overlay is identified originating from distributed test responsibilities, poor documentation and structure of test cases, parallel work and insufficient delta analysis. The amount of test overlay depends on which level of abstraction is studied. Conclusions: Avoiding redundancy requires tool support, e.g. visualization of test design coverage, test execution progress, priorities of coverage items as well as visualized priorities of variants to support test case selection.},
journal = {Inf. Softw. Technol.},
month = mar,
pages = {581–594},
numpages = {14},
keywords = {Case study, Efficiency, Overlay, Product-line, Redundancy, Software testing}
}

@inproceedings{10.1145/3233027.3233040,
author = {Kr\"{u}ger, Jacob and Al-Hajjaji, Mustafa and Schulze, Sandro and Saake, Gunter and Leich, Thomas},
title = {Towards automated test refactoring for software product lines},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233040},
doi = {10.1145/3233027.3233040},
abstract = {In practice, organizations often rely on the clone-and-own approach to reuse and customize existing systems. While increasing maintenance costs encourage some organizations to adopt their development processes towards more systematic reuse, others still avoid migrating to a reusable platform. Based on our experiences, a barrier preventing the adoption of software product lines is the fear of introducing new and more problematic bugs---during the migration or later on. We are aware of several works that automate software-product-line adoption, but they neglect the migration and maintenance of test cases. Automating the refactoring of tests can help to facilitate the adoption barrier, compare the quality after migrations, and support maintenance. In this vision paper, we i) discuss open research challenges that are based on our experiences and ii) sketch a first framework to develop automated solutions. Overall, we aim to illustrate our idea and initiate further research to facilitate the adoption and maintenance of software product lines.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {143–148},
numpages = {6},
keywords = {extractive approach, legacy system, maintenance, migration, software product line, testing},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3106195.3106212,
author = {Marimuthu, C. and Chandrasekaran, K.},
title = {Systematic Studies in Software Product Lines: A Tertiary Study},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106212},
doi = {10.1145/3106195.3106212},
abstract = {Software product lines are widely used in the software industries to increase the re-usability and to decrease maintenance cost. On the other hand, systematic reviews are widely used in the software engineering research community to provide the overview of the research field and practitioners guidelines. Researchers have conducted many systematic studies on the different aspects of SPLs. To the best of our knowledge, till now there is no tertiary study conducted on systematic studies of SPL related research topics. In this paper, we aim at conducting a systematic mapping study of existing systematic studies to report the overview of the findings for researchers and practitioners. We performed snowballing and automated search to find out the relevant systematic studies. As a result, we analyzed 60 relevant studies to answer 5 research questions. The main focus of this tertiary study is to highlight the research topics, type of published reviews, active researchers and publication forums. Additionally, we highlight some of the limitations of the systematic studies. The important finding of this study is that the research field is well matured as the systematic studies covered a wide range of research topics. Another important finding is that many studies provided information for practitioners as well as researchers which is a notable improvement in the systematic reviews. However, many studies failed to assess the quality of the primary studies which is the major limitation of the existing systematic studies.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {143–152},
numpages = {10},
keywords = {software product line, systematic review, tertiary study},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3236405.3236426,
author = {Belarbi, Maouaheb},
title = {A methodological framework to enable the generation of code from DSML in SPL},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3236426},
doi = {10.1145/3236405.3236426},
abstract = {Software Product Line has acquired a significant momentum at the end of the 1990ies since it allows the production of variable software systems corresponding to the same domain portfolio. The effectiveness of the derivation process depends on how well variability is defined and implemented which is a crucial topic area that was addressed among two essential trends: On the one hand, starting from Domain Specific Modelling Language to express domain requirements and automate the code generation with Model-Driven Engineering techniques and on the second hand, exploiting the soar of variability mechanisms.In this context, the current research presents a method that unifies the two aforementioned approaches to cover the overall strategies by defining a framework that allows a better code generation in terms of documentation, maintainability, rapidity,etc. The starting point is the usage of the Domain Specific Modelling Language to represent the stakeholders requirements. Then, the resulting meta-model will be converted into one our several Feature Diagrams on which variability mechanisms can be applied to generate all the family products.A preliminary experiment has been undertaken to design the methodology of the proposed software factory in a meta-model. The validation task was evaluated with an academic use case called HandiWeb developed to facilitate handicap persons access to the internet. The first results allow us to put the hand on the key challenges that must be resolved by the proposed methodology.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {64–71},
numpages = {8},
keywords = {DSML, SPL, methodology, software factory, variability},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3382025.3414970,
author = {Kr\"{u}ger, Jacob and Mahmood, Wardah and Berger, Thorsten},
title = {Promote-pl: a round-trip engineering process model for adopting and evolving product lines},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414970},
doi = {10.1145/3382025.3414970},
abstract = {Process models for software product-line engineering focus on proactive adoption scenarios---that is, building product-line platforms from scratch. They comprise the two phases domain engineering (building a product-line platform) and application engineering (building individual variants), each of which defines various development activities. Established more than two decades ago, these process models are still the de-facto standard for steering the engineering of platforms and variants. However, observations from industrial and open-source practice indicate that the separation between domain and application engineering, with their respective activities, does not fully reflect reality. For instance, organizations rarely build platforms from scratch, but start with developing individual variants that are re-engineered into a platform when the need arises. Organizations also appear to evolve platforms by evolving individual variants, and they use contemporary development activities aligned with technical advances. Recognizing this discrepancy, we present an updated process model for engineering software product lines. We employ a method for constructing process theories, building on recent literature as well as our experiences with industrial partners to identify development activities and the orders in which these are performed. Based on these activities, we synthesize and discuss the new process model, called promote-pl. Also, we explain its relation to modern software-engineering practices, such as continuous integration, model-driven engineering, or simulation testing. We hope that our work offers contemporary guidance for product-line engineers developing and evolving platforms, and inspires researchers to build novel methods and tools aligned with current practice.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {2},
numpages = {12},
keywords = {process model, round-trip engineering, software reuse},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1109/APSEC.2010.25,
author = {Zhang, Guoheng and Ye, Huilin and Lin, Yuqing},
title = {Quality Attributes Assessment for Feature-Based Product Configuration in Software Product Line},
year = {2010},
isbn = {9780769542669},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/APSEC.2010.25},
doi = {10.1109/APSEC.2010.25},
abstract = {Product configuration based on a feature model in software product lines is the process of selecting the desired features based on customers’ requirements. In most cases, application engineers focus on the functionalities of the target product during product configuration process whereas the quality attributes are handled until the final product is produced. However, it is costly to fix the problem if the quality attributes have not been considered in the product configuration stage. The key issue of assessing a quality attribute of a product configuration is to measure the impact on a quality attribute made by the set of functional variable features selected in a configuration. Current existing approaches have several limitations, such as no quantitative measurements provided or requiring existing valid products and heavy human effort for the assessment. To overcome theses limitations, we propose an Analytic Hierarchical Process (AHP) based approach to estimate the relative importance of each functional variable feature on a quality attribute. Based on the relative importance value of each functional variable feature on a quality attribute, the level of quality attributes of a product configuration in software product lines can be assessed. An illustrative example based on the Computer Aided Dispatch (CAD) software product line is presented to demonstrate how the proposed approach works.},
booktitle = {Proceedings of the 2010 Asia Pacific Software Engineering Conference},
pages = {137–146},
numpages = {10},
keywords = {Analytic Hierarchical Process (AHP), product configuration, quality attributes assessment},
series = {APSEC '10}
}

@inproceedings{10.1007/978-3-642-04211-9_17,
author = {Shen, Liwei and Peng, Xin and Zhao, Wenyun},
title = {Feature-Driven and Incremental Variability Generalization in Software Product Line},
year = {2009},
isbn = {9783642042102},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-04211-9_17},
doi = {10.1007/978-3-642-04211-9_17},
abstract = {In the lifecycle of a software product line (SPL), incremental generalization is usually required to extend the variability of existing core assets to support the new or changed application requirements. In addition, the generalization should conform to the evolved SPL requirements which are usually represented by a feature model. In this paper, we propose a feature-driven and incremental variability generalization method based on the aspect-oriented variability implementation techniques. It addresses a set of basic scenarios where program-level &lt;em&gt;JBoss-AOP&lt;/em&gt; based reference implementations respond to the feature-level variability generalization patterns. It also provides the corresponding guidance to compose these patterns in more complex cases. Based on the method, we present a case study and related discussions.},
booktitle = {Proceedings of the 11th International Conference on Software Reuse: Formal Foundations of Reuse and Domain Engineering},
pages = {170–180},
numpages = {11},
location = {Falls Church, Virginia},
series = {ICSR '09}
}

@inproceedings{10.1007/978-3-642-28714-5_13,
author = {Adam, Sebastian},
title = {Providing software product line knowledge to requirements engineers --- a template for elicitation instructions},
year = {2012},
isbn = {9783642287138},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-28714-5_13},
doi = {10.1007/978-3-642-28714-5_13},
abstract = {[Context &amp; Motivation] Developing new software systems based on a software product line (SPL) in so-called application engineering (AE) projects is still a time-consuming and expensive task. Especially when a large number of customer-specific requirements exists, there is still no systematic support for efficiently aligning these non-anticipated requirements with SPL characteristics early on. [Question/problem] In order to improve this process significantly, sound knowledge about an SPL must be available when guiding the requirements elicitation during AE. Thus, an appropriate reflection of SPL characteristics in process-supporting artifacts is indispensable for actually supporting a requirements engineer in this task. [Principal ideas/results] In this paper, a validated template for elicitation instructions that aims at providing a requirements engineer with knowledge about an underlying SPL in an appropriate manner is presented. This template consists of predefined text blocks and algorithms that explain how SPL-relevant product and process knowledge can be systematically reflected into capability-aware elicitation instructions. [Contribution] By using such elicitation instructions, requirements engineers are enabled to elicit requirements in an AE project more effectively.},
booktitle = {Proceedings of the 18th International Conference on Requirements Engineering: Foundation for Software Quality},
pages = {147–164},
numpages = {18},
location = {Essen, Germany},
series = {REFSQ'12}
}

@inproceedings{10.1109/HICSS.2016.717,
author = {Preuveneers, Davy and Heyman, Thomas and Berbers, Yolande and Joosen, Wouter},
title = {Feature-Based Variability Management for Scalable Enterprise Applications: Experiences with an E-Payment Case},
year = {2016},
isbn = {9780769556703},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/HICSS.2016.717},
doi = {10.1109/HICSS.2016.717},
abstract = {In today's world of electronic payments, which includes credit cards, gift cards, stored value accounts, and micro payments on mobile devices, successful payment services need to be sufficiently scalable and support diverging use cases to be successful. However, the interaction between horizontal scalability, feature variability and stringent performance and security concerns for these heterogeneous payment applications and stakeholders is not always clear, which creates tension (and sometimes interference) in the successful development of these services. In this work, we identify crucial non-functional requirements for payment services and present a simple framework to map these requirements to existing approaches to achieve both horizontal and vertical scalability. We report on experiences with applying a service line engineering (SLE) approach towards payment services that combines cloud computing and SPL to support feature customization in a multi tenant payment service. We conclude with practical experiences and several lessons learned after applying this SPL engineering methodology on our industrial e-payment use case.},
booktitle = {Proceedings of the 2016 49th Hawaii International Conference on System Sciences (HICSS)},
pages = {5793–5802},
numpages = {10},
series = {HICSS '16}
}

@inproceedings{10.1145/3461001.3471143,
author = {Damiani, Ferruccio and H\"{a}hnle, Reiner and Kamburjan, Eduard and Lienhardt, Michael and Paolini, Luca},
title = {Variability modules for Java-like languages},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471143},
doi = {10.1145/3461001.3471143},
abstract = {A Software Product Line (SPL) is a family of similar programs (called variants) generated from a common artifact base. A Multi SPL (MPL) is a set of interdependent SPLs (i.e., such that an SPL's variant can depend on variants from other SPLs). MPLs are challenging to model and implement efficiently, especially when different variants of the same SPL must coexist and interoperate. We address this challenge by introducing variability modules (VMs), a new language construct. A VM represents both a module and an SPL of standard (variability-free), possibly interdependent modules. Generating a variant of a VM triggers the generation of all variants required to fulfill its dependencies. Then, a set of interdependent VMs represents an MPL that can be compiled into a set of standard modules. We illustrate VMs by an example from an industrial modeling scenario, formalize them in a core calculus, provide an implementation for the Java-like modeling language ABS, and evaluate VMs by case studies.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {1–12},
numpages = {12},
keywords = {ABS language, delta-oriented programming, language design, modules, multi product line, variant generation},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.5555/2666064.2666073,
author = {Boffoli, Nicola and Caivano, Danilo and Castelluccia, Daniela and Visaggio, Giuseppe},
title = {Driving flexibility and consistency of business processes by means of product-line engineering and decision tables},
year = {2012},
isbn = {9781467317511},
publisher = {IEEE Press},
abstract = {Today's organizations are increasingly pushed to be distributed by space, time and capabilities and are involved to leverage synergies by integrating their business processes in order to produce new value-added products and services. Here the importance of integrating whole processes rather than simply integrate databases or software applications. Seeing the duality between products and processes, we propose to exploit flexibility provided by the product-line engineering approach for modeling business processes as a Business Process Line (BPL) in order to capture process variability, promote reuse and integration and provide the capacity to anticipate process changes. To support process evolution and consistency, we suggest the use of decision tables to elicit, track and manage all the emerging decision points during business process modeling, with the purpose of maintaining the relationships among business needs, environmental changes and process tasks. In a real case study we practiced the proposed methodology by leveraging the synergy of feature models, variability mechanisms and decision tables. The results prove that the BPL satisfies the requirements for business process flexibility.},
booktitle = {Proceedings of the Third International Workshop on Product LinE Approaches in Software Engineering},
pages = {33–36},
numpages = {4},
keywords = {business process line, business process modeling, decision table, feature model, variability mechanisms},
location = {Zurich, Switzerland},
series = {PLEASE '12}
}

@inproceedings{10.1145/3382025.3414725,
author = {Ferreira, Fischer and Viggiato, Markos and Souza, Maur\'{\i}cio and Figueiredo, Eduardo},
title = {Testing configurable software systems: the failure observation challenge},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414725},
doi = {10.1145/3382025.3414725},
abstract = {Configurable software systems can be adapted or configured according to a set of features to increase reuse and productivity. The testing process is essential because configurations that fail may potentially hurt user experience and degrade the reputation of a project. However, testing configurable systems is very challenging due to the number of configurations to run with each test, leading to a combinatorial explosion in the number of configurations and tests. Currently, several testing techniques and tools have been proposed to deal with this challenge, but their potential practical application remains mostly unexplored. To encourage the research area on testing configurable systems, researchers and practitioners should be able to try out their solutions in common datasets. In this paper, we propose a dataset with 22 configurable software systems and an extensive test suite. Moreover, we report failures found in these systems and source code metrics to allow evaluating candidate solutions. We hope to engage the community and stimulate new and existing approaches to the problem of testing configurable systems.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {28},
numpages = {6},
keywords = {software product line, testing configurable systems},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1109/APSEC.2008.45,
author = {Siegmund, Norbert and Rosenm\"{u}ller, Marko and Kuhlemann, Martin and K\"{a}stner, Christian and Saake, Gunter},
title = {Measuring Non-Functional Properties in Software Product Line for Product Derivation},
year = {2008},
isbn = {9780769534466},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/APSEC.2008.45},
doi = {10.1109/APSEC.2008.45},
abstract = {A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.},
booktitle = {Proceedings of the 2008 15th Asia-Pacific Software Engineering Conference},
pages = {187–194},
numpages = {8},
keywords = {Non-functional Properties, Product Derivation, Software Product Lines},
series = {APSEC '08}
}

@inproceedings{10.1145/3382025.3414964,
author = {Hoff, Adrian and Nieke, Michael and Seidl, Christoph and S\ae{}ther, Eirik Halvard and Motzfeldt, Ida Sandberg and Din, Crystal Chang and Yu, Ingrid Chieh and Schaefer, Ina},
title = {Consistency-preserving evolution planning on feature models},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414964},
doi = {10.1145/3382025.3414964},
abstract = {A software product line (SPL) enables large-scale reuse in a family of related software systems through configurable features. SPLs represent a long-term investment so that their ongoing evolution becomes paramount and requires careful planning. While existing approaches enable to create an evolution plan for an SPL on feature-model (FM) level, they assume the plan to be rigid and do not support retroactive changes. In this paper, we present a method that enables to create and retroactively adapt an FM evolution plan while preventing undesired impacts on its structural and logical consistency. This method is founded in structural operational semantics and linear temporal logic. We implement our method using rewriting logic, integrate it within an FM tool suite and perform an evaluation using a collection of existing FM evolution scenarios.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {8},
numpages = {12},
keywords = {feature model evolution, feature models, formal semantics, linear temporal logic, rewriting logic, software evolution, software product lines, structural operational semantics},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3382025.3414955,
author = {Ananieva, Sofia and Greiner, Sandra and K\"{u}hn, Thomas and Kr\"{u}ger, Jacob and Linsbauer, Lukas and Gr\"{u}ner, Sten and Kehrer, Timo and Klare, Heiko and Koziolek, Anne and L\"{o}nn, Henrik and Krieter, Sebastian and Seidl, Christoph and Ramesh, S. and Reussner, Ralf and Westfechtel, Bernhard},
title = {A conceptual model for unifying variability in space and time},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414955},
doi = {10.1145/3382025.3414955},
abstract = {Software engineering faces the challenge of developing and maintaining systems that are highly variable in space (concurrent variations of the system at a single point in time) and time (sequential variations of the system due to its evolution). Recent research aims to address this need by managing variability in space and time simultaneously. However, such research often relies on nonuniform terminologies and a varying understanding of concepts, as it originates from different communities: software product-line engineering and software configuration management. These issues complicate the communication and comprehension of the concepts involved, impeding the development of techniques to unify variability in space and time. To tackle this problem, we performed an iterative, expert-driven analysis of existing tools to derive the first conceptual model that integrates and unifies terminologies and concepts of both dimensions of variability. In this paper, we present the unification process of concepts for variability in space and time, and the resulting conceptual model itself. We show that the conceptual model achieves high coverage and that its concepts are of appropriate granularity with respect to the tools for managing variability in space, time, or both that we considered. The conceptual model provides a well-defined, uniform terminology that empowers researchers and developers to compare their work, clarifies communication, and prevents redundant developments.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {15},
numpages = {12},
keywords = {product lines, revision management, variability, version control},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/2430502.2430527,
author = {Schubanz, Mathias and Pleuss, Andreas and Pradhan, Ligaj and Botterweck, Goetz and Thurimella, Anil Kumar},
title = {Model-driven planning and monitoring of long-term software product line evolution},
year = {2013},
isbn = {9781450315418},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2430502.2430527},
doi = {10.1145/2430502.2430527},
abstract = {In order to increase the level of efficiency and automation, we propose a conceptual model and corresponding tool support to plan and manage the systematic evolution of software-intensive systems, in particular software product lines (SPL). We support planning on a high abstraction level using decision-making concepts like goals, options, criteria, and rationale. We extend earlier work by broadening the scope in two dimensions: 1) in time, supporting continuous planning over long periods of time and many releases, and 2) in space, supporting traces from high-level decisions down to the implementation. We present a metamodel which allows to represent these concepts, corresponding prototypical tool support, and a first example case using data extracted from an open-source project, Eclipse SWT.},
booktitle = {Proceedings of the 7th International Workshop on Variability Modelling of Software-Intensive Systems},
articleno = {18},
numpages = {5},
keywords = {software evolution, software maintenance, software product lines, software release planning},
location = {Pisa, Italy},
series = {VaMoS '13}
}

@article{10.1016/j.procs.2018.05.082,
author = {Hitesh and Kumari, A. Charan},
title = {Feature Selection Optimization in SPL using Genetic Algorithm},
year = {2018},
issue_date = {2018},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {132},
number = {C},
issn = {1877-0509},
url = {https://doi.org/10.1016/j.procs.2018.05.082},
doi = {10.1016/j.procs.2018.05.082},
journal = {Procedia Comput. Sci.},
month = jan,
pages = {1477–1486},
numpages = {10},
keywords = {Software product line, Genetic Algorithm, Feature Model, Software Product Line Engineering}
}

@inproceedings{10.1145/3307630.3342412,
author = {Ananieva, Sofia and Kehrer, Timo and Klare, Heiko and Koziolek, Anne and L\"{o}nn, Henrik and Ramesh, S. and Burger, Andreas and Taentzer, Gabriele and Westfechtel, Bernhard},
title = {Towards a Conceptual Model for Unifying Variability in Space and Time},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342412},
doi = {10.1145/3307630.3342412},
abstract = {Effectively managing variability in space and time is among the main challenges of developing and maintaining large-scale yet long-living software-intensive systems. Over the last decades, two large research fields, Software Configuration Management (SCM) and Software Product Line Engineering (SPLE), have focused on version management and the systematic handling of variability, respectively. However, neither research community has been successful in producing unified management techniques that are effective in practice, and both communities have developed largely independently of each other. As a step towards overcoming this unfortunate situation, in this paper, we report on ongoing work on conceiving a conceptual yet integrated model of SCM and SPLE concepts, originating from a recent Dagstuhl seminar on the unification of version and variant management. Our goal is to provide discussion grounds for a wider exploration of a unified methodology supporting software evolution in both space and time.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {44–48},
numpages = {5},
keywords = {product lines, revision management, variability, version control},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3106195.3106217,
author = {Kr\"{u}ger, Jacob and Nielebock, Sebastian and Krieter, Sebastian and Diedrich, Christian and Leich, Thomas and Saake, Gunter and Zug, Sebastian and Ortmeier, Frank},
title = {Beyond Software Product Lines: Variability Modeling in Cyber-Physical Systems},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106217},
doi = {10.1145/3106195.3106217},
abstract = {Smart IT has an increasing influence on the control of daily life. For instance, smart grids manage power supply, autonomous automobiles take part in traffic, and assistive robotics support humans in production cells. We denote such systems as Cyber-physical Systems (CPSs), where cyber addresses the controlling software, while physical describes the controlled hardware. One key aspect of CPSs is their capability to adapt to new situations autonomously or with minimal human intervention. To achieve this, CPSs reuse, reorganize and reconfigure their components during runtime. Some components may even serve in different CPSs and different situations simultaneously. The hardware of a CPS usually consists of a heterogeneous set of variable components. While each component can be designed as a software product line (SPL), which is a well established approach to describe software and hardware variability, it is not possible to describe CPSs' variability solely on a set of separate, non-interacting product lines. To properly manage variability, a CPS must specify dependencies and interactions of its separate components and cope with variable environments, changing requirements, and differing safety properties. In this paper, we i) propose a classification of variability aspects, ii) point out current challenges in variability modeling, and iii) sketch open research questions. Overall, we aim to initiate new research directions for variable CPSs based on existing product-line techniques.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {237–241},
numpages = {5},
keywords = {Cyber-physical system, Modeling, Software product line},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.5555/1885639.1885655,
author = {Chen, Lianping and Babar, Muhammad Ali},
title = {Variability management in software product lines: an investigation of contemporary industrial challenges},
year = {2010},
isbn = {3642155782},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {Variability management is critical for achieving the large scale reuse promised by the software product line paradigm. It has been studied for almost 20 years. We assert that it is important to explore how well the body of knowledge of variability management solves the challenges faced by industrial practitioners, and what are the remaining and (or) emerging challenges. To gain such understanding of the challenges of variability management faced by practitioners, we have conducted an empirical study using focus group as data collection method. The results of the study highlight several technical challenges that are often faced by practitioners in their daily practices. Different from previous studies, the results also reveal and shed light on several non-technical challenges that were almost neglected by existing research.},
booktitle = {Proceedings of the 14th International Conference on Software Product Lines: Going Beyond},
pages = {166–180},
numpages = {15},
location = {Jeju Island, South Korea},
series = {SPLC'10}
}

@inproceedings{10.1145/3307630.3342407,
author = {Carbonnel, Jessie and Huchard, Marianne and Nebut, Cl\'{e}mentine},
title = {Exploring the Variability of Interconnected Product Families with Relational Concept Analysis},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342407},
doi = {10.1145/3307630.3342407},
abstract = {Among the various directions that SPLE promotes, extractive adoption of complex product lines is especially valuable, provided that appropriate approaches are made available. Complex variability can be encoded in different ways, including the feature model (FM) formalism extended with multivalued attributes, UML-like cardinalities, and references connecting separate FMs. In this paper, we address the extraction of variability relationships depicting connections between systems from separate families. Because Formal Concept Analysis provides suitable knowledge structures to represent the variability of a given system family, we explore the relevance of Relational Concept Analysis, an FCA extension to take into account relationships between different families, to tackle this issue. We investigate a method to extract variability information from descriptions representing several inter-connected product families. It aims to be used to assist the design of inter-connected FMs, and to provide recommendations during product selection.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {199–206},
numpages = {8},
keywords = {complex software product line, relational concept analysis, reverse engineering, variability extraction},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3383219.3383229,
author = {Li, Yang and Schulze, Sandro and Xu, Jiahua},
title = {Feature Terms Prediction: A Feasible Way to Indicate the Notion of Features in Software Product Line},
year = {2020},
isbn = {9781450377317},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3383219.3383229},
doi = {10.1145/3383219.3383229},
abstract = {In Software Product Lines (SPL), feature extraction from software requirements specifications has been subject to intense research in order to assist domain analysis in a time-saving way. Although various approaches are proposed to extract features, there still exists a gap to achieve the complete view of features, that is, how to figure out the intention of a feature. Feature terms as the smallest units in a feature can be regarded as vital indicators for describing a feature. Automated feature term extraction can provide key information regarding the intention of a feature, which improves the efficiency of domain analysis. In this paper, we propose an approach to train prediction models by using machine learning techniques to identify feature terms. To this end, we extract candidate terms from requirement specifications in one domain and take six attributes of each term into account to create a labeled dataset. Subsequently, we apply seven commonly used machine algorithms to train prediction models on the labeled dataset. We then use these prediction models to predict feature terms from the requirements belonging to the other two different domains. Our results show that (1) feature terms can be predicted with high accuracy of ≈ 90% within a domain (2) prediction across domains leads to a decreased but still good accuracy (≈ 80%), and (3) machine learning algorithms perform differently.},
booktitle = {Proceedings of the 24th International Conference on Evaluation and Assessment in Software Engineering},
pages = {90–99},
numpages = {10},
keywords = {Feature Extraction, Feature Terms Identification, Requirement Documents, Software Product Lines},
location = {Trondheim, Norway},
series = {EASE '20}
}

@inproceedings{10.1145/2815782.2815799,
author = {Schaefer, Ina and Seidl, Christoph and Cleophas, Loek and Watson, Bruce W.},
title = {SPLicing TABASCO: Custom-Tailored Software Product Line Variants from Taxonomy-Based Toolkits},
year = {2015},
isbn = {9781450336833},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2815782.2815799},
doi = {10.1145/2815782.2815799},
abstract = {Taxonomy-Based Software Construction (TABASCO) applies extensive domain analyses to create conceptual hierarchies of algorithmic domains. Those are used as basis for the implementation of software toolkits. The monolithic structure of TABASCO-based toolkits restricts their adoption on resource-constrained or special-purpose devices. In this paper, we address this problem by applying Software Product Line (SPL) techniques to TABASCO-based toolkits: We use software taxonomies as input to creating a conceptual representation of variability as feature models of an SPL. We apply the variability realization mechanism delta modeling to transform realization artifacts, such as source code, to only contain elements for a particular selection of features. Our method is suitable for proactive, reactive and extractive SPL development so that it supports a seamless adoption and evolution of an SPL approach for TABASCO-based toolkits. We demonstrate the feasibility of the method with three case studies by proactively, reactively and extractively transforming TABASCO-based toolkits to SPLs, which allow derivation of variants with custom-tailored functionality.},
booktitle = {Proceedings of the 2015 Annual Research Conference on South African Institute of Computer Scientists and Information Technologists},
articleno = {34},
numpages = {10},
keywords = {Software Product Line (SPL) adoption, Taxonomy-Based Software Construction (TABASCO) toolkit},
location = {Stellenbosch, South Africa},
series = {SAICSIT '15}
}

@inproceedings{10.1145/3382026.3431247,
author = {Meixner, Kristof},
title = {Integrating Variability Modeling of Products, Processes, and Resources in Cyber-Physical Production Systems Engineering},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3431247},
doi = {10.1145/3382026.3431247},
abstract = {The Industry 4.0 initiative envisions the flexible and optimized production of customized products on Cyber-Physical Production Systems (CPPSs) that consist of subsystems coordinated to conduct complex production processes. Hence, accurate CPPS modeling requires integrating the modeling of variability for Product-Process-Resource (PPR) aspects. Yet, current variability modeling approaches treat structural and behavioral variability separately, leading to inaccurate CPPS production models that impede CPPS engineering and optimization. This paper proposes a PhD project for integrated variability modeling of PPR aspects to improve the accuracy of production models with variability for CPPS engineers and production optimizers. The research project follows the Design Science approach aiming for the iterative design and evaluation of (a) a framework to categorize currently incomplete and scattered models and methods for PPR variability modeling as a foundation for an integrated model; and (b) a modeling approach for more accurate integrated PPR variability modeling. The planned research will provide the Software Product Line (SPL) and CPPS engineering research communities with (a) novel models, methods, and insights on integrated PPR variability modeling, (b) open data from CPPS engineering use cases for common modeling, and (c) empirical data from field studies for shared analysis and evaluation.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {96–103},
numpages = {8},
keywords = {Cyber-Physical Production System, Product-Process-Resource, Variability Modelling},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@article{10.1007/s11334-011-0174-z,
author = {Polzer, Andreas and Merschen, Daniel and Botterweck, Goetz and Pleuss, Andreas and Thomas, Jacques and Hedenetz, Bernd and Kowalewski, Stefan},
title = {Managing complexity and variability of a model-based embedded software product line},
year = {2012},
issue_date = {March     2012},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {8},
number = {1},
issn = {1614-5046},
url = {https://doi.org/10.1007/s11334-011-0174-z},
doi = {10.1007/s11334-011-0174-z},
abstract = {This paper presents a framework for model-based product lines of embedded systems. We show how to integrate model-based product line techniques into a consistent framework that can deal with large product lines as they are common in industry. The framework demonstrates the strengths of model-based techniques like abstraction, support for customised representations, and a high degree of automation. In particular, we provide the following contributions: (1) to shift existing product lines towards a model-based approach, we support the (semi-) automated extraction of models from existing requirement, test, and implementation artefacts; (2) to cope with the complexity of artefacts and their interrelations in industrial product lines, we support the generation of context-specific views. These views support developers, e.g., in analysing complex dependencies between different artefacts; (3) finally, we support automated product derivation based on an integrated hardware abstraction layer. Most of the presented concepts have been inspired by challenges arising in the industrial application of product line techniques in the model-based engineering of embedded systems. We report on experiences gathered during the application of the techniques to a prototypical product line (on a rapid prototyping platform in the university lab) and to industrial sample cases (at the industry partner).},
journal = {Innov. Syst. Softw. Eng.},
month = mar,
pages = {35–49},
numpages = {15},
keywords = {Complexity, Model transformation, Software product lines, Traceability, Variability modelling}
}

@inproceedings{10.1145/3382025.3414948,
author = {Acher, Mathieu and Collet, Philippe and Benavides, David and Rabiser, Rick},
title = {Third International Workshop on Languages for Modelling Variability (MODEVAR@SPLC 2020)},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414948},
doi = {10.1145/3382025.3414948},
abstract = {Feature models were invented in 1990 and have been recognised as one of the main contributions to the Software Product Line community. Although there have been several attempts to establish a sort of standard variability modelling language, there is still no consensus on a simple feature modelling language. There can be many motivations to have one but among others, there is one that is very important: information sharing among researchers, tools or developers. Following the spirit of the first two editions, this workshop is an interactive event where all participants shall share knowledge, but also first realizations about how to build up a simple feature modelling language that all the community can agree on.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {36},
numpages = {1},
keywords = {feature models, variability modelling languages and tools},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3461001.3474452,
author = {He\ss{}, Tobias and Sundermann, Chico and Th\"{u}m, Thomas},
title = {On the scalability of building binary decision diagrams for current feature models},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3474452},
doi = {10.1145/3461001.3474452},
abstract = {Binary decision diagrams (BDD) have been proposed for numerous product-line analyses. These analyses typically exploit properties unique to decision diagrams, such as negation in constant time and space. Furthermore, the existence of a BDD representing the configuration space of a product line removes the need to employ SAT or #SAT solvers for their analysis. Recent work has shown that the performance of state-of-the-art BDD libraries is significantly lower than previously reported and hypothesized. In this work, we provide an assessment of the state-of-the-art of BDD scalability in this domain and explain why previous results on the scalability of BDDs do not apply to more recent product-line instances.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {131–135},
numpages = {5},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3233027.3233048,
author = {Hayashi, Kengo and Aoyama, Mikio},
title = {A multiple product line development method based on variability structure analysis},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233048},
doi = {10.1145/3233027.3233048},
abstract = {This article proposes a multiple product line development method based on variability structure analysis. In product line development, the problem area is divided into the domain engineering and application engineering for delivering diverse products. Now, the development of automotive software requires to meet both agility and extreme diversity, which is a big challenge. We developed a structural analysis method of variability for multiple product lines using an extended model of OVM (Orthogonal Variability Model). Together with the variability analysis method, we propose an agile application development method to refine development items according to variability dependency based on the analysis, and develop them incrementally. We applied the proposed method to the development of the multiple product lines of automotive software systems, and demonstrated to reduce the volatility of the test efforts and usage of the test environment, and higher velocity and better manageability of the value stream.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {160–169},
numpages = {10},
keywords = {agile development, automotive software, multiple product lines, software product line, variability analysis},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/1370175.1370197,
author = {Groher, Iris and Schwanninger, Christa and Voelter, Markus},
title = {An integrated aspect-oriented model-driven software product line tool suite},
year = {2008},
isbn = {9781605580791},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1370175.1370197},
doi = {10.1145/1370175.1370197},
abstract = {Software product line engineering is mostly about the systematic management of commonality and variability between product line members. The effectiveness of this approach thus very much depends on how well variability within the family of similar products is implemented and managed. Variability often has widespread impact, crosscutting not only multiple parts of individual artifacts but also multiple artifacts in multiple stages of the product line lifecycle. This demonstration presents an approach that facilitates variability implementation, management, and tracing by integrating aspect-oriented and model-driven software development. We demonstrate means for effectively dealing with variability on model, model transformation, and code generation level. The concepts are illustrated with a case study of a home automation system.},
booktitle = {Companion of the 30th International Conference on Software Engineering},
pages = {939–940},
numpages = {2},
keywords = {aspect-oriented software development, model-driven software development, software product lines},
location = {Leipzig, Germany},
series = {ICSE Companion '08}
}

@inproceedings{10.1109/SOSE.2013.15,
author = {Abu-Matar, Mohammad and Gomaa, Hassan},
title = {An Automated Framework for Variability Management of Service-Oriented Software Product Lines},
year = {2013},
isbn = {9780769549446},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SOSE.2013.15},
doi = {10.1109/SOSE.2013.15},
abstract = {Service Oriented Architecture (SOA) development practices typically lack a systematic framework for managing variability in service requirements and architectures. This paper addresses this gap by applying software product line (SPL) concepts to model SOA systems as service families. The approach is to model SOA variability with a multiple-view service model and a corresponding meta-model. We integrate SPL concepts of feature modeling and commonality/variability analysis with multiple service requirements and architectural views by using UML and the Service Oriented Architecture Modeling Language (SoaML). The paper describes an automated framework for service-oriented SPL engineering that allows modelers to design, deploy, and execute service-oriented SPLs.},
booktitle = {Proceedings of the 2013 IEEE Seventh International Symposium on Service-Oriented System Engineering},
pages = {260–267},
numpages = {8},
keywords = {Model-Driven Engineering, Service Families, Service Oriented Architecture, Software Frameworks, Software Product Lines, Variability Management},
series = {SOSE '13}
}

@inproceedings{10.1145/3382025.3414967,
author = {Lima, Jackson A. Prado and Mendon\c{c}a, Willian D. F. and Vergilio, Silvia R. and Assun\c{c}\~{a}o, Wesley K. G.},
title = {Learning-based prioritization of test cases in continuous integration of highly-configurable software},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414967},
doi = {10.1145/3382025.3414967},
abstract = {Continuous Integration (CI) is a practice widely adopted in the industry to allow frequent integration of code changes. During the CI process, many test cases are executed multiple times a day, subject to time constraints. In this scenario, a learning-based approach, named COLEMAN, has been successfully applied. COLEMAN allows earlier execution of the most promising test cases to reveal faults. This approach considers CI particularities such as time budget and volatility of test cases, related to the fact that test cases can be added/removed along the CI cycles. In the CI of Highly Configuration System (HCS), many product variants must be tested, each one with different configuration options, but having test cases that are common to or reused from other variants. In this context, we found, by analogy, another particularity, the volatility of variants, that is, some variants can be included/discontinued along CI cycles. Considering this context, this work introduces two strategies for the application of COLEMAN in the CI of HCS: the Variant Test Set Strategy (VTS) that relies on the test set specific for each variant, and the Whole Test Set Strategy (WST) that prioritizes the test set composed by the union of the test cases of all variants. Both strategies are evaluated in a real-world HCS, considering three test budgets. The results show that the proposed strategies are applicable regarding the time spent for prioritization. They perform similarly regarding early fault detection, but WTS better mitigates the problem of beginning without knowledge, and is more suitable when a new variant to be tested is added.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {31},
numpages = {11},
keywords = {continuous integration, family of products, software product line, test case prioritization},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3382025.3414968,
author = {Li, Yang and Schulze, Sandro and Scherrebeck, Helene Hvidegaard and Fogdal, Thomas Sorensen},
title = {Automated extraction of domain knowledge in practice: the case of feature extraction from requirements at danfoss},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414968},
doi = {10.1145/3382025.3414968},
abstract = {Software product line supports structured reuse of software artifacts in order to realize the maintenance and evolution of the typically large number of variants, which promotes the industrialization of software development, especially for software-intensive products. However, for a legacy system, it is non-trivial to gain information about commonalities and differences of the variants. Meanwhile, software requirements specifications as the initial artifacts can be used to achieve this information to generate a domain model. Unfortunately, manually analyzing these requirements is time-consuming and inefficient. To address this problem, we explored the usage of feature extraction techniques to automatically extract domain knowledge from requirements to assist domain engineers. In detail, we applied Doc2Vec and a clustering algorithm to process the requirements for achieving the initial feature tree. Moreover, we utilized key words/phrases extraction techniques to provide key information to domain engineers for further analyzing the extraction results. In particular, we developed a GUI to support the extraction process. The empirical evaluation indicates that most of the extracted features and terms are beneficial to improve the process of feature extraction.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {4},
numpages = {11},
keywords = {feature extraction, requirement documents, reverse engineering, software product lines},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@phdthesis{10.5555/1168664,
author = {Lee, Suet Chun},
advisor = {Rine, David C.},
title = {A software product line web user interface modeling language},
year = {2006},
isbn = {0542525259},
publisher = {George Mason University},
address = {USA},
abstract = {Software product line (SPL) is a software engineering paradigm for software development. This software development paradigm leverages the reuse of core assets, often including a specification or design model having variation points in various dimensions, such as functionality, presentation, layout, style, and interaction. Features in these different dimensions are termed "variant features" in the SPL. A software product within a SPL often has specific features in these dimensions that are not common to all other products within the SPL. Such a product derived from the core assets has specialized realizations of these variant features (variation points). Therefore, the SPL paradigm involves the modeling of such variant features. However, little work in SPL has investigated or addressed the modeling of variant features specific to user interfaces (UI). This lack of work is serious because a great deal of product development effort (Myers, 1989) is consumed in that development phase focusing upon customization of UIs. Unified Modeling Language (UML) is the de facto modeling language for object-oriented software systems. It is known that UML needs better support in modeling UIs. Thus, current research has developed UML, sometimes ad hoc, extensions to improve UML support in modeling UIs. Yet, there still is a problem of not having significant productivity enhancements by integrating SPL paradigm using a systematic UML extension for UI modeling. This dissertation reports on research of a new UML extension, namely Web User Interface Modeling Language (WUIML), to address this research problem. To assist the utilization of WUIML, this dissertation also reports on research of a software engineering process, called Web User Interface Modeling Process (WUIMP). WUIMP defines the 'who, what, when, where, why, and how' in making use of WUIML. WUIML defines elements for modeling variant features specific to UIs for Web-based SPLs. The model elements in WUIML extend from the metaclass of the UML2.0 metamodel. WUIML integrates the modeling of variant features specific to UIs to UML. For example, in a Web-based patient registration SPL, member products targeting British users may use a British date format in the user interface, while member products targeting United States users may use a United States date format in the user interface. Thus, the UI for the address format is a variant feature for this SPL. WUIML defines a model element, XOR, to represent such exclusive-or conditions in a SPL UI model. WUIML reduces SPL engineers' efforts in UI development. To validate the WUIML research outcome, case studies were conducted. The results of this empirical study indicate that modeling UIs for Web-based SPLs using WUIML is more effective and efficient than using standard UML approach.},
note = {AAI3204114}
}

@inproceedings{10.1007/978-3-642-41347-6_21,
author = {Rossel, Pedro O. and Herskovic, Valeria},
title = {Building a Domain Model for Mobile Collaborative Systems: Towards a Software Product Line},
year = {2013},
isbn = {9783642413469},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-41347-6_21},
doi = {10.1007/978-3-642-41347-6_21},
abstract = {Software Product Lines are a recent approach to the software reuse problem: they allow implementing a set of applications that share common features. The mass use and increased availability of mobile computing devices has allowed for people to use their devices to work while on the move, including emergency response workers. Several initiatives propose software reuse for collaborative systems, e.g. components, architectures, toolkits and frameworks. We propose building a software product line for mobile collaboration in the emergency management domain, as there is a need for different products depending on user types, fire company needs, and evolving requirements. This paper proposes a domain model as the first step towards building a software product line. The domain model summarizes findings in related work and several years of experience working in the emergency management domain. It was evaluated in interviews with firefighters, who said it was a useful summary of their needs in emergency management.},
booktitle = {Proceedings of the 19th International Conference on Collaboration and Technology - Volume 8224},
pages = {290–305},
numpages = {16},
keywords = {Domain Model, Emergency management, Software Product Line}
}

@inproceedings{10.5555/2022115.2022120,
author = {Alf\'{e}rez, Mauricio and Lopez-Herrejon, Roberto E. and Moreira, Ana and Amaral, Vasco and Egyed, Alexander},
title = {Supporting consistency checking between features and software product line use scenarios},
year = {2011},
isbn = {9783642213465},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {A key aspect for effective variability modeling of Software Product Lines (SPL) is to harmonize the need to achieve separation of concerns with the need to satisfy consistency of requirements and constraints. Techniques for variability modeling such as feature models used together with use scenarios help to achieve separation of stakeholders' concerns but ensuring their joint consistency is largely unsupported. Therefore, inconsistent assumptions about system's expected use scenarios and the way in which they vary according to the presence or absence of features reduce the models usefulness and possibly renders invalid SPL systems. In this paper we propose an approach to check consistency -- the verification of semantic relationships among the models -- between features and use scenarios that realize them. The novelty of this approach is that it is specially tailored for the SPL domain and considers complex composition situations where the customization of use scenarios for specific products depends on the presence or absence of sets of features. We illustrate our approach and supporting tools using variant constructs that specify how the inclusion of sets of variable features (that refer to uncommon requirements between products of a SPL) adapt use scenarios related to other features.},
booktitle = {Proceedings of the 12th International Conference on Top Productivity through Software Reuse},
pages = {20–35},
numpages = {16},
location = {Pohang, South Korea},
series = {ICSR'11}
}

@inproceedings{10.1145/3461001.3471144,
author = {Uta, Mathias and Felfernig, Alexander and Le, Viet-Man and Popescu, Andrei and Tran, Thi Ngoc Trang and Helic, Denis},
title = {Evaluating recommender systems in feature model configuration},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471144},
doi = {10.1145/3461001.3471144},
abstract = {Configurators can be evaluated in various ways such as efficiency and completeness of solution search, optimality of the proposed solutions, usability of configurator user interfaces, and configuration consistency. Due to the increasing size and complexity of feature models, the integration of recommendation algorithms with feature model configurators becomes relevant. In this paper, we show how the output of a recommender system can be evaluated within the scope of feature model configuration scenarios. Overall, we argue that the discussed ways of measuring recommendation quality help developers to gain a broader view on evaluation techniques in constraint-based recommendation domains.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {58–63},
numpages = {6},
keywords = {configuration, evaluation, feature models, recommender systems},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3307630.3342406,
author = {Batory, Don},
title = {Should Future Variability Modeling Languages Express Constraints in OCL?},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342406},
doi = {10.1145/3307630.3342406},
abstract = {Since the mid-2000s, Propositional Logic (PL) has been the de facto language to express constraints in Feature Models (FMs) of Software Product Line (SPLs). PL was adequate because product configurations were formed by binary decisions including or not including features in a product. Inspired by both prior research and practical systems (eg., SPLs that use KConfig), future FMs must go beyond PL and admit numerical (and maybe even text) variables and their constraints.The Object Constraint Language (OCL) is a general-purpose declarative constraint language for Model Driven Engineering (MDE), which admits virtually any kind of variable and constraint in metamodels. We should expect future FMs to be examples of MDE metamodels. This raises a basic question: Should OCL be used to express constraints of future variability modeling language(s)?In this talk, I outline the pros and cons for doing so.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {182},
numpages = {1},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3336294.3342358,
author = {M\"{u}ller, Richard and Eisenecker, Ulrich},
title = {A Graph-Based Feature Location Approach Using Set Theory},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342358},
doi = {10.1145/3336294.3342358},
abstract = {The ArgoUML SPL benchmark addresses feature location in Software Product Lines (SPLs), where single features as well as feature combinations and feature negations have to be identified. We present a solution for this challenge using a graph-based approach and set theory. The results are promising. Set theory allows to exactly define which parts of feature locations can be computed and which precision and which recall can be achieved. This has to be complemented by a reliable identification of feature-dependent class and method traces as well as refinements. The application of our solution to one scenario of the benchmark supports this claim.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {88–92},
numpages = {5},
keywords = {ArgoUML, Neo4j, benchmark, cypher, extractive software product line adoption, feature location, graph database, jQAssistant, reverse engineering, set theory, software product lines, static analysis},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3382026.3425768,
author = {Feichtinger, Kevin and Rabiser, Rick},
title = {Towards Transforming Variability Models: Usage Scenarios, Required Capabilities and Challenges},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3425768},
doi = {10.1145/3382026.3425768},
abstract = {A plethora of variability modeling approaches has been developed in the last 30 years, e.g., feature modeling, decision modeling, Orthogonal Variability Modeling (OVM), and UML-based variability modeling. While feature modeling approaches are probably the most common and well-known group of variability modeling approaches, even within that group multiple variants have been developed, i.e., there is not just one type of feature model. Many variability modeling approaches have been demonstrated as useful for a certain purpose, e.g., domain analysis or configuration of products derived from a software product line. Nevertheless, industry frequently develops their own custom solutions to manage variability. The (still growing) number of modeling approaches simply makes it difficult to find, understand, and eventually pick an approach for a specific (set of) systems or context. In this paper, we discuss usage scenarios, required capabilities and challenges for an approach for (semi-)automatically transforming variability models. Such an approach would support researchers and practitioners experimenting with and comparing different variability models and switching from one modeling approach to another. We present the key components of our envisioned approach and conclude with a research agenda.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {44–51},
numpages = {8},
keywords = {Software product lines, decision models, feature models, variability modeling},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/2934466.2962728,
author = {Santos, Alcemir Rodrigues and Machado, Ivan do Carmo and de Almeida, Eduardo Santana},
title = {RiPLE-HC: visual support for features scattering and interactions},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2962728},
doi = {10.1145/2934466.2962728},
abstract = {With the ever increasing popularity of JavaScript in different domains to build bigger and more complex software systems, variability management may be deemed as an affordable strategy. In this sense, Software Product Lines (SPL) engineering is one of the most successful paradigms to accomplish the necessary modularity and systematic reuse of code artifacts for that purpose. In previous work, we present tool support to hybrid composition of JavaScript-based product lines, called RiPLE-HC, which we now extend to incorporate a means to deal with feature interactions and feature annotation scattering in a more smooth way. The proposed tool support may provide practitioners with an easy-to-use approach to implement crosscutting features by increasing the awareness of the developers about the features implementation.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {320–323},
numpages = {4},
keywords = {eclipse plugin, feature scattering visualization, featureide, javascript, software product line engineering},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.5555/1158337.1158687,
author = {Lee, Jaejoon and Kang, Kyo C.},
title = {A Feature-Oriented Approach to Developing Dynamically Reconfigurable Products in Product Line Engineering},
year = {2006},
isbn = {0769525997},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {Dynamic product reconfiguration refers to making changes to a deployed product configuration while a system is running. Recently, there have been increasing demands for dynamic product reconfiguration in various application areas (e.g., ubiquitous computing, self-healing systems, etc.); however, most product line engineering methods in the literature have focused on the development of reusable core assets for statically configured products. In this paper, we propose a feature- oriented approach to developing dynamically reconfigurable core assets. This approach takes feature binding analysis results as a key design driver for identifying and managing variation points of dynamically reconfigurable products. We also provide a conceptual model for a reconfigurator, which monitors and manages product reconfiguration at run time. The method is illustrated with a home service robot product line example.},
booktitle = {Proceedings of the 10th International on Software Product Line Conference},
pages = {131–140},
numpages = {10},
series = {SPLC '06}
}

@inproceedings{10.1145/3336294.3342364,
author = {Benavides, David and Rabiser, Rick and Batory, Don and Acher, Mathieu},
title = {First International Workshop on Languages for Modelling Variability (MODEVAR 2019)},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342364},
doi = {10.1145/3336294.3342364},
abstract = {Feature models were invented in 1990 and have been recognised as one of the main contributions to the software product line community. Although there have been several attempts to establish a sort of standard variability modelling language, there is still no consensus. There can be many motivations to have one but there is one that is very important: information sharing among researchers, tools or developers. This first international workshop is an interactive event where all participants shall share knowledge about how to build up a simple variability modelling language that all the community can agree on.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {323},
numpages = {1},
keywords = {languages, software product lines, variability modelling},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3307630.3342385,
author = {Munoz, Daniel-Jesus and Pinto, M\'{o}nica and Fuentes, Lidia},
title = {HADAS: Analysing Quality Attributes of Software Configurations},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342385},
doi = {10.1145/3307630.3342385},
abstract = {Software Product Lines (SPLs) are highly configurable systems. Automatic analyses of SPLs rely on solvers to navigate complex dependencies among features and find legal solutions. Variability analysis tools are complex due to the diversity of products and domain-specific knowledge. On that, while there are experimental studies that analyse quality attributes, the knowledge is not easily accessible for developers, and its appliance is not trivial. Aiming to allow the industry to quality-explore SPL design spaces, we developed the HADAS assistant that: (1) models systems and collects quality attributes metrics in a cloud repository, and (2) reasons about it helping developers with quality attributes requirements.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {13–16},
numpages = {4},
keywords = {NFQA, attribute, model, numerical, software product line, variability},
location = {Paris, France},
series = {SPLC '19}
}

@article{10.1016/j.procs.2019.11.105,
author = {Komarudin, Oman and Adianto, Daya and Azurat, Ade},
title = {Modeling Requirements of Multiple Single Products to Feature Model},
year = {2019},
issue_date = {2019},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {161},
number = {C},
issn = {1877-0509},
url = {https://doi.org/10.1016/j.procs.2019.11.105},
doi = {10.1016/j.procs.2019.11.105},
journal = {Procedia Comput. Sci.},
month = jan,
pages = {107–114},
numpages = {8},
keywords = {software product line engineering, feature model, domain engineering}
}

@inproceedings{10.1145/3461001.3472732,
author = {Beek, Maurice H. ter and Mazzanti, Franco and Damiani, Ferruccio and Paolini, Luca and Scarso, Giordano and Lienhardt, Michael},
title = {Static analysis and family-based model checking with VMC},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3472732},
doi = {10.1145/3461001.3472732},
abstract = {VMC is a research tool for model checking variability-rich behavioural models specified as a modal transition system (MTS) with variability constraints (MTSu). In this tutorial, we introduce a tool chain built on VMC that allows to perform an efficient kind of family-based model checking in absence of deadlocks. It accepts as input either an MTSu or a featured transition system (FTS).},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {214},
numpages = {1},
keywords = {FTS, MTS, SPL, VMC, model checking, static analysis, variability},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1007/978-3-642-04211-9_14,
author = {Lee, Hyesun and Choi, Hyunsik and Kang, Kyo C. and Kim, Dohyung and Lee, Zino},
title = {Experience Report on Using a Domain Model-Based Extractive Approach to Software Product Line Asset Development},
year = {2009},
isbn = {9783642042102},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-642-04211-9_14},
doi = {10.1007/978-3-642-04211-9_14},
abstract = {When we attempted to introduce an extractive approach to a company, we were faced with a challenging project situation where legacy applications did not have many commonalities among their implementations as they were developed independently by different teams without sharing a common code base. Although there were not many structural similarities, we expected to find similarities if we view them from the domain model perspective as they were in the same domain and were developed with the object-oriented paradigm. Therefore, we decided to place the domain model at the center of extraction and reengineering, thus developing a domain model-based extractive method. The method has been successfully applied to introduce software product line to a set-top box manufacturing company.},
booktitle = {Proceedings of the 11th International Conference on Software Reuse: Formal Foundations of Reuse and Domain Engineering},
pages = {137–149},
numpages = {13},
keywords = {component extraction, domain model, feature model, product line engineering},
location = {Falls Church, Virginia},
series = {ICSR '09}
}

@inproceedings{10.1145/3382026.3425769,
author = {Nieke, Michael and Sampaio, Gabriela and Th\"{u}m, Thomas and Seidl, Christoph and Teixeira, Leopoldo and Schaefer, Ina},
title = {GuyDance: Guiding Configuration Updates for Product-Line Evolution},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3425769},
doi = {10.1145/3382026.3425769},
abstract = {A product line is an approach for systematically managing configuration options of customizable systems, usually by means of features. Products are generated by utilizing configurations consisting of selected features. Product-line evolution can lead to unintended changes to product behavior. We illustrate that updating configurations after product-line evolution requires decisions of both, domain engineers responsible for product-line evolution as well as application engineers responsible for configurations. The challenge is that domain and application engineers might not be able to talk to each other. We propose a formal foundation and a methodology that enables domain engineers to guide application engineers through configuration evolution by sharing knowledge on product-line evolution and by defining configuration update operations. As an effect, we enable knowledge transfer between those engineers without the need to talk to each other. We evaluate our method by providing formal proofs that show product behavior of configurations can be preserved for typical evolution scenarios.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {56–64},
numpages = {9},
keywords = {configuration, evolution, software product line},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1109/ASWEC.2009.27,
author = {Shen, Liwei and Peng, Xin and Zhao, Wenyun},
title = {A Comprehensive Feature-Oriented Traceability Model for Software Product Line Development},
year = {2009},
isbn = {9780769535999},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ASWEC.2009.27},
doi = {10.1109/ASWEC.2009.27},
abstract = {Feature-oriented traceability is essential for efficient Software Product Line (SPL) development, including product derivation and SPL evolution. Widely-used feature based method has been proved to be effective in domain analysis and modeling. However, it cannot support the traceability naturally due to the big gap between the problem space and the solution space. In this paper, we propose a comprehensive feature-oriented traceability model for SPL development, which provides mechanisms for various features and implementation types throughout the four levels of goal model, feature model, feature implementation model and program implementations. In it, the feature implementation model is introduced as the intermediate level between features and implementation artefacts. The feature interactions are captured in the finer role level, and they help to clarify the complex mapping between features and program implementations. The traceability meta-model for SPL development is introduced and an example on the library management domain is demonstrated.},
booktitle = {Proceedings of the 2009 Australian Software Engineering Conference},
pages = {210–219},
numpages = {10},
series = {ASWEC '09}
}

@inproceedings{10.1145/3336294.3336298,
author = {Cashman, Mikaela and Firestone, Justin and Cohen, Myra B. and Thianniwet, Thammasak and Niu, Wei},
title = {DNA as Features: Organic Software Product Lines},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336298},
doi = {10.1145/3336294.3336298},
abstract = {Software product line engineering is a best practice for managing reuse in families of software systems. In this work, we explore the use of product line engineering in the emerging programming domain of synthetic biology. In synthetic biology, living organisms are programmed to perform new functions or improve existing functions. These programs are designed and constructed using small building blocks made out of DNA. We conjecture that there are families of products that consist of common and variable DNA parts, and we can leverage product line engineering to help synthetic biologists build, evolve, and reuse these programs. As a first step towards this goal, we perform a domain engineering case study that leverages an open-source repository of more than 45,000 reusable DNA parts. We are able to identify features and their related artifacts, all of which can be composed to make different programs. We demonstrate that we can successfully build feature models representing families for two commonly engineered functions. We then analyze an existing synthetic biology case study and demonstrate how product line engineering can be beneficial in this domain.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {108–118},
numpages = {11},
keywords = {BioBricks, software product lines, synthetic biology},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3382026.3431252,
author = {Michelon, Gabriela Karoline},
title = {Evolving System Families in Space and Time},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3431252},
doi = {10.1145/3382026.3431252},
abstract = {Managing the evolution of system families in space and time, i.e., system variants and their revisions is still an open challenge. The software product line (SPL) approach can support the management of product variants in space by reusing a common set of features. However, feature changes over time are often necessary due to adaptations and/or bug fixes, leading to different product versions. Such changes are commonly tracked in version control systems (VCSs). However, VCSs only deal with the change history of source code, and, even though their branching mechanisms allow to develop features in isolation, VCS does not allow propagating changes across variants. Variation control systems have been developed to support more fine-grained management of variants and to allow tracking of changes at the level of files or features. However, these systems are also limited regarding the types and granularity of artifacts. Also, they are cognitively very demanding with increasing numbers of revisions and variants. Furthermore, propagating specific changes over variants of a system is still a complex task that also depends on the variability-aware change impacts. Based on these existing limitations, the goal of this doctoral work is to investigate and define a flexible and unified approach to allow an easy and scalable evolution of SPLs in space and time. The expected contributions will aid the management of SPL products and support engineers to reason about the potential impact of changes during SPL evolution. To evaluate the approach, we plan to conduct case studies with real-world SPLs.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {104–111},
numpages = {8},
keywords = {feature-oriented software development, software evolution, software product lines, version control systems},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3461002.3473071,
author = {Beek, Maurice H. ter and Mazzanti, Franco and Damiani, Ferruccio and Paolini, Luca and Scarso, Giordano and Valfr\`{e}, Michele and Lienhardt, Michael},
title = {Static analysis and family-based model checking of featured transition systems with VMC},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473071},
doi = {10.1145/3461002.3473071},
abstract = {A Featured Transition System (FTS) is a formalism for modeling variability in configurable system behavior. The behavior of all variants (products) is modeled in a single compact FTS by associating the possibility to perform an action and transition from one state to another with feature expressions that condition the execution of an action in specific variants. We present a front-end for the research tool VMC. The resulting toolchain allows a modeler to analyze an FTS for ambiguities (dead or false optional transitions and hidden deadlock states), transform an ambiguous FTS into an unambiguous one, and perform an efficient kind of family-based verification of an FTS without hidden deadlock states. We use benchmarks from the literature to demonstrate the novelties offered by the toolchain.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {24–27},
numpages = {4},
keywords = {FTS, MTS, SPL, VMC, formal verification, static analysis, variability},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/3382026.3425772,
author = {Ca\~{n}ete, Angel and Amor, Mercedes and Fuentes, Lidia},
title = {Supporting the evolution of applications deployed on edge-based infrastructures using multi-layer feature models},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3425772},
doi = {10.1145/3382026.3425772},
abstract = {The proliferation of cyber-physical systems has encouraged the emergence of new technologies and paradigms to improve the performance of IoT-based applications. Edge Computing proposes using the nearby devices in the frontier/Edge of the access network for deploying application tasks. However, the functionality of cyberphysical systems, which is usually distributed in several devices and computers, imposes specific requirements on the infrastructure to run properly. The evolution of an application to meet new user requirements and the high diversity of hardware and software technologies in the edge can complicate the deployment of evolved applications.The aim of our approach is to apply Multi Layer Feature Models, which capture the variability of applications and the infrastructure, to support the deployment in edge-based environments of cyber-physical systems applications. This separation can support the evolution of application and infrastructure. Considering that IoT/Edge/Cloud infrastructures are usually shared by many applications, the SPL deployment process has to assure that there will be enough resources for all of them, informing developers about the alternatives of deployment. Prior to its deployment and leaning on the infrastructure feature models, the developer can calculate what is the configuration of minimal set of devices supporting application requirements of the evolved application. In addition, the developer can find which is the application configuration that can be hosted in the current evolved infrastructure.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {79–87},
numpages = {9},
keywords = {Edge Computing, Internet of Things, Multi Layer Feature Models, Software Evolution, Software Product Line},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/1147249.1147257,
author = {Cohen, Myra B. and Dwyer, Matthew B. and Shi, Jiangfan},
title = {Coverage and adequacy in software product line testing},
year = {2006},
isbn = {1595934596},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1147249.1147257},
doi = {10.1145/1147249.1147257},
abstract = {Software product line modeling has received a great deal of attention for its potential in fostering reuse of software artifacts across development phases. Research on the testing phase, has focused on identifying the potential for reuse of test cases across product line instances. While this offers potential reductions in test development effort for a given product line instance, it does not focus on and leverage the fundamental abstraction that is inherent in software product lines - variability.In this paper, we illustrate how rich software product line modeling notations can be mapped onto an underlying relational model that captures variability in the feasible product line instances. This relational model serves as the semantic basis for defining a family of coverage criteria for testing of a product line. These criteria make it possible to accumulate test coverage information for the product line itself over the course of multiple product line instance development efforts. Cumulative coverage, in turn, enables targeted testing efforts for new product line instances. We describe how combinatorial interaction testing methods can be applied to define test configurations that achieve a desired level of coverage and identify challenges to scaling such methods to large, complex software product lines.},
booktitle = {Proceedings of the ISSTA 2006 Workshop on Role of Software Architecture for Testing and Analysis},
pages = {53–63},
numpages = {11},
location = {Portland, Maine},
series = {ROSATEA '06}
}

@inproceedings{10.1007/978-3-540-68073-4_13,
author = {Peng, Xin and Shen, Liwei and Zhao, Wenyun},
title = {Feature Implementation Modeling Based Product Derivation in Software Product Line},
year = {2008},
isbn = {9783540680628},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-540-68073-4_13},
doi = {10.1007/978-3-540-68073-4_13},
abstract = {Although there has been significant research spent on feature modeling and application-oriented customization and some effective methods have been proposed, product derivation in SPL (Software Product Line) development is still a time- and effort-consuming activity due to the complicated mapping between feature model and program implementation. In this paper, we propose a feature implementation modeling based method for product derivation. In the method, feature implementation model is introduced as the intermediate level between feature model and program implementation. The feature implementation model captures feature interactions (including cross-cutting interactions) in the finer role level, and help to clarify the complex mapping between feature and program implementation. So, feature-driven program-level customization and configuration can be enabled by the model and role instantiation. AOP (Aspect-Oriented Programming) is adopted as the implementation technology for product derivation on the program level. Then program-level composition can be implemented by aspect weaving to finally achieve the feature-driven product derivation.},
booktitle = {Proceedings of the 10th International Conference on Software Reuse: High Confidence Software Reuse in Large Systems},
pages = {142–153},
numpages = {12},
location = {Beijing, China},
series = {ICSR '08}
}

@inproceedings{10.1145/3106195.3106232,
author = {Galindo, Jos\'{e} A. and Fernandez, Pablo},
title = {Fostering a consistent SPL service ecosystem},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106232},
doi = {10.1145/3106195.3106232},
abstract = {Nowadays, Software Product Line (SPL) researchers and practitioners have a diversity of Automated Analysis of Feature Models (AAFM) tools at their disposal. However, only a few applications are compatible between them. This, increases time to market of new applications and hinders application usage by researchers and practitioners. In this tutorial, we present how we can successfully create an ecosystem of SPL tools that can be integrated to offer a better user experience. Concretely, we will show how to i) easily provide a common REST interface to an SPL analysis tool thus, fostering application integration; ii) automatically offer a web graphical editor to interact with the tool, thus, promoting its usage by end users; and, iii) enable the governance of the applications and create a customized portal for pricing plans. Also, we show other benefits such as the automatic creation of demo sites for review purposes.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {250},
numpages = {1},
keywords = {AAFM, SPL, ecosystem, rest, tool, web services govern},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3233027.3241372,
author = {Linsbauer, Lukas and Malakuti, Somayeh and Sadovykh, Andrey and Schw\"{a}gerl, Felix},
title = {1st intl. workshop on variability and evolution of software-intensive systems (varivolution)},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3241372},
doi = {10.1145/3233027.3241372},
abstract = {Modern software systems are subject to continuous change and often need to exist in many variants addressing different requirements. Yet, software versions resulting from evolution in time (aka revisions) and variants resulting from evolution in space are managed radically differently, but none of the traditional technologies have been successful in effectively supporting unified revision and variant management in practice.Recent research activities focused on the integrated management of evolution and variability. They stem most notably from the fields of software configuration management and software product line engineering, but also from, e.g., software modularity and software architecture.VariVolution (the 1st International Workshop on Variability and Evolution of Software-intensive Systems) aims at bringing together active researchers studying software evolution and variability from different angles as well as practitioners who encounter these phenomena in real-world applications and systems. In an interactive environment, the workshop offers a platform for exchanging new ideas and fostering future research collaborations and synergies.Workshop website: http://varivolution2018.softeam-rd.eu/},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {294},
numpages = {1},
keywords = {configuration management, evolution, variability, version control},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/1383559.1383571,
author = {Tawhid, Rasha and Petriu, Dorina C.},
title = {Towards automatic derivation of a product performance model from a UML software product line model},
year = {2008},
isbn = {9781595938732},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1383559.1383571},
doi = {10.1145/1383559.1383571},
abstract = {Software Product Line (SPL) engineering is a software development approach that takes advantage of the commonality and variability between products from a family, and supports the generation of specific products by reusing a set of core family assets. This paper proposes a UML model transformation approach for software product lines to derive a performance model for a specific product. The input to the proposed technique, the "source model", is a UML model of a SPL with performance annotations, which uses two separate profiles: a "product line" profile from literature for specifying the commonality and variability between products, and the MARTE profile recently standardized by OMG for performance annotations. The source model is generic and therefore its performance annotations must be parameterized. The proposed derivation of a performance model for a concrete product requires two steps: a) the transformation of a SPL model to a UML model with performance annotations for a given product, and b) the transformation of the outcome of the first step into a performance model. This paper focuses on the first step, whereas the second step will use the PUMA transformation approach of annotated UML models to performance models, developed in previous work. The output of the first step, named "target model", is a UML model with MARTE annotations, where the variability expressed in the SPL model has been analyzed and bound to a specific product, and the generic performance annotations have been bound to concrete values for the product. The proposed technique is illustrated with an e-commerce case study.},
booktitle = {Proceedings of the 7th International Workshop on Software and Performance},
pages = {91–102},
numpages = {12},
keywords = {marte, model transformation, software performance engineering, software product line, uml},
location = {Princeton, NJ, USA},
series = {WOSP '08}
}

@inproceedings{10.1145/3336294.3342373,
author = {Galindo, Jos\'{e} A. and Benavides, David and Trinidad, Pablo and Guti\'{e}rrez-Fern\'{a}ndez, Antonio-Manuel and Ruiz-Cort\'{e}s, Antonio},
title = {Automated Analysis of Feature Models: Quo Vadis?},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342373},
doi = {10.1145/3336294.3342373},
abstract = {Feature models have been used since the 90's to describe software product lines as a way of reusing common parts in a family of software systems. In 2010, a systematic literature review was published summarizing the advances and settling the basis of the area of Automated Analysis of Feature Models (AAFM). From then on, different studies have applied the AAFM in different domains.AAFM has been applied in different activities along the Software Product Line (SPL) process such as product configuration and derivation, reverse engineering or SPL testing. As the field evolves, there is a need to evaluate the trends in the area and discover where the AAFM is being applied. Systematic Literature Reviews (SLRs) and Systematic Mapping Study (SMS) are the main techniques used to crawl the knowledge in a scientific area and candidates to discover the aforementioned tendencies. While SLRs are suitable to summarize the state of a research area by providing mostly qualitative information, SMSs focus on providing quantitative information and a categorization of the corpus that enables the identification of trends and research opportunities.We present a SMS to identify the evolution and trends in the application of the AAFM since 2010. Concretely, we have performed a search on different databases of AAFM-related papers. We selected 423 primary sources (papers) that followed the defined inclusion and exclusion criteria. The primary sources were classified according to different variability facets that were found during the reading and key-wording phase. It is important to remark that before 2010, AAFM was not well defined and it was referenced using an amalgam of names and concepts. Therefore, we consider that in 2010 the concept of AAFM was coined and then used in different domains and scenarios. This paper studies how AAFM has been used since its definition.First, we found six different variability facets where the AAFM is being applied that define the tendencies: product configuration and derivation; testing and evolution; reverse engineering; multi-model variability-analysis; variability modelling and variability-intensive systems. We also confirmed that there is a lack of industrial evidence in most of the cases. Finally, we present where and when the papers have been published and who are the authors and institutions that are contributing to the field. We observed that the maturity is proven by the increment in the number of journals published along the years as well as the diversity of conferences and workshops where papers are published.We also observed that there are only a few industrial and real evidences of the application of AAFM techniques in most of the cases. We detect in detail where and when the papers have been published and who are the authors and institutions that are contributing to the field. We saw that the maturity is proven by the increment in the number of journals published along the years as well as the diversity of conferences and workshops where papers are presented. Finally, we devise some research opportunities and applications in the future as well as synergies with other research areas. We also suggest some synergies with other areas such as cloud or mobile computing among others that can motivate further research in the future.The reader can find the full text of this paper at https://doi.org/10.1007/s00607-018-0646-1},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {302},
numpages = {1},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3336294.3336317,
author = {Duszynski, Slawomir and Dhar, Saura Jyoti and Beichter, Tobias},
title = {Using Relation Graphs for Improved Understanding of Feature Models in Software Product Lines},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336317},
doi = {10.1145/3336294.3336317},
abstract = {Feature models are widely used for describing the variability of a software product line. A feature model contains a tree of features and a set of constraints over these features, which define valid feature combinations. In the industrial practice, large feature models containing hundreds of features and constraints are common. Furthermore, in a hierarchical product line a feature model can be related to other feature models through inter-model constraints. Due to the model size and complexity, understanding industrial feature models is a challenging task.In this paper, we describe the feature model understanding challenges reported by feature model developers at Robert Bosch GmbH. To support the developers in model understanding, we extend the idea of a feature implication graph to feature relation graph by abstracting groups of implications to feature relations. A transitively closed relation graph shows all modeled and implicit feature relations and spans all related feature models. The graph is also used to identify modeling problems, such as false optional or dead features, and to show the derivation of any implicit relation or problem from the modeled constraints. In a case study at Bosch, we evaluate the use of feature relation graph for model understanding. We propose further use cases of the graph, supporting model maintenance, evolution and configuration.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {309–319},
numpages = {11},
keywords = {feature model, implication graph, model understanding},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1109/MEMCOD.2007.371243,
author = {Oh, Youngseok and Lee, Dan Hyung and Kang, Sungwon and Lee, Ji Hyun},
title = {Extended Architecture Analysis Description Language for Software Product Line Approach in Embedded Systems},
year = {2007},
isbn = {1424410509},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/MEMCOD.2007.371243},
doi = {10.1109/MEMCOD.2007.371243},
abstract = {Describing architecture variabilities explicitly and precisely is important in the software product line approach for software development since it helps product derivation as well as modeling and managing the variabilities. The SAE AADL is an industry standard architecture analysis and design language for the automotive community, which originally was not intended to be used for software product line. In this paper, we propose EAADL a software product line architecture description language for the automotive domain that extends the SAE AADL. By incorporating orthogonal variability model into it, EAADL offers traceability with requirement engineering as well as the implementation process that is essential in software product line engineering.},
booktitle = {Proceedings of the 5th IEEE/ACM International Conference on Formal Methods and Models for Codesign},
pages = {87–88},
numpages = {2},
series = {MEMOCODE '07}
}

@inproceedings{10.1145/3382025.3414943,
author = {Th\"{u}m, Thomas},
title = {A BDD for Linux? the knowledge compilation challenge for variability},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414943},
doi = {10.1145/3382025.3414943},
abstract = {What is the number of valid configurations for Linux? How to generate uniform random samples for Linux? Can we create a binary decision diagram for Linux? It seems that the product-line community tries hard to answer such questions for Linux and other configurable systems. However, attempts are often not published due to the publication bias (i.e., unsuccessful attempts are not published). As a consequence, researchers keep trying by potentially spending redundant effort. The goal of this challenge is to guide research on these computationally complex problems and to foster the exchange between researchers and practitioners.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {16},
numpages = {6},
keywords = {artificial intelligence, binary decision diagrams, configurable system, decision models, feature models, knownledge compilation, product configuration, satisfiability solving, software configuration, software product line},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/2362536.2362555,
author = {El-Sharkawy, Sascha and Dederichs, Stephan and Schmid, Klaus},
title = {From feature models to decision models and back again an analysis based on formal transformations},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362555},
doi = {10.1145/2362536.2362555},
abstract = {In Software Product Line Engineering, variability modeling plays a crucial rule. Over the years, a couple of different modeling paradigms with a plethora of different approaches have been proposed. However, only little attention was spent to compare these concepts. In this paper, we compare the capabilities and expressiveness of basic feature modeling with basic decision modeling.In this paper, we also present a formalization of basic decision modeling and show that in combination with a powerful constraint language both approaches are equivalent, while in their very basic forms they are not equivalent. These results can be used to transfer existing research results between the two paradigms.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {126–135},
numpages = {10},
keywords = {decision modeling, feature diagrams, software product line engineering, variability modeling},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3307630.3342391,
author = {Beuche, Danilo},
title = {Industrial Variant Management with pure::variants},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342391},
doi = {10.1145/3307630.3342391},
abstract = {The paper describes a demonstration of pure::variants, a commercial tool for variant and variability management for product lines. The demonstration shows how flexible product line (PL) architectures can be built, tested and maintained by using the modeling and integration capabilities provided by pure::variants. With pure::variants being available for a long time, the demonstration (and the paper) combines both basics of pure::variants, known to parts of the audience, and new capabilities, introduced within the last year.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {37–39},
numpages = {3},
keywords = {feature modelling, software product lines, tools},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3307630.3342704,
author = {Ca\~{n}ete, Angel},
title = {Energy Efficient Assignment and Deployment of Tasks in Structurally Variable Infrastructures},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342704},
doi = {10.1145/3307630.3342704},
abstract = {The importance of cyber-physical systems is growing very fast, being part of the Internet of Things vision. These devices generate data that could collapse the network and can not be assumed by the cloud. New technologies like Mobile Cloud Computing and Mobile Edge Computing are taking importance as solution for this issue. The idea is offloading some tasks to devices situated closer to the user device, reducing network congestion and improving applications performance (e.g., in terms of latency and energy). However, the variability of the target devices' features and processing tasks' requirements is very diverse, being difficult to decide which device is more adequate to deploy and run such processing tasks. Once decided, task offloading used to be done manually. Then, it is necessary a method to automatize the task assignation and deployment process. In this thesis we propose to model the structural variability of the deployment infrastructure and applications using feature models, on the basis of a SPL engineering process. Combining SPL methodology with Edge Computing, the deployment of applications is addressed as the derivation of a product. The data of the valid configurations is used by a task assignment framework, which determines the optimal tasks offloading solution in different network devices, and the resources of them that should be assigned to each task/user. Our solution provides the most energy and latency efficient deployment solution, accomplishing the QoS requirements of the application in the process.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {222–229},
numpages = {8},
keywords = {energy efficiency, latency, mobile cloud computing, mobile edge computing, optimisation, software product line},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3336294.3342374,
author = {Th\"{u}m, Thomas and Kn\"{u}ppel, Alexander and Kr\"{u}ger, Stefan and Bolle, Stefanie and Schaefer, Ina},
title = {Feature-Oriented Contract Composition},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342374},
doi = {10.1145/3336294.3342374},
abstract = {A software product line comprises a set of products that share a common code base, but vary in specific characteristics called features. Ideally, features of a product line are developed in isolation and composed subsequently. Product lines are increasingly used for safety-critical software, for which quality assurance becomes indispensable. While the verification of product lines gained considerable interest in research over the last decade, the subject of how to specify product lines is only covered rudimentarily. One challenge is composition; similar to inheritance in object-oriented programming, features of a product line may refine other features along with their specifications.In our work [1], we present a comprehensive discussion and empirical evaluation of how to specify product lines implemented by means of feature-oriented programming. In feature-oriented programs, implementation artifacts, such as methods, are distributed over the set of feature modules and subsequently composed together when the respective features are selected. Similar to this idea, contracts could be modularized, too, and are subsequently composed together with their respective methods. In particular, we investigate how refinement and composition of such specifications can be established and derive a notion of feature-oriented contracts comprising preconditions, postconditions, and framing conditions of a method (i.e., following the design-by-contract paradigm).While both design by contract and feature-oriented programming have been hot research topics for more than two decades, their combination had rarely been explored. When features refine methods, an important question is whether refinement of their contracts is inevitable or not. However, unlike method composition where only the order of features is relevant, it seems that contract composition has to be handled differently according to certain scenarios. Consequently, a diverse set of composition techniques is required. In total, we identify and discuss six mechanisms to perform contract composition between original and refining contracts. Moreover, we identify and discuss desired properties for contract composition and evaluate which properties are established by which mechanism. As proof-of-concept and to enable larger evaluations, we developed tool support for feature-oriented contracts and their composition in FEATUREHOUSE and FEATUREIDE.We conducted an empirical evaluation, in which we specified 14 product lines by means of contracts. To evaluate product lines specified with feature-oriented contracts, we applied three strategies. First, we implemented five product lines and feature-oriented contracts from scratch. Second, we decomposed six existing, object-oriented programs, which were formally verified before, including their contracts into a product line. That is, we identified features of the program and separated them into feature modules. Third, we specified three existing product lines with feature-oriented contracts. Each of these creation strategies is a typical application scenario of employing feature-oriented contracts and may impose different requirements for contract-composition mechanisms.We gained six insights from our work. First, the majority of contracts defined for product lines are not contained in all products (i.e., family-wide specification is not sufficient). Second, product-line specifications can be given by specifying each feature module and usually even without derivative modules (i.e., feature-based specification is not sufficient). Third, most but not all method refinements establish behavioral subtyping, which means that the Liskov principle does not apply to feature specifications. Fourth, we identified that four of our six mechanisms were superior to all other mechanisms for certain contract refinements, and thus we conclude that these four mechanisms should be used in concert. Fifth, fine-granular contract refinements and alternative method introductions often cause specification clones. Finally, most contract refinements only refine the postcondition while the precondition and framing condition remain unchanged. In particular, only eleven out of sixty contract refinements modified the frame.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {25},
numpages = {1},
keywords = {deductive verification, design by contract, feature-oriented programming, formal methods, software product lines},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1109/IMSCCS.2007.44,
author = {Li, Yi-yuan and Yin, Jian-wei and Shi, Dong-cai and Li, Yin},
title = {Feature Configuration Modeling and Problem Solving for Software Product Line},
year = {2007},
isbn = {0769530397},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/IMSCCS.2007.44},
doi = {10.1109/IMSCCS.2007.44},
abstract = {Software product line is an effective way to implement software production for mass customization. How to organize and configure the feature set in the feature model of software product line to rapidly produce customized software product meeting individual demands is one of the key problems. Corresponding to the phases of feature selection in the process of software production, the feature configuration model is constructed to provide a uniform framework of constraint description for feature model and domain application requirement. The results of problem solving are the sets of feature meeting feature constraints and application requirements. The proposed method of configuration modeling and problem solving provide a theoretical foundation to rapidly produce software product on the base of configuration of reusable domain assets. Keywords: feature model, feature configuration, configuration rule, problem solving.},
booktitle = {Proceedings of the Second International Multi-Symposiums on Computer and Computational Sciences},
pages = {531–536},
numpages = {6},
series = {IMSCCS '07}
}

@inproceedings{10.1145/3336294.3342376,
author = {Lanna, Andre and Castro, Thiago and Alves, Vander and Rodrigues, Genaina and Schobbens, Pierre-Yves and Apel, Sven},
title = {Feature-Family-Based Reliability Analysis of Software Product Lines},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342376},
doi = {10.1145/3336294.3342376},
abstract = {Context: Verification techniques such as model checking are being applied to ensure that software systems achieve desired quality levels and fulfill their functional and non-functional specification. However, applying these techniques to software product lines is a twofold challenge, given the exponential blowup of the number of products and the state-explosion problem inherent to model checking. Current product-line verification techniques leverage symbolic model checking and variability information to optimize the analysis but still face limitations that make them costly or infeasible. In particular, state-of-the-art verification techniques for product-line reliability analysis are enumerative which hinders their applicability, given the latent blowup of the configuration space.Objective: Our objectives are the following: (a) we present a method to efficiently compute the reliability of all configurations of a compositional or annotation-based software product line from its UML behavioral models, (b) we provide a tool that implements the proposed method, and (c) we report on an empirical study comparing the performance of different reliability analysis strategies for software product lines.Method: We present a novel feature-family-based analysis strategy to compute the reliability of all products of a (compositional or annotation-based) software product line. The strategy employs a divide-and-conquer approach over UML behavioral models endowed with probabilistic and variability information. The feature-based step of our strategy divides the behavioral models into smaller feature-dependent fragments that can be analyzed more efficiently. Such analysis consists of creating a probabilistic model for each behavioral fragment and analyzing such model using a parametric model checker that returns an expression denoting its reliability. Parameters in such expression represent the reliabilities of fragments on which it depends at runtime. The family-based step performs the reliability computation for all configurations at once (conquer) by evaluating reliability expressions in terms of a suitable variational data structure. This step solves the expression computed for each behavioral fragment taking into account (a) the fragment's variability information and (b) the reliability values already computed for the fragments on which it depends. The result is an Algebraic Decision Diagram (ADD) whose terminals different than zero represent the reliability value of valid (partial) configurations for the fragment. Therefore, the ADD computed for the last evaluated fragment contains the reliability values for all valid configurations of the software product line.Results: We performed an experiment to compare our feature-family-based and other four state-of-the-art evaluation strategies (product-based, family-based, feature-product-based and family-product-based). The subjects were variations of six publicly available product lines, whose configuration spaces were progressively increased. The empirical results show that our feature-family-based strategy outperforms, in terms of time and space, the other four state-of-the-art strategies. In addition, it is the only one that could be scaled to a 220-fold increase in the size of the configuration space.Conclusion: Our feature-family-based strategy leverages both feature-based and family-based strategies by taming the size of the models to be analyzed (due to the decomposition of behavioral models into fragments) and by avoiding the products enumeration inherent to some state-of-the-art analysis methods by using ADDs to represent both variability and reliability values.Journal paper: This paper was published at the Information and Software Technology Journal. It is available at https://doi.org/10.1016/j.infsof.2017.10.001.Supplementary material: Additional material to the IST submission is available at https://splmc.github.io/scalabilityAnalysis/. This material comprises experiments data, the tool implementing the feature-family-based reliability analysis strategy and the environment for experiment replication.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {64},
numpages = {1},
keywords = {parametric verification, software product lines, software reliability analysis},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3307630.3342416,
author = {Rodriguez, Germania and P\'{e}rez, Jennifer and Benavides, David},
title = {Accessibility Variability Model: The UTPL MOOC Case Study},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342416},
doi = {10.1145/3307630.3342416},
abstract = {Several approaches to define Variability Models (VM) of non-functional requirements or quality attributes have been proposed. However, these approaches have focused on specific quality attributes rather than more general non-functional aspects established by standards such as ISO/IEC 25010 for software evaluation and quality. Thus, developing specific software products by selecting features and at the same time measuring the level of compliance with a standard/guideline is a challenge. In this work, we present the definition of an accessibility VM based on the web content accessibility guides (WCAG) 2.1 W3C recommendation, to obtain a quantitative measure to improve or construct specific SPL products that require to be accessibility-aware. This paper is specially focused on illustrating the experience of measuring the accessibility in a software product line (SPL) in order to check if it is viable measuring products and recommending improvements in terms of features before addressing the construction of accessibility-aware products. The adoption of the VM accessibility has been putted into practice through a pilot case study, the MOOC (Massive Open Online Course) initiative of the Universidad T\'{e}cnica Particular de Loja. The conduction of this pilot case study has allowed us to illustrate how it is possible to model and measure the accessibility in SPL using accessibility VM, as well as to recommend accessibility configuration improvements for the construction of new or updated MOOC platforms.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {114–121},
numpages = {8},
keywords = {reusability, software and its engineering, software creation and management, software development techniques, software product lines},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1007/11554844_14,
author = {B\"{o}ckle, G\"{u}nter},
title = {Innovation management for product line engineering organizations},
year = {2005},
isbn = {3540289364},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/11554844_14},
doi = {10.1007/11554844_14},
abstract = {Active innovation management is performed by companies to create an environment that fosters innovation. In a product line environment, platform and predefined variability restrict innovation because the development artifacts in the platform and the variation are prescribed. An analysis of innovation projects in literature shows that moderate innovations like introducing a new member of a product line yield only a small return on investment. This paper introduces a series of measures that can help to prevent a lock-in of a product line organization with respect to innovation. We take a look at various aspects of innovation – personnel, customer and market, technology and engineering, organization and process. Organizations may pick the best-suited measures for their current situation.},
booktitle = {Proceedings of the 9th International Conference on Software Product Lines},
pages = {124–134},
numpages = {11},
location = {Rennes, France},
series = {SPLC'05}
}

@inproceedings{10.1145/3236405.3237201,
author = {Nieke, Michael and Seidl, Christoph and Th\"{u}m, Thomas},
title = {Back to the future: avoiding paradoxes in feature-model evolution},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3237201},
doi = {10.1145/3236405.3237201},
abstract = {A Software Product Line (SPL) captures families of software products and its functionality is captured as features in a feature model. Similar to other software systems, SPLs and their feature models are subject to evolution. Temporal Feature Models (TFMs) are an extension to feature models that allow for engineers to model past feature-model evolution and plan future evolution. When planning future evolution of feature models, multiple evolution steps may be planned upfront but changed requirements may lead to retroactively introducing evolution steps into the planned evolution or changing already planned steps. As a consequence, inconsistencies, which we denote as evolution paradoxes, may arise leading to invalidity of already modeled future evolution steps. In this paper, we present first steps towards allowing to introduce intermediate evolution steps into planned evolution while preserving consistency of all future evolution steps. To this end, we outline a method to define and check model evolution consistency rules. Using this method, engineers are allowed to introduce intermediate feature-model evolution steps whenever these changes preserve the evolution consistency rules.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {48–51},
numpages = {4},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1007/11554844_13,
author = {Lamine, Sana Ben Abdallah Ben and Jilani, Lamia Labed and Ghezala, Henda Hajjami Ben},
title = {Cost estimation for product line engineering using COTS components},
year = {2005},
isbn = {3540289364},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/11554844_13},
doi = {10.1007/11554844_13},
abstract = {Economic models for reuse are very important to organizations aiming to develop software with large scale reuse approaches. In fact, the initial investment is so important that it can discourage managers to commit to those approaches. Thus, economic models can help them to assess the worthiness of such an investment.Product Line Engineering (PLE) seems to be an attractive reuse approach in matter of product quality and time-to-market. Using Commercial Off The Shelf (COTS) in a PLE approach may have a positive impact.This paper reports on the need for an economic model to quantify the predicted benefits of the PLE software development with the use of COTS components. We introduce a Model for Software Cost Estimation in a Product Line Engineering approach that we denote SoCoEMo-PLE 2. This latter includes the usage of COTS components. The potential benefits of the model are described.},
booktitle = {Proceedings of the 9th International Conference on Software Product Lines},
pages = {113–123},
numpages = {11},
location = {Rennes, France},
series = {SPLC'05}
}

@inproceedings{10.1145/2499777.2500717,
author = {Lee, Jaejoon},
title = {Dynamic feature deployment and composition for dynamic software product lines},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500717},
doi = {10.1145/2499777.2500717},
abstract = {We aim to tackle problems with feature interoperability in dynamic software product lines: a feature allows collaborations with other features not conceived when it is deployed. In this position paper, we propose a Dynamic Feature Deployment (DFD) idea, which is a model-driven approach to support seamless integration of new features and changes of product configuration at runtime. The approach is based on a feature-modelling technique that directly deals with flexibility of reusable software assets in software product line engineering. We also propose a Hybrid between Passive/Active Behaviours (Hy-PAB) architecture model to support two extreme sets of behaviours for DFD: an active coordinating behaviour that controls the interactions with other features, and a passive subordinating behaviour that allows other features to control their interactions with other features.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {114–116},
numpages = {3},
keywords = {dynamic software product line, feature interoperability, feature modelling, smart home systems, software architecture},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/2866614.2866621,
author = {Capilla, Rafael and Bosch, Jan},
title = {Dynamic Variability Management Supporting Operational Modes of a Power Plant Product Line},
year = {2016},
isbn = {9781450340199},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2866614.2866621},
doi = {10.1145/2866614.2866621},
abstract = {Runtime variability is becoming an attractive technique to support those runtime scenarios for systems that demand some kind of autonomous reconfiguration or adaptive behavior. Nowadays, the challenge of many critical systems that need to handle different operational modes, often in an unattended mode, require specific solutions for which runtime variability mechanisms become relevant. This research describes the challenges of runtime variability to support multiple binding modes for handling the diversity of different operational modes and runtime reconfiguration needs. We validate our approach in a power plant control product line at Toshiba which advances previous work making the transition between the power plant operational modes more automatic and dynamic.},
booktitle = {Proceedings of the 10th International Workshop on Variability Modelling of Software-Intensive Systems},
pages = {49–56},
numpages = {8},
keywords = {Runtime variability, dynamic software product lines, multiple binding times, runtime reconfiguration},
location = {Salvador, Brazil},
series = {VaMoS '16}
}

@inproceedings{10.1145/2934466.2934486,
author = {Santos, Alcemir Rodrigues and do Carmo Machado, Ivan and de Almeida, Eduardo Santana},
title = {RiPLE-HC: javascript systems meets spl composition},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934486},
doi = {10.1145/2934466.2934486},
abstract = {Context. Software Product Lines (SPL) engineering is increasingly being applied to handle variability in industrial software systems. Problem. The research community has pointed out a series of benefits which modularity brings to software composition, a key aspect in SPL engineering. However, in practice, the reuse in Javascript-based systems relies on the use of package managers (e.g., npm, jam, bower, requireJS), but these approaches do not allow the management of project features. Method. This paper presents the RiPLE-HC, a strategy aimed at blending compositional and annotative approaches to implement variability in Javascript-based systems. Results. We applied the approach in an industrial environment and conducted an academic case study with six open-source systems to evaluate its robustness and scalability. Additionally, we carried a controlled experiment to analyze the impact of the RiPLE-HC code organization on the feature location maintenance tasks. Conclusion. The empirical evaluations yielded evidence of reduced effort in feature location, and positive benefits when introducing systematic reuse aspects in Javascript-based systems.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {154–163},
numpages = {10},
keywords = {eclipse plugin, feature composition, featureIDE, software product line engineering, web systems domain},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3382025.3414961,
author = {Favalli, Luca and K\"{u}hn, Thomas and Cazzola, Walter},
title = {Neverlang and FeatureIDE just married: integrated language product line development environment},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414961},
doi = {10.1145/3382025.3414961},
abstract = {Language development is inherently complex. With the support of a suitable language development environment most computer scientists could develop their own domain-specific language (DSL) with relative ease. Yet, when the DSL is the result of a configuration over a language product line (LPL)---a special software product line (SPL) of compilers/interpreters and corresponding IDE services---they fail to provide adequate support. An environment for LPL engineering should facilitate the underlying process involving three distinct roles: a language engineer developing the LPL, a language deployer configuring a language product, and a language user using the language product. Neither IDEs nor SPLE environments can cater all three roles and fully support the LPL engineering process with distributed, incremental development, configuration, and deployment of language variants. In this paper, we present an LPL engineering process for the distributed, incremental development of LPLs and an integrated language product line development environment supporting this process, catering the three roles, and ensuring the consistency among all artifacts of the LPL: language components implementing a language feature, the feature model, language configurations and the resulting language products. To create such an environment, we married the Neverlang language workbench and AiDE its LPL engineering environment with the FeatureIDE SPL engineering environment. While Neverlang supports the development of LPLs and deployment of language products, AiDE generates the feature model for the LPL under development, whereas FeatureIDE handles the feature configuration. We illustrate the applicability of the LPL engineering process and the suitability of our development environment for the three roles by showcasing its application for teaching programming with a growable language. In there, an LPL for Javascript was developed/refactored, 15 increasingly complex language products were configured/updated and finally deployed.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {33},
numpages = {11},
keywords = {domain specific languages, language product lines, neverlang},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3461002.3473949,
author = {Romero, David and Galindo, Jos\'{e} \'{A}. and Horcas, Jose-Miguel and Benavides, David},
title = {A first prototype of a new repository for feature model exchange and knowledge sharing},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473949},
doi = {10.1145/3461002.3473949},
abstract = {Feature models are the "de facto" standard for variability modelling and are used in both academia and industry. The MODEVAR initiative tries to establish a common textual feature modelling language that can be used by different communities and can allow information sharing. Feature model related researches use different models for different purposes such as analysis, sampling, testing, debugging, teaching, etc. Those models are shared in private repositories and there is a risk that all that knowledge is spread across different platforms which hinder collaboration and knowledge reuse. In this paper, we propose a first working version of a new feature model repository that allows to centralise the knowledge generated in the community together with advanced capabilities such as DOI generation, an API, analysis reports, among others. Our solution is a front end interface that uses the popular open science repository Zenodo as an end point to materialise the storage of all the information. Zenodo is enhanced with characteristics that facilitate the management of the models. The idea of our repository is to provide existing but also new features that are not present in other repositories (e.g., SPLOT). We propose to populate our repository with all the existing models of many sources including SPLOT.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {80–85},
numpages = {6},
keywords = {characteristics, feature model repository, requirements, variability},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/3236405.3236406,
author = {Javed, Muhammad Atif and Gallina, Barbara},
title = {Safety-oriented process line engineering via seamless integration between EPF composer and BVR tool},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3236406},
doi = {10.1145/3236405.3236406},
abstract = {The integration between process engineering and variability management is required for tailoring of safety-oriented processes with variabilities to individual projects in a similar manner to the product lines. Previous studies have not adequately established the Safety-oriented Process Lines (SoPLs). This paper focuses on the seamless integration between Eclipse Process Framework (EPF) Composer and Base Variability Resolution (BVR) Tool. The former supports the major parts of the OMG's Software &amp; Systems Process Engineering Metamodel (SPEM) Version 2.0, while the latter is a simplification and enhancement of the OMG's revised submission of Common Variability Language (CVL). The proposed integration is implemented as Eclipse plugin. It provides support for importing backend folders and files within the method library of EPF Composer, resolving problems with the files for variability management with the BVR Tool, and exporting back the resolved process models to the EPF Composer. The applicability of the implemented plugin is demonstrated by engineering an ECSS-E-ST-40C compliant SoPL for the space projects and applications.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {23–28},
numpages = {6},
keywords = {BVR tool and process line implementation, EPF composer, process engineering, seamless integration, variability management},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3336294.3342365,
author = {Acher, Mathieu and Ziadi, Tewfik and Lopez-Herrejon, Roberto E. and Martinez, Jabier},
title = {Seventh International Workshop on Reverse Variability Engineering (REVE 2019)},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342365},
doi = {10.1145/3336294.3342365},
abstract = {Software Product Line (SPL) migration remains a challenging endeavour. From organizational issues to purely technical challenges, there is a wide range of barriers that complicates SPL adoption. This workshop aims to foster research about making the most of the two main inputs for SPL migration: 1) domain knowledge and 2) legacy assets. Domain knowledge, usually implicit and spread across an organization, is key to define the SPL scope and to validate the variability model and its semantics. At the technical level, domain expertise is also needed to create or extract the reusable software components. Legacy assets can be, for instance, similar product variants (e.g., requirements, models, source code etc.) that were implemented using ad-hoc reuse techniques such as clone-and-own. More generally, the workshop REverse Variability Engineering (REVE) attracts researchers and practitioners contributing to processes, techniques, tools, or empirical studies related to the automatic, semi-automatic or manual extraction or refinement of SPL assets.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {324},
numpages = {1},
keywords = {datasets, gaze detection, neural networks, text tagging},
location = {Paris, France},
series = {SPLC '19}
}

@article{10.1016/j.scico.2003.04.005,
author = {Beuche, Danilo and Papajewski, Holger and Schr\"{o}der-Preikschat, Wolfgang},
title = {Variability management with feature models},
year = {2004},
issue_date = {December 2004},
publisher = {Elsevier North-Holland, Inc.},
address = {USA},
volume = {53},
number = {3},
issn = {0167-6423},
url = {https://doi.org/10.1016/j.scico.2003.04.005},
doi = {10.1016/j.scico.2003.04.005},
abstract = {Variability management in software systems requires adequate tool support to cope with the ever increasing complexity of software systems. The paper presents a tool chain which can be used for variability management within almost all software development processes. The tools presented use extended feature models as the main model for describing variability and commonality, and provide user changeable customization of the software artifacts to be managed.},
journal = {Sci. Comput. Program.},
month = dec,
pages = {333–352},
numpages = {20},
keywords = {feature modeling, tool support, variant management}
}

@inproceedings{10.1145/3106195.3106215,
author = {Bashari, Mahdi and Bagheri, Ebrahim and Du, Weichang},
title = {Self-healing in Service Mashups Through Feature Adaptation},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106215},
doi = {10.1145/3106195.3106215},
abstract = {The composition of the functionality of multiple services into a single unique service mashup has received wide interest in the recent years. Given the distributed nature of these mashups where the constituent services can be located on different servers, it is possible that a change in the functionality or availability of a constituent service result in the failure of the service mashup. In this paper, we propose a novel method based on the Software Product Line Engineering (SPLE) paradigm which is able to find an alternate valid service mashup which has maximum possible number of original service mashup features in order to mitigate a service failure when complete recovery is not possible. This method also has an advantage that it can recover or mitigate the failure automatically without requiring the user to specify any adaptation rule or strategy. We show the practicality of our proposed approach through extensive experiments.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {94–103},
numpages = {10},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3109729.3109749,
author = {Horcas, Jose-Miguel and Pinto, M\'{o}nica and Fuentes, Lidia},
title = {Extending the Common Variability Language (CVL) Engine: A practical tool},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109749},
doi = {10.1145/3109729.3109749},
abstract = {The Common Variability Language (CVL) has become a reference in the specification and resolution of variability in the last few years. Despite the multiple advantages of CVL (orthogonal variability, architecture variability resolution, MOF-compliant, standard proposed,...), several approaches require extending and/or modifying the CVL approach in different ways in order to fulfill the industrial needs for variability modeling in Software Product Lines. However, the community lacks a tool that would enable proposed extensions and the integration of novel approaches to be put into practice. Existing tools that provide support for CVL are incomplete or are mainly focused on the variability model's editor, instead of executing the resolution of the variability over the base models. Moreover, there is no API that allows direct interaction with the CVL engine to extend or use it in an independent application. In this paper, we identify the extension points of the CVL approach with the goal of making the CVL engine more flexible, and to help software architects in the task of resolving the variability of their products. The practical tool presented here is a working implementation of the CVL engine, that can be extended through a proposed API.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {32–37},
numpages = {6},
keywords = {CVL, Software Product Line, Variability},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3461001.3471154,
author = {Bergel, Alexandre and Ghzouli, Razan and Berger, Thorsten and Chaudron, Michel R. V.},
title = {FeatureVista: interactive feature visualization},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471154},
doi = {10.1145/3461001.3471154},
abstract = {Comprehending and characterizing the spread and interaction of features in a software system is know to be difficult and error-prone. This paper presents FeatureVista, a lightweight tool providing interactive, glyph-based, and iconic visualization concepts designed to visually characterize the feature locations in software assets (source code). FeatureVista supports navigating between software components and features in an equal fashion. Our pilot study indicates that FeatureVista is intuitive and supports comprehending features. It helps to precisely characterize relations among features in large software systems and to contrast explicit software component definitions (e.g., package, class, method) with annotated feature portions---which so far was a largely manual and error-prone activity, albeit essential to get an adequate understanding of a software system. We suggest research directions for true, feature-oriented interfaces that can be used to manage software assets.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {196–201},
numpages = {6},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3461002.3473069,
author = {Feichtinger, Kevin},
title = {A flexible approach for transforming variability models},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473069},
doi = {10.1145/3461002.3473069},
abstract = {In software product lines, engineers use variability models to explicitly represent commonalities and variability. A plethora of variability modeling approaches have been proposed in the last 30 years, and there is no standard variability modeling approach the community agrees on. Well-known approaches such as feature modeling or decision modeling exist in many different variants, most of which have been shown to be useful for at least one specific use case. Due to this variety of approaches researchers and practitioners alike struggle to find, understand, and eventually pick the right approach for a specific context or (set of) system(s). Practitioners in industry often develop custom solutions to manage the variability of various artifacts, like requirements documents or design spreadsheets. In this paper, we report on our ongoing research towards developing a framework for (semi-)automatically transforming variability models. Our approach supports researchers and practitioners experimenting with and comparing different variability modeling approaches and switching from one modeling approach to another. We present the research questions guiding our research and discuss the current status of our work as well as future work.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {18–23},
numpages = {6},
keywords = {decision models, feature models, orthogonal variability models, software product lines, variability modeling},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/3461002.3473946,
author = {Meixner, Kristof and Feichtinger, Kevin and Rabiser, Rick and Biffl, Stefan},
title = {A reusable set of real-world product line case studies for comparing variability models in research and practice},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473946},
doi = {10.1145/3461002.3473946},
abstract = {Real-world cases describing (product) variability in production systems are rare and often not accessible. Thus, researchers often use toy examples or develop fictitious case studies. These are designed to demonstrate their approach but rarely to compare multiple approaches. In this paper, we aim at making variability modeling evaluations comparable. We present and provide a reusable set of four real-world case studies that are easy to access, with artifacts represented in a universal, variability-model-agnostic way, the industrial Product-Process-Resource Domain-Specific Language (PPR DSL). We report how researchers can use the case studies, automatically transforming the Domain-Specific Language (DSL) artifacts to well-known variability models, e.g., product feature models, using the Variability Evolution Roundtrip Transformation (VERT) process. We compare the expressiveness and complexity of the transformed feature models. We argue that the case studies with the DSL and the flexible transformation capabilities build a valuable contribution to making future research results more comparable and facilitating evaluations with real-world product lines.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {105–112},
numpages = {8},
keywords = {case studies, cyber-physical production system, feature extraction, variability modeling},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/2364412.2364419,
author = {Asadi, Mohsen and Bagheri, Ebrahim and Mohabbati, Bardia and Ga\v{s}evi\'{c}, Dragan},
title = {Requirements engineering in feature oriented software product lines: an initial analytical study},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364419},
doi = {10.1145/2364412.2364419},
abstract = {Requirements engineering is recognized as a critical stage in software development lifecycle. Given the nature of Software Product Lines (SPL), the importance of requirements engineering is more pronounced as SPLs pose more complex challenges than development of a 'single' product. Several methods have been proposed in the literature, which encompass activities for capturing requirements, their variability and commonality. To investigate the maturity and effectiveness of the current requirements engineering approaches in software product lines, we develop an evaluation framework containing a set of evaluation criteria and assess feature oriented requirements engineering methods based on the proposed criteria. As a result of this initial study, we find out the majority of approaches lacks proper techniques for supporting the validation of family requirements models as well as dealing with delta requirements. Additionally, capturing stakeholders' preferences and applying them during the course of software feature configuration have not been taken into account and addressed in the proposed approaches.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {36–44},
numpages = {9},
keywords = {evaluation criteria, requirements engineering, software engineering, software product line engineering},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3109729.3109736,
author = {Kr\"{u}ger, Jacob and Nell, Louis and Fenske, Wolfram and Saake, Gunter and Leich, Thomas},
title = {Finding Lost Features in Cloned Systems},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109736},
doi = {10.1145/3109729.3109736},
abstract = {Copying and adapting a system, also known as clone-and-own, is a common reuse approach that requires little initial effort. However, the drawbacks of clones are increasing maintenance costs as bug fixes and updates must be propagated. To reduce these costs, migrating cloned legacy systems towards a software product line promises to enable systematic reuse and customization. For both, managing and migrating cloned systems, it remains a challenge to identify and map features in the systems. In this paper, we i) propose a semi-automatic process to identify and map features between legacy systems, ii) suggest a corresponding visualization approach, and iii) assess our process on a case study. The results indicate that our process is suitable to identify features and present commonalities and variability in cloned systems. Our process can be used to enable traceability, prepare refactorings, and extract software product lines.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {65–72},
numpages = {8},
keywords = {Software product line, code clone detection, extractive approach, feature location, legacy system, reverse engineering},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2000259.2000264,
author = {Kavimandan, Amogh and Gokhale, Aniruddha and Karsai, Gabor and Gray, Jeff},
title = {Managing the quality of software product line architectures through reusable model transformations},
year = {2011},
isbn = {9781450307246},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2000259.2000264},
doi = {10.1145/2000259.2000264},
abstract = {In model-driven engineering of applications, the quality of the software architecture is realized and preserved in the successive stages of its lifecycle through model transformations. However, limited support for reuse in contemporary model transformation techniques forces developers of product line architectures to reinvent transformation rules for every variant of the product line, which can adversely impact developer productivity and in turn degrade the quality of the resulting software architecture for the variant. To overcome these challenges, this paper presents the MTS (Model-transformation Templatization and Specialization generative transformation process, which promotes reuse in model transformations through parameterization and specialization of transformation rules. MTS defines two higher order transformations to capture the variability in transformation rules and to specialize them across product variants. The core idea behind MTS is realized within a graphical model transformation tool in a way that is minimally intrusive to the underlying tool's implementation. The paper uses two product line case studies to evaluate MTS in terms of reduction in efforts to define model transformation rules as new variants are added to the product line, and the overhead in executing the higher order transformations. These metrics provide an indirect measure of how potential degradation in the quality of software architectures of product lines caused due to lack of reuse can be alleviated by MTS.},
booktitle = {Proceedings of the Joint ACM SIGSOFT Conference -- QoSA and ACM SIGSOFT Symposium -- ISARCS on Quality of Software Architectures -- QoSA and Architecting Critical Systems -- ISARCS},
pages = {13–22},
numpages = {10},
keywords = {model transformations, reuse, software quality},
location = {Boulder, Colorado, USA},
series = {QoSA-ISARCS '11}
}

@inproceedings{10.5555/1885639.1885642,
author = {Bagheri, Ebrahim and Di Noia, Tommaso and Ragone, Azzurra and Gasevic, Dragan},
title = {Configuring software product line feature models based on Stakeholders' soft and hard requirements},
year = {2010},
isbn = {3642155782},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {Feature modeling is a technique for capturing commonality and variability. Feature models symbolize a representation of the possible application configuration space, and can be customized based on specific domain requirements and stakeholder goals. Most feature model configuration processes neglect the need to have a holistic approach towards the integration and satisfaction of the stakeholder's soft and hard constraints, and the application-domain integrity constraints. In this paper, we will show how the structure and constraints of a feature model can be modeled uniformly through Propositional Logic extended with concrete domains, called P(N). Furthermore, we formalize the representation of soft constraints in fuzzy P(N) and explain how semi-automated feature model configuration is performed. The model configuration derivation process that we propose respects the soundness and completeness properties.},
booktitle = {Proceedings of the 14th International Conference on Software Product Lines: Going Beyond},
pages = {16–31},
numpages = {16},
location = {Jeju Island, South Korea},
series = {SPLC'10}
}

@inproceedings{10.1145/2491627.2491637,
author = {Kanda, Tetsuya and Ishio, Takashi and Inoue, Katsuro},
title = {Extraction of product evolution tree from source code of product variants},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491637},
doi = {10.1145/2491627.2491637},
abstract = {A large number of software products may be derived from an original single product. Although software product line engineering is advocated as an effective approach to maintaining such a family of products, re-engineering existing products requires developers to understand the evolution history of the products. This can be challenging because developers typically only have access to product source code. In this research, we propose to extract a Product Evolution Tree that approximates the evolution history from source code of products. Our key idea is that two successive products are the most similar to one another in the evolution history. We construct a Product Evolution Tree as a minimum spanning tree whose cost function is defined by the number of similar files between products. As an experiment, we extracted Product Evolution Trees from 6 datasets of open-source projects. The result showed that 53% to 92% of edges in the extracted trees were consistent with the actual evolution history of the projects.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {141–150},
numpages = {10},
keywords = {software evolution, software product line, visualization},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/3382025.3414979,
author = {Benni, Benjamin and Mosser, S\'{e}bastien and Caissy, Jean-Philippe and Gu\'{e}h\'{e}neuc, Yann-Ga\"{e}l},
title = {Can microservice-based online-retailers be used as an SPL? a study of six reference architectures},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414979},
doi = {10.1145/3382025.3414979},
abstract = {Microservices are deployable software artifacts that combine a set of business features and expose them to other microservices. Ideally, the reuse and interchanging of microservices should be easy as they are supposed to be independent of each other, both conceptually and technologically. Selecting a service to fulfill a given feature (e.g., managing a cart in a website) recalls the way Software Product Lines (SPL) allow variability. However, in practice, interchanging microservices requires knowing the features that the services propose, how they communicate with other services and their types. In this work, we propose to analyze service dependencies as feature dependencies, at the feature, structural, technological, and versioning level, to assess the interchangeability of services. We analyze six community-selected use-cases and report that services are non-interchangeable systematically.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {24},
numpages = {6},
keywords = {microservice architecture, reverse engineering, software composition},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3382025.3414960,
author = {Str\"{u}der, Stefan and Mukelabai, Mukelabai and Str\"{u}ber, Daniel and Berger, Thorsten},
title = {Feature-oriented defect prediction},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414960},
doi = {10.1145/3382025.3414960},
abstract = {Software errors are a major nuisance in software development and can lead not only to reputation damages, but also to considerable financial losses for companies. Therefore, numerous techniques for predicting software defects, largely based on machine learning methods, have been developed over the past decades. These techniques usually rely on code and process metrics in order to predict defects at the granularity of typical software assets, such as subsystems, components, and files. In this paper, we present the first systematic investigation of feature-oriented defect prediction: the prediction of defects at the granularity of features---domain-oriented entities abstractly representing (and often cross-cutting) typical software assets. Feature-oriented prediction can be beneficial, since: (i) particular features might be more error-prone than others, (ii) characteristics of features known as defective might be useful to predict other error-prone features, (iii) feature-specific code might be especially prone to faults arising from feature interactions. We present a dataset derived from 12 software projects and introduce two metric sets for feature-oriented defect prediction. We evaluated seven machine learning classifiers with three different attribute sets each, using our two new metric sets as well as an existing metric set from the literature. We observe precision and recall values of around 85% and better robustness when more diverse metrics sets with richer feature information are used.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {21},
numpages = {12},
keywords = {classification, defect, feature, prediction},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.5555/2337223.2337462,
author = {Khoshnevis, Sedigheh},
title = {An approach to variability management in service-oriented product lines},
year = {2012},
isbn = {9781467310673},
publisher = {IEEE Press},
abstract = {Service-Oriented product lines (SOPLs) are dynamic software product lines, in which, the products are developed based on services and service-oriented architecture. Although there are similarities between components and services, there are important differences so that we cannot use component-based product line engineering methods and techniques for SOPL engineering. These differences emerge from the fact that, services can be discovered as black box elements from external repositories. Moreover, services can be dynamically bound and are business-aligned. Therefore, analyzing the conformance of discovered external services with the variability of services in the SOPL –which must be aligned to the variable business needs-is necessary. Variability must be managed, that is, it must be represented (modeled), used (instantiated and capable of conformance checking) and maintained (evolved) over time. Feature Models are insufficient for modeling variability in SOPL, because, services cannot be simply mapped to one or more features, and identification of the mapping depends on knowing the detailed implementation of the services. This research aims at providing an approach to managing the variability in SOPLs so that external services can be involved in the SOPL engineering. This paper presents an overview of the proposal.},
booktitle = {Proceedings of the 34th International Conference on Software Engineering},
pages = {1483–1486},
numpages = {4},
location = {Zurich, Switzerland},
series = {ICSE '12}
}

@inproceedings{10.1145/3382025.3414976,
author = {Pereira, Juliana Alves and Martin, Hugo and Temple, Paul and Acher, Mathieu},
title = {Machine learning and configurable systems: a gentle introduction},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414976},
doi = {10.1145/3382025.3414976},
abstract = {The goal of this tutorial is to give a gentle introduction to how machine learning can be used to support software product line configuration. This is our second practical tutorial in this trending field. The tutorial is based on a systematic literature review and includes practical tasks (specialization, performance and bug prediction) on real-world systems (Linux, VaryLaTeX, x264). The material is designed for academics and practitioners with basic knowledge in software product lines and machine learning.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {40},
numpages = {1},
keywords = {configurable systems, machine learning, software product lines},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3236405.3237199,
author = {Fadhlillah, Hafiyyan Sayyid and Adianto, Daya and Azurat, Ade and Sakinah, Siti Ina},
title = {Generating adaptable user interface in SPLE: using delta-oriented programming and interaction flow modeling language},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3237199},
doi = {10.1145/3236405.3237199},
abstract = {We explore the possibility of including Delta-Oriented Programming (DOP) and Abstract User Interface (AUI) model during product generation in Software Product Line Engineering (SPLE). Previous work showed that DOP is applicable in a SPLE for Web applications albeit User Interface (UI) elements in derived product are still manually created without UI modeling. AUI model is proven to be successful for modeling UI elements for products in SPLE as it can model generic UI elements while still encouraging customization. Therefore, we pick an existing AUI modeling language called Interaction Flow Modeling Language (IFML) to create model of UI elements in a SPLE. We also suggest a new SPLE design that follows DOP and the proposed UI modeling language to generate adaptable UI given product configuration. The process of designing UI for each feature in the product line is based on reference implementation process used in previous work. We hope that the suggested process can solve the current DOP practices limitation in generating UI elements for products in SPLE.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {52–55},
numpages = {4},
keywords = {delta-oriented programming, software product lines, user interface engineering},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3461001.3471155,
author = {Martin, Hugo and Acher, Mathieu and Pereira, Juliana Alves and J\'{e}z\'{e}quel, Jean-Marc},
title = {A comparison of performance specialization learning for configurable systems},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471155},
doi = {10.1145/3461001.3471155},
abstract = {The specialization of the configuration space of a software system has been considered for targeting specific configuration profiles, usages, deployment scenarios, or hardware settings. The challenge is to find constraints among options' values that only retain configurations meeting a performance objective. Since the exponential nature of configurable systems makes a manual specialization unpractical, several approaches have considered its automation using machine learning, i.e., measuring a sample of configurations and then learning what options' values should be constrained. Even focusing on learning techniques based on decision trees for their built-in explainability, there is still a wide range of possible approaches that need to be evaluated, i.e., how accurate is the specialization with regards to sampling size, performance thresholds, and kinds of configurable systems. In this paper, we compare six learning techniques: three variants of decision trees (including a novel algorithm) with and without the use of model-based feature selection. We first perform a study on 8 configurable systems considered in previous related works and show that the accuracy reaches more than 90% and that feature selection can improve the results in the majority of cases. We then perform a study on the Linux kernel and show that these techniques performs as well as on the other systems. Overall, our results show that there is no one-size-fits-all learning variant (though high accuracy can be achieved): we present guidelines and discuss tradeoffs.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {46–57},
numpages = {12},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3461002.3473072,
author = {Martinson, Johan and Jansson, Herman and Mukelabai, Mukelabai and Berger, Thorsten and Bergel, Alexandre and Ho-Quang, Truong},
title = {HAnS: IDE-based editing support for embedded feature annotations},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473072},
doi = {10.1145/3461002.3473072},
abstract = {When developers maintain or evolve software, they often need to know the locations of features. This proves challenging when the feature locations are not documented, when the code was written by different developers who may have left the organization, or when the developer's memory of the implementation has faded. Automated feature location techniques are hard to adopt in practice, especially since they boast too many false positives. To address these challenges, embedded feature annotations have been proposed to allow developers to trace features in code during development with minimal effort. However, tool support is needed for developers to effectively record and use these annotations. We propose HAnS as a tool to meet this need; it is implemented as an IntelliJ IDE plugin to support developers seamlessly record feature locations while they write their code. HAnS supports developers when mapping features to software assets, such as files and code fragments, with code completion and syntax highlighting. It also provides functionality to browse feature definitions and locations, as well as refactor features. A demo video is available at https://youtu.be/cx_-ZshHLgA.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {28–31},
numpages = {4},
keywords = {IDE, embedded feature annotations, feature location, tool support},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@article{10.1109/MS.2009.95,
author = {White, Jules and Hill, James H. and Gray, Jeff and Tambe, Sumant and Gokhale, Aniruddha S. and Schmidt, Douglas C.},
title = {Improving Domain-Specific Language Reuse with Software Product Line Techniques},
year = {2009},
issue_date = {July 2009},
publisher = {IEEE Computer Society Press},
address = {Washington, DC, USA},
volume = {26},
number = {4},
issn = {0740-7459},
url = {https://doi.org/10.1109/MS.2009.95},
doi = {10.1109/MS.2009.95},
abstract = {Developing a domain-specific language (DSL) or a composition of DSLs to model a system concern, such as deploying and configuring software components to meet real-time scheduling constraints, is time consuming. Ideally, developers should be able to reuse DSLs and DSL compositions across projects to amortize development effort. Reusing DSLs is hard, however, because they're often designed to precisely describe a single domain or concern. A new approach uses techniques from software product lines (SPLs) to improve the reusability of a DSL, DSL composition, or supporting tool by providing traceability of language concepts to DSL design. A case study of four DSLs demonstrates the need for—and benefits of—applying SPL reuse techniques to DSLs.},
journal = {IEEE Softw.},
month = jul,
pages = {47–53},
numpages = {7},
keywords = {domain analysis, domain hierarchy, domain-specific languages, feature models, reuse, software engineering, software product lines}
}

@inproceedings{10.1145/3461001.3471146,
author = {Horcas, Jose-Miguel and Galindo, Jos\'{e} A. and Heradio, Ruben and Fernandez-Amoros, David and Benavides, David},
title = {Monte Carlo tree search for feature model analyses: a general framework for decision-making},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471146},
doi = {10.1145/3461001.3471146},
abstract = {The colossal solution spaces of most configurable systems make intractable their exhaustive exploration. Accordingly, relevant analyses remain open research problems. There exist analyses alternatives such as SAT solving or constraint programming. However, none of them have explored simulation-based methods. Monte Carlo-based decision making is a simulation-based method for dealing with colossal solution spaces using randomness. This paper proposes a conceptual framework that tackles various of those analyses using Monte Carlo methods, which have proven to succeed in vast search spaces (e.g., game theory). Our general framework is described formally, and its flexibility to cope with a diversity of analysis problems is discussed (e.g., finding defective configurations, feature model reverse engineering or getting optimal performance configurations). Additionally, we present a Python implementation of the framework that shows the feasibility of our proposal. With this contribution, we envision that different problems can be addressed using Monte Carlo simulations and that our framework can be used to advance the state of the art a step forward.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {190–201},
numpages = {12},
keywords = {configurable systems, feature models, monte carlo tree search, software product lines, variability modeling},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3461002.3473070,
author = {Acher, Mathieu and Perrouin, Gilles and Cordy, Maxime},
title = {BURST: a benchmarking platform for uniform random sampling techniques},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473070},
doi = {10.1145/3461002.3473070},
abstract = {We present BURST, a benchmarking platform for uniform random sampling techniques. With BURST, researchers have a flexible, controlled environment in which they can evaluate the scalability and uniformity of their sampling. BURST comes with an extensive --- and extensible --- benchmark dataset comprising 128 feature models, including challenging, real-world models of the Linux kernel. BURST takes as inputs a sampling tool, a set of feature models and a sampling budget. It automatically translates any feature model of the set in DIMACS and invokes the sampling tool to generate the budgeted number of samples. To evaluate the scalability of the sampling tool, BURST measures the time the tool needs to produce the requested sample. To evaluate the uniformity of the produced sample, BURST integrates the state-of-the-art and proven statistical test Barbarik. We envision BURST to become the starting point of a standardisation initiative of sampling tool evaluation. Given the huge interest of research for sampling algorithms and tools, this initiative would have the potential to reach and crosscut multiple research communities including AI, ML, SAT and SPL.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {36–40},
numpages = {5},
keywords = {SAT, benchmark, configurable systems, sampling, software product lines, variability model},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/3233027.3233054,
author = {Kaindl, Hermann and Mannion, Mike},
title = {Software reuse and mass customisation: feature modelling vs. case-based reasoning},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233054},
doi = {10.1145/3233027.3233054},
abstract = {Several socio-economic trends are driving customer demands towards individualisation. Many suppliers are responding by offering supplier-led software product design customization choices ("mass customization"). Some are also offering customer-led software product design choices ("mass personalization"). This tutorial introduces these concepts and explores the implications for software product line development. One particular technical challenge is being able to respond to and manage at scale the increasing variety of common, supplier-led and customer-led features. We discuss two different approaches to address this challenge. One is grounded in feature modelling; the other in case-based reasoning. Both approaches aim to support the identification and selection of similar products. However they each place different emphases on these activities, use different product descriptions, and deploy different product derivation methods. Accordingly, each approach has different key properties, benefits and limitations.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {304},
numpages = {1},
keywords = {case-based reasoning, feature model, mass customisation, reuse},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3233027.3236399,
author = {Kuiter, Elias and Krieter, Sebastian and Kr\"{u}ger, Jacob and Ludwig, Kai and Leich, Thomas and Saake, Gunter},
title = {PClocator: a tool suite to automatically identify configurations for code locations},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3236399},
doi = {10.1145/3233027.3236399},
abstract = {The source code of highly-configurable software is challenging to comprehend, analyze, and test. In particular, it is hard to identify all configurations that comprise a certain code location. We contribute PCLocator, a tool suite that solves this problem by utilizing static analysis tools for compile-time variability. Using BusyBox and the Variability Bugs Database (VBDb), we evaluate the correctness and performance of PCLocator. The results show that we are able to analyze files in a matter of seconds and derive correct configurations in 95% of all cases.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {284–288},
numpages = {5},
keywords = {build system, configuration, preprocessor, software product line, static source code analysis},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3307630.3342387,
author = {Baum, David and Sixtus, Christina and Vogelsberg, Lisa and Eisenecker, Ulrich},
title = {Understanding Conditional Compilation through Integrated Representation of Variability and Source Code},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342387},
doi = {10.1145/3307630.3342387},
abstract = {The C preprocessor (CPP) is a standard tool for introducing variability into source programs and is often applied either implicitly or explicitly for implementing a Software Product Line (SPL). Despite its practical relevance, CPP has many drawbacks. Because of that it is very difficult to understand the variability implemented using CPP. To facilitate this task we provide an innovative analytics tool which bridges the gap between feature models as more abstract representations of variability and its concrete implementation with the means of CPP. It allows to interactively explore the entities of a source program with respect to the variability realized by conditional compilation. Thus, it simplifies tracing and understanding the effect of enabling or disabling feature flags.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {21–24},
numpages = {4},
keywords = {conditional compilation, getaviz, preprocessor, software prodect line, software visualization, variablity, visual analytics},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3336294.3336300,
author = {Drave, Imke and Kautz, Oliver and Michael, Judith and Rumpe, Bernhard},
title = {Semantic Evolution Analysis of Feature Models},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336300},
doi = {10.1145/3336294.3336300},
abstract = {During the development process, feature models change continuously. Analyzing the semantic differences between consecutive feature model versions is important throughout the entire development process to detect unintended changes of the modeled product line. Previous work introduced a semantic differencing technique for feature models based on a closed-world assumption, which reveals the differences between two feature models when allowing products to only contain features used in the models. However, this does not reflect the stepwise refinement of feature models in early development stages. Therefore, we introduce an open-world semantics, an automatic method for semantic differencing of feature models with respect to the novel semantics, and formally relate the open- and closed-world semantics. We formally prove our results, including the relation between the different semantics as well as the soundness and completeness of the semantic differencing procedure. In conjunction with previous work, the results enable effective semantic feature model evolution analyses throughout the entire development process.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {245–255},
numpages = {11},
keywords = {feature modeling, model evolution analysis, open-world semantics, semantic differences},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3461002.3473948,
author = {Xu, Hao and Baarir, Souheib and Ziadi, Tewfik and Hillah, Lom Messan and Essodaigui, Siham and Bossu, Yves},
title = {Optimisation for the product configuration system of Renault: towards an integration of symmetries},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473948},
doi = {10.1145/3461002.3473948},
abstract = {The problem of configuring model variability is widespread in many different domains. Renault, a leading french automobile manufacturer, has developed its technology internally to model vehicle diversity. This technology relies on the approach known as knowledge compilation. Since its inception, continuous progress has been made in the tool while monitoring the latest developments from the software field and academia. However, the growing number of vehicle models brings potential risks and higher requirements for the tool. This paper presents a short reminder of Renault's technology principles and the improvements we intend to achieve by analyzing and leveraging notable data features of Renault problem instances. In particular, the aim is to exploit symmetry properties.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {86–90},
numpages = {5},
keywords = {SAT, knowledge compilation, product line, symmetries},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/3233027.3236395,
author = {Pereira, Juliana Alves and Maciel, Lucas and Noronha, Thiago F. and Figueiredo, Eduardo},
title = {Heuristic and exact algorithms for product configuration in software product lines},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3236395},
doi = {10.1145/3233027.3236395},
abstract = {The Software Product Line (SPL) configuration field is an active area of research and has attracted both practitioners and researchers attention in the last years. A key part of an SPL configuration is a feature model that represents features and their dependencies (i.e., SPL configuration rules). This model can be extended by adding Non-Functional Properties (NFPs) as feature attributes resulting in Extended Feature Models (EFMs). Configuring products from an EFM requires considering the configuration rules of the model and satisfying the product functional and non-functional requirements. Although the configuration of a product arising from EFMs may reduce the space of valid configurations, selecting the most appropriate set of features is still an overwhelming task due to many factors including technical limitations and diversity of contexts. Consequently, configuring large and complex SPLs by using configurators is often beyond the users' capabilities of identifying valid combinations of features that match their (non-functional) requirements. To overcome this limitation, several approaches have modeled the product configuration task as a combinatorial optimization problem and proposed constraint programming algorithms to automatically derive a configuration. Although these approaches do not require any user intervention to guarantee the optimality of the generated configuration, due to the NP-hard computational complexity of finding an optimal variant, exact approaches have inefficient exponential time. Thus, to improve scalability and performance issues, we introduced the adoption of a greedy heuristic algorithm and a biased random-key genetic algorithm (BRKGA). Our experiment results show that our proposed heuristics found optimal solutions for all instances where those are known. For the instances where optimal solutions are not known, the greedy heuristic outperformed the best solution obtained by a one-hour run of the exact algorithm by up to 67.89%. Although the BRKGA heuristic slightly outperformed the greedy heuristic, it has shown larger running times (especially on the largest instances). Therefore, to ensure a good user experience and enable a very fast configuration task, we extended a state-of-the-art configurator with the proposed greedy heuristic approach.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {247},
numpages = {1},
keywords = {configuration optimization, search-based software engineering, software product line configuration, software product lines},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3461002.3473073,
author = {Pett, Tobias and Krieter, Sebastian and Th\"{u}m, Thomas and Lochau, Malte and Schaefer, Ina},
title = {AutoSMP: an evaluation platform for sampling algorithms},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473073},
doi = {10.1145/3461002.3473073},
abstract = {Testing configurable systems is a challenging task due to the combinatorial explosion problem. Sampling is a promising approach to reduce the testing effort for product-based systems by finding a small but still representative subset (i.e., a sample) of all configurations for testing. The quality of a generated sample wrt. evaluation criteria such as run time of sample generation, feature coverage, sample size, and sampling stability depends on the subject systems and the sampling algorithm. Choosing the right sampling algorithm for practical applications is challenging because each sampling algorithm fulfills the evaluation criteria to a different degree. Researchers keep developing new sampling algorithms with improved performance or unique properties to satisfy application-specific requirements. Comparing sampling algorithms is therefore a necessary task for researchers. However, this task needs a lot of effort because of missing accessibility of existing algorithm implementations and benchmarks. Our platform AutoSMP eases practitioners and researchers lifes by automatically executing sampling algorithms on predefined benchmarks and evaluating the sampling results wrt. specific user requirements. In this paper, we introduce the open-source application of AutoSMP and a set of predefined benchmarks as well as a set of T-wise sampling algorithms as examples.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {41–44},
numpages = {4},
keywords = {product lines, sampling, sampling evalutaion},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/3307630.3342413,
author = {Arcaini, Paolo and Gargantini, Angelo and Radavelli, Marco},
title = {A Process for Fault-Driven Repair of Constraints Among Features},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342413},
doi = {10.1145/3307630.3342413},
abstract = {The variability of a Software Product Line is usually both described in the problem space (by using a variability model) and in the solution space (i.e., the system implementation). If the two spaces are not aligned, wrong decisions can be done regarding the system configuration. In this work, we consider the case in which the variability model is not aligned with the solution space, and we propose an approach to automatically repair (possibly) faulty constraints in variability models. The approach takes as input a variability model and a set of combinations of features that trigger conformance faults between the model and the real system, and produces the repaired set of constraints as output. The approach consists of three major phases. First, it generates a test suite and identifies the condition triggering the faults. Then, it modifies the constraints of the variability model according to the type of faults. Lastly, it uses a logic minimization method to simplify the modified constraints. We evaluate the process on variability models of 7 applications of various sizes. An empirical analysis on these models shows that our approach can effectively repair constraints among features in an automated way.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {73–81},
numpages = {9},
keywords = {automatic repair, fault, system evolution, variability model},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3461002.3473945,
author = {Feichtinger, Kevin and Rabiser, Rick},
title = {How flexible must a transformation approach for variability models and custom variability representations be?},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473945},
doi = {10.1145/3461002.3473945},
abstract = {A plethora of variability modeling approaches has been developed in the last 30 years. Feature modeling approaches are probably the most common and well-known approaches. All existing variability modeling approaches have their benefits and drawbacks and have been shown to be useful at least in certain use cases. Nevertheless, industry frequently develops their own custom solutions to manage variability because they struggle picking an approach from the (still growing) number of modeling approaches available. Therefore, we work towards a transformation approach, which enables researchers and practitioners alike to compare different (custom) variability modeling approaches and representations and switch in between them at least (semi-)automatically. In this paper, we discuss ongoing challenges for the transformation approach regarding the implementation of the transformations and the expected flexibility of the approach. We present our research agenda towards a flexible and adaptable transformation approach for well-known variability modeling approaches and custom variability representations used in industry.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {69–72},
numpages = {4},
keywords = {decision models, feature models, software product lines, variability modeling},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/3236405.3236427,
author = {Li, Yang},
title = {Feature and variability extraction from natural language software requirements specifications},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3236427},
doi = {10.1145/3236405.3236427},
abstract = {Extracting feature and variability from requirement specifications is an indispensable activity to support systematic integration related single software systems into Software Product Line (SPL). Performing variability extraction is time-consuming and inefficient, since massive textual requirements need to be analyzed and classified. Despite the improvement of automatically features and relationships extraction techniques, existing approaches are not able to provide high accuracy and applicability in real-world scenarios. The aim of my doctoral research is to develop an automated technique for extracting features and variability which provides reliable solutions to simplify the work of domain analysis. I carefully analyzed the state of the art and identified main limitations so far: accuracy and automation. Based on these insights, I am developing a methodology to address this challenges by making use of advanced Natural Language Processing (NLP) and machine learning techniques. In addition, I plan to design reasonable case study to evaluate the proposed approaches and empirical study to investigate usability in practice.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {72–78},
numpages = {7},
keywords = {feature identification, requirement documents, reverse engineering, software product lines, variability extraction},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3461001.3473061,
author = {Tomashchuk, Oleksandr and Van Landuyt, Dimitri and Joosen, Wouter},
title = {The architectural divergence problem in security and privacy of eHealth IoT product lines},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3473061},
doi = {10.1145/3461001.3473061},
abstract = {The Internet of Things (IoT) seamlessly becomes integrated into many aspects of daily life, and in the case of healthcare, it arises in the shape of eHealth IoT systems. Evidently, the design of such systems must apply best practices when it comes to security and privacy, in addition to ensuring compliance with various national and international regulations. When it comes to the required functionality, commonalities and variations can effectively be managed in a product line approach that involves deriving specific application architecture variants from a common reference architecture.This paper illustrates and discusses a specific problem encountered in the establishment of a software product-line in this specific context: the adoption of systematic security and privacy threat modeling and risk assessment approaches introduces a variation space that is very difficult to capture in a proactive product-line approach. One of the main causes for this is that threat assessment itself suffers from the problem of threat explosion, i.e. combinatorial explosions of threats that have to be investigated and systematically mitigated. The highlighted divergence of the security and privacy threats across architectural variants is illustrated in the specific case of an industry IoT-based e-health software product line.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {114–119},
numpages = {6},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3382026.3425776,
author = {Michelon, Gabriela Karoline and Obermann, David and Assun\c{c}\~{a}o, Wesley Klewerton Guez and Linsbauer, Lukas and Gr\"{u}nbacher, Paul and Egyed, Alexander},
title = {Mining Feature Revisions in Highly-Configurable Software Systems},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3425776},
doi = {10.1145/3382026.3425776},
abstract = {Highly-Configurable Software Systems (HCSSs) support the systematic evolution of systems in space, i.e., the inclusion of new features, which then allow users to configure software products according to their needs. However, HCSSs also change over time, e.g., when adapting existing features to new hardware or platforms. In practice, HCSSs are thus developed using both version control systems (VCSs) and preprocessor directives (#ifdefs). However, the use of a preprocessor as variability mechanism has been criticized regarding the separation of concerns and code obfuscation, which complicates the analysis of HCSS evolution in VCSs. For instance, a single commit may contain changes of totally unrelated features, which may be scattered over many variation points (#ifdefs), thus making the evolution history hard to understand. This complexity often leads to error-prone changes and high costs for maintenance and evolution. In this paper, we propose an automated approach to mine HCSS features taking into account evolution in space and time. Our approach uses constraint satisfaction problem solving to mine newly introduced, removed and changed features. It finds a configuration containing the feature revisions which are needed to activate a specific program location. Furthermore, it increments the revision number of each changed feature. Thus, our approach enables to analyze when and which features often change over time, as well as their interactions, for every single commit of a HCSS. Our approach can contribute to future research on understanding the characteristics of HCSS and supporting developers during maintenance and evolution tasks.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {74–78},
numpages = {5},
keywords = {feature evolution, preprocessors, repository mining, software product lines, system evolution, version control systems},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/2499777.2500723,
author = {Alsawalqah, Hamad and Kang, Sungwon and Lee, Danhyung},
title = {A method for software product platform design based on features},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500723},
doi = {10.1145/2499777.2500723},
abstract = {Due to the increased competition and the advent of mass customization, software firms are applying the Software Product Line Engineering (SPLE) approach to provide product variety in a cost-effective manner. Although the key to designing a successful software product family is the product platform, yet there is lack of measures and methods that are useful to optimize the product platform design. This paper proposes a method to provide decision support to determine the optimized product platform design. The method targets at identifying the optimized product platform design in order to maximize the cost savings and the amount of commonality while meeting the goals and needs of the envisioned customers' segments. It generates, validates, and evaluates alternative product platform designs while considering market concerns (e.g., customer preferences) and technical product platform concerns (e.g., decisions regarding shared features, economic benefit). We demonstrate its applicability with an example of platform design problem in smart phones domain.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {18–25},
numpages = {8},
keywords = {Kano scheme, commonality index, product platform design, software product line},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inbook{10.5555/1980562.1980565,
author = {Heidenreich, Florian and S\'{a}nchez, Pablo and Santos, Jo\~{a}o and Zschaler, Steffen and Alf\'{e}rez, Mauricio and Ara\'{u}jo, Jo\~{a}o and Fuentes, Lidia and Kulesza, Uir\'{a} and Moreira, Ana and Rashid, Awais},
title = {Relating feature models to other models of a software product line: a comparative study of featuremapper and VML},
year = {2010},
isbn = {3642160859},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {Software product lines using feature models often require the relation between feature models in problem space and the models used to describe the details of the product line to be expressed explicitly. This is particularly important, where automatic product derivation is required. Different approaches for modelling this mapping have been proposed in the literature. However, a discussion of their relative benefits and drawbacks is currently missing. As a first step towards a better understanding of this field, this paper applies two of these approaches-- FeatureMapper as a representative of declarative approaches and VML* as a representative of operational approaches--to the case study. We show in detail how the case study can be expressed using these approaches and discuss strengths and weaknesses of the two approaches with regard to the case study.},
booktitle = {Transactions on Aspect-Oriented Software Development VII: A Common Case Study for Aspect-Oriented Modeling},
pages = {69–114},
numpages = {46}
}

@inproceedings{10.1145/1297846.1297914,
author = {Krueger, Charles W.},
title = {Leveraging integrated model-driven development and software product line development technologies},
year = {2007},
isbn = {9781595938657},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1297846.1297914},
doi = {10.1145/1297846.1297914},
abstract = {As emerging Software Product Line (SPL) technologies have evolved, Model-Driven Development (MDD) has remained an under-served part of the SPL portfolio development lifecycle, making it difficult to simultaneously leverage the benefits of both practices. The Telelogic Rhapsody®/BigLever Gears™ Bridge is the industry's first solution to provide fully integrated MDD and SPL technologies. With the Bridge's innovative capabilities, you can achieve new levels of efficiency by utilizing: (1) Rhapsody MDD models, rather than working with conventional source code, and (2) Gears' SPL consolidation, first-class model variation points, and automated production capabilities -- rather than creating "clone-and-own" copies of MDD models for each product or building "one-size-fits-all" models for all products. This increased efficiency enables you to deliver more new products and features faster, while reducing the development effort and optimizing product quality.},
booktitle = {Companion to the 22nd ACM SIGPLAN Conference on Object-Oriented Programming Systems and Applications Companion},
pages = {836–837},
numpages = {2},
keywords = {model-driven development, software product lines},
location = {Montreal, Quebec, Canada},
series = {OOPSLA '07}
}

@inproceedings{10.1145/2648511.2648531,
author = {Yu, Wenjing and Zhang, Wei and Zhao, Haiyan and Jin, Zhi},
title = {TDL: a transformation description language from feature model to use case for automated use case derivation},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648531},
doi = {10.1145/2648511.2648531},
abstract = {Software product line engineering (SPLE) is a widely adopted approach to systematic software reuse. One basic research issue in SPLE is the product derivation problem, which focuses on how to derive software products from reusable software assets efficiently. In this paper, we focus on a sub-problem of product derivation: the problem of automated use case derivation, i.e. deriving the use cases of a software product in an automated way. We take a feature-oriented approach to this problem, an approach involving two components: a feature model, and the transformation information from the feature model to a set of use cases. In particular, we propose a transformation description language (TDL) to specify the transformation information from a feature model to a set of related use cases, and to support automated derivation of use cases corresponding to a valid feature model configuration. In addition, we also propose a set of criteria to check the validity of a TDL program. Three case studies have been conducted to demonstrate the usability of TDL and the feasibility of the automated use case derivation process based on TDL programs.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {187–196},
numpages = {10},
keywords = {feature model, software product line, transformation, use case},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3461001.3472734,
author = {Setyautami, Maya R. A. and Fadhlillah, Hafiyyan Sayyid and Azurat, Ade},
title = {PRICES: towards web-based product lines generator},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3472734},
doi = {10.1145/3461001.3472734},
abstract = {Precise Requirement Changes Integrated System (PRICES) is a framework to develop a web-based product line. PRICES is designed based on model-driven engineering and delta-oriented programming. The goal of this tutorial is to introduce how PRICES can be used to model the problem domain and generate a running web application. The tutorial is planned to be conducted in a half-day. A combination of lecture and hands-on training will be provided. In addition, we will demonstrate a possibility of a semi-automatic approach to generate a web application using SPLE. Participants can try to develop a new variation and generate an application using a running case study.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {209},
numpages = {1},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3486609.3487196,
author = {Bragan\c{c}a, Alexandre and Azevedo, Isabel and Bettencourt, Nuno and Morais, Carlos and Teixeira, Diogo and Caetano, David},
title = {Towards supporting SPL engineering in low-code platforms using a DSL approach},
year = {2021},
isbn = {9781450391122},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3486609.3487196},
doi = {10.1145/3486609.3487196},
abstract = {Low-code application platforms enable citizen developers to autonomously build complete applications, such as web applications or mobile applications. Some of these platforms also offer support for reuse to facilitate the development of similar applications. The offered mechanisms are usually elementary, they allow module reuse or building a new application from a template. However, they are insufficient to achieve the industrial level reuse necessary for software product lines (SPL). In fact, these platforms were conceived to help build standalone applications, not software families and even fewer software product lines. In this paper, we argue that the major limitation is that these platforms seldom provide access to their metamodel, the access to applications’ models and code is also limited and, therefore, makes it harder to analyze commonality and variability and construct models based on it. An approach is proposed to surpass these limitations: firstly, a metamodel of the applications built with the platform is obtained, and then, based on the metamodel, a domain-specific language (DSL) that can express the models of the applications, including variability, is constructed. With this DSL, users can combine and reuse models from different applications to explore and build similar applications. The solution is illustrated with an industrial case study. A discussion of the results is presented as well as its limitations and related work. The authors hope that this work provides inspiration and some ideas that the community can explore to facilitate the adoption and implementation of SPLs in the context, and supported by, low-code platforms.},
booktitle = {Proceedings of the 20th ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences},
pages = {16–28},
numpages = {13},
keywords = {domain specific languages, low-code platforms, software product line engineering},
location = {Chicago, IL, USA},
series = {GPCE 2021}
}

@inproceedings{10.1145/3382025.3414950,
author = {Cleland-Huang, Jane and Agrawal, Ankit and Islam, Md Nafee Al and Tsai, Eric and Van Speybroeck, Maxime and Vierhauser, Michael},
title = {Requirements-driven configuration of emergency response missions with small aerial vehicles},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414950},
doi = {10.1145/3382025.3414950},
abstract = {Unmanned Aerial Vehicles (UAVs) are increasingly used by emergency responders to support search-and-rescue operations, medical supplies delivery, fire surveillance, and many other scenarios. At the same time, researchers are investigating usage scenarios in which UAVs are imbued with a greater level of autonomy to provide automated search, surveillance, and delivery capabilities that far exceed current adoption practices. To address this emergent opportunity, we are developing a configurable, multi-user, multi-UAV system for supporting the use of semi-autonomous UAVs in diverse emergency response missions. We present a requirements-driven approach for creating a software product line (SPL) of highly configurable scenarios based on different missions. We focus on the process for eliciting and modeling a family of related use cases, constructing individual feature models, and activity diagrams for each scenario, and then merging them into an SPL. We show how the SPL will be implemented through leveraging and augmenting existing features in our DroneResponse system. We further present a configuration tool, and demonstrate its ability to generate mission-specific configurations for 20 different use case scenarios.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {26},
numpages = {12},
keywords = {configuration, emergency response, product line, unmanned aerial vehicles},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3233027.3233055,
author = {Benavides, David and Galindo, Jos\'{e} A.},
title = {Automated analysis of feature models: current state and practices},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233055},
doi = {10.1145/3233027.3233055},
abstract = {Software Product Lines (SPLs) are about developing a set of different software products that share some common functionality. Feature models are widely used to encode the common and variant parts of an SPL. The number of products encoded in a feature model grows with the number of features. Given n features and no constraints on valid feature combinations, there are 2n possible products. To deal with this complexity, automated mechanisms are used to extract information from feature models, such as features present in every product. A diversity of operations have been developed to model check, test, configure, debug, or compute relevant information by analyzing feature models. Moreover, such operations have been used in scenarios from different domains ranging from operating systems to video analysis optimization. In this tutorial, we go through the different automated analysis operations identifying its usage in the literature. Later present how to implement these operations within the FaMa framework.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {298},
numpages = {1},
keywords = {SPL, automated analysis of feature models (AAFM), tool},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.5555/1768904.1768926,
author = {Birk, Andreas and Heller, Gerald},
title = {Challenges for requirements engineering and management in software product line development},
year = {2007},
isbn = {9783540730309},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {Development of software product lines is particularly complex, raising specific and advanced challenges for requirements engineering and management. This paper gives an overview of these challenges, as they were identified in three related investigations that involved several industrial software product line organizations.},
booktitle = {Proceedings of the 13th International Working Conference on Requirements Engineering: Foundation for Software Quality},
pages = {300–305},
numpages = {6},
keywords = {program management, requirements management, software product lines, software project management, software release planning},
location = {Trondheim, Norway},
series = {REFSQ'07}
}

@inproceedings{10.1145/2019136.2019186,
author = {Corr\^{e}a, Chessman K. F.},
title = {Towards automatic consistency preservation for model-driven software product lines},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019186},
doi = {10.1145/2019136.2019186},
abstract = {Model-Driven Software Product Line Engineering (MD-SPLE) is the combination of Model-Driven Software Development and Software Product Line Engineering. In this paradigm, there is a strong dependency relationship between meta-models, models, transformation specifications and traceability links. Moreover, there are also dependency relationships between core assets and product specific artifacts, which raise dependency complexity. Due to the pressure to release new product versions and the quantity of dependent elements, there is a probability that models and related artifacts are not updated at all and become inconsistent with each other. The proposal of this thesis is to keep MD-SPLE models, meta-models, transformation specifications and traceability links consistent.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {43},
numpages = {7},
keywords = {consistency, evolution, maintenance, model-driven, software product line},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3461002.3473074,
author = {Fantechi, Alessandro and Gnesi, Stefania and Livi, Samuele and Semini, Laura},
title = {A spaCy-based tool for extracting variability from NL requirements},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473074},
doi = {10.1145/3461002.3473074},
abstract = {In previous work, we have shown that ambiguity detection in requirements can also be used as a way to capture latent aspects of variability. Natural Language Processing (NLP) tools have been used for a lexical analysis aimed at ambiguity indicators detection, and we have studied the necessary adaptations to those tools for pointing at potential variability, essentially by adding specific dictionaries for variability. We have identified also some syntactic rules able to detect potential variability, such as disjunction between nouns or pairs of indicators in a subordinate proposition. This paper describes a new prototype NLP tool, based on the spaCy library, specifically designed to detect variability. The prototype is shown to preserve the same recall exhibited by previously used lexical tools, with a higher precision.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {32–35},
numpages = {4},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inbook{10.5555/1986548.1986551,
author = {Heidenreich, Florian and S\'{a}nchez, Pablo and Santos, Jo\~{a}o and Zschaler, Steffen and Alf\'{e}rez, Mauricio and Ara\'{u}jo, Jo\~{a}o and Fuentes, Lidia and Kulesza, Uir\'{a} and Moreira, Ana and Rashid, Awais},
title = {Relating feature models to other models of a software product line: a comparative study of featuremapper and VML},
year = {2010},
isbn = {3642160859},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {Software product lines using feature models often require the relation between feature models in problem space and the models used to describe the details of the product line to be expressed explicitly. This is particularly important, where automatic product derivation is required. Different approaches for modelling this mapping have been proposed in the literature. However, a discussion of their relative benefits and drawbacks is currently missing. As a first step towards a better understanding of this field, this paper applies two of these approaches-- FeatureMapper as a representative of declarative approaches and VML* as a representative of operational approaches--to the case study. We show in detail how the case study can be expressed using these approaches and discuss strengths and weaknesses of the two approaches with regard to the case study.},
booktitle = {Transactions on Aspect-Oriented Software Development VII: A Common Case Study for Aspect-Oriented Modeling},
pages = {69–114},
numpages = {46}
}

@inproceedings{10.1145/1961258.1961270,
author = {Moser, Thomas and Biffl, Stefan and Winkler, Dietmar},
title = {Process-driven feature modeling for variability management of project environment configurations},
year = {2010},
isbn = {9781450302814},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1961258.1961270},
doi = {10.1145/1961258.1961270},
abstract = {Technical projects environments, i.e., sets of methods and tools that support an engineering project, are software-intensive systems that need to be configured according to software process and project characteristics. Tailored software processes, e.g., based on the V Modell XT framework, specify project process steps and drive method and tool selection with a focus on individual feature requirements. Therefore, feature models can support the automated selection and configuration of methods and tools. For designing an effective and efficient engineering project environment, project managers and engineering domain experts can semantically integrate a given set of engineering tools and project data models in a flexible way. In this paper, we analyze challenges of managing engineering tool variability in context of engineering project environment configurations and present a conceptual approach using semantic modeling of project requirements and tool capabilities.},
booktitle = {Proceedings of the 11th International Conference on Product Focused Software},
pages = {47–50},
numpages = {4},
keywords = {feature modeling, project environment variability management},
location = {Limerick, Ireland},
series = {PROFES '10}
}

@inproceedings{10.1145/3461002.3473067,
author = {Ananieva, Sofia},
title = {Consistent management of variability in space and time},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473067},
doi = {10.1145/3461002.3473067},
abstract = {Development and maintenance of software-intensive systems face major challenges. To cope with an increasing demand for customization, systems need to exist in concurrent variations at a single point in time (i.e., variability in space). Furthermore, as longevity of systems increases, it is necessary to continuously maintain sequential variations due to evolution (i.e., variability in time). Finally, systems are often built from different kinds of artifacts, such as source code or diagrams, that need to be kept consistent. Managing these challenges - the evolution of variable systems composed of heterogeneous artifacts in a consistent and integrated way - is highly demanding for engineers. To tackle the described challenges, we propose an approach for consistent, view-based management of variability in space and time. Therefore, we study, identify, and unify concepts and operations of approaches and tools dealing with variability in space and time to provide a common ground for comparing existing work and encouraging novel solutions. Furthermore, we identify consistency preservation challenges related to view-based evolution of variable systems composed of heterogeneous artifacts, such as the consistent propagation of changes between products, and across the different types of artifacts. We provide a technique for (semi-)automated detection and repair of variability-related inconsistencies. The goal of this doctoral work is to develop an integrated solution for dealing with the described challenges and, thus, advance state of the art towards uniform management of variability in space and time.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {7–12},
numpages = {6},
keywords = {consistency, product lines, variability, version control, views},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/3106195.3106221,
author = {Hayashi, Kengo and Aoyama, Mikio and Kobata, Keiji},
title = {Agile Tames Product Line Variability: An Agile Development Method for Multiple Product Lines of Automotive Software Systems},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106221},
doi = {10.1145/3106195.3106221},
abstract = {This article proposes an agile development method and its management method for multiple product lines of automotive software systems. In product line development, the problem area is divided into the domain engineering and application engineering for delivering diverse products. Now, the development of automotive software requires agility and extreme diversity. Conventional simple product line model could not accommodate the requirements. Therefore, we developed an agile development method for automotive multiple product lines. First, we propose an agile development method for multiple product lines by iteratively reusing process assets in application engineering. To manage the diversity of the products derived from the multiple product lines, we propose a management method which integrates the portfolio management and product development management into the agile development method. We applied the proposed method to the development of multiple product lines for our automotive software systems, and demonstrated a reduction of the cost and complexity of the multiple product lines, and improvement of on-time delivery.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {180–189},
numpages = {10},
keywords = {agile development, automotive software, multiple product lines, portfolio management, process asset, software product line},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@article{10.1016/j.scico.2012.04.009,
author = {Marinho, Fabiana G. and Andrade, Rossana M. C. and Werner, Cl\'{a}udia and Viana, Windson and Maia, Marcio E. F. and Rocha, Lincoln S. and Teixeira, Eld\'{\i}nae and Filho, Jo\~{a}o B. Ferreira and Dantas, Val\'{e}ria L. L. and Lima, Fabr\'{\i}cio and Aguiar, Saulo},
title = {MobiLine: A Nested Software Product Line for the domain of mobile and context-aware applications},
year = {2013},
issue_date = {December, 2013},
publisher = {Elsevier North-Holland, Inc.},
address = {USA},
volume = {78},
number = {12},
issn = {0167-6423},
url = {https://doi.org/10.1016/j.scico.2012.04.009},
doi = {10.1016/j.scico.2012.04.009},
abstract = {Mobile devices are multipurpose and multi-sensor equipments supporting applications able to adapt their behavior according to changes in the user's context (device, location, time, etc.). Meanwhile, the development of mobile and context-aware software is not a simple task, mostly due to the peculiar characteristics of these devices. Although several solutions have been proposed to facilitate their development, reuse is not systematically used throughout the software development life-cycle. In this paper, we discuss an approach for the development of mobile and context-aware software using the Software Product Line (SPL) paradigm. Furthermore, a Nested SPL for the domain of mobile and context-aware applications is presented, lessons learned in the SPL development are discussed and a product for a context-aware visit guide is shown.},
journal = {Sci. Comput. Program.},
month = dec,
pages = {2381–2398},
numpages = {18},
keywords = {Context-awareness, Mobility, Software product line}
}

@inproceedings{10.1145/3336294.3336314,
author = {Asano, Masaki and Nishiura, Yoichi and Nakanishi, Tsuneo and Fujiwara, Keiichi},
title = {Feature Oriented Refinement from Requirements to System Decomposition: Quantitative and Accountable Approach},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336314},
doi = {10.1145/3336294.3336314},
abstract = {This paper presents the revised domain engineering process to develop product lines of automotive body parts in Aisin Seiki Co., Ltd. In the process, feature analysis is conducted by a limited number of engineers with talent of abstraction and separation and other work including specifications and architecture design is conducted by average engineers who know the products. Feature analysis defines a hierarchy of abstraction, achieves separation of concerns, and disciplines other artifacts to follow the structure of abstraction and separation. Requirements and specifications are refined by the use case, use case scenario, and hierarchical tabular description (USDM) in a step-wise manner. The specification in USDM is refined to a system decomposition in a quantitative and accountable manner using the robustness diagram and design structure matrix. The revised domain engineering process reduced the issues pointed out in software reviews concerning errors on specifications and architecture design. Moreover, it reduced lead time for architecture design and produced the architecture tolerant to changes.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {195–205},
numpages = {11},
keywords = {automotive body parts, design structure matrix, feature analysis, robustness analysis, software product lines, use case approach},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3109729.3109751,
author = {Krieter, Sebastian and Pinnecke, Marcus and Kr\"{u}ger, Jacob and Sprey, Joshua and Sontag, Christopher and Th\"{u}m, Thomas and Leich, Thomas and Saake, Gunter},
title = {FeatureIDE: Empowering Third-Party Developers},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109751},
doi = {10.1145/3109729.3109751},
abstract = {FeatureIDE is a popular open-source tool for modeling, implementing, configuring, and analyzing software product lines. However, FeatureIDE's initial design was lacking mechanisms that facilitate extension and reuse of core implementations. In current releases, we improve these traits by providing a modular concept for core data structures and functionalities. As a result, we are facilitating the usage of external implementations for feature models and file formats within FeatureIDE. Additionally, we provide a Java library containing FeatureIDE's core functionalities, including feature modeling and configuration. This allows developers to use these functionalities in their own tools without relying on external dependencies, such as the Eclipse framework.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {42–45},
numpages = {4},
keywords = {Software product line, configuration, feature modeling, feature-oriented software development},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2648511.2648542,
author = {Hellebrand, Robert and Silva, Adeline and Becker, Martin and Zhang, Bo and Sierszecki, Krzysztof and Savolainen, Juha},
title = {Coevolution of variability models and code: an industrial case study},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648542},
doi = {10.1145/2648511.2648542},
abstract = {In Software Engineering, reuse of artifacts is essential for high productivity. Different studies have shown that efficient reuse needs systematic planning and realization. Variability Management plays a key role in Software Product Line Engineering. We investigate code artifacts and variability models of a real-world Software Product Line over time in order to clarify whether code and variability model evolve congeneric. Furthermore, we suggest and test metrics that would allow detecting variability erosion in the code based on changes in the variability model.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {274–283},
numpages = {10},
keywords = {coevolution, feature models, metrics, product line evolution},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3461001.3471142,
author = {Gu\'{e}gain, \'{E}douard and Quinton, Cl\'{e}ment and Rouvoy, Romain},
title = {On reducing the energy consumption of software product lines},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471142},
doi = {10.1145/3461001.3471142},
abstract = {Along the last decade, several studies considered green software design as a key development concern to improve the energy efficiency of software. Yet, few techniques address this concern for Software Product Lines (SPL). In this paper, we therefore introduce two approaches to measure and reduce the energy consumption of a SPL by analyzing a limited set of products sampled from this SPL. While the first approach relies on the analysis of individual feature consumptions, the second one takes feature interactions into account to better mitigate energy consumption of resulting products.Our experimental results on a real-world SPL indicate that both approaches succeed to produce significant energy improvements on a large number of products, while consumption data was modeled from a small set of sampled products. Furthermore, we show that taking feature interactions into account leads to more products improved with higher energy savings per product.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {89–99},
numpages = {11},
keywords = {consumption, energy, measurement, mitigation, software product lines},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3461002.3473944,
author = {Ballesteros, Joaqu\'{\i}n and Fuentes, Lidia},
title = {Transfer learning for multiobjective optimization algorithms supporting dynamic software product lines},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473944},
doi = {10.1145/3461002.3473944},
abstract = {Dynamic Software Product Lines (DSPLs) are a well-accepted approach for self-adapting Cyber-Physical Systems (CPSs) at run-time. The DSPL approaches make decisions supported by performance models, which capture system features' contribution to one or more optimization goals. Combining performance models with Multi-Objectives Evolutionary Algorithms (MOEAs) as decision-making mechanisms is common in DSPLs. However, MOEAs algorithms start solving the optimization problem from a randomly selected population, not finding good configurations fast enough after a context change, requiring too many resources so scarce in CPSs. Also, the DSPL engineer must deal with the hardware and software particularities of the target platform in each CPS deployment. And although each system instantiation has to solve a similar optimization problem of the DSPL, it does not take advantage of experiences gained in similar CPS. Transfer learning aims at improving the efficiency of systems by sharing the previously acquired knowledge and applying it to similar systems. In this work, we analyze the benefits of transfer learning in the context of DSPL and MOEAs testing on 8 feature models with synthetic performance models. Results are good enough, showing that transfer learning solutions dominate up to 71% of the non-transfer learning ones for similar DSPL.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {51–59},
numpages = {9},
keywords = {cyber-physical systems, dynamic software product lines, multiobjective optimization algorithms, self-adaptation, transfer learning},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/2491627.2491629,
author = {Clements, Paul and Krueger, Charles and Shepherd, James and Winkler, Andrew},
title = {A PLE-based auditing method for protecting restricted content in derived products},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491629},
doi = {10.1145/2491627.2491629},
abstract = {Many organizations that produce a portfolio of products for different customers need to ensure that sensitive or restricted content that may appear in some products must not appear in others. Examples of this need include complying with statutes in different countries of sale, protection of intellectual property developed specifically for one customer, and more. For organizations operating under these requirements and producing their products under a product line engineering paradigm that relies on automation in product derivation, there is a need for a method to ensure that the content restrictions have been met in the derived products. This paper describes an auditing method that meets this need. It was created for use in the Second Generation Product Line Engineering approach that is being applied by Lockheed Martin in their AEGIS ship combat system product line.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {218–226},
numpages = {9},
keywords = {bill-of-features, feature modeling, feature profiles, hierarchical product lines, product audit, product baselines, product configurator, product derivation, product line engineering, product portfolio, second generation product line engineering, software product lines, variation points},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/3233027.3233044,
author = {Al-Hajjaji, Mustafa and Schulze, Michael and Ryssel, Uwe},
title = {Similarity analysis of product-line variants},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233044},
doi = {10.1145/3233027.3233044},
abstract = {Many existing approaches have exploited the similarity notion to analyze software systems. In product-line engineering, similarity notion has been considered to fulfill analysis objectives, such as improving the testing effectiveness and reducing the testing efforts. However, most of the existing approaches consider in the similarity measurement only information of high level of abstraction, such as the feature selections of variants. In this paper, we present the notion of similarity in product-line engineering using different types of problem-space as well as solution-space information. In particular, we discuss different scenarios of measuring the similarity between variants and the possibility of combining different types of information to output the similarity between the compared variants. Moreover, we realized these scenarios in the industrial variant management tool pure::variants to fulfill analysis functionalities.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {226–235},
numpages = {10},
keywords = {highly configurable systems, similarity, software product lines, variants analysis},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2019136.2019172,
author = {Zhang, Guoheng and Ye, Huilin and Lin, Yuqing},
title = {Using knowledge-based systems to manage quality attributes in software product lines},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019172},
doi = {10.1145/2019136.2019172},
abstract = {Product configuration in a feature model in software product line engineering is a process, in which the desired features are selected based on the customers' functional requirements and non-functional requirements. The functional requirements of the target product can be satisfied by including the proper functional features. However, there is no such a straightforward way to realize the non-functional requirements and quality attributes of the target product. In our early work, we have developed a quantitative based method to assess the quality attributes for a configured product. However, this approach cannot adequately represent the inter-relationships among quality attributes which play an important role in product configuration process. We supplement our previous work by introducing a quality attribute knowledge base (QA_KB) to represent the inter-relationships among different quality attributes in a SPL. Furthermore, we develop algorithms for configuring a product based on customers' quality requirements. We also use a case study to illustrate our approach.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {32},
numpages = {7},
keywords = {feature model, non-functional requirements, product configuration, quality attributes, software product line},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/2499777.2500725,
author = {Varshosaz, Mahsa and Khosravi, Ramtin},
title = {Discrete time Markov chain families: modeling and verification of probabilistic software product lines},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500725},
doi = {10.1145/2499777.2500725},
abstract = {Software product line engineering (SPLE) enables systematic reuse in development of a family of related software systems by explicitly defining commonalities and variabilities among the individual products in the family. Nowadays, SPLE is used in a variety of complex domains such as avionics and automotive. As such domains include safety critical systems which exhibit probabilistic behavior, there is a major need for modeling and verification approaches dealing with probabilistic aspects of systems in the presence of variabilities. In this paper, we introduce a mathematical model, Discrete Time Markov Chain Family (DTMCF), which compactly represents the probabilistic behavior of all the products in the product line. We also provide a probabilistic model checking method to verify DTMCFs against Probabilistic Computation Tree Logic (PCTL) properties. This way, instead of verifying each product individually, the whole family is model checked at once, resulting in the set of products satisfying the desired property. This reduces the required cost for model checking by eliminating redundant processing caused by the commonalities among the products.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {34–41},
numpages = {8},
keywords = {probabilistic model checking, software product line, variable discrete time Markov chains},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/2491627.2491631,
author = {Myll\"{a}rniemi, Varvana and Savolainen, Juha and M\"{a}nnist\"{o}, Tomi},
title = {Performance variability in software product lines: a case study in the telecommunication domain},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491631},
doi = {10.1145/2491627.2491631},
abstract = {In the research on software product lines, product variants typically differ by their functionality, and quality attributes are more or less similar across products. To accumulate empirical evidence, this paper presents a descriptive case study of performance variability in a software product line of mobile network base stations. The goal is to study the motivation to vary performance, and the strategy for realizing performance variability in the product line architecture. The results highlight that the evolution of customer needs motivates performance variability; performance variability can be realized either with software or hardware variability strategy, with the latter often being prevailing; and the software strategy can be kept focused by downgrading performance.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {32–41},
numpages = {10},
keywords = {architecture, case study, software product line, variability},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/3307630.3342392,
author = {Entekhabi, Sina and Solback, Anton and Stegh\"{o}fer, Jan-Philipp and Berger, Thorsten},
title = {Visualization of Feature Locations with the Tool FeatureDashboard},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342392},
doi = {10.1145/3307630.3342392},
abstract = {Modern development processes and issue trackers often use the notion of features to manage a software system. Features allow communicating system characteristics across stakeholders and keeping an overview understanding---especially important for systems that exist in many different variants. However, maintaining, evolving or reusing features (e.g., propagating across variants, or integrating into a platform) requires knowing their locations to prevent extensive feature-location recovery. We advocate the use of embedded annotations, added directly into software assets by the developers during development. To support this process and provide immediate benefits to developers when using such annotations, we present the open-source tool FeatureDashboard. It extracts and visualizes features and their locations using different views and metrics. As such, it encourages developers recording features and their locations early, to prevent feature identification and location efforts, as well as it supports system comprehension.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {1–4},
numpages = {4},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2377816.2377821,
author = {Garcia-Alonso, Jose and Olmeda, Javier Berrocal and Murillo, Juan Manuel},
title = {Architectural variability management in multi-layer web applications through feature models},
year = {2012},
isbn = {9781450313094},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2377816.2377821},
doi = {10.1145/2377816.2377821},
abstract = {The development of large web applications has focused on the use of increasingly complex architectures based on the layer architectural pattern and different development frame-works. Many techniques have been proposed to deal with this increasing complexity, mostly in the field of model-based development which abstracts the architects and designers from the architectural and technological complexities. However, these techniques do not take into account the great variability of these architectures, and therefore limit the architectural options available for their users. We here describe a feature model that captures the architectural and technological variability of multilayer applications. Using this feature model as the core of a model-driven development process, we are able to incorporate architectural and technological variability into the model-based development of multilayer applications. This approach keeps complexity under control whilst flexibility on choosing technologies is not penalized},
booktitle = {Proceedings of the 4th International Workshop on Feature-Oriented Software Development},
pages = {29–36},
numpages = {8},
keywords = {design patterns, development frameworks, feature model, model-driven development, multilayer architectures},
location = {Dresden, Germany},
series = {FOSD '12}
}

@inproceedings{10.1145/3461002.3473940,
author = {Sundermann, Chico and He\ss{}, Tobias and Engelhardt, Dominik and Arens, Rahel and Herschel, Johannes and Jedelhauser, Kevin and Jutz, Benedikt and Krieter, Sebastian and Schaefer, Ina},
title = {Integration of UVL in FeatureIDE},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473940},
doi = {10.1145/3461002.3473940},
abstract = {Variability models are prevalent for specifying the commonalities and variabilities of configurable systems. A large variety of tools support using, editing, and analyzing variability models. However, the different tools often depend on distinct textual notations to store and read variability models which induces a large effort for researchers and practitioners. This additional effort could be reduced if the community adopted a single format. Following the goal of the MODEVAR initiative to develop a widely adopted variability language, we provided a first proposal with the Universal Variability language (UVL) in previous work. For a textual format to be adopted, an important aspect is an as small as possible effort when integrating the format in other tools. In this work, we discuss the integration of UVL in FeatureIDE. We use the integration to examine the applicability of UVL and our parser library to existing tools and gather further requirements for the language design. Furthermore, we provide a thorough documentation on the implementation to be used as reference and guidance for integration in other tools.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {73–79},
numpages = {7},
keywords = {exchange format, software product lines, unified language, variability language, variability modeling},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/2648511.2648550,
author = {Dillon, Michael and Rivera, Jorge and Darbin, Rowland},
title = {A methodical approach to product line adoption},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648550},
doi = {10.1145/2648511.2648550},
abstract = {The evolution of the U.S. Army's Live Training Transformation (LT2) product line of combat training systems, including the move by the Army to consolidate management of the product line under a single contracting team, has provided a natural experiment that validates the hypothesis that product line engineering practices are more effective than traditional software engineering practices, and has demonstrated which product line adoption approaches are more successful than others. By analyzing this natural experiment, the product line team has been able to apply a methodical approach to product line adoption across the development organization and successfully adopt second generation product line processes. This paper explores that methodical approach. It will enumerate the steps that led to successes and explore the contributing factors and unintended consequences of failures along the way. Additionally this paper will explore how this approach is being employed to extend the LT2 product line beyond software.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {340–349},
numpages = {10},
keywords = {bill-of-features, feature constraints hierarchical product lines, feature modeling, feature profiles, product baselines, product configurator, product line adoption, product line engineering, product line governance, product portfolio, second generation product line engineering, software product lines, variation points},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3233027.3233056,
author = {Beuche, Danilo and Hajjaji, Mustafa Al},
title = {Using feature models to manage variability and requirements reuse},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233056},
doi = {10.1145/3233027.3233056},
abstract = {In this paper, we give abrief overview on the tutorial "Using Feature Models to Manage Variability and Requirements Reuse".},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {305},
numpages = {1},
keywords = {feature models, product lines, requirements, variability},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3365438.3410989,
author = {Jongeling, Robbert and Cicchetti, Antonio and Ciccozzi, Federico and Carlson, Jan},
title = {Co-evolution of simulink models in a model-based product line},
year = {2020},
isbn = {9781450370196},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3365438.3410989},
doi = {10.1145/3365438.3410989},
abstract = {Co-evolution of metamodels and conforming models is a known challenge in model-driven engineering. A variation of co-evolution occurs in model-based software product line engineering, where it is needed to efficiently co-evolve various products together with the single common platform from which they are derived. In this paper, we aim to alleviate manual efforts during this co-evolution process in an industrial setting where Simulink models are partially reused across various products. We propose and implement an approach providing support for the co-evolution of reusable model fragments. A demonstration on a realistic example model shows that our approach yields a correct co-evolution result and is feasible in practice, although practical application challenges remain. Furthermore, we discuss insights from applying the approach within the studied industrial setting.},
booktitle = {Proceedings of the 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems},
pages = {263–273},
numpages = {11},
keywords = {change propagation, clone management, co-evolution, model-driven engineering, software product line engineering},
location = {Virtual Event, Canada},
series = {MODELS '20}
}

@inproceedings{10.1145/3236405.3237202,
author = {Krafczyk, Adam and El-Sharkawy, Sascha and Schmid, Klaus},
title = {Reverse engineering code dependencies: converting integer-based variability to propositional logic},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3237202},
doi = {10.1145/3236405.3237202},
abstract = {A number of SAT-based analysis concepts and tools for software product lines exist, that extract code dependencies in propositional logic from the source code assets of the product line. On these extracted conditions, SAT-solvers are used to reason about the variability. However, in practice, a lot of software product lines use integer-based variability. The variability variables hold integer values, and integer operators are used in the conditions. Most existing analysis tools can not handle this kind of variability; they expect pure Boolean conditions.This paper introduces an approach to convert integer-based variability conditions to propositional logic. Running this approach as a preparation on an integer-based product line allows the existing SAT-based analyses to work without any modifications. The pure Boolean formulas, that our approach builds as a replacement for the integer-based conditions, are mostly equivalent to the original conditions with respect to satisfiability. Our approach was motivated by and implemented in the context of a real-world industrial case-study, where such a preparation was necessary to analyze the variability.Our contribution is an approach to convert conditions, that use integer variables, into propositional formulas, to enable easy usage of SAT-solvers on the result. It works well on restricted variables (i.e. variables with a small range of allowed values); unrestricted integer variables are handled less exact, but still retain useful variability information.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {34–41},
numpages = {8},
keywords = {integer-based expressions, propositional logic, reverse engineering, satisfiability, software product lines, variability management},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3382025.3414949,
author = {Chavarriaga, Jaime and Hurtado, Julio Ariel},
title = {Third International Workshop on Experiences and Empirical Studies on Software Reuse (WEESR 2020)},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414949},
doi = {10.1145/3382025.3414949},
abstract = {The Workshop on Experiences and Empirical Studies on Software Reuse (WEESR) aims to allow researchers and practitioners discuss in-progress research regarding experiences and empirical studies applying reuse techniques in non-academic environments. The third edition of this workshop, the WEESR 2020, was co-located with the Software Product Lines Conference at 2020 (SPLC'20). There, attendants discussed three original papers and a journal-first paper presenting empirical studies, reuse in companies not aware of software product lines, systematic reviews and evaluations of companies interested on adopting product lines. In addition, we have two invited talks of Sten Gr\"{u}ner and Thorsten Berger discussing experiences and challenges found in companies adopting SPLE for their products.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {37},
numpages = {1},
keywords = {empirical software engineering, software reuse},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3461002.3473943,
author = {Mortara, Johann and T\"{e}rnava, Xhevahire and Collet, Philippe and Pinna-Dery, Anne-Marie},
title = {Extending the identification of object-oriented variability implementations using usage relationships},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473943},
doi = {10.1145/3461002.3473943},
abstract = {Many variability-rich object-oriented systems rely on multiple traditional techniques (inheritance, patterns) to implement their variability in a single codebase. These variability implementation places are neither explicit nor documented, hampering their detection and variability comprehension. Based on the identification of symmetry property in seven implementation techniques, a first approach was proposed with symfinder to automatically identify and display the variability of a system in a graph-based visualization structured by inheritance. However, composition, or more generally the usage relationship, is extensively used to implement the variability in object-oriented systems, and without this information, comprehending the large amount of variability identified by symfinder is not trivial. In this paper, we present symfinder-2, an extension of the former approach that incorporates the usage relationships to better identify potential variability implementations. We provide two ways to mark classes as entry points, user-defined and automatic, so that the visualization is filtered and enables users to have a better focus when they identify variability. We also report on the evaluation of this extension to ten open-source Java-based systems.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {91–98},
numpages = {8},
keywords = {symfinder, variability identification, variability visualization, variability-rich object-oriented software systems},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1109/HICSS.2016.721,
author = {Tzeremes, Vasilios and Gomaa, Hassan},
title = {XANA: An End User Software Product Line Framework for Smart Spaces},
year = {2016},
isbn = {9780769556703},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/HICSS.2016.721},
doi = {10.1109/HICSS.2016.721},
abstract = {This paper describes XANA, an end user development framework that extends existing end user development tools for smart spaces with software product line concepts. The framework targets two types of users: the Software Product Line (SPL) designers and the end users. SPL designers use XANA's product line creation interface to create the software product line for end users. The product line creation interface allows SPL designers to capture the product line's feature model, the component design that implements each feature and the product line architecture. End users using XANA's application derivation interface select the features needed for their smart spaces and generate software applications from the product line previously created. In this paper we present the phases and operational semantics of XANA. We illustrate its use with a case study. The paper presents a preliminary user study that was conducted to assess the usability of the framework.},
booktitle = {Proceedings of the 2016 49th Hawaii International Conference on System Sciences (HICSS)},
pages = {5831–5840},
numpages = {10},
series = {HICSS '16}
}

@inproceedings{10.1109/ICSE-C.2017.15,
author = {Martinez, Jabier and Ziadi, Tewfik and Bissyand\'{e}, Tegawend\'{e} F. and Klein, Jacques and Traon, Yves Le},
title = {Bottom-up technologies for reuse: automated extractive adoption of software product lines},
year = {2017},
isbn = {9781538615898},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-C.2017.15},
doi = {10.1109/ICSE-C.2017.15},
abstract = {Adopting Software Product Line (SPL) engineering principles demands a high up-front investment. Bottom-Up Technologies for Reuse (BUT4Reuse) is a generic and extensible tool aimed to leverage existing similar software products in order to help in extractive SPL adoption. The envisioned users are 1) SPL adopters and 2) Integrators of techniques and algorithms to provide automation in SPL adoption activities. We present the methodology it implies for both types of users and we present the validation studies that were already conducted. BUT4Reuse tool and source code are publicly available under the EPL license.Website: http://but4reuse.github.ioVideo: https://www.youtube.com/watch?v=pa62Yc9LWyk},
booktitle = {Proceedings of the 39th International Conference on Software Engineering Companion},
pages = {67–70},
numpages = {4},
keywords = {extractive software product line adoption, reverse engineering, software product line engineering, variability management},
location = {Buenos Aires, Argentina},
series = {ICSE-C '17}
}

@inproceedings{10.1109/APSEC.2004.52,
author = {Kurakawa, Kei},
title = {Feature Modeling from Holistic Viewpoints in Product Line Engineering},
year = {2004},
isbn = {0769522459},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/APSEC.2004.52},
doi = {10.1109/APSEC.2004.52},
abstract = {In order to obtain a high level of software productivity, methods to promote software reuse have been studied for several decades. An example of the methods is to reuse subroutines in a program code. Another example is to reuse generic libraries that have been built for generic purpose. These methods to reuse generic libraries need intensive efforts to prepare the generic libraries because the libraries must be made for a variety of purposes in a variety of use cases.},
booktitle = {Proceedings of the 11th Asia-Pacific Software Engineering Conference},
pages = {579},
numpages = {1},
series = {APSEC '04}
}

@inproceedings{10.1145/3233027.3233049,
author = {Horcas, Jose-Miguel and Corti\~{n}as, Alejandro and Fuentes, Lidia and Luaces, Miguel R.},
title = {Integrating the common variability language with multilanguage annotations for web engineering},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233049},
doi = {10.1145/3233027.3233049},
abstract = {Web applications development involves managing a high diversity of files and resources like code, pages or style sheets, implemented in different languages. To deal with the automatic generation of custom-made configurations of web applications, industry usually adopts annotation-based approaches even though the majority of studies encourage the use of composition-based approaches to implement Software Product Lines. Recent work tries to combine both approaches to get the complementary benefits. However, technological companies are reticent to adopt new development paradigms such as feature-oriented programming or aspect-oriented programming. Moreover, it is extremely difficult, or even impossible, to apply these programming models to web applications, mainly because of their multilingual nature, since their development involves multiple types of source code (Java, Groovy, JavaScript), templates (HTML, Markdown, XML), style sheet files (CSS and its variants, such as SCSS), and other files (JSON, YML, shell scripts). We propose to use the Common Variability Language as a composition-based approach and integrate annotations to manage fine grained variability of a Software Product Line for web applications. In this paper, we (i) show that existing composition and annotation-based approaches, including some well-known combinations, are not appropriate to model and implement the variability of web applications; and (ii) present a combined approach that effectively integrates annotations into a composition-based approach for web applications. We implement our approach and show its applicability with an industrial real-world system.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {196–207},
numpages = {12},
keywords = {CVL, SPL, annotations, automation, composition, variability, web engineering},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1007/11767718_28,
author = {Chang, Soo Ho and Kim, Soo Dong and Rhew, Sung Yul},
title = {A variability-centric approach to instantiating core assets in product line engineering},
year = {2006},
isbn = {3540346821},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/11767718_28},
doi = {10.1007/11767718_28},
abstract = {As a key activity in product line engineering (PLE), instantiation is a task to generate target applications by resolving variability embedded in core assets. However, instantiation is often conducted in manual and ad-hoc fashion, largely replying on domain knowledge and experience. Hence, it can easily lead to technical problems in precisely specifying decision model consisting of product-specific variation points and variants, and in handling inter-variant conflicts/dependency. To overcome this difficulty, it is desirable to develop a systematic process which includes a set of systematic activities, detailed instructions, and concrete specification of artifacts. In this paper, we first propose a meta-model of a core asset to specify its key elements. Then, we represent a comprehensive process that defines key instantiation activities, representations of artifacts, and work instructions. With the proposed process, one can instantiate core assets more effectively and systematically.},
booktitle = {Proceedings of the 7th International Conference on Product-Focused Software Process Improvement},
pages = {334–347},
numpages = {14},
location = {Amsterdam, The Netherlands},
series = {PROFES'06}
}

@inproceedings{10.1145/3336294.3336313,
author = {Fernandez-Amoros, David and Heradio, Ruben and Mayr-Dorn, Christoph and Egyed, Alexander},
title = {A Kconfig Translation to Logic with One-Way Validation System},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336313},
doi = {10.1145/3336294.3336313},
abstract = {Automated analysis of variability models is crucial for managing software system variants, customized for different market segments or contexts of use. As most approaches for automated analysis are built upon logic engines, they require having a Boolean logic translation of the variability models. However, the translation of some significant languages to Boolean logic is remarkably non-trivial. The contribution of this paper is twofold: first, a translation of the Kconfig language is presented; second, an approach to test the translation for any given model is provided. The proposed translation has been empirically tested with the introduced validation procedure on five open-source projects.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {303–308},
numpages = {6},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2934466.2956653,
author = {Mannion, Mike},
title = {Software reuse and reusability based on requirements: product lines, cases and feature-similarity models},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2956653},
doi = {10.1145/2934466.2956653},
abstract = {This tutorial compares two requirements-led approaches to strengthen product line engineering and case-based reasoning, and introduces the notion of a feature-similarity Model for combining these approaches.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {312},
numpages = {1},
keywords = {requirements, reuse},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2647908.2655963,
author = {Collet, Philippe and Mosser, S\'{e}bastien and Urli, Simon and Blay-Fornarino, Mireille and Lahire, Philippe},
title = {Experiences in teaching variability modeling and model-driven generative techniques},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655963},
doi = {10.1145/2647908.2655963},
abstract = {Teaching software engineering is an activity that needs to constantly evolve to cope with new paradigms, principles and techniques. In this paper, we briefly report on several years of experience in teaching both generative techniques in a model-driven engineering context and variability modeling related to software-product line engineering. Our current practice relies on making students progress on running projects that they evolve with different techniques along a semester. We also discuss the obtained benefits and some perspectives.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {26–29},
numpages = {4},
keywords = {model-driven engineering, software product line, teaching, variability modeling},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3461001.3472733,
author = {Mortara, Johann and Collet, Philippe},
title = {How I met your implemented variability: identification in object-oriented systems with symfinder},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3472733},
doi = {10.1145/3461001.3472733},
abstract = {Variability-rich object-oriented systems are often not organized as fully-fledged software product lines, and implement their variability in a single code base using the mechanisms provided by the supporting language (e.g., inheritance overloading, design patterns). This makes variability identification and management very difficult. In this half-day tutorial open to both academics and industrials, we present how the symfinder toolchain can help one to better understand how variability is implemented in a single codebase Java system, relying solely on a specific code analysis and an adapted visualization. After presenting the underlying concepts on which symfinder is based (i.e., symmetries in code, density), the participants will be able to use the toolchain and visualize the potential variation points and variants identified by symfinder in their own projects or in provided large-scale open-source projects.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {208},
numpages = {1},
keywords = {symfinder, variability, variability identification, visualization},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3307630.3342404,
author = {Th\"{u}m, Thomas and Seidl, Christoph and Schaefer, Ina},
title = {On Language Levels for Feature Modeling Notations},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342404},
doi = {10.1145/3307630.3342404},
abstract = {Configuration is a key enabling technology for the engineering of systems and software as wells as physical goods. A selection of configuration options (aka. features) is often enough to automatically generate a product tailored to the needs of a customer. It is common that not all combinations of features are possible in a given domain. Feature modeling is the de-facto standard for specifying features and their valid combinations. However, a pivotal hurdle for practitioners, researchers, and teachers in applying feature modeling is that there are hundreds of tools and languages available. While there have been first attempts to define a standard feature modeling language, they still struggle with finding an appropriate level of expressiveness. If the expressiveness is too high, the language will not be adopted, as it is too much effort to support all language constructs. If the expressiveness is too low, the language will not be adopted, as many interesting domains cannot be modeled in such a language. Towards a standard feature modeling notation, we propose the use of language levels with different expressiveness each and discuss criteria to be used to define such language levels. We aim to raise the awareness on the expressiveness and eventually contribute to a standard feature modeling notation.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {158–161},
numpages = {4},
keywords = {automated analysis, expressiveness, feature model, language design, product lines, variability modeling},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2648511.2648541,
author = {Gregg, Susan P. and Scharadin, Rick and LeGore, Eric and Clements, Paul},
title = {Lessons from AEGIS: organizational and governance aspects of a major product line in a multi-program environment},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648541},
doi = {10.1145/2648511.2648541},
abstract = {This paper tells the story of the AEGIS Weapon System product line and how it evolved from a series of standalone software programs with no sharing into a true systems and software product line. The paper focuses on the strong internal and external governance of the product line. The need for strong governance is brought about by the strong role that the AEGIS customer community plays in oversight of design, development, and procurement. The paper recounts the product line's beginnings, and describes how the product line is operated today. Organizational issues, measurement issues, and governance issues are covered, along with a summary of important lessons learned about operating a product line in an environment of strong competing interests.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {264–273},
numpages = {10},
keywords = {AEGIS, Navy, bill-of-features, combat systems, command and control, feature modeling, feature profiles, hierarchical product lines, product audit, product baselines, product configurator, product derivation, product line engineering, product line governance, product portfolio, second generation product line engineering, software product lines, variation points},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2934466.2934478,
author = {Galindo, Jos\'{e} A. and Acher, Mathieu and Tirado, Juan Manuel and Vidal, Cristian and Baudry, Benoit and Benavides, David},
title = {Exploiting the enumeration of all feature model configurations: a new perspective with distributed computing},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934478},
doi = {10.1145/2934466.2934478},
abstract = {Feature models are widely used to encode the configurations of a software product line in terms of mandatory, optional and exclusive features as well as propositional constraints over the features. Numerous computationally expensive procedures have been developed to model check, test, configure, debug, or compute relevant information of feature models. In this paper we explore the possible improvement of relying on the enumeration of all configurations when performing automated analysis operations. We tackle the challenge of how to scale the existing enumeration techniques by relying on distributed computing. We show that the use of distributed computing techniques might offer practical solutions to previously unsolvable problems and opens new perspectives for the automated analysis of software product lines.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {74–78},
numpages = {5},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3233027.3233051,
author = {N\"{o}bauer, Markus and Groher, Iris and Seyff, Norbert},
title = {Feature-based reuse in the ERP domain: an industrial case study},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233051},
doi = {10.1145/3233027.3233051},
abstract = {Enterprise Resource Planning (ERP) system vendors need to customize their products according to the domain-specific requirements of their customers. Systematic reuse of features and related ERP product customizations would improve software quality and save implementation time. In our previous research, we have developed a tool-based approach supporting feature-based reuse of ERP product customizations. Our tool environment automatically infers reusable features from requirements and their associated implementation artifacts. Furthermore, it allows domain experts to search for features based on natural language requirement descriptions representing the needs of new customers. Matching features can be automatically deployed to a new ERP product. In this paper, we present an industrial evaluation of our tool-based approach conducted together with an Austrian small- to medium-sized enterprise. A domain expert used our approach to identify matching features for 20 randomly selected requirements for new customer products and identified matching features for 17 of the 20 requirements. We compared the time needed to identify and deploy the candidate features with the time required to implement the requirements from scratch. We found that, in total, over 60% implementation time can be saved by applying our reuse approach presented in this case study.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {170–178},
numpages = {9},
keywords = {ERP systems, case study, feature, reuse, variability},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3382026.3431253,
author = {Schwarz, Tobias and Mahmood, Wardah and Berger, Thorsten},
title = {A Common Notation and Tool Support for Embedded Feature Annotations},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3431253},
doi = {10.1145/3382026.3431253},
abstract = {Features are typically used to describe the functionalities of software systems. They help understanding systems as well as planning their evolution and managing systems. Especially agile methods foster their use. However, to use features, their locations need to be known. When not documented, they are easily forgotten and then need to be recovered, which is costly. While automated feature-location techniques exist, they are not usable in practice given their inaccuracies. We take a different route and advocate to record locations early using a lightweight annotation system, where feature information is embedded in software assets. However, given the potential design space of annotations, a unified notation and tool support is needed. Extending our prior work, we present a unified, concise notation for embedded annotations, which we implemented in FAXE, a library for parsing and retrieving such annotations, use-able in third-party tooling. We demonstrate its use, especially for an advanced use case of feature-oriented isolated development by automating partial commits.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {5–8},
numpages = {4},
keywords = {embedded annotations, feature location, partial commits},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.5555/1317531.1318005,
author = {Satyananda, Tonny Kurniadi and Lee, Danhyung and Kang, Sungwon},
title = {A Formal Approach to Verify Mapping Relation in a Software Product Line},
year = {2007},
isbn = {0769529836},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {In software product line development, consistency among artifacts is important because commonalities and variabilities increase the complexity of relations among artifacts. For small scale models, the relations among elements can be easily identified and tracked by manually analyzing the descriptions of models. But when the complexity of models is high, a more systematic approach is required for identifying traceability information and verifying consistency between models. In this paper, by utilizing Formal Concept Analysis (FCA) and Prototype Verification System (PVS), we present a formal approach for identifying traceability and verifying consistency between feature model and component and connector view of software architecture.},
booktitle = {Proceedings of the 7th IEEE International Conference on Computer and Information Technology},
pages = {934–939},
numpages = {6},
series = {CIT '07}
}

@inproceedings{10.1145/3307630.3342402,
author = {Parra, Pablo and Polo, \'{O}scar R. and Esteban, Segundo and Mart\'{\i}nez, Agust\'{\i}n and S\'{a}nchez, Sebasti\'{a}n},
title = {A Component-Based Approach to Feature Modelling},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342402},
doi = {10.1145/3307630.3342402},
abstract = {This paper presents an approach to feature modelling based on the use of modelling constructs from the component-based software development domain. The proposed models allow establishing feature hierarchies, making a clear distinction between the features themselves and their realisations or variants. Furthermore, they enable the definition of complex dependency relationships between the different feature realisations, making it possible to define variable configurations associated with these dependencies. Finally, the approach allows the modelling of product configurations as a set of interconnected and configured feature realisations. The proposal is illustrated with an example based on the on-board satellite software applications domain.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {137–142},
numpages = {6},
keywords = {feature models, software product lines, variability},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3461002.3473950,
author = {Kuiter, Elias and Kr\"{u}ger, Jacob and Saake, Gunter},
title = {Iterative development and changing requirements: drivers of variability in an industrial system for veterinary anesthesia},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473950},
doi = {10.1145/3461002.3473950},
abstract = {Developing a safety-critical embedded system poses a high risk, since such systems must usually comply with (potentially changing) rigorous standards set by customers and legal authorities. To reduce risk and cope with changing requirements, manufacturers of embedded devices increasingly use iterative development processes and prototyping both for hard- and firmware. However, hard- and firmware development are difficult to align in a common process, because hardware development cycles are typically longer and more expensive. Thus, seamlessly transitioning software to new hardware revisions and reusing old hardware revisions can be problematic. In this paper, we describe an industrial case study for veterinary anesthesia in which we also faced this problem. To solve it, we introduced preprocessor-based variability to create a small configurable system that could flexibly adapt to our needs. We discuss our solution, alternative solutions for hardware evolution, as well as their pros and cons. Our experiences generalize an interesting evolution scenario for systems that are planned and delivered as a single system, but exhibited variability to cope with problems during agile development processes.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {113–122},
numpages = {10},
keywords = {case study, configurable system, driver of variability, evolution},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/3382026.3425770,
author = {Feichtinger, Kevin and Meixner, Kristof and Rabiser, Rick and Biffl, Stefan},
title = {Variability Transformation from Industrial Engineering Artifacts: An Example in the Cyber-Physical Production Systems Domain},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3425770},
doi = {10.1145/3382026.3425770},
abstract = {Many variability modeling approaches have been proposed to explicitly represent the commonalities and variability in (software) product lines. Unfortunately, practitioners in industry still develop custom solutions to manage variability of various artifacts, like requirements documents or design spreadsheets. These custom-developed variability representations often miss important variability information, e.g., information required to assemble production goods. In this paper, we introduce the Variability Evolution Roundtrip Transformation (VERT) process. The process enables practitioners from the Cyber-Physical Production Systems domain to transform custom-developed engineering variability artifacts to a feature model, evolve and optimize the model, and transform it back to the original engineering artifacts. We build on an existing transformation approach for variability models and show the feasibility of the process using a real-world use case from an industry partner. We report on an initial feasibility study conducted with our industry partners' domain experts and on lessons learned regarding variability transformation of engineering variability artifacts.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {65–73},
numpages = {9},
keywords = {CPPS, Cyber-Physical Production System Engineering, Feature Extraction, Variability Evolution, Variability Modeling},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3307630.3342405,
author = {Galindo, Jos\'{e} A. and Benavides, David},
title = {Towards a New Repository for Feature Model Exchange},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342405},
doi = {10.1145/3307630.3342405},
abstract = {Feature models are one of the most important contributions to the field of software product lines, feature oriented software development or variability intensive systems. Since their invention in 1990, many feature model dialects appeared from less formal to more formal, from visual to textual, integrated in tool chains or just as a support for a concrete research contribution. Ten year ago, S.P.L.O.T. a feature model online tool was presented. One of its most used features has been the ability to centralise a feature model repository with its own feature model dialect. As a result of MODEVAR, we hope to have a new simple textual feature model language that can be shared by the community. Having a new repository for that language can help to share knowledge. In this paper we present some ideas about the characteristics that the future feature model repository should have in the future. The idea is to discuss those characteristics with the community.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {170–173},
numpages = {4},
keywords = {characteristics, feature model repository, requirements, variability},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3461001.3471145,
author = {Sundermann, Chico and Feichtinger, Kevin and Engelhardt, Dominik and Rabiser, Rick and Th\"{u}m, Thomas},
title = {Yet another textual variability language? a community effort towards a unified language},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471145},
doi = {10.1145/3461001.3471145},
abstract = {Variability models are commonly used to model commonalities and variability in a product line. There is a large variety of textual formats to represent and store variability models. This variety causes overhead to researchers and practitioners as they frequently need to translate models. The MODEVAR initiative consists of dozens of researchers and aims to find a unified language for variability modeling. In this work, we describe the cooperative development of a textual variability language. We evaluate preferences of the community regarding properties of existing formats and applications for an initial design of a unified variability language. Then, we examine the acceptance of the community for our proposal. The results indicate that our proposal is a promising start towards a unified variability language instead of yet another language. We envision that the community applies our language proposal in teaching, research prototypes, and industrial applications to further evolve the design and then ultimately reach a unified language.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {136–147},
numpages = {12},
keywords = {exchange format, software product lines, unified language, variability language, variability modeling},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3382026.3431250,
author = {Tomashchuk, Oleksandr},
title = {Threat and Risk Management Framework for eHealth IoT Applications},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3431250},
doi = {10.1145/3382026.3431250},
abstract = {The impact of the Internet of Things (IoT) on the modern industrial and commercial systems is hard to be underestimated. Almost every domain favours from the benefits that IoT brings, and healthcare does not make an exception. This is also clearly demonstrated by a widespread adoption of eHealth systems that often arise from software product lines. Nevertheless, the benefits that IoT brings come together with new threats and risks.An eHealth system that processes many types of sensitive data sets the context for this thesis. Security and privacy gain crucial importance for successful operation and broad user acceptance of the system because of the properties of the data flows that it initiates and operates. However, due to a large number of feature combinations that originate from the software product line nature of the eHealth system in question, a combinatorial explosion of relevant configurations makes reaching security and privacy goals more difficult. Furthermore, another combinatorial explosion of threats and corresponding mitigation strategies for every configuration complicates the situation even further. Nonetheless, configurations that meet specific risk budgets need to be in place.Within this thesis, a new threat and risk management (TRM) framework will be provided. It is based on STRIDE and LINDDUN methodologies, and it will overcome existing limitations by employing components on feature space modelling, risk-driven scoring, configuration decision support, and regulatory compliance. Research outcomes that have been reached so far show promising developments on the vital framework components.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {120–126},
numpages = {7},
keywords = {de-identification, framework, privacy, risks, security, threats},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3461001.3472728,
author = {Tolvanen, Juha-Pekka and Kelly, Steven},
title = {Describing variability with domain-specific languages and models},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3472728},
doi = {10.1145/3461001.3472728},
abstract = {This tutorial will teach participants about domain-specific languages and models, where they can best be used (and where not), and how to apply them effectively to improve the speed and quality of product development within a product line.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {207},
numpages = {1},
keywords = {domain-specific language, domain-specific modeling, product derivation, product line variability, tutorial},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/2486046.2486056,
author = {Mart\'{\i}nez-Ruiz, Tom\'{a}s and Garc\'{\i}a, F\'{e}lix and Piattini, Mario and De Lucas-Consuegra, Francisco},
title = {Process variability management in global software development: a case study},
year = {2013},
isbn = {9781450320627},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2486046.2486056},
doi = {10.1145/2486046.2486056},
abstract = {Global Software Development (GSD) is set to be the paradigm that will support software industries in the increasingly globalized 21st century. It opens the door to companies from emerging countries to compete for their own gap in the market. It does, however, still bring some challenges with it. It must integrate different cultures, work styles, and work timetables in the same development process. In fact, GSD methodologies do indeed include specific activities to coordinate different work teams, but they fail precisely where any other methodology does: in the need to be truly useful by meeting the distinct cultural requirements of every organization involved, all at the same time. Up to now, process tailoring has been managed through variability mechanisms. Since these successfully merge original structure with cultural assets, they are also useful for adjusting global methodologies so that they suit each particular development context. This paper presents a case study of the use of the Variant-Rich Process paradigm (VRP) to support tailoring in a GSD methodology. It reveals the suitability of the VRP mechanisms, given that they support the two tailoring dimensions a GSD project involves, i.e., they take into account the circumstances of the entire global project, as well as the need to fit the internal characteristics of each organization; furthermore, they save effort in the tailoring process.},
booktitle = {Proceedings of the 2013 International Conference on Software and System Process},
pages = {46–55},
numpages = {10},
keywords = {Global Software Development, Process institutionalization, Process tailoring, Variant-Rich Process paradigm},
location = {San Francisco, CA, USA},
series = {ICSSP '13}
}

@inproceedings{10.1145/2791060.2791104,
author = {Gaeta, Jes\'{u}s Padilla and Czarnecki, Krzysztof},
title = {Modeling aerospace systems product lines in SysML},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791104},
doi = {10.1145/2791060.2791104},
abstract = {As the complexity of avionic systems increases, the aerospace industry is turning to product-line engineering and model-based development to better manage complexity and reduce cost. This paper describes a method and a pattern catalog for modeling avionics product lines in SysML, a standard systems modeling language. The method is designed to satisfy aerospace systems and software development standards, and the patterns provide guidance for expressing variability in SysML. The paper also reports on the experience in applying the method and the patterns to model families of propeller controllers and fuel controllers for turbo engines.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {293–302},
numpages = {10},
keywords = {SysML, UML, embedded software, model-based engineering, product-line engineering, systems engineering, variability modeling},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3382026.3425773,
author = {Galindo, Jos\'{e} A. and Benavides, David},
title = {A Python framework for the automated analysis of feature models: A first step to integrate community efforts},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3425773},
doi = {10.1145/3382026.3425773},
abstract = {Feature modeling is the "de facto" standard to describe the common and variant parts of software product lines. Different tools, approaches, and operations for the automated analysis of feature models (AAFM) have been proposed in the last 20 years. The increasing popularity of languages such as Python made the usage of AAFM techniques require lots of integration efforts with exiting Java-based tools. In this paper, we present a design for a Python-based framework to analyze feature models. This framework implements the most common operations while enabling support for multiple solvers and backends.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {52–55},
numpages = {4},
keywords = {Automated Analysis, Feature Models, Python, Variability Models},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/2362536.2362559,
author = {Gillain, Joseph and Faulkner, Stephane and Heymans, Patrick and Jureta, Ivan and Snoeck, Monique},
title = {Product portfolio scope optimization based on features and goals},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362559},
doi = {10.1145/2362536.2362559},
abstract = {In this paper we propose a mathematical program able to optimize the product portfolio scope of a software product line and sketch both a development and a release planning. Our model is based on the description of customer needs in terms of goals. We show that this model can be instantiated in several contexts such as a market customization strategy or a mass-customization strategy. It can deal with Software Product Line development from scratch as well as starting from a legacy software base. We demonstrate its applicability with an example based on a case study.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {161–170},
numpages = {10},
keywords = {product portfolio, release planning, scoping optimization, software product line},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3233027.3233033,
author = {Li, Yang and Schulze, Sandro and Saake, Gunter},
title = {Reverse engineering variability from requirement documents based on probabilistic relevance and word embedding},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233033},
doi = {10.1145/3233027.3233033},
abstract = {Feature and variability extraction from different artifacts is an indispensable activity to support systematic integration of single software systems and Software Product Line (SPL). Beyond manually extracting variability, a variety of approaches, such as feature location in source code and feature extraction in requirements, has been proposed to provide an automatic identification of features and their variation points. Compared with source code, requirements contain more complete variability information and provide traceability links to other artifacts from early development phases. In this paper, we propose a method to automatically extract features and relationships based on a probabilistic relevance and word embedding. In particular, our technique consists of three steps: First, we apply word2vec to obtain a prediction model, which we use to determine the word level similarity of requirements. Second, based on word level similarity and the significance of a word in a domain, we compute the requirements level similarity using probabilistic relevance. Third, we adopt hierarchical clustering to group features and we define four criteria to detect variation points between identified features. We perform a case study to evaluate the usability and robustness of our method and to compare it with the results of other related approaches. Initial results reveal that our approach identifies the majority of features correctly and also extracts variability information with reasonable accuracy.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {121–131},
numpages = {11},
keywords = {feature identification, requirement documents, reverse engineering, software product lines, variability extraction},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2491627.2491646,
author = {Marijan, Dusica and Gotlieb, Arnaud and Sen, Sagar and Hervieu, Aymeric},
title = {Practical pairwise testing for software product lines},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491646},
doi = {10.1145/2491627.2491646},
abstract = {One key challenge for software product lines is efficiently managing variability throughout their lifecycle. In this paper, we address the problem of variability in software product lines testing. We (1) identify a set of issues that must be addressed to make software product line testing work in practice and (2) provide a framework that combines a set of techniques to solve these issues. The framework integrates feature modelling, combinatorial interaction testing and constraint programming techniques. First, we extract variability in a software product line as a feature model with specified feature interdependencies. We then employ an algorithm that generates a minimal set of valid test cases covering all 2-way feature interactions for a given time interval. Furthermore, we evaluate the framework on an industrial SPL and show that using the framework saves time and provides better test coverage. In particular, our experiments show that the framework improves industrial testing practice in terms of (i) 17% smaller set of test cases that are (a) valid and (b) guarantee all 2-way feature coverage (as opposite to 19.2% 2-way feature coverage in the hand made test set), and (ii) full flexibility and adjustment of test generation to available testing time.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {227–235},
numpages = {9},
keywords = {feature modelling, software product lines, variability management},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2648511.2648523,
author = {Urli, Simon and Blay-Fornarino, Mireille and Collet, Philippe},
title = {Handling complex configurations in software product lines: a tooled approach},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648523},
doi = {10.1145/2648511.2648523},
abstract = {As Software Product Lines (SPLs) are now more widely applied in new application fields such as IT or Web systems, complex and large-scale configurations have to be handled. In these fields, the strong domain orientation leads to the need to manage interrelated SPLs and multiple instances of configured sub-products, resulting in complex configurations that cannot be easily represented by simple sets of features. In this paper we propose a tooled approach to manage such SPLs through a domain model that interrelates several feature models in a consistent way. The approach thus shifts part of the domain knowledge to the problem space and supports the derivation of complex configurations with multiple instantiations and associations of sub-products. We also report on the application of our approach to an industrial-strength software development in the field of digital signage.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {112–121},
numpages = {10},
keywords = {configuration, software product line},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3109729.3109737,
author = {Montalvillo, Leticia and D\'{\i}az, Oscar and Azanza, Maider},
title = {Visualizing product customization efforts for spotting SPL reuse opportunities},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109737},
doi = {10.1145/3109729.3109737},
abstract = {Migrating a set of product variants to a managed SPL is rarely a one-shot effort. Experiences from industry revealed that a complete migration to an SPL might take years, during which customers' requirements still need to be fulfilled by the company (customization effort). Analyzing the assets that have been customized by products (customization analysis) becomes a main stepping stone in ascertaining reuse opportunities. This requires to remain vigilant to arising reuse opportunities not just at the SPL onset, but throughout the whole process. Traditionally, a common mechanism to identify reuse opportunities is the diff utility whereby differences between two files are calculated and displayed. But this mechanism might not scale up. Given the sheer number of both core-assets and SPL products, visualizations that abstract from conventional line-level diffs to higher level visualization are required to spot reuse opportunities a ta glance. To this end, we introduce visualizations that help to estimate the extent of the customization effort broken down by product and core-asset. The aim: a prompt insight into questions such as, how much effort are product developers spending on customization?; or, which core-assets needed a larger tuning to meet product requirements? This vision is realized in CUSTOMS, a visualization utility on top of FeatureHouse that resorts to alluvial diagrams and tree maps to display customization effort. CUSTOMS might serve as a first stepping stone for spotting reuse opportunities.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {73–80},
numpages = {8},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/1964138.1964141,
author = {Tang, Antony and Couwenberg, Wim and Scheppink, Erik and de Burgh, Niels Aan and Deelstra, Sybren and van Vliet, Hans},
title = {SPL migration tensions: an industry experience},
year = {2010},
isbn = {9781450305426},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1964138.1964141},
doi = {10.1145/1964138.1964141},
abstract = {In a software development environment where legacy software systems have been successfully deployed, there are tensions that deter the organization from moving towards software product line engineering (SPLE). An example is the effort required to develop a product line architecture versus time-to-market pressure or the lack of evidence to justify the benefits of SPLE. In this report we discuss the tensions that exist in Oc\'{e} Technologies. A reactive software reuse approach has not yielded the desired long-term benefits of reusability. A proactive approach requires knowledge exchange and coordination between software management and technical staff. We describe how such knowledge sharing can ease the tensions and facilitate a SPLE migration process.},
booktitle = {Proceedings of the 2010 Workshop on Knowledge-Oriented Product Line Engineering},
articleno = {3},
numpages = {6},
keywords = {agile development process, architecture management, industry case study, software product line engineering},
location = {Reno, Nevada},
series = {KOPLE '10}
}

@inproceedings{10.1145/2791060.2791108,
author = {Berger, Thorsten and Lettner, Daniela and Rubin, Julia and Gr\"{u}nbacher, Paul and Silva, Adeline and Becker, Martin and Chechik, Marsha and Czarnecki, Krzysztof},
title = {What is a feature? a qualitative study of features in industrial software product lines},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791108},
doi = {10.1145/2791060.2791108},
abstract = {The notion of features is commonly used to describe the functional and non-functional characteristics of a system. In software product line engineering, features often become the prime entities of software reuse and are used to distinguish the individual products of a product line. Properly decomposing a product line into features, and correctly using features in all engineering phases, is core to the immediate and long-term success of such a system. Yet, although more than ten different definitions of the term feature exist, it is still a very abstract concept. Definitions lack concrete guidelines on how to use the notion of features in practice.To address this gap, we present a qualitative empirical study on actual feature usage in industry. Our study covers three large companies and an in-depth, contextualized analysis of 23 features, perceived by the interviewees as typical, atypical (outlier), good, or bad representatives of features. Using structured interviews, we investigate the rationales that lead to a feature's perception, and identify and analyze core characteristics (facets) of these features. Among others, we find that good features precisely describe customer-relevant functionality, while bad features primarily arise from rashly executed processes. Outlier features, serving unusual purposes, are necessary, but do not require the full engineering process of typical features.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {16–25},
numpages = {10},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3461002.3473066,
author = {Fortz, Sophie},
title = {LIFTS: learning featured transition systems},
year = {2021},
isbn = {9781450384704},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461002.3473066},
doi = {10.1145/3461002.3473066},
abstract = {This PhD project aims to automatically learn transition systems capturing the behaviour of a whole family of software-based systems. Reasoning at the family level yields important economies of scale and quality improvements for a broad range of systems such as software product lines, adaptive and configurable systems. Yet, to fully benefit from the above advantages, a model of the system family's behaviour is necessary. Such a model is often prohibitively expensive to create manually due to the number of variants. For large long-lived systems with outdated specifications or for systems that continuously adapt, the modelling cost is even higher. Therefore, this PhD proposes to automate the learning of such models from existing artefacts. To advance research at a fundamental level, our learning target are Featured Transition Systems (FTS), an abstract formalism that can be used to provide a pivot semantics to a range of variability-aware state-based modelling languages. The main research questions addressed by this PhD project are: (1) Can we learn variability-aware models efficiently? (2) Can we learn FTS in a black-box fashion? (i.e., with access to execution logs but not to source code); (3) Can we learn FTS in a white/grey-box testing fashion? (i.e., with access to source code); and (4) How do the proposed techniques scale in practice?},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume B},
pages = {1–6},
numpages = {6},
keywords = {active automata learning, featured transition systems, model learning, software product lines, variability mining},
location = {Leicester, United Kindom},
series = {SPLC '21}
}

@inproceedings{10.1145/1029894.1029915,
author = {Mezini, Mira and Ostermann, Klaus},
title = {Variability management with feature-oriented programming and aspects},
year = {2004},
isbn = {1581138555},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1029894.1029915},
doi = {10.1145/1029894.1029915},
abstract = {This paper presents an analysis of feature-oriented and aspect-oriented modularization approaches with respect to variability management as needed in the context of system families. This analysis serves two purposes. On the one hand, our analysis of the weaknesses of feature-oriented approaches (FOAs for short) emphasizes the importance of crosscutting modularity as supported by the aspect-oriented concepts of pointcut and advice. On the other hand, by pointing out some of AspectJ's weaknesses and by demonstrating how Caesar, a language which combines concepts from both AspectJ and FOAs, is more effective in this context, we also demonstrate the power of appropriate support for layer modules.},
booktitle = {Proceedings of the 12th ACM SIGSOFT Twelfth International Symposium on Foundations of Software Engineering},
pages = {127–136},
numpages = {10},
keywords = {aspect-oriented, feature-oriented, product lines, variability management},
location = {Newport Beach, CA, USA},
series = {SIGSOFT '04/FSE-12}
}

@inproceedings{10.1145/3307630.3342408,
author = {Schlie, Alexander and Rosiak, Kamil and Urbaniak, Oliver and Schaefer, Ina and Vogel-Heuser, Birgit},
title = {Analyzing Variability in Automation Software with the Variability Analysis Toolkit},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342408},
doi = {10.1145/3307630.3342408},
abstract = {Control software for automated production systems (aPs) becomes increasingly complex as it evolves due to changing requirements. To address varying customer demands or altered regulatory guidelines, it is common practice to create a new system variant by copying and subsequently modifying existing control software. Referred to as clone-and-own, proper documentation is typically not cherished, thereby entailing severe maintenance issues in the long-run. To mitigate such problems and to reinstate sustainable development, respective software systems need to be compared and their variability information needs to be reverse-engineered. However, recent work identified variability management in the domain of aPs to remain a challenging endevour and appropriate tool support to be missing.We bridge this gap and introduce the Variability Analysis Toolkit (VAT), an extensible platform that allows for the customizable definition of metrics to compare IEC61131-3 control software variants as well as providing means to visualize results. The VAT facilitates a working environment that allows for the exchange of produced results between users. By that, we aim to support engineers in re-engineering control software systems by providing them with means to define metrics based on their individual demands. We demonstrate the feasibility of the VAT using 24 software system variants implemented in accordance to the IEC61131-3 standard.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {191–198},
numpages = {8},
keywords = {automation software, legacy systems, software product lines, tooling, variability},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3307630.3342384,
author = {El-Sharkawy, Sascha and Krafczyk, Adam and Schmid, Klaus},
title = {MetricHaven: More than 23,000 Metrics for Measuring Quality Attributes of Software Product Lines},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342384},
doi = {10.1145/3307630.3342384},
abstract = {Variability-aware metrics are designed to measure qualitative aspects of software product lines. As we identified in a prior SLR [6], there exist already many metrics that address code or variability separately, while the combination of both has been less researched. MetricHaven fills this gap, as it extensively supports combining information from code files and variability models. Further, we also enable the combination of well established single system metrics with novel variability-aware metrics, going beyond existing variability-aware metrics. Our tool supports most prominent single system and variability-aware code metrics. We provide configuration support for already implemented metrics, resulting in 23,342 metric variations. Further, we present an abstract syntax tree developed for MetricHaven, that allows the realization of additional code metrics.Tool: https://github.com/KernelHaven/MetricHavenVideo: https://youtu.be/vPEmD5Sr6gM},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {25–28},
numpages = {4},
keywords = {SPL, feature models, implementation, metrics, software product lines, variability models},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3307630.3342414,
author = {Th\"{u}m, Thomas and Teixeira, Leopoldo and Schmid, Klaus and Walkingshaw, Eric and Mukelabai, Mukelabai and Varshosaz, Mahsa and Botterweck, Goetz and Schaefer, Ina and Kehrer, Timo},
title = {Towards Efficient Analysis of Variation in Time and Space},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342414},
doi = {10.1145/3307630.3342414},
abstract = {Variation is central to today's software development. There are two fundamental dimensions to variation: Variation in time refers to the fact that software exists in numerous revisions that typically replace each other (i.e., a newer version supersedes an older one). Variation in space refers to differences among variants that are designed to coexist in parallel. There are numerous analyses to cope with variation in space (i.e., product-line analyses) and others that cope with variation in time (i.e., regression analyses). The goal of this work is to discuss to which extent product-line analyses can be applied to revisions and, conversely, where regression analyses can be applied to variants. In addition, we discuss challenges related to the combination of product-line and regression analyses. The overall goal is to increase the efficiency of analyses by exploiting the inherent commonality between variants and revisions.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {57–64},
numpages = {8},
keywords = {product-line analysis, regression analysis, software configuration management, software evolution, software product lines, software variation, variability management, variability-aware analysis},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2491627.2491648,
author = {Krueger, Charles W.},
title = {Multistage configuration trees for managing product family trees},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491648},
doi = {10.1145/2491627.2491648},
abstract = {It is not unusual for commercial product line organizations to manufacture millions of product instances every year, in thousands of different "flavors". The scale and scope of diversity in product lines of this size can be high, creating significant challenges to engineers implementing the product line, product marketers defining the space of available products, and customers selecting from available products. Companies often organize their products into a product family tree to provide clarity about their product groupings and offerings, better enabling their customers to effectively navigate among the huge number of offerings and to efficiently converge on a suitable product instance. This paper describes a 2nd Generation Product Line Engineering (2GPLE) feature modeling structure called a multistage configuration tree that supports the engineering, deployment and maintenance of complex product family trees. Feature selections and downselections are incrementally staged throughout the nodes in a product family tree. Feature decisions made at any node are inherited by all descendants of that node, thereby defining a product family subtree.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {188–197},
numpages = {10},
keywords = {multistage configuration, product family tree, product line engineering, staged configuration, systems and software product lines},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/3382025.3414954,
author = {Michelon, Gabriela Karoline and Obermann, David and Linsbauer, Lukas and Assun\c{c}\~{a}o, Wesley Klewerton G. and Gr\"{u}nbacher, Paul and Egyed, Alexander},
title = {Locating feature revisions in software systems evolving in space and time},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414954},
doi = {10.1145/3382025.3414954},
abstract = {Software companies encounter variability in space as variants of software systems need to be produced for different customers. At the same time, companies need to handle evolution in time because the customized variants need to be revised and kept up-to-date. This leads to a predicament in practice with many system variants significantly diverging from each other. Maintaining these variants consistently is difficult, as they diverge across space, i.e., different feature combinations, and over time, i.e., revisions of features. This work presents an automated feature revision location technique that traces feature revisions to their implementation. To assess the correctness of our technique, we used variants and revisions from three open source highly configurable software systems. In particular, we compared the original artifacts of the variants with the composed artifacts that were located by our technique. The results show that our technique can properly trace feature revisions to their implementation, reaching traces with 100% precision and 98% recall on average for the three analyzed subject systems, taking on average around 50 seconds for locating feature revisions per variant used as input.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {14},
numpages = {11},
keywords = {feature location, feature revisions, repository mining, variants},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3307630.3342398,
author = {Beek, Maurice H. ter and Schmid, Klaus and Eichelberger, Holger},
title = {Textual Variability Modeling Languages: An Overview and Considerations},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342398},
doi = {10.1145/3307630.3342398},
abstract = {During the three decades since the invention of the first variability modeling approach [28], there have been multiple attempts to introduce advanced variability modeling capabilities. More recently, we have seen increased attention on textual variability modeling languages. In this paper, we summarize the main capabilities of state of the art textual variability modeling languages, based on [23], including updates regarding more recent work. Based on this integrated characterization, we provide a discussion of additional concerns, opportunities and challenges that are relevant for designing future (textual) variability modeling languages. The paper also summarizes relevant contributions by the authors as input to further discussions on future (textual) variability modeling languages.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {151–157},
numpages = {7},
keywords = {software product lines, textual specification languages, variability modeling},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3109729.3109755,
author = {Tolvanen, Juha-Pekka},
title = {Applying Domain-Specific Languages in MetaEdit+ for Product Line Development},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109755},
doi = {10.1145/3109729.3109755},
abstract = {This demonstration shows how domain-specific languages are applied with MetaEdit+ tool in various kinds of product lines, ranging from industry automation to consumer electronics. In the demonstration practical examples are illustrated and executed covering both domain engineering and application engineering. In particular evolution and versioning of domain knowledge and application knowledge is detailed and demonstrated.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {17},
numpages = {1},
keywords = {Domain-Specific Language, Domain-Specific Modeling, MetaEdit+, Software Product Line},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2934466.2962727,
author = {Zhang, Bo and Becker, Martin},
title = {Supporting product configuration in application engineering using EXConfig},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2962727},
doi = {10.1145/2934466.2962727},
abstract = {Nowadays systems are often developed following the product line approach in order to reduce time to market, achieve lower cost, and ensure high quality. To this end, common and variable requirements of product variants are specified as features in a feature model, so that each product variant can be configured and customized along the development lifecycle. While developers in family engineering tend to use variability management tools (e.g., pure::variants) for feature modeling and developing core assets for reuse, such sophisticated tools might be too complicated and inappropriate for product configuration in application engineering. In order to solve this challenge, this paper introduces an Excel-based product configurator called EXConfig, which focuses on product line features in the problem space and supports staged product configuration in application engineering. This tool can be easily customized and integrated with other system design tools or variability management tools, which connects application engineering and family engineering in development. The usage of this tool and its integration have been validated several times in industry.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {324–327},
numpages = {4},
keywords = {enterprise architect, excel, feature model, variability configuration},
location = {Beijing, China},
series = {SPLC '16}
}

@article{10.1007/s00766-018-0307-0,
author = {Reinhartz-Berger, Iris and Kemelman, Mark},
title = {Extracting core requirements for software product lines},
year = {2020},
issue_date = {Mar 2020},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {25},
number = {1},
issn = {0947-3602},
url = {https://doi.org/10.1007/s00766-018-0307-0},
doi = {10.1007/s00766-018-0307-0},
abstract = {Software Product Line Engineering (SPLE) is a promising paradigm for reusing knowledge and artifacts among similar software products. However, SPLE methods and techniques require a high up-front investment and hence are profitable if several similar software products are developed. Thus in practice adoption of SPLE commonly takes a bottom-up approach, in which analyzing the commonality and variability of existing products and transforming them into reusable ones (termed core assets) are needed. These time-consuming and error-prone tasks call for automation. The literature partially deals with solutions for early software development stages, mainly in the form of variability analysis. We aim for further creation of core requirements—reusable requirements that can be adapted for different software products. To this end, we introduce an automated extractive method, named CoreReq, to generate core requirements from product requirements written in a natural language. The approach clusters similar requirements, captures variable parts utilizing natural language processing techniques, and generates core requirements following an ontological variability framework. Focusing on cloning scenarios, we evaluated CoreReq through examples and a controlled experiment. Based on the results, we claim that core requirements generation with CoreReq is feasible and usable for specifying requirements of new similar products in cloning scenarios.},
journal = {Requir. Eng.},
month = mar,
pages = {47–65},
numpages = {19},
keywords = {Software Product Line Engineering, Systematic reuse, Requirements specification, Variability analysis}
}

@inproceedings{10.1145/3336294.3342380,
author = {Arrieta, Aitor},
title = {Variability Modeling and Management of MATLAB/Simulink Models},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342380},
doi = {10.1145/3336294.3342380},
abstract = {MATLAB/Simulink models are widely used in industry to model and simulate complex systems in several domains (e.g., automotive). These complex systems are produced in mass, and often, clients demand different functionalities. As a result, the variability of these models needs to be often considered. This tutorial aims at showing different variability modeling alternatives for MATLAB/Simulink users.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {332},
numpages = {1},
keywords = {MATLAB/simulink, cyber-physical systems, variability modeling},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1109/ICSEA.2007.33,
author = {Satyananda, Tonny Kurniadi and Lee, Danhyung and Kang, Sungwon},
title = {Formal Verification of Consistency between Feature Model and Software Architecture in Software Product Line},
year = {2007},
isbn = {0769529372},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICSEA.2007.33},
doi = {10.1109/ICSEA.2007.33},
abstract = {During software development process, software artifacts are produced. Consistency among these artifacts should be verified to ensure error-free product. In software product line development, consistency becomes more important because commonalities and variabilities increase the complexity of relationship among artifacts. In this paper, we present a formal approach to verification of consistency between feature model and component and connector view of software architecture. By utilizing Prototype Verification System (PVS), we introduce our model of feature description and architecture description, and illustrate the consistency verification approach using a digital watch product line example.},
booktitle = {Proceedings of the International Conference on Software Engineering Advances},
pages = {10},
series = {ICSEA '07}
}

@inproceedings{10.1145/2791060.2791103,
author = {Mazo, Ra\'{u}l and Mu\~{n}oz-Fern\'{a}ndez, Juan C. and Rinc\'{o}n, Luisa and Salinesi, Camille and Tamura, Gabriel},
title = {VariaMos: an extensible tool for engineering (dynamic) product lines},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791103},
doi = {10.1145/2791060.2791103},
abstract = {This paper presents the new release of VariaMos, a Java-based tool for defining variability modeling languages, modeling (dynamic) product lines and cyber-physical self-adaptive systems, and supporting automated verification, analysis, configuration and simulation of these models. In particular, we describe the characteristics of this new version regarding its first release: (1) the capability to create languages for modeling systems with variability, even with different views; (2) the capability to use the created language to model (dynamic) product lines; (3) the capability to analyze and configure these models according to the changing context and requirements; and (4) the capability to execute them over several simulation scenarios. Finally, we show how to use VariaMos with an example, and we compare it with other tools found in the literature.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {374–379},
numpages = {6},
keywords = {constraints, dynamic product line models, product line engineering, simulation, tool, variability},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3109729.3109742,
author = {Albassam, Emad and Gomaa, Hassan and Menasc\'{e}, Daniel A.},
title = {Variable Recovery and Adaptation Connectors for Dynamic Software Product Lines},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109742},
doi = {10.1145/3109729.3109742},
abstract = {This paper describes the design of variable adaptation and recovery connectors used in the software adaptation of dynamic software product lines. The approach integrates software product line and feature modelling concepts with autonomic properties of self-healing and self-adaptation. The feature model and variable software architecture of the variable connectors are described as well as a validation of the dynamic adaptation approach.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {123–128},
numpages = {6},
keywords = {Dynamic software adaptation, adaptation and recovery connector, autonomic systems, dynamic software product lines, feature modeling},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3106195.3106205,
author = {Horcas, Jose-Miguel and Pinto, M\'{o}nica and Fuentes, Lidia},
title = {Green Configurations of Functional Quality Attributes},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106205},
doi = {10.1145/3106195.3106205},
abstract = {Functional quality attributes (FQAs) are those quality attributes that, to be satisfied, require the incorporation of additional functionality into the application architecture. By adding an FQA (e.g., security) we can improve the quality of the final product, but there is also an increase in energy consumption. This paper proposes a solution to help the software architect to generate configurations of FQAs whilst keeping the energy consumed by the application as low as possible. For this, a usage model is defined for each FQA, taking into account the variables that affect the energy consumption, and that the values of these variables change according to the part of the application where the FQA is required. We extend a Software Product Line that models a family of FQAs to incorporate the variability of the usage model and the existing frameworks that implement FQAs. We generate the most eco-efficient configuration of FQAs by selecting the framework with the most suitable characteristics according to the requirements of the application.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {79–83},
numpages = {5},
keywords = {Energy Consumption, FQA, Quality Attributes, SPL, Variability},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2791060.2791088,
author = {Domis, Dominik and Adler, Rasmus and Becker, Martin},
title = {Integrating variability and safety analysis models using commercial UML-based tools},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791088},
doi = {10.1145/2791060.2791088},
abstract = {Software and System Product Lines (SSPL) are the state-of-the-art for systematically reusing a common set of core assets in the development of similar products in a product family. A large number of SSPL success stories have been published in the last decade and commercial tool support is also available. SSPLs promise to reduce cost, to shorten time-to-market for new features, and to increase product quality by systematically reusing core assets in the development of three or more systems. However, an open challenge is SSPL engineering for safety-relevant systems such as automotive, avionic, or industrial automation systems. Safety-relevant systems have to be developed, analyzed, and certified according to safety standards such as IEC 61508. These standards demand the application of safety analyses such as Fault Tree Analysis and Failure Mode and Effect Analysis. Starting the safety analysis of each product variant of a SSPL from scratch is complex and very time-consuming. However, there are only few convincing cases, where SSPL approaches have been followed in safety engineering. To pave the way for a broader adoption of SSPL approaches, this paper reports practical experiences with industrial-strength methods and tools along an adaptive cruise control SSPL. The paper demonstrates how commercial tools can be used (i) to analyze safety-related aspects already in the architectural design, (ii) to model the results as component integrated component fault trees (C2FT), and (iii) to systematically reuse C2FT in the safety analysis of a concrete product. The results of the case study show that C2FT (i) can be easily integrated into a feature-oriented development process of SSPL, (ii) facilitate early consideration of safety in domain engineering, and (iii) reduce effort and complexity of safety analyses in application engineering.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {225–234},
numpages = {10},
keywords = {fault tree analysis, feature model, functional-safety, safety analysis, safety engineering, software product line engineering, tool support, variability, variant management},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3307630.3342386,
author = {D\'{\i}az, Oscar and Medeiros, Raul and Montalvillo, Leticia},
title = {Change Analysis of #if-def Blocks with FeatureCloud},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342386},
doi = {10.1145/3307630.3342386},
abstract = {FeatureCloud is a git client for the visualization of evolution in annotated SPL, i.e. those resorting to ifdefs for variability. Specifically, FeatureCloud (1) mines git repositories; (2) extracts ifdefs; (3) works out differences between two versions of the same ifdefs; (4) abstracts ifdefs in terms of their code churn, tangling and scattering; and finally (5), aggregates and visualizes these properties through "feature clouds". Feature clouds aim to play the same role for SPLs that "word clouds" for textual content: provide an abstract view of the occurrence of features along evolving code, where "repetition" account for scattering and tangling of features. Here, we introduce the analysis goals, the perspective (i.e. the object of analysis) and visualization strategies that underpin FeatureCloud.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {17–20},
numpages = {4},
keywords = {SPL evolution, preprocessor directives, tag clouds},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3307630.3342411,
author = {Meixner, Kristof and Rabiser, Rick and Biffl, Stefan},
title = {Towards Modeling Variability of Products, Processes and Resources in Cyber-Physical Production Systems Engineering},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342411},
doi = {10.1145/3307630.3342411},
abstract = {Planning and developing Cyber-Physical Production Systems (CPPS) are multi-disciplinary engineering activities that rely on effective and efficient knowledge exchange for better collaboration between engineers of different disciplines. The Product-Process-Resource (PPR) approach allows modeling products produced by industrial processes using specific production resources. In practice, a CPPS manufactures a portfolio of product type variants, i.e., a product line. Therefore, engineers need to create and maintain several PPR models to cover PPR variants and their evolving versions. In this paper, we detail a representative use case, identify challenges for using Variability Modeling (VM) methods to describe and manage PPR variants, and present a first solution approach based on cooperation with domain experts at an industry partner, a system integrator of automation for high-performance CPPS. We conclude that integrating basic variability concepts into PPR models is a promising first step and describe our further research plans to support PPR VM in CPPS.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {49–56},
numpages = {8},
keywords = {cyber-physical production system, product-process-resource, variability modelling},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3336294.3336306,
author = {Ghamizi, Salah and Cordy, Maxime and Papadakis, Mike and Traon, Yves Le},
title = {Automated Search for Configurations of Convolutional Neural Network Architectures},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336306},
doi = {10.1145/3336294.3336306},
abstract = {Convolutional Neural Networks (CNNs) are intensively used to solve a wide variety of complex problems. Although powerful, such systems require manual configuration and tuning. To this end, we view CNNs as configurable systems and propose an end-to-end framework that allows the configuration, evaluation and automated search for CNN architectures. Therefore, our contribution is threefold. First, we model the variability of CNN architectures with a Feature Model (FM) that generalizes over existing architectures. Each valid configuration of the FM corresponds to a valid CNN model that can be built and trained. Second, we implement, on top of Tensorflow, an automated procedure to deploy, train and evaluate the performance of a configured model. Third, we propose a method to search for configurations and demonstrate that it leads to good CNN models. We evaluate our method by applying it on image classification tasks (MNIST, CIFAR-10) and show that, with limited amount of computation and training, our method can identify high-performing architectures (with high accuracy). We also demonstrate that we outperform existing state-of-the-art architectures handcrafted by ML researchers. Our FM and framework have been released to support replication and future research.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {119–130},
numpages = {12},
keywords = {AutoML, NAS, configuration search, feature model, neural architecture search},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3336294.3342369,
author = {Arrieta, Aitor and Segura, Sergio and Markiegi, Urtzi and Sagardui, Goiuria and Etxeberria, Leire},
title = {Extended Abstract of "Spectrum-Based Fault Localization in Software Product Lines"},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342369},
doi = {10.1145/3336294.3342369},
abstract = {Testing Software Product Lines (SPLs) is a challenging approach due to the huge number of products under test. Most of the SPL testing approaches have proposed novel ideas to make verification and validation activities cost-effective. However, after executing tests and detecting faults, debugging is a cumbersome and time consuming task. In our article [1], we proposed a debugging approach to localize bugs in SPLs that works in two steps: first, feature sets of the SPL are ranked according to their suspiciousness (i.e., likelihood of being faulty) by applying spectrum-based fault localization techniques. In a second step, a fault isolation algorithm is used to generate valid products of minimum size containing the most suspicious features, helping to isolate the cause of failures.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {13},
numpages = {1},
keywords = {debugging, software product lines, spectrum-based fault localization},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2499777.2500710,
author = {Gabillon, Yoann and Biri, Nicolas and Otjacques, Beno\^{\i}t},
title = {Methodology to integrate multi-context UI variations into a feature model},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500710},
doi = {10.1145/2499777.2500710},
abstract = {Software product line (SPL) paradigm aims to explore commonalities and variabilities in a set of applications for developing an efficient derivation of products. One of the most common ways to model variability in this paradigm is to use a Feature Model. However, variability in SPL is often limited to functional features. The User Interface (UI) variations are modeled as entire UIs and thus these variations are not reusable and inspectable. Research in the Human Computer Interaction (HCI) field has proven the importance of variability for non functional, purely UI centric features. The HCI community has proposed several levels of abstraction for multi-context UI design. Indeed, new variations can be introduced at each abstraction level. UI designers are used to them and they usually introduce variability at each step of the UI definition without using SPL. To build usable softwares that take into account UI, we propose to merge functional concerns and UI concerns, providing a methodology to integrate variability of both aspects into a single Feature Model.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {74–81},
numpages = {8},
keywords = {abstraction levels, feature model, multi-context, software product line, usability, user interface, variability},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.5555/2026187.2026224,
author = {Sharma, Sugam and Yang, Hen-I. and Wong, Johnny and Chang, Carl K},
title = {Wrenching: transient migration from commonality to variability in product line engineering of smart homes},
year = {2011},
isbn = {9783642215346},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
abstract = {Currently smart home are created and deployed on each user's specifications, which guarantees their complete satisfaction, but incurs a very high deployment cost and non-usable resources. Techniques from product line engineering provide a framework to promote resource reusability by identifying reusable common features. They help to reduce the cost but can compromise users' satisfaction, especially when they need special accommodations or have unique preferences. In this paper, we propose wrenching, a transient relaxation of common features into variability, so uncommon, ad hoc request can be satisfied. Based on wrenching, we further devise Smart Variability Model, that can accommodate situations where existing models are not applicable.},
booktitle = {Proceedings of the 9th International Conference on Toward Useful Services for Elderly and People with Disabilities: Smart Homes and Health Telematics},
pages = {230–235},
numpages = {6},
keywords = {commonality, customization, deployment, product line engineering, smart home, smart variability model, variability, wrenching},
location = {Montreal, Canada},
series = {ICOST'11}
}

@inproceedings{10.1145/3382026.3431246,
author = {Kenner, Andy},
title = {Model-Based Evaluation of Vulnerabilities in Software Systems},
year = {2020},
isbn = {9781450375702},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382026.3431246},
doi = {10.1145/3382026.3431246},
abstract = {Vulnerabilities in software systems result from faults, which occur at different stages in a software's life cycle, for example, in the design (i.e., undesired feature-interactions), the development (i.e., buffer overflows), or the operation (i.e., configuration errors). Various databases provide detailed information about vulnerabilities in software systems or the way to exploit it, but face severe limitations. The information is scattered across these databases, fluctuates in quality and granularity, and provides only an insight into a single vulnerability per entry. Even for a single software system it is challenging for any security-related stakeholder to determine the threat level, which consists of all vulnerabilities of the software system and its environment (i.e., operating system). Manual vulnerability management is feasible only to a limited extend if we want to identify all configurations that are affected by vulnerabilities, or determine a system's threat level and the resulting risk we have to deal with. For variant-rich systems, we also have to deal with variability, allowing different stakeholders to understand the threats to their particular setup. To deal with this variability, we propose vulnerability feature models, which offer a homogeneous view on all vulnerabilities of a software system. These models and the resulting analyses offer advantages in many disciplines of the vulnerability management process. In this paper, we report the research plan for our project, in which we focus on the model-based evaluation of vulnerabilities. This includes research objectives that take into account the design of vulnerability feature models, their application in the process of vulnerability management, and the impact of evolution, discovery, and verification of vulnerabilities.},
booktitle = {Proceedings of the 24th ACM International Systems and Software Product Line Conference - Volume B},
pages = {112–119},
numpages = {8},
keywords = {Exploit, Feature Model, Variability Model, Vulnerability, Vulnerability Analysis and Management},
location = {Montreal, QC, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3336294.3336302,
author = {Str\"{u}ber, Daniel and Mukelabai, Mukelabai and Kr\"{u}ger, Jacob and Fischer, Stefan and Linsbauer, Lukas and Martinez, Jabier and Berger, Thorsten},
title = {Facing the Truth: Benchmarking the Techniques for the Evolution of Variant-Rich Systems},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336302},
doi = {10.1145/3336294.3336302},
abstract = {The evolution of variant-rich systems is a challenging task. To support developers, the research community has proposed a range of different techniques over the last decades. However, many techniques have not been adopted in practice so far. To advance such techniques and to support their adoption, it is crucial to evaluate them against realistic baselines, ideally in the form of generally accessible benchmarks. To this end, we need to improve our empirical understanding of typical evolution scenarios for variant-rich systems and their relevance for benchmarking. In this paper, we establish eleven evolution scenarios in which benchmarks would be beneficial. Our scenarios cover typical lifecycles of variant-rich system, ranging from clone &amp; own to adopting and evolving a configurable product-line platform. For each scenario, we formulate benchmarking requirements and assess its clarity and relevance via a survey with experts in variant-rich systems and software evolution. We also surveyed the existing benchmarking landscape, identifying synergies and gaps. We observed that most scenarios, despite being perceived as important by experts, are only partially or not at all supported by existing benchmarks-a call to arms for building community benchmarks upon our requirements. We hope that our work raises awareness for benchmarking as a means to advance techniques for evolving variant-rich systems, and that it will lead to a benchmarking initiative in our community.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {177–188},
numpages = {12},
keywords = {benchmark, product lines, software evolution, software variability},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3307630.3342415,
author = {Chavarriaga, Jaime and Casallas, Rubby and Parra, Carlos and Henao-Mej\'{\i}a, Martha Cecilia and Calle-Archila, Carlos Ricardo},
title = {Nine Years of Courses on Software Product Lines at Universidad de los Andes, Colombia},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342415},
doi = {10.1145/3307630.3342415},
abstract = {Software Product Lines has been taught in Universidad de los Andes, Colombia, since 2011. The content, activities and evaluation in these courses have changed during this period of time. For instance, while topics such as the processes to engineer product lines, feature models to specify domain variability, and design patterns to implement the variability are common to all these courses, other topics such as the product line maturity levels, some techniques to implement variability and recent automation practices for testing, continuous integration and delivery have varied with the time. In addition, topics and activities, such as the course project that has been present in all the courses, had also been modified. This paper (1) describes the evolution of our courses on Software Product Lines, presenting commonalities and variabilities in their topics, activities and evaluation techniques and (2) discusses some lessons learned during its recent design as a Blended Learning course.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {130–133},
numpages = {4},
keywords = {software product lines, teaching, variability},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3106195.3106204,
author = {Luthmann, Lars and Stephan, Andreas and B\"{u}rdek, Johannes and Lochau, Malte},
title = {Modeling and Testing Product Lines with Unbounded Parametric Real-Time Constraints},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106204},
doi = {10.1145/3106195.3106204},
abstract = {Real-time requirements are crucial for embedded software in many modern application domains of software product lines. Hence, techniques for modeling and analyzing time-critical software have to be lifted to software product line engineering, too. Existing approaches extend timed automata (TA) by feature constraints to so-called featured timed automata (FTA) facilitating efficient verification of real-time properties for entire product lines in a single run. In this paper, we propose a novel modeling formalism, called configurable parametric timed automata (CoPTA), extending expressiveness of FTA by supporting freely configurable and therefore a-priori unbounded timing intervals for real-time constraints, which are defined as feature attributes in extended feature models with potentially infinite configuration spaces. We further describe an efficient test-suite generation methodology for CoPTA models, achieving location coverage on every possible model configuration. Finally, we present evaluation results gained from applying our tool implementation to a collection of case studies, demonstrating efficiency improvements compared to a variant-by-variant analysis.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {104–113},
numpages = {10},
keywords = {Model-based Testing, Real-Time Systems, Software Product Lines, Timed Automata},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2934466.2934473,
author = {Olaechea, Rafael and Fahrenberg, Uli and Atlee, Joanne M. and Legay, Axel},
title = {Long-term average cost in featured transition systems},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934473},
doi = {10.1145/2934466.2934473},
abstract = {A software product line is a family of software products that share a common set of mandatory features and whose individual products are differentiated by their variable (optional or alternative) features. Family-based analysis of software product lines takes as input a single model of a complete product line and analyzes all its products at the same time. As the number of products in a software product line may be large, this is generally preferable to analyzing each product on its own. Family-based analysis, however, requires that standard algorithms be adapted to accomodate variability.In this paper we adapt the standard algorithm for computing limit average cost of a weighted transition system to software product lines. Limit average is a useful and popular measure for the long-term average behavior of a quality attribute such as performance or energy consumption, but has hitherto not been available for family-based analysis of software product lines. Our algorithm operates on weighted featured transition systems, at a symbolic level, and computes limit average cost for all products in a software product line at the same time. We have implemented the algorithm and evaluated it on several examples.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {109–118},
numpages = {10},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3442391.3442399,
author = {Greiner, Sandra and Westfechtel, Bernhard},
title = {On Preserving Variability Consistency in Multiple Models},
year = {2021},
isbn = {9781450388245},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3442391.3442399},
doi = {10.1145/3442391.3442399},
abstract = {Model-driven software product line engineering (MDPLE) is a holistic approach to realize variability-intensive systems by using models. In MDPLE the usage of models aims to increase the level of automation by reducing the product derivation to a pure code derivation step. Since models are present at different development phases, they have to be kept consistent all over these phases, for example by storing information about corresponding elements in model transformations. Reasons why to use model transformations or similar automated mechanisms are manifold. For instance, if the product line is built in a forward-engineering process, model transformations will be beneficial to propagate the coarse-grained information of an early phase to the subsequent phase automatically. In contrast to single-variant engineering, in MDPLE there is not only the challenge to keep multiple models consistent but also their presence conditions. Since variability mechanisms and the ways how presence conditions across different models are maintained vary, this contribution categorizes the consistency maintenance of presence conditions in MDPLE approaches to give an overview of already existing techniques. As a result, we find that while several automated solutions to keep presence conditions across models consistent exist, they are not employed in the MDPLE tool landscape.},
booktitle = {Proceedings of the 15th International Working Conference on Variability Modelling of Software-Intensive Systems},
articleno = {7},
numpages = {10},
keywords = {Model-driven Software Product Line Engineering, multi-variant model transformations, multi-view modeling, software evolution},
location = {Krems, Austria},
series = {VaMoS '21}
}

@inproceedings{10.1145/3307630.3342400,
author = {Kamali, Seiede Reyhane and Kasaei, Shirin and Lopez-Herrejon, Roberto E.},
title = {Answering the Call of the Wild? Thoughts on the Elusive Quest for Ecological Validity in Variability Modeling},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342400},
doi = {10.1145/3307630.3342400},
abstract = {Ecological validity is a term commonly used in several disciplines to refer to the fact that in a research study, the methods, the materials, and the settings must approximate the real world, i.e. what happens in everyday life. Variability modeling is no exception, it has striven for this form of validity by looking at two main sources, industrial projects and open source projects. Despite their unquestionable value, industrial projects inherently pose limitations; for instance, in terms of open access or results replication, which are two important tenets for any scientific endeavor. In this paper, we present our first findings on the use of open source projects in variability modeling research, and identify trends and avenues for further research.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {143–150},
numpages = {8},
keywords = {feature models, open source projects, variability models},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2491627.2491638,
author = {Quinton, Cl\'{e}ment and Romero, Daniel and Duchien, Laurence},
title = {Cardinality-based feature models with constraints: a pragmatic approach},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491638},
doi = {10.1145/2491627.2491638},
abstract = {Feature models originating from Software Product Line Engineering are a well-known approach to variability modeling. In many situations, the variability does not apply only on features but also on the number of times these features can be cloned. In such a case, cardinality-based feature models are used to specify the number of clones for a given feature. Although previous works already investigated approaches for feature modeling with cardinality, there is still a lack of support for constraints in the presence of clones. To overcome this limitation, we present an abstract model to define constraints in cardinality-based feature models and propose a formal semantics for this kind of constraints. We illustrate the practical usage of our approach with examples from our recent experiences on cloud computing platform configuration.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {162–166},
numpages = {5},
keywords = {Variability, cardinality, constraint, feature model, modeling},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2362536.2362562,
author = {Mohalik, Swarup and Ramesh, S. and Millo, Jean-Vivien and Krishna, Shankara Narayanan and Narwane, Ganesh Khandu},
title = {Tracing SPLs precisely and efficiently},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362562},
doi = {10.1145/2362536.2362562},
abstract = {In a Software Product Line (SPL), the central notion of implementability provides the requisite connection between specifications (feature sets) and their implementations (component sets), leading to the definition of products. While it appears to be a simple extension (to sets) of the trace-ability relation between components and features, it actually involves several subtle issues which are overlooked in the definitions in existing literature. In this paper, we give a precise and formal definition of implementability over a fairly expressive traceability relation to solve these issues. The consequent definition of products in the given SPL naturally entails a set of useful analysis problems that are either refinements of known problems, or are completely novel. We also propose a new approach to solve these analysis problems by encoding them as Quantified Boolean Formula(QBF) and solving them through Quantified Satisfiability (QSAT) solvers. The methodology scales much better than the SAT-based solutions hinted in the literature and is demonstrated through a prototype tool called SPLANE (SPL Analysis Engine), on a couple of fairly large case studies.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {186–195},
numpages = {10},
keywords = {QSAT, feature model, formal methods, software product line},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3109729.3109752,
author = {Mauro, Jacopo and Nieke, Michael and Seidl, Christoph and Yu, Ingrid Chieh},
title = {Anomaly Detection and Explanation in Context-Aware Software Product Lines},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109752},
doi = {10.1145/3109729.3109752},
abstract = {A software product line (SPL) uses a variability model, such as a feature model (FM), to describe the configuration options for a set of closely related software systems. Context-aware SPLs also consider possible environment conditions for their configuration options. Errors in modeling the FM and its context may lead to anomalies, such as dead features or a void feature model, which reduce if not negate the usefulness of the SPL. Detecting these anomalies is usually done by using Boolean satisfiability (SAT) that however are not expressive enough to detect anomalies when context is considered. In this paper, we describe HyVarRec: a tool that relies on Satisfiability Modulo Theory (SMT) to detect and explain anomalies for context-aware SPLs.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {18–21},
numpages = {4},
keywords = {Anomaly Detection, Context-Aware Software Engineering},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2019136.2019170,
author = {Leitner, Andrea and Kreiner, Christian and Mader, Roland and Steger, Christian and Wei\ss{}, Reinhold},
title = {Towards multi-modeling for domain description},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019170},
doi = {10.1145/2019136.2019170},
abstract = {Domain modeling is a key task in the development of a software product line. We identified two popular modeling paradigms: Feature-oriented domain modeling (FODM) and domain specific modeling (DSM). The appropriate choice of the modeling paradigm is a crucial decision for the development of an efficient and easy to use domain model. For complex and heterogeneous domain descriptions, for example embedded system descriptions, different representation techniques can be useful to describe the different parts of the system. We propose a method to combine both representation techniques to realize a domain specific multi modeling approach. This supports not only a more natural domain description, but can as well be seen as a support for knowledge transfer between different stakeholders.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {30},
numpages = {6},
keywords = {domain modeling, domain specific modeling, feature oriented domain analysis, feature oriented domain modeling, multi modeling, software product line engineering},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/2934466.2962729,
author = {Beuche, Danilo},
title = {Using pure: variants across the product line lifecycle},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2962729},
doi = {10.1145/2934466.2962729},
abstract = {The paper describes a demonstration of pure::variants, a commercial tool for variant and variability management for product lines. The demonstration shows how flexible product line (PL) architectures can be built, tested and maintained by using the modeling and integration capabilities provided by pure::variants. With pure::variants being available for a long time, the demonstration (and the paper) combines both basics of pure::variants, known to parts of the audience, and new capabilities, introduced within the last year.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {333–336},
numpages = {4},
keywords = {feature modelling, software product lines, tools},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3461001.3471149,
author = {Lesoil, Luc and Acher, Mathieu and T\'{e}rnava, Xhevahire and Blouin, Arnaud and J\'{e}z\'{e}quel, Jean-Marc},
title = {The interplay of compile-time and run-time options for performance prediction},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3471149},
doi = {10.1145/3461001.3471149},
abstract = {Many software projects are configurable through compile-time options (e.g., using ./configure) and also through run-time options (e.g., command-line parameters, fed to the software at execution time). Several works have shown how to predict the effect of run-time options on performance. However it is yet to be studied how these prediction models behave when the software is built with different compile-time options. For instance, is the best run-time configuration always the best w.r.t. the chosen compilation options? In this paper, we investigate the effect of compile-time options on the performance distributions of 4 software systems. There are cases where the compiler layer effect is linear which is an opportunity to generalize performance models or to tune and measure runtime performance at lower cost. We also prove there can exist an interplay by exhibiting a case where compile-time options significantly alter the performance distributions of a configurable system.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {100–111},
numpages = {12},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3106195.3106201,
author = {Kim, Jongwook and Batory, Don and Dig, Danny},
title = {Refactoring Java Software Product Lines},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106201},
doi = {10.1145/3106195.3106201},
abstract = {Refactoring is a staple of Object-Oriented (OO) program development. It should be a staple of OO Software Product Line (SPL) development too. X15 is the first tool to support the refactoring of Java SPL codebases. X15 (1) uses Java custom annotations to encode variability in feature-based Java SPLs, (2) projects a view of an SPL product (a program that corresponds to a legal SPL configuration), and (3) allows programmers to edit and refactor the product, propagating changes back to the SPL codebase. Case studies apply 2316 refactorings in 8 public Java SPLs and show that X15 is as efficient, expressive, and scalable as a state-of-the-art feature-unaware Java refactoring engine.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {59–68},
numpages = {10},
keywords = {refactoring, software product lines},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3336294.3336322,
author = {Pett, Tobias and Th\"{u}m, Thomas and Runge, Tobias and Krieter, Sebastian and Lochau, Malte and Schaefer, Ina},
title = {Product Sampling for Product Lines: The Scalability Challenge},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336322},
doi = {10.1145/3336294.3336322},
abstract = {Quality assurance for product lines is often infeasible for each product separately. Instead, only a subset of all products (i.e., a sample) is considered during testing such that at least the coverage of certain feature interactions is guaranteed. While pair-wise interaction sampling only covers all interactions between two features, its generalization to t-wise interaction sampling ensures coverage for all interactions among t features. However, sampling large product lines poses a challenge, as today's algorithms tend to run out of memory, do not terminate, or produce samples, which are too large to be tested. To initiate a community effort, we provide a set of large real-world feature models with up-to 19 thousand features, which are supposed to be sampled. The performance of sampling approaches is evaluated based on the CPU time and memory consumed to retrieve a sample, the sample size for a given coverage (i.e. the value of t) and whether the sample achieves full t-wise coverage. A well-performing sampling algorithm achieves full t-wise coverage, while minimizing the other properties as best as possible.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {78–83},
numpages = {6},
keywords = {product line testing, product sampling, real-world feature models, software product lines},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2110363.2110447,
author = {Gomes, Ant\^{o}nio Tadeu Azevedo and Ziviani, Artur and Correa, Bruno Souza Pinto Marques and Teixeira, Iuri Malinoski and Moreira, Vin\'{\i}cius Macedo},
title = {SPLiCE: a software product line for healthcare},
year = {2012},
isbn = {9781450307819},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2110363.2110447},
doi = {10.1145/2110363.2110447},
abstract = {In face of well-known inhibitor factors for the dissemination of Healthcare Information Systems (HIS) - "e.g., high development cost, lack of standardization, and technology-orientation" - model-driven engineering (MDE) in general, and OMG's model-driven architecture (MDA) in particular, has been referred to in the medical informatics literature as a cost-effective proposal to advance maintainable HIS. In this paper, we propose an MDE method for HISes that goes beyond MDA. This method seeks a higher degree of maintainability and reuse by adhering to three main principles: transversalization of data models and architecture models, dualization of information and clinical data models, and stylization of architecture models. To support this method on the generation of HIS skeletons, we are progressing work on the development of a software product line called SPLiCE (Software Product Line for healthCarE) that weaves together clinical data models described according to the openEHR specifications and architecture models specified in the Acme language.},
booktitle = {Proceedings of the 2nd ACM SIGHIT International Health Informatics Symposium},
pages = {721–726},
numpages = {6},
keywords = {architectural styles, model-driven engineering, openehr clinical archetypes, software product lines},
location = {Miami, Florida, USA},
series = {IHI '12}
}

@inproceedings{10.1145/3307630.3342388,
author = {Fantechi, Alessandro and Gnesi, Stefania and Semini, Laura},
title = {Applying the QuARS Tool to Detect Variability},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342388},
doi = {10.1145/3307630.3342388},
abstract = {In this demo paper we present how to use the QuARS tool to extract variability information from requirements documents. The main functionality of QuARS is to detect ambiguity in Natural Language (NL) requirement documents.Ambiguity in requirements may be due to intentional or unintentional indication of possible variability; an ambiguity detecting tool can hence be useful to analysts and clients to figure the potential of a requirements document to describe a family of different products.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {29–32},
numpages = {4},
keywords = {ambiguity, natural language requirements, variability},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2934466.2934480,
author = {Martinez, Jabier and Ziadi, Tewfik and Bissyand\'{e}, Tegawend\'{e} F. and Klein, Jacques and Traon, Yves Le},
title = {Name suggestions during feature identification: the variclouds approach},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934480},
doi = {10.1145/2934466.2934480},
abstract = {Reengineering a Software Product Line from legacy variants remains a challenging endeavour. Among various challenges, it is a complex task to retrieve enough information for inferring the variability from experts' domain knowledge and from the semantics of software elements. We propose the VariClouds process that can be leveraged by domain experts to understand the semantics behind the different blocks identified during software variants analysis. VariClouds is based on interactive word cloud visualisations providing name suggestions for these blocks using tf-idf as weighting factor. We evaluate our approach by assessing its added-value to several previous works in the literature where no tool support was provided to domain experts to characterise features from software blocks.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {119–123},
numpages = {5},
keywords = {feature identification, feature naming, software product lines, visualisation, word clouds},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2362536.2362561,
author = {de Oliveira, Thiago Henrique Burgos and Becker, Martin and Nakagawa, Elisa Yumi},
title = {Supporting the analysis of bug prevalence in software product lines with product genealogy},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362561},
doi = {10.1145/2362536.2362561},
abstract = {The term bug prevalence is derived from the medical world vocabulary and applied to Software Product Line (SPL), meaning all products that are affected by one particular bug. In single systems development, this concept is not relevant since a bug is either present or not. However, when it comes to SPL, analyzing the bug prevalence of a certain bug is still a challenge and a highly relevant topic, since the same bug may be present in several products. To support this analysis, the main contribution of this paper is the Product Genealogy approach. A core concept in our approach is the Product Genealogy Tree, in which the hierarchy of products in the SPL is represented, reflecting how each product evolved or was derived from another or from the core assets. In this context, the benefit of such a tree is the rapid visualization of the product's structure in the SPL, providing input on which products are to be examined initially. Besides that, in this paper we introduce a novel analogy between the medical genetics world and SPL in order to better explain the principles of our approach.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {181–185},
numpages = {5},
keywords = {bug prevalence, change impact, product genealogy, software product line},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3106195.3106229,
author = {Beuche, Danilo},
title = {Using Feature Models to Manage Variability and Requirements Reuse},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106229},
doi = {10.1145/3106195.3106229},
abstract = {In this paper, we give a brief overview on the tutorial "Using Feature Models to Manage Variability and Requirements Reuse".},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {249},
numpages = {1},
keywords = {Feature Models, Product Lines, Requirements, Variability},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3382025.3414963,
author = {Creff, Stephen and Noir, J\'{e}r\^{o}me Le and Lenormand, Eric and Madel\'{e}nat, S\'{e}bastien},
title = {Towards facilities for modeling and synthesis of architectures for resource allocation problem in systems engineering},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414963},
doi = {10.1145/3382025.3414963},
abstract = {Exploring architectural design space is often beyond human capacity and makes architectural design a difficult task. Model-based systems engineering must include assistance to the system designer in identifying candidate architectures to subsequently analyze tradeoffs. Unfortunately, existing languages and approaches do not incorporate this concern, generally favoring solution analysis over exploring a set of candidate architectures.In this paper, we explore the advantages of designing and configuring the variability problem to solve one of the problems of exploring (synthesizing) candidate architectures in systems engineering: the resource allocation problem. More specifically, this work reports on the use of the Clafer modeling language and its gateway to the CSP Choco Solver, on an industrial case study of heterogeneous hardware resource allocation (GPP-GPGPU-FPGA).Based on experiments on the modeling in Clafer, and the impact of its translation into the constraint programming paradigm (performance studies), discussions highlight some issues concerning facilities for modeling and synthesis of architectures and recommendations are proposed towards the use of this variability approach.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {32},
numpages = {11},
keywords = {allocation problem, architecture synthesis, constraint solving, empirical study, variability modeling},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3233027.3233043,
author = {Masri, Samer AL and Nadi, Sarah and Gaudet, Matthew and Liang, Xiaoli and Young, Robert W.},
title = {Using static analysis to support variability implementation decisions in C++},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233043},
doi = {10.1145/3233027.3233043},
abstract = {Eclipse OMR is an open-source C++ framework for building robust language runtimes. The OMR toolkit includes a dynamic Just-In-Time (JIT) compiler, a garbage collector, a platform abstraction library, and a set of developer tooling capabilities. To support the diverse languages and architectures targeted by the framework, OMR's variability implementation uses a combination of build-system variability and static polymorphism. That is, all implementation classes that depend on the selected language and architecture are decided at compile time. However, OMR developers now realize that the current variability design decision, specifically the static polymorphism implementation, has its drawbacks. They are considering using dynamic polymorphism instead of static polymorphism. Before making such a fundamental design change, however, it is crucial to collect function information and overload/override statistics about the current variability in the code base.In this paper, we present OMRStatistics, a static analysis tool that we built for OMR developers to help them collect this information. Specifically, OMRStatistics (1) visualizes the class hierarchy from OMR's current static polymorphic implementation, (2) visualizes the function overloads and overrides with their respective locations in the source code, (3) collects important information about the classes and functions, and (4) stores all the collected information in a database for further analysis. Our tool OMRStatistics allows OMR developers to make better design decisions on which variability extension points should be switched from static polymorphism to dynamic polymorphism.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {236–245},
numpages = {10},
keywords = {C++, build path variability, clang plugin, dynamic polymorphism, software variability analysis, static analysis, static polymorphism},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2019136.2019149,
author = {Murugesupillai, Esan and Mohabbati, Bardia and Ga\v{s}evi\'{c}, Dragan},
title = {A preliminary mapping study of approaches bridging software product lines and service-oriented architectures},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019149},
doi = {10.1145/2019136.2019149},
abstract = {Service Oriented Architectures (SOA) and Software Product Lines (SPL) have individually proven to be software engineering concepts that create added value to the development of software systems. Recently, the research community has recognized and investigated potentials for combining these two concepts. However, there have been no mapping study and literature surveys that systematically review the present research results in combining the two. This paper presents results of a preliminary work on a systematic mapping study of research papers that report on combining SOA and SPL. The main goal of a systematic mapping study is to provide a breath overview, classification of approaches and the quantity and type of research as well as available research results, which is complimentary step toward further systematic literature review. This paper, based on selected papers published from 2002 to mid-2010, reports on various aspects of the analyzed literature, including the motivations for combining the two concepts; contributions to specific stages of software engineering lifecycles; types of synergies and characteristics that are accomplished through combinations of the two concepts; and the methods used for and the rigor of the evaluations of the research conducted on the studied topic.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {11},
numpages = {8},
keywords = {service-oriented architecture, service-oriented product line, software product line, software variability, variability management},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3233027.3236396,
author = {Linsbauer, Lukas and Lopez-Herrejon, Roberto Erick and Egyed, Alexander},
title = {Variability extraction and modeling for product variants},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3236396},
doi = {10.1145/3233027.3236396},
abstract = {Fast changing hardware and software technologies in addition to larger and more specialized customer bases demand software tailored to meet very diverse requirements. Software development approaches that aim at capturing this diversity on a single consolidated platform (i.e. software product lines [5]) often require large upfront investments of time and money. Alternatively, companies resort to developing one variant of a software product at a time by reusing as much as possible from already existing product variants (i.e. clone-and-own [2]). However, identifying and extracting the parts to reuse is an error-prone and inefficient task. Hence, more disciplined and systematic approaches are needed to cope with the complexity of developing and maintaining sets of product variants. Such approaches require detailed information about the product variants, the features they provide and their relations.Variability is the capacity of software to vary [6]. Its effective management requires variability information such as the set of possible product variants, the features they provide, how they are related, and how they are implemented. In this work we present an approach for extracting variability information from sets of related product variants. We compute traces from features and feature interactions to their implementation artifacts and dependencies between features. A Trace is a link between a source and a target artifact (in this context between features and artifacts) [1]. Traceability is the potential for traces to be established and used. Variability management is paramount for coping with scenarios where multiple product variants must be developed and maintained such as:Supporting and Enhancing Clone-and-Own Reuse. Clone-and-own is a manual ad hoc software reuse approach where new product variants are created by reusing parts from already existing variants [2]. The parts to be reused must first be located in the existing variants, then extracted, merged, and completed to obtain the new working variant. This process is repeated for each new variant required. Variability information helps to locate reusable features and their implementing artifacts. It even makes it possible to partially automate reuse [3].Reverse Engineering Software Product Lines (SPLs). An SPL consists of a set of related product variants that are distinguished by the set of features they provide [5]. In cases where the problem domain and the existing set of variants have become mature and stable, software companies can consider to consolidate existing variants into a fully integrated SPL platform. Variability information is not only highly useful but even necessary for reverse engineering sets of variants into an SPL [3].Extending an SPL. In cases where an SPL already exists, the need of providing new features to meet new customer requirements may still arise. In such cases product lines have to be extended to provide such new features, a process that requires knowledge about already existing features and how they are related and implemented.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {250},
numpages = {1},
keywords = {dependency, feature, interaction, trace, variability, variant},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.5555/1105634.1105651,
author = {de Oliveira, Edson Alves and Gimenes, Itana M. S. and Huzita, Elisa Hatsue Moriya and Maldonado, Jos\'{e} Carlos},
title = {A variability management process for software product lines},
year = {2005},
publisher = {IBM Press},
abstract = {The software product line approach (PL) promotes the generation of specific products from a set of core assets for a given domain. This approach is applicable to domains in which products have well-defined commonalities and variation points. Variability management is concerned with the management of the differences between products throughout the PL lifecycle. This paper presents a UML-based process for variability management that allows identification, representation and delimitation of variabilities as well as identification of mechanisms for variability implementation. The process is illustrated with excerpts of a case study carried out within the context of an existing PL for the Workflow Management System (WfMS) domain. The case study was carried out based on the experimental software engineering concepts. The results have shown that the proposed process has made explicit a higher number of variabilities than does the existing PL process, and it offers better support for variability tracing.},
booktitle = {Proceedings of the 2005 Conference of the Centre for Advanced Studies on Collaborative Research},
pages = {225–241},
numpages = {17},
location = {Toranto, Ontario, Canada},
series = {CASCON '05}
}

@inproceedings{10.1145/3233027.3233031,
author = {Kaindl, Hermann and Kramer, Stefan and Hoch, Ralph},
title = {An inductive learning perspective on automated generation of feature models from given product specifications},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233031},
doi = {10.1145/3233027.3233031},
abstract = {For explicit representation of commonality and variability of a product line, a feature model is mostly used. An open question is how a feature model can be inductively learned in an automated way from a limited number of given product specifications in terms of features.We propose to address this problem through machine learning, more precisely inductive generalization from examples. However, no counter-examples are assumed to exist. Basically, a feature model needs to be complete with respect to all the given example specifications. First results indicate the feasibility of this approach, even for generating hierarchies, but many open challenges remain.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {25–30},
numpages = {6},
keywords = {generating feature models, inductive generalization from examples, machine learning},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2019136.2019173,
author = {Fukuda, Takeshi and Atarashi, Yoshitaka and Yoshimura, Kentaro},
title = {An approach to evaluate time-dependent changes in feature constraints},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019173},
doi = {10.1145/2019136.2019173},
abstract = {Feature selections mining is the process of discovering potentially feature associations and constraints in data. Especially, mining from time-series data obtains feature constraint trends. In this paper, we describe an approach to evaluate feature constraint trends and present results of two case studies. Feature selections mining was applied to a product transactions database at Hitachi. The product transactions had 148 optional features, and 8,372 products were derived from the product line. Both case studies focus on transaction-time periods: time series and time intervals. Feature selections mining discovered feature constraints around 100 rules in each study, and determined they constantly change.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {33},
numpages = {5},
keywords = {embedded systems, feature modeling, industry case study, software product line engineering},
location = {Munich, Germany},
series = {SPLC '11}
}

@article{10.1007/s10664-014-9353-5,
author = {Asadi, Mohsen and Soltani, Samaneh and Ga\v{s}evi\'{c}, Dragan and Hatala, Marek},
title = {The effects of visualization and interaction techniques on feature model configuration},
year = {2016},
issue_date = {August    2016},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {21},
number = {4},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-014-9353-5},
doi = {10.1007/s10664-014-9353-5},
abstract = {A Software Product Line is a set of software systems of a domain, which share some common features but also have significant variability. A feature model is a variability modeling artifact which represents differences among software products with respect to variability relationships among their features. Having a feature model along with a reference model developed in the domain engineering lifecycle, a concrete product of the family is derived by selecting features in the feature model (referred to as the configuration process) and by instantiating the reference model. However, feature model configuration can be a cumbersome task because: 1) feature models may consist of a large number of features, which are hard to comprehend and maintain; and 2) many factors including technical limitations, implementation costs, stakeholders' requirements and expectations must be considered in the configuration process. Recognizing these issues, a significant amount of research efforts has been dedicated to different aspects of feature model configuration such as automating the configuration process. Several approaches have been proposed to alleviate the feature model configuration challenges through applying visualization and interaction techniques. However, there have been limited empirical insights available into the impact of visualization and interaction techniques on the feature model configuration process. In this paper, we present a set of visualization and interaction interventions for representing and configuring feature models, which are then empirically validated to measure the impact of the proposed interventions. An empirical study was conducted by following the principles of control experiments in software engineering and by applying the well-known software quality standard ISO 9126 to operationalize the variables investigated in the experiment. The results of the empirical study revealed that the employed visualization and interaction interventions significantly improved completion time of comprehension and changing of the feature model configuration. Additionally, according to results, the proposed interventions are easy-to-use and easy-to-learn for the participants.},
journal = {Empirical Softw. Engg.},
month = aug,
pages = {1706–1743},
numpages = {38},
keywords = {Controlled experiment, Software product line engineering, Tools}
}

@inproceedings{10.1145/3233027.3233034,
author = {K\"{u}hn, Thomas and Kassin, Kevin Ivo and Cazzola, Walter and A\ss{}mann, Uwe},
title = {Modular feature-oriented graphical editor product lines},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233034},
doi = {10.1145/3233027.3233034},
abstract = {Software Product Lines (SPLs) have a long tradition and aim at reducing development costs by increasing reuse. They have been successfully applied to develop families of languages, ultimately establishing the field of Language Product Lines (LPLs). Currently, LPLs facilitate a family of textual languages by defining an SPL of compilers/interpreters. In contrast, this work aims at supporting families of graphical languages by defining an SPL of graphical editors, whereas each language variant is supported by a corresponding product of a Graphical Editor Product Line (GEPL). Thus far, there exists no modular approach for the development of GEPLs for families of visual languages. To remedy this, this paper introduces a feature-oriented development approach for GEPLs that ensures modularity, maintainability, and extensibility of the resulting product line. To showcase the suitability and applicability of our approach, we developed a modular GEPL for the family of role-based modeling languages, a feature rich family of conceptual modeling languages. Finally, we illustrate its extensibility by adding a complex language feature.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {76–86},
numpages = {11},
keywords = {graphical editors product lines, language product lines, modeling languages, software product lines},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2019136.2019163,
author = {Corr\^{e}a, Chessman K. F. and Oliveira, Toacy C. and Werner, Claudia M. L.},
title = {An analysis of change operations to achieve consistency in model-driven software product lines},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019163},
doi = {10.1145/2019136.2019163},
abstract = {Model-Driven Software Product Line (MD-SPL) is the combination of Model-Driven Software Development and Software Product Line. In this paradigm, there are complex dependency relationships between different software development artefacts. These artefacts have to be changed during development and maintenance activities. However, the quantity of elements involved and the complex dependencies may imply that not all artefacts are updated appropriately, making these artefacts inconsistent with each other and with variability rules. This article discusses the change impact on interrelated MD-SPL artefacts and what has to be done do keep consistency.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {24},
numpages = {4},
keywords = {consistency, model-driven software product line},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3307630.3342401,
author = {Villota, Angela and Mazo, Ra\'{u}l and Salinesi, Camille},
title = {The High-Level Variability Language: An Ontological Approach},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342401},
doi = {10.1145/3307630.3342401},
abstract = {Given its relevance, there is an extensive body of research for modeling variability in diverse domains. Regretfully, the community still faces issues and challenges to port or share variability models among tools and methodological approaches. There are researchers, for instance, implementing the same algorithms and analyses again because they use a specific modeling language and cannot use some existing tool. This paper introduces the High-Level Variability Language (HLVL), an expressive and extensible textual language that can be used as a modeling and an intermediate language for variability. HLVL was designed following an ontological approach, i.e., by defining their elements considering the meaning of the concepts existing on different variability languages. Our proposal not only provides a unified language based on a comprehensive analysis of the existing ones but also sets foundations to build tools that support different notations and their combination.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {162–169},
numpages = {8},
keywords = {domain specific language, variability language, variability specification},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/1964138.1964140,
author = {Leitner, Andrea and Kreiner, Christian},
title = {Managing ERP configuration variants: an experience report},
year = {2010},
isbn = {9781450305426},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1964138.1964140},
doi = {10.1145/1964138.1964140},
abstract = {The concepts of Software Product Line Engineering (SPLE) have been adapted and applied to enterprise IT systems, in particular the ERP systems of a production company. Based on a 2-layer feature model for the domain of the company's business processes, individual, albeit similar division's ERP system configurations can be derived by feature selection forming a variant description model. It is indicated that regular release upgrades can also benefit from the SPLE approach.The customization capabilities of the ERP platform are captured in another model; building up this model is automated according to information extracted online. As well, customizing an ERP system -- based on the models mentioned - is performed online with the help of a connector developed in this project.Quantitative analysis and lessons learned during the project conclude this experience report.},
booktitle = {Proceedings of the 2010 Workshop on Knowledge-Oriented Product Line Engineering},
articleno = {2},
numpages = {6},
keywords = {IT management, enterprise resource planning, experience report, software product line engineering},
location = {Reno, Nevada},
series = {KOPLE '10}
}

@inproceedings{10.1145/3382025.3414989,
author = {Krieter, Sebastian},
title = {Large-scale T-wise interaction sampling using YASA},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414989},
doi = {10.1145/3382025.3414989},
abstract = {Testing highly-configurable software systems (i.e., software product lines) is challenging due to their large configuration space. T-wise sampling is one method of finding a representative subset of configurations for a system, which can then be tested. However, for large-scale systems, such as Linux, existing t-wise sampling algorithms do not scale well. To this end, Pett et al. proposed the sampling challenge for large-scale systems at SPLC 2019. In this paper, we attempt to solve the proposed challenge using our sampling algorithm YASA. We report our experience for all three of the given systems FinancialServices01, Automotive02, and Linux. In addition, we present the results for computing samples for all versions of the system FinancialServices01.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {29},
numpages = {4},
keywords = {T-wise sampling, configurable system, software product lines},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3307630.3342396,
author = {Markiegi, Urtzi and Arrieta, Aitor and Etxeberria, Leire and Sagardui, Goiuria},
title = {White-Box and Black-Box Test Quality Metrics for Configurable Simulation Models},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342396},
doi = {10.1145/3307630.3342396},
abstract = {Simulation models are widely employed to model and simulate complex systems from different domains, such as automotive. These systems are becoming highly configurable to support different users' demands. Testing all of them is impracticable, and thus, cost-effective techniques are mandatory. Costs are usually attributed either to the time it takes to test a configurable system or to its monetary value. Nevertheless, for the case of test effectiveness several quality metrics can be found in the literature. This paper aims at proposing both black-box and white-box test quality metrics for configurable simulation models relying on 150% variability modeling approaches.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {211–214},
numpages = {4},
keywords = {product lines, simulation models, test quality metrics},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3461001.3473063,
author = {Arcaini, Paolo and Inverso, Omar and Trubiani, Catia},
title = {Automated model-based performance analysis of software product lines under uncertainty},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3473063},
doi = {10.1145/3461001.3473063},
abstract = {In the context of Software Product Lines (SPLs), the performance evaluation of the different products is highly relevant, especially if such products include a set of features that are subject to uncertainties (e.g., the service time of a certain functionality may be subject to fluctuations). To this aim, variability modeling notations have been extended with the capability of assigning to the features some attributes that are defined over numeric domains (i.e., attributed feature models), possibly subject to lower and upper bounds capturing their uncertainties.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {112},
numpages = {1},
keywords = {attributed feature models, queueing networks, software performance engineering, software product lines, uncertainty},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/3382025.3414965,
author = {Young, Jeffrey M. and Walkingshaw, Eric and Th\"{u}m, Thomas},
title = {Variational satisfiability solving},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414965},
doi = {10.1145/3382025.3414965},
abstract = {Incremental satisfiability (SAT) solving is an extension of classic SAT solving that allows users to efficiently solve a set of related SAT problems by identifying and exploiting shared terms. However, using incremental solvers effectively is hard since performance is sensitive to a problem's structure and the order sub-terms are fed to the solver, and the burden to track results is placed on the end user. For analyses that generate sets of related SAT problems, such as those in software product lines, incremental SAT solvers are either not used at all, used but not explicitly stated so in the literature, or used but suffer from the aforementioned usability problems. This paper translates the ordering problem to an encoding problem and automates the use of incremental SAT solving. We introduce variational SAT solving, which differs from incremental SAT solving by accepting all related problems as a single variational input and returning all results as a single variational output. Our central idea is to make explicit the operations of incremental SAT solving, thereby encoding differences between related SAT problems as local points of variation. Our approach automates the interaction with the incremental solver and enables methods to automatically optimize sharing of the input. To evaluate our methods we construct a prototype variational SAT solver and perform an empirical analysis on two real-world datasets that applied incremental solvers to software evolution scenarios. We show, assuming a variational input, that the prototype solver scales better for these problems than naive incremental solving while also removing the need to track individual results.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {18},
numpages = {12},
keywords = {choice calculus, satisfiability solving, software product lines, variation},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3106195.3106231,
author = {Mannion, Mike and Kaindl, Hermann and Savolainen, Juha},
title = {Product Line Strategies and Feature Reuse},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106231},
doi = {10.1145/3106195.3106231},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {252},
numpages = {1},
keywords = {Feature Reuse, Product Line, Strategy},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2491627.2491641,
author = {Koziolek, Heiko and Goldschmidt, Thomas and de Gooijer, Thijmen and Domis, Dominik and Sehestedt, Stephan},
title = {Experiences from identifying software reuse opportunities by domain analysis},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491641},
doi = {10.1145/2491627.2491641},
abstract = {In a large corporate organization there are sometimes similar software products in certain subdomains with a perceived functional overlap. This promises to be an opportunity for systematic reuse to reduce software development and maintenance costs. In such situations companies have used different domain analysis approaches (e.g., SEI Technical Probe) that helped to assess technical and organizational potential for a software product line approach. We applied existing domain analysis approaches for software product line engineering and tailored them to include a feature analysis as well as architecture evaluation. In this paper, we report our experiences from applying the approach in two subdomains of industrial automation.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {208–217},
numpages = {10},
keywords = {business case, domain analysis, software product lines},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/1217935.1217955,
author = {Krishna, Arvind S. and Gokhale, Aniruddha S. and Schmidt, Douglas C.},
title = {Context-specific middleware specialization techniques for optimizing software product-line architectures},
year = {2006},
isbn = {1595933220},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1217935.1217955},
doi = {10.1145/1217935.1217955},
abstract = {Product-line architectures (PLAs) are an emerging paradigm for developing software families for distributed real-time and embedded (DRE) systems by customizing reusable artifacts, rather than hand-crafting software from scratch. To reduce the effort of developing software PLAs and product variants for DRE systems, developers are applying general-purpose -- ideally standard -- middleware platforms whose reusable services and mechanisms support a range of application quality of service (QoS) requirements, such as low latency and jitter. The generality and flexibility of standard middleware, however, often results in excessive time/space overhead for DRE systems, due to lack of optimizations tailored to meet the specific QoS requirements of different product variants in a PLA.This paper provides the following contributions to the study of middleware specialization techniques for PLA-based DRE systems. First, we identify key dimensions of generality in standard middleware stemming from framework implementations, deployment platforms, and middleware standards. Second, we illustrate how context-specific specialization techniques can be automated and used to tailor standard middleware to better meet the QoS needs of different PLA product variants. Third, we quantify the benefits of applying automated tools to specialize a standard Realtime CORBA middleware implementation. When applied together, these middleware specializations improved our application product variant throughput by ~65%, average- and worst-case end-to-end latency measures by ~43% and ~45%, respectively, and predictability by a factor of two over an already optimized middleware implementation, with little or no effect on portability, standard middleware APIs, or application software implementations, and interoperability.},
booktitle = {Proceedings of the 1st ACM SIGOPS/EuroSys European Conference on Computer Systems 2006},
pages = {205–218},
numpages = {14},
keywords = {middleware, product lines, specializations},
location = {Leuven, Belgium},
series = {EuroSys '06}
}

@inproceedings{10.1145/2364412.2364429,
author = {Parra, Carlos and Giral, Leonardo and Infante, Alvaro and Cort\'{e}s, Camilo},
title = {Extractive SPL adoption using multi-level variability modeling},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364429},
doi = {10.1145/2364412.2364429},
abstract = {Software Product Line engineering aims at reusing and automating software development to reduce costs, have shorter development cycles, and maintain quality. However, for organizations with settled development processes and a large code base, adopting an SPL approach may prove to be a daunting task. In this paper we present an industrial experimentation and a proposal for an SPL adoption in Heinsohn Business Technology (HBT), a software development company specialized in financial, transportation, mortgage-backed securities, and pension-fund solutions. We start by identifying and modeling multiple levels of variability inherent to the kind of developments undertaken by HBT. Next, we define restrictions inside every level as well as between the levels to fully characterize an HBT software product. To limit the impact on the organization development process, we use an extractive approach. This allows us to design core assets starting from current software artifacts. The overall approach is based on real-world software artifacts developed over the years by HBT, whose combinations result in approximately 4.88e11 possible product configurations.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {99–106},
numpages = {8},
keywords = {model-driven engineering, software product lines},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2791060.2791090,
author = {Di Cola, Simone and Lau, Kung-Kiu and Tran, Cuong and Qian, Chen},
title = {An MDE tool for defining software product families with explicit variation points},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791090},
doi = {10.1145/2791060.2791090},
abstract = {Current software product line engineering tools mainly focus on variability in the problem space, and create product families by linking variability models to artefacts in the solution space. In this paper, we present a tool that can be used to define software architectures with explicit variation points, and hence product families, directly in the solution space.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {355–360},
numpages = {6},
keywords = {PLE tools, architecture variability, component-based software development},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2934466.2934490,
author = {Iida, Takahiro and Matsubara, Masahiro and Yoshimura, Kentaro and Kojima, Hideyuki and Nishino, Kimio},
title = {PLE for automotive braking system with management of impacts from equipment interactions},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934490},
doi = {10.1145/2934466.2934490},
abstract = {We report here an industrial application of the Product Line Engineering (PLE) for the development of electronic braking systems.The cost of software engineering in automotive control systems is increasing as new functions for safety, comfort, and improved fuel efficiency are integrated into electronic control units.Therefore, Component suppliers for automotive control systems adapt their products to the requirements of car manufacturers by modifying the software specifications, such that it makes minimal changes to the mechanical structure and the electrical and electronic (E/E) components hence reduces the cost. PLE is an effective approach to manage or even reduce the software variations resulting from these modifications.However, one problem is that the software specifications of automotive control systems need to be redesigned after system testing with vehicles. This is because vehicles consist of many mechanical parts manufactured by different suppliers, and the characteristics of the parts can interact with each other. This problem makes it difficult to reap the full benefits of PLE.We propose an approach to analyze the potential impact from such interactions by using a system model that expresses the system architecture that includes the parts of different suppliers. Based on this model, the software architecture was designed to localize the impact to several software components. Additionally, a feature model was designed to the enable management of the localized impact by expressing it as variability. This method helps software engineers specify the software components that can have an effect on the actual equipment, and determine which modifications to the software specifications are necessary.We applied PLE with the proposed method in the development of electronic brake control system. We confirmed that our approach greatly increased the efficiency of PLE for the development of such automotive control systems.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {232–241},
numpages = {10},
keywords = {control system, feature modeling, product lines engineering, software engineering, software modification, system modeling},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3109729.3109758,
author = {Ben Snaiba, Ziad and de Vink, Erik P. and Willemse, Tim A.C.},
title = {Family-Based Model Checking of SPL based on mCRL2},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109758},
doi = {10.1145/3109729.3109758},
abstract = {We discuss how the general-purpose model checker mCRL2 can be used for family-based verification of behavioral properties of software product lines. This is achieved by exploiting a feature-oriented extension of the modal μ-calculus for the specification of SPL properties, and for its model checking by encoding it back into the logic of mCRL2. Using the example of the well-known minepump SPL an illustration of the possibilities of the approach is given.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {13–16},
numpages = {4},
keywords = {Family-based model checking, Software Product Lines, mCRL2},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@article{10.1016/j.procs.2019.12.173,
author = {Chemingui, Houssem and Gam, Ines and Mazo, Ra\'{u}l and Salinesi, Camille and Ghezala, Henda Ben},
title = {Product Line Configuration Meets Process Mining},
year = {2019},
issue_date = {2019},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {164},
number = {C},
issn = {1877-0509},
url = {https://doi.org/10.1016/j.procs.2019.12.173},
doi = {10.1016/j.procs.2019.12.173},
journal = {Procedia Comput. Sci.},
month = jan,
pages = {199–210},
numpages = {12},
keywords = {Product line engineering, configuration process, process mining, enhancing, configuration difficulties}
}

@inproceedings{10.1145/3233027.3236394,
author = {M\'{e}ndez-Acu\~{n}a, David and Galindo, Jos\'{e} A. and Combemale, Beno\^{\i}t and Blouin, Arnaud and Baudry, Beno\^{\i}t},
title = {Reverse engineering language product lines from existing DSL variants},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3236394},
doi = {10.1145/3233027.3236394},
abstract = {The use of domain-specific languages (DSL) has become a successful technique for developing complex systems. Moreover, we can find different DSLs variants adapted to specific purposes that share some features. The challenge for language designers is to take advantage of the commonalities between DSLs variants by reusing previously defined language constructs [7]. To tackle this, the research community in software language engineering proposed to apply Software Product Line (SPLs) techniques in the construction of DSLs [4, 6] leading to the notion of Language Product Pines (LPLs) [3, 7].Similarly to software product lines, we find systems that started with a single variant and were forked as many times as variants with new language constructs were needed. In such cases, LPLs can be built from a set of existing DSL variants through reverse-engineering techniques [2]. First, those techniques should be able to recover a language modular design that encodes all language constructs existing in all DSL variants. Second, to synthesize the variability models to represent the common and variant parts of the LPL.In a previous work [4], we introduced an approach to automatically infer a language modular design from a given set of DSL variants. In the paper presented [5] we present a complete reverse-engineering technique that produces not only the language modular designs, but the entire language product line. Concretely we show how to reverse engineering booth the abstract syntax and the semantics specifying them in terms of well-known formalisms i.e., feature models (FM) and orthogonal variability models (OVM) and considering the diverse and multiple dimensions that such a variability may present. Moreover, we show how those variability models can be exploited to configure and assembly new DSL variants.In this paper also present how we have relied on this technique within an industrial project, which is composed of three variants of a DSL for finite-state machines [1]. In this project, we manually developed an oracle to know in advance the existing variation points. Then, we execute our approach on these DSL variants, and we compare the produced results against the expected ones showing that our approach is capable of correctly identifying commonalities and variability.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {248},
numpages = {1},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@article{10.1016/j.jss.2006.05.034,
author = {Ajila, Samuel A. and Dumitrescu, Razvan T.},
title = {Experimental use of code delta, code churn, and rate of change to understand software product line evolution},
year = {2007},
issue_date = {January, 2007},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {80},
number = {1},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2006.05.034},
doi = {10.1016/j.jss.2006.05.034},
abstract = {This research is a longitudinal study of change processes. It links changes in the product line architecture of a large telecommunications equipment supplier with the company's customers, inner context, and eight line card products over six-year period. There are three important time related constructs in this study: the time it takes to develop a new product line release; the frequency in which a metric is collected; and the frequency at which financial results and metrics related to the customer layer are collected and made available. Data collection has been organized by product release. The original goal of this research is to study the economic impact of market reposition on the product line and identify metrics that can be used to records changes in product line. We later look at the product line evolution vis-a-vis the changes in the products that form the product line. Our results show that there is no relationship between the size of the code added to the product line and the number of designers required to develop and test it; and there is a positive relationship between designer turnover and impact of change.},
journal = {J. Syst. Softw.},
month = jan,
pages = {74–91},
numpages = {18},
keywords = {Code churn, Code delta, Impact analysis, Rate of change, Software evolution, Software metric, Software product line}
}

@inproceedings{10.5555/998675.999419,
author = {Matinlassi, Mari},
title = {Comparison of Software Product Line Architecture Design Methods: COPA, FAST, FORM, KobrA and QADA},
year = {2004},
isbn = {0769521630},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {Product line architectures (PLAs) have been undercontinuous attention in the software research communityduring the past few years. Although several methods havebeen established to create PLAs there are not availablestudies comparing PLA methods. Five methods are knownto answer the needs of software product lines: COPA,FAST, FORM, KobrA and QADA. In this paper, anevaluation framework is introduced for comparing PLAdesign methods. The framework considers the methodsfrom the points of view of method context, user, structureand validation. Comparison revealed distinguishableideologies between the methods. Therefore, methods donot overlap even though they all are PLA design methods.All the methods have been validated on various domains.The most common domains are telecommunicationinfrastructure and information domains. Some of themethods apply software standards; at least OMG\'{y}s MDAfor method structures, UML for language and IEEE Std-1471-2000 for viewpoint definitions.},
booktitle = {Proceedings of the 26th International Conference on Software Engineering},
pages = {127–136},
numpages = {10},
series = {ICSE '04}
}

@inproceedings{10.1145/2364412.2364426,
author = {Villela, Karina and Arif, Taslim and Zanardini, Damiano},
title = {Towards product configuration taking into account quality concerns},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364426},
doi = {10.1145/2364412.2364426},
abstract = {The configuration of concrete products from a product line infrastructure is the process of resolving the variability captured in the product line according to a company's market strategy or specific customer's requirements. Several aspects influence the selection of features for a concrete product, such as dependencies and constraints between features, the different stakeholders involved in the process, the desired degree of quality, and cost constraints. This paper presents the vision of a configurator that will focus on providing indicators of security and performance for features and empowering its users to interactively observe the effect of the selected set of features on these two quality characteristics. We propose the use of reusable expert knowledge and static analysis for obtaining the indicators of security and performance, respectively. The two main issues to be investigated are: (1) to which degree the configuration process should be automated; and (2) how exactly to obtain indicators of security and performance for features that can be used to predict the security and performance of whole configurations.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {82–90},
numpages = {9},
keywords = {feature models, product configuration, product line engineering, quality concerns, static analysis},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2491627.2491642,
author = {Martini, Antonio and Pareto, Lars and Bosch, Jan},
title = {Communication factors for speed and reuse in large-scale agile software development},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491642},
doi = {10.1145/2491627.2491642},
abstract = {An open issue in industry is the combination of software reuse in the context of large scale Agile Software Development. The speed offered by Agile Software Development is needed for short time to market, while reuse strategies such as Software Product Line Engineering are needed for long-term productivity, efficiency, and profit. The paper investigates, through a survey, communication factors affecting both speed and reuse in 3 large companies developing embedded systems and employing Agile Software Development and Software Product Line Engineering. Our results include a prioritized list of communication related factors obtained by statistical analysis and the recognition and spread of the factors in the companies. We have recognized 5 interfaces with the Agile development team that need to be improved: system engineers (architects), product management, distributed teams, inter-project teams and sales unit. Few factors (involving inter-project communication) depend on the business drivers for the company. We also reveal that Agile teams need strategic and architectural inputs in order to be implanted in a large company employing Software Product Line Engineering. Academic and industrial training as well as different tactics for co-location would improve the communication skills of engineers. There is also a need for solutions, in the reference architecture, for fostering Agile Software Development: the goal is the combination of the focus on customer value of the teams, reusability, system requirements and avoidance of organizational dependencies.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {42–51},
numpages = {10},
keywords = {agile software development, communication, development speed, embedded systems, factors, software process improvement (SPI), software reuse, speed},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2019136.2019168,
author = {Nakagawa, Elisa Yumi and Antonino, Pablo Oliveira and Becker, Martin},
title = {Exploring the use of reference architectures in the development of product line artifacts},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019168},
doi = {10.1145/2019136.2019168},
abstract = {Software Product Line (SPL) has arisen as an approach for developing a family of software-intensive systems at lower costs, within shorter time, and with higher quality. In particular, SPL is supported by a product line architecture (sometimes also referred to as reference architecture) that captures the architectures of a product family. In another context, a special type of architecture that contains knowledge about a specific domain has been increasingly investigated, resulting in the Reference Architecture research area. In spite of the positive impact of this type of architecture on reuse and productivity, the use of existing domain-specific reference architectures as basis of SPL has not been widely explored. The main contribution of this paper is to present how and when elements contained in existing reference architectures could contribute to the building of SPL artifacts during development of an SPL. We have observed that, in fact, reference architectures could make an important contribution to improving reuse and productivity, which are also important concerns in SPL.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {28},
numpages = {8},
keywords = {SPL design method, reference architecture, software product line},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3382025.3414951,
author = {Heradio, Ruben and Fernandez-Amoros, David and Galindo, Jos\'{e} A. and Benavides, David},
title = {Uniform and scalable SAT-sampling for configurable systems},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414951},
doi = {10.1145/3382025.3414951},
abstract = {Several relevant analyses on configurable software systems remain intractable because they require examining vast and highly-constrained configuration spaces. Those analyses could be addressed through statistical inference, i.e., working with a much more tractable sample that later supports generalizing the results obtained to the entire configuration space. To make this possible, the laws of statistical inference impose an indispensable requirement: each member of the population must be equally likely to be included in the sample, i.e., the sampling process needs to be "uniform". Various SAT-samplers have been developed for generating uniform random samples at a reasonable computational cost. Unfortunately, there is a lack of experimental validation over large configuration models to show whether the samplers indeed produce genuine uniform samples or not. This paper (i) presents a new statistical test to verify to what extent samplers accomplish uniformity and (ii) reports the evaluation of four state-of-the-art samplers: Spur, QuickSampler, Unigen2, and Smarch. According to our experimental results, only Spur satisfies both scalability and uniformity.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {17},
numpages = {11},
keywords = {SAT, configurable systems, software product lines, uniform sampling, variability modeling},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3236405.3237204,
author = {Nakanishi, Tsuneo and Hisazumi, Kenji and Fukuda, Akira},
title = {Teaching software product lines as a paradigm to engineers: an experience report in education programs and seminars for senior engineers in Japan},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3237204},
doi = {10.1145/3236405.3237204},
abstract = {The paper reports authors' experience in teaching software product lines (SPL) for senior engineers in the company. An effective way for education in the experience is to teach SPL as a paradigm consisting of some key ideas and show how we can introduce the paradigm into the development process. The authors have used PLUS as a reference of such development process. Feature modeling is taught not only as a means of variability modeling but also as a means to facilitate construction of abstraction hierarchy and separation of concerns. Giving anti-patterns of feature modeling and countermeasures to them helps engineers discuss construction of better feature models.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {46–47},
numpages = {2},
keywords = {development process, feature modeling, software product lines},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3109729.3109747,
author = {Silva, Cristian Vidal},
title = {Exploring efficient analysis alternatives on feature models},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109747},
doi = {10.1145/3109729.3109747},
abstract = {The automated analysis of feature models is used to extract useful information from the description of variant and common parts in software product lines. The complexity and large-scale of real feature models makes the manual analysis a tedious or even in-feasible task. For example, feature models from different domains such as operating systems or mobile ecosystems are available with thousands of features and complex relationships among them. The analysis of this kind of models requires efficient techniques and some have been explored in the past. In this thesis we propose to explore different efficient analysis alternatives. This research work will first explore parallel solutions for the Automated Analysis of Feature Models (AAFM). We review current solutions for the AAFM and, based on their efficiency and quality results, choose a few algorithmic solutions to analyze their availability of being parallelizable and propose their parallel version, to finally evaluate their results quality, performance and improvements respecting their sequential versions. We plan to explore later other efficient alternatives and summarize the advances to provide efficient ready-to-use tools for analysis purposes.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {150–155},
numpages = {6},
keywords = {AAFM, Automated Analysis of Feature Models, Explanations, FaMa, Inconsistencies, Parallel},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3336294.3336295,
author = {Beek, Maurice H. ter and Damiani, Ferruccio and Lienhardt, Michael and Mazzanti, Franco and Paolini, Luca},
title = {Static Analysis of Featured Transition Systems},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336295},
doi = {10.1145/3336294.3336295},
abstract = {A Featured Transition System (FTS) is a formal behavioural model for software product lines, which represents the behaviour of all the products of an SPL in a single compact structure by associating transitions with features that condition their existence in products. In general, an FTS may contain featured transitions that are unreachable in any product (so called dead transitions) or, on the contrary, mandatorily present in all products for which their source state is reachable (so called false optional transitions), as well as states from which only for certain products progress is possible (so called hidden deadlocks). In this paper, we provide algorithms to analyse an FTS for such ambiguities and to transform an ambiguous FTS into an unambiguous FTS. The scope of our approach is twofold. First and foremost, an ambiguous model is typically undesired as it gives an unclear idea of the SPL. Second, an unambiguous FTS paves the way for efficient family-based model checking. We apply our approach to illustrative examples from the literature.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {39–51},
numpages = {13},
keywords = {behavioural model, featured transition systems, formal specification, software product lines, static analysis},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1109/ICCSA.2007.47,
author = {Satyananda, Tonny Kurniadi and Lee, Danhyung and Kang, Sungwon and Hashmi, Sajid Ibrahim},
title = {Identifying Traceability between Feature Model and Software Architecture in Software Product Line using Formal Concept Analysis},
year = {2007},
isbn = {0769529453},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICCSA.2007.47},
doi = {10.1109/ICCSA.2007.47},
abstract = {Feature models have been used to support requirements analysis and domain engineering in Software Product Line. By identifying the mapping between feature model and architecture model by capturing the relationships among elements in the models, we can establish the traceability between the two models. The identified traceability can be used to verify consistency between feature model and architecture model. On small scale models, the relationships among elements can be easily identified by manually analyzing the descriptions of models. But when the complexity of a model is high, a more formal approach will be useful to help identifying the traceability. In this paper, we develop an approach to identify traceability between feature model and component and connector view of software architecture using Formal Concept Analysis (FCA) technique. This technique constructs a concept lattice structure. We propose several analysis criteria for concept lattice structure to identify traceability between the two models.},
booktitle = {Proceedings of the The 2007 International Conference Computational Science and Its Applications},
pages = {380–388},
numpages = {9},
series = {ICCSA '07}
}

@inproceedings{10.1109/HASE.2014.15,
author = {Nascimento, Amanda S. and Rubira, Cec\'{\i}lia M. F. and Castor, Fernando},
title = {ArCMAPE: A Software Product Line Infrastructure to Support Fault-Tolerant Composite Services},
year = {2014},
isbn = {9781479934669},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/HASE.2014.15},
doi = {10.1109/HASE.2014.15},
abstract = {A number of solutions use software fault tolerance techniques based on design diversity to create fault-tolerant composite services that leverage functionally equivalent services. Nevertheless, these solutions are not able to adapt themselves at runtime to cope with dynamic changes of user requirements and fluctuations in the quality of services (QoS). We propose a self-adaptive solution, called ArCMAPE, that leverages ideas from Software Product Line Engineering to support fault-tolerant composite services. In particular, we specify a feature model and product line architecture to capture the common and variable features among a number of software fault tolerance techniques based on design diversity. ArCMAPE provides software components implementing the common features, and a foundation on which plug-in components, or variable components, can be easily added to realise the target variable features. At runtime, ArCMAPE dynamically instantiates software fault tolerance techniques tailored to the specific needs of different clients and contexts by employing feature-based runtime adaptations. Outcomes obtained from an empirical study suggest the feasibility and efficiency of our solution to support self-adaptive, fault-tolerant composite services. We discuss the obtained outcomes and present directions for future work.},
booktitle = {Proceedings of the 2014 IEEE 15th International Symposium on High-Assurance Systems Engineering},
pages = {41–48},
numpages = {8},
keywords = {Fault Tolerance, SOA, Self-Adaptation},
series = {HASE '14}
}

@inproceedings{10.1145/2019136.2019157,
author = {Elsner, Christoph and Lohmann, Daniel and Schr\"{o}der-Preikschat, Wolfgang},
title = {An infrastructure for composing build systems of software product lines},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019157},
doi = {10.1145/2019136.2019157},
abstract = {Deriving a product from a software product line may require various build tasks, such as model transformations, source code generation, preprocessing, compiling, as well as linking and packaging the compiled sources. Usually implemented using simple scripting languages, such as Apache ant or GNU make, build systems tend to become monolithic entities, which are intricate to adapt and maintain.This makes developing the build system for a multi-- product-line, which is composed of several sub--product-lines and maybe other configurable components, particularly challenging. Several, previously independent build systems--- possibly implemented using different build tools (ant, make, etc.)---need to be integrated. In this paper, we approach this by using models to describe the involved build tasks (including their input and output parameters) as well as their composition. An interpreter evaluates the models and executes the tasks in the composed order with the configured parameters to produce the final product.Our approach enables the interaction of build systems implemented with different tools with only little development effort, whereas the build order and parameter flow is made explicit in the models. We have started to apply our tooling to model the build system of two multi--product-lines, where it reveals sufficient expressiveness and clarifies the build system interaction.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {18},
numpages = {8},
keywords = {build system integration, software product line},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3382025.3414962,
author = {Chrszon, Philipp and Baier, Christel and Dubslaff, Clemens and Kl\"{u}ppelholz, Sascha},
title = {From features to roles},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414962},
doi = {10.1145/3382025.3414962},
abstract = {The detection of interactions is a challenging task present in almost all stages of software development. In feature-oriented system design, this task is mainly investigated for interactions of features within a single system, detected by their emergent behaviors. We propose a formalism to describe interactions in hierarchies of feature-oriented systems (hierarchical interactions) and the actual situations where features interact (active interplays). Based on the observation that such interactions are also crucial in role-based systems, we introduce a compositional modeling framework based on concepts and notions of roles, comprising role-based automata (RBAs). To describe RBAs, we present a modeling language that is close to the input language of the probabilistic model checker Prism. To exemplify the use of RBAs, we implemented a tool that translates RBA models into Prism and thus enables the formal analysis of functional and non-functional properties including system dynamics, contextual changes, and interactions. We carry out two case studies as a proof of concept of such analyses: First, a peer-to-peer protocol case study illustrates how undesired hierarchical interactions can be discovered automatically. Second, a case study on a self-adaptive production cell demonstrates how undesired interactions influence quality-of-service measures such as reliability and throughput.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {19},
numpages = {11},
keywords = {feature-oriented systems, formal methods, roles, verification},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3336294.3342360,
author = {Michelon, Gabriela Karoline and Linsbauer, Lukas and Assun\c{c}\~{a}o, Wesley K. G. and Egyed, Alexander},
title = {Comparison-Based Feature Location in ArgoUML Variants},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342360},
doi = {10.1145/3336294.3342360},
abstract = {Identifying and extracting parts of a system's implementation for reuse is an important task for re-engineering system variants into Software Product Lines (SPLs). An SPL is an approach that enables systematic reuse of existing assets across related product variants. The re-engineering process to adopt an SPL from a set of individual variants starts with the location of features and their implementation, to be extracted and migrated into an SPL and reused in new variants. Therefore, feature location is of fundamental importance to the success in the adoption of SPLs. Despite its importance, existing feature location techniques struggle with huge, complex, and numerous system artifacts. This is the scenario of ArgoUML-SPL, which stands out as the most used case study for the validation of feature location approaches. In this paper we use an automated feature location technique and apply it to the ArgoUML feature location challenge posed.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {93–97},
numpages = {5},
keywords = {clones, feature location, reuse, software product lines, traceability, variants},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3382025.3414945,
author = {G\"{o}ttmann, Hendrik and Luthmann, Lars and Lochau, Malte and Sch\"{u}rr, Andy},
title = {Real-time-aware reconfiguration decisions for dynamic software product lines},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414945},
doi = {10.1145/3382025.3414945},
abstract = {Dynamic Software Product Lines (DSPL) have recently shown promising potentials as integrated engineering methodology for (self-)adaptive software systems. Based on the software-configuration principles of software product lines, DSPL additionally foster reconfiguration capabilities to continuously adapt software products to ever-changing environmental contexts. However, in most recent works concerned with finding near-optimal reconfiguration decisions, real-time aspects of reconfiguration processes are usually out of scope. In this paper, we present a model-based methodology for specifying and automatically analyzing real-time constraints of reconfiguration decisions in a feature-oriented and compositional way. Those real-time aware DSPL specifications are internally translated into timed automata, a well-founded formalism for real-time behaviors. This representation allows for formally reasoning about consistency and worst-case/best-case execution-time behaviors of sequences of reconfiguration decisions. The technique is implemented in a prototype tool and experimentally evaluated with respect to a set of case studies1.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {13},
numpages = {11},
keywords = {dynamic software product lines, reconfiguration decisions, timed automata},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/3336294.3336315,
author = {Wolschke, Christian and Becker, Martin and Schneickert, S\"{o}ren and Adler, Rasmus and MacGregor, John},
title = {Industrial Perspective on Reuse of Safety Artifacts in Software Product Lines},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336315},
doi = {10.1145/3336294.3336315},
abstract = {In the future, safety-critical industrial products will have to be maintained and variants will have to be produced. In order to do this economically, the safety artifacts of the components should also be reused. At present, however, it is still unclear how this reuse could take place. Moreover this reuse is complicated, by the different situations in the various industries involved and by the corresponding standards applied.Current industrial practice for certification processes relies on a component-based view of reuse. We investigate the possibilities of product lines with managed processes for reuse also across multiple domains.In order to identify the challenges and possible solutions, we conducted interviews with industry partners from the domains of ICT, Rail, Automotive, and Industrial Automation, and from small- and medium-sized enterprises to large organizations. The semi-structured interviews identified the characteristics of current safety engineering processes, the handling of general variety and reuse, the approach followed for safety artifacts, and the need for improvement.In addition, a detailed literature survey summarizes existing approaches. We investigate which modularity concepts exist for dealing with safety, how variability concepts integrate safety, by which means process models can consider safety, and how safety cases are evolved while maintenance takes place. An overview of similar research projects complements the analysis.The identified challenges and potential solution proposals show how safety is related to Software Product Lines.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {143–154},
numpages = {12},
keywords = {modular safety, open source certification, product line certification, safety reuse, safety standards},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3106195.3106209,
author = {T\"{e}rnava, Xhevahire and Collet, Philippe},
title = {Early Consistency Checking between Specification and Implementation Variabilities},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106209},
doi = {10.1145/3106195.3106209},
abstract = {In a software product line (SPL) engineering approach, the addressed variability in core-code assets must be consistent with the specified domain variability, usually captured in a variability model, e.g., a feature model. Currently, the support for checking such consistency is limited, mostly when a single variability implementation technique is used, e.g., preprocessors in C. In realistic SPLs, variability is implemented using a combined set of traditional techniques, e.g., inheritance, overloading, design patterns. An inappropriate choice and combination of such techniques become the source of variability inconsistencies. In this paper, we present a tooled approach to check the consistency of variability between the specification and implementation levels, when several variability implementation techniques are used together. The proposed method models the implemented variability in terms of variation points and variants, in a forest-like structure, and uses slicing to partially check the resulting propositional formulas at both levels. As a result, it offers an early and automatic detection of inconsistencies when the mapping of variability between both levels is ideal, and with a possible extension to 1 -- to -- m mapping. We implemented and successfully applied the approach in four case studies. Our implementation, publicly available, detects inconsistencies in a very short time, which makes possible to ensure consistency earlier in the development process.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {29–38},
numpages = {10},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3382025.3414966,
author = {Basile, Davide and Beek, Maurice H. ter and Cordy, Maxime and Legay, Axel},
title = {Tackling the equivalent mutant problem in real-time systems: the 12 commandments of model-based mutation testing},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414966},
doi = {10.1145/3382025.3414966},
abstract = {Mutation testing can effectively drive test generation to reveal faults in software systems. However, it faces a typical efficiency issue as it can produce many mutants that are equivalent to the original system, making it impossible to generate test cases from them.We consider this problem when model-based mutation testing is applied to real-time system product lines, represented as timed automata. We define novel, time-specific mutation operators and formulate the equivalent mutant problem in the frame of timed refinement relations.Further, we study in which cases a mutation yields an equivalent mutant. Our theoretical results provide guidance to system engineers, allowing them to eliminate mutations from which no test case can be produced. Our evaluation, based on a proof-of-concept tool and an industrial case from the automotive domain, confirms the validity of our theory and demonstrates that our approach can eliminate many of the equivalent mutants (88% in our case study).},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {30},
numpages = {11},
keywords = {mutation-based testing, real-time systems, software product lines},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/2791060.2793678,
author = {Font, Jaime and Ballar\'{\i}n, Manuel and Haugen, \O{}ystein and Cetina, Carlos},
title = {Automating the variability formalization of a model family by means of common variability language},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2793678},
doi = {10.1145/2791060.2793678},
abstract = {The aim of domain engineering process is to define and realise the commonality and variability of a Software Product Line. In the context of a family of models, spotting the commonalities and differences may become cumbersome and error prone as the number of models and its complexity increases. This work presents an approach to automate the formalization of variability in a given family of models. As output, the variability is made explicit in terms of Common Variability Language. The model commonalities and differences are specified as placements over a base model and replacements in a model library. The resulting Software Product Line (SPL) enables the derivation of new product models by reusing the extracted model fragments. Furthermore, the SPL can be evolved by the creation of new models, which are in turn automatically decomposed as model fragments of the SPL. The approach has been validated with our industrial partner (BSH), an induction hobs company. Finally, we present five different evolution scenarios encountered during the validation.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {411–418},
numpages = {8},
keywords = {common variability language, model-based software product lines, reverse engineering, variability identification},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2019136.2019161,
author = {Pleuss, Andreas and Rabiser, Rick and Botterweck, Goetz},
title = {Visualization techniques for application in interactive product configuration},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019161},
doi = {10.1145/2019136.2019161},
abstract = {In product line engineering (PLE) a major challenge is the complexity of artifacts that have to be handled. In real-world product lines, variability models can become large and complex comprising thousands of elements with hundreds of non-trivial dependencies. Visual and interactive techniques aim to reduce the (cognitive) complexity and support the user during challenging PLE tasks like product configuration. There are many visualization techniques described in the literature -- e.g., in Software Visualization -- and some isolated techniques have been applied in PLE tools. Nevertheless, the full potential of visualization in the context of PLE has not been exploited so far. This paper provides an overview of (1) available visualization techniques and criteria to judge their benefits and drawbacks for product configuration, (2) which have been applied in product configuration in PLE, and (3) which could be beneficial to support product configuration. We propose a research agenda for future work in visual and interactive PLE techniques.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {22},
numpages = {8},
keywords = {product configuration, product line engineering, software visualization},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/2648511.2648536,
author = {Damiani, Ferruccio and Schaefer, Ina and Winkelmann, Tim},
title = {Delta-oriented multi software product lines},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648536},
doi = {10.1145/2648511.2648536},
abstract = {Modern software systems outgrow the scope of traditional software product lines (SPLs) resulting in multi software product lines (MSPLs) with many interconnected subsystem versions and variants. Delta-oriented programming (DOP) is a flexible, modular approach for implementing SPLs, but DOP so far does not allow the realization of MSPLs. In this paper, we extend DOP to support MSPL development and provide the first holistic modeling approach for MSPLs that spans problem, solution and configuration space. The main concept is the extension of DOP with the possibility to import other SPLs or MSPLs into a new MSPL. By expressing constraints amongst the imported SPLs, a common configuration and product generation is enabled.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {232–236},
numpages = {5},
keywords = {Java, delta-oriented programming, multi software product line},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3336294.3342375,
author = {Arcaini, Paolo and Gargantini, Angelo and Radavelli, Marco},
title = {Achieving Change Requirements of Feature Models by an Evolutionary Approach},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342375},
doi = {10.1145/3336294.3342375},
abstract = {Software Product Lines (SPLs) are families of products that share some common features, and differ on some others. The variability of SPLs is usually described at design time by using variability models; one of the main used variability models are feature models (FMs).},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {256},
numpages = {1},
keywords = {feature models, mutation, search-based software engineering, software product lines},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2791060.2796539,
author = {Santos, Alcemir Rodrigues},
title = {Understanding hybrid SPL composition impact on the refactoring into SPL},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2796539},
doi = {10.1145/2791060.2796539},
abstract = {Feature-oriented software development still register few cases of adoption in industry. At least to some extent, such lower adotion might derive from the lack of evidence of its gains in the overall software project costs. This Ph.D thesis aims to improve the state-of-the-art by adding evidence to the body of knowledge on the adoption of Software Product Line (SPL) hybrid composition approahces.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {348–351},
numpages = {4},
keywords = {conditional compitlation, consistency checking, eclipse plugin, exploratory study, software product lines engineering},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2364412.2364430,
author = {Creff, Stephen and Champeau, Jo\"{e}l and J\'{e}z\'{e}quel, Jean-Marc and Mon\'{e}gier, Arnaud},
title = {Model-based product line evolution: an incremental growing by extension},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364430},
doi = {10.1145/2364412.2364430},
abstract = {Model-Based Engineering (MBE) and Product Line Engineering (PLE) have been combined, to handle new system development constraints like: increasing complexity, higher product quality, faster time-to-market and cost reduction. As observed by some authors, the derivation of a product from product line shared core assets has been insufficiently addressed and can remain tedious in practice. We cope with this issue focusing on having a flexible and reactive model-based derivation, and propose an incremental evolution by extension of the product line coupled with this derivation activity. Process and tools bridge the gap between Application and Domain Engineering introducing a semi-automatic feedback to benefits from the developments made in the Application Engineering. The approach is applied to a model-based product line dedicated to Class diagrams, and is tooled within the Eclipse environment.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {107–114},
numpages = {8},
keywords = {design tools, evolution by extension, methodology, model based engineering, product derivation, product line engineering},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3336294.3342382,
author = {Schmid, Klaus and Eichelberger, Holger and El-Sharkawy, Sascha},
title = {Variability Modeling and Implementation with EASy-Producer},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342382},
doi = {10.1145/3336294.3342382},
abstract = {EASy-Producer is an open-source research toolset for engineering product lines, variability-rich software ecosystems, and dynamic software product lines. In this tutorial, we will introduce its (textual) variability modeling capabilities realized by the Integrated Variability Modeling Language (IVML) and its model-based development and implementation capabilities, which are realized by the Variability Instantiation Language (VIL) and the Variability Template Language (VTL).},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {328},
numpages = {1},
keywords = {model-based engineering, software product lines, variability modeling},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3330204.3330254,
author = {Martins, J\'{u}lio and Bezerra, Carla Ilane Moreira and Uch\^{o}a, Anderson},
title = {Analyzing the Impact of Inter-smell Relations on Software Maintainability: An Empirical Study with Software Product Lines},
year = {2019},
isbn = {9781450372374},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3330204.3330254},
doi = {10.1145/3330204.3330254},
abstract = {A Software Product Line (SPL) consists of a systematic reuse strategy to construct systems with less effort as long as they belong to the same family that share the same components and belong to the same domain of Marketplace. In this context, to support large-scale reuse, components of a Software Product Line should be easy to maintain. Thus, developers should be more concerned with anomalies known as code smells and more than that, co-occurrences known as Inter-smell deserve to be further studied to verify their real impact on maintainability in SPL. Thus, this paper conducts a study to investigate the impact of Inter-smell occurrences on maintainability in MobileMedia and Health Watcher SPLs. The results show that the presence of co-occurrences of Inter-smell did not negatively impact the maintenance of MobileMedia and Health Watcher SPLs, unlike results found in other studies in the literature, and even more, our results indicate that the metric Lack of Cohesion of Methods is one of the most important for the maintainability of object-oriented SPLs.},
booktitle = {Proceedings of the XV Brazilian Symposium on Information Systems},
articleno = {44},
numpages = {8},
keywords = {Code Smell, Maintainability, Software - QualityControl, Software product line engineering},
location = {Aracaju, Brazil},
series = {SBSI '19}
}

@inproceedings{10.1145/2934466.2962732,
author = {Lape\~{n}a, Ra\'{u}l and Font, Jaime and P\'{e}rez, Francisca and Cetina, Carlos},
title = {Improving feature location by transforming the query from natural language into requirements},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2962732},
doi = {10.1145/2934466.2962732},
abstract = {Software maintenance and evolution activities are responsible for the emergence of a great demand of feature location approaches that search relevant code in a large codebase. However, this search is usually performed manually and relies heavily on developers. In this paper, we propose a feature location approach that, instead of searching directly into code from a natural language query as other approaches do, transforms a natural language query to a query that is made up of the requirements that are located as relevant. Furthermore, our approach limits the scope of the code search space by selecting only the code of those products that hold relevant requirements. We evaluate the overall effectiveness of our approach in the industrial domain of train control software. Our results show that our approach improves in 18.1% the results of precision with regard to searching directly into code, which encourages further research in this direction.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {362–369},
numpages = {8},
keywords = {families of software products, feature location, software maintenance and evolution},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2491627.2491636,
author = {Kato, Tadahisa and Kawakami, Masumi and Myojin, Tomoyuki and Ogawa, Hideto and Hirono, Koji and Hasegawa, Takashi},
title = {Case study of applying SPLE to development of network switch products},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491636},
doi = {10.1145/2491627.2491636},
abstract = {Software product line engineering has spread as a technique for promoting the efficient development of embedded products with many product line-ups. During the development of network switch products at Hitachi Metals, Ltd., the number of development man-months increased as the number of product line-ups increased. Therefore, we shifted our development paradigm to product line development for efficient product development. We classified software assets as implementation assets, test assets, and design assets, and from these three assets, we extracted common objects and integrated them as reusable elements. By doing so, we promoted the efficient development of software assets and reduced the contradictions between the contents of the software assets. As a result, we reduced the amount of the source code by 53.1%. In this paper, we discuss the details of our technique and the effect of applying it. In addition, we discuss how you can apply our technique in the development of other products.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {198–207},
numpages = {10},
keywords = {document integration, software integration, software maintenance, software reuse, test automation},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2791060.2791095,
author = {Arrieta, Aitor and Sagardui, Goiuria and Etxeberria, Leire},
title = {Test control algorithms for the validation of cyber-physical systems product lines},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791095},
doi = {10.1145/2791060.2791095},
abstract = {Cyber-Physical Systems (CPSs) product lines appear in a wide range of applications of different domains (e.g., car's doors' windows, doors of a lift, etc.). The variability of these systems is large and as a result they can be configured into plenty of configurations. Testing each of the configurations can be time consuming as not only software has to be simulated, but also the hardware and the physical layer of the CPS, which is often modelled with complex mathematical models. Choosing the adequate test control strategy is critical when testing CPSs product lines. This paper presents a set of test control algorithms organized in an architecture of three layers (domain, application and simulation) for testing CPSs product lines. An illustrative example of a CPS product line is presented and three experiments are conducted to measure the performance of the proposed test control algorithms. We conclude that test scheduling and test suite minimization significantly help to reduce the overall test costs while preserving the test quality in CPSs product lines. In addition, we conclude that knowing the results of the previously tested configurations permits reducing the time for the detection of anomalous designs.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {273–282},
numpages = {10},
keywords = {cyber-physical systems product lines, product line engineering, testing, validation},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@phdthesis{10.5555/1415166,
author = {Liu, Shih-Hsi},
advisor = {Bryant, Barrett R.},
title = {Qospl: a quality of service-driven software product line engineering framework for design and analysis of component-based distributed real-time and embedded systems},
year = {2007},
isbn = {9780549467847},
publisher = {University of Alabama at Birmingham},
address = {USA},
abstract = {Software complexity may be reduced and productivity may be increased by the synergy of Component-Based Software Engineering and Software Product Line Engineering. The synergistic techniques decrease complexity by uplifting software artifacts to a higher abstraction level, namely the component level, and defining the interfaces, interactions, and contexts of such artifacts for composing software systems. Such synergistic techniques also facilitate productivity increase by promoting feature reusability, leveraging component replacement and offering selectivity among product variants. When applied to Distributed Real-time and Embedded (DRE) systems, however, these technologies must fulfill such systems' time-critical missions and numerous functional and Quality of Service (QoS) requirements. New critical challenges to be solved are QoS sensitivity that influences functional validity and performance quality, tangled requirements that increase the complexity of requirements evaluation and abundant unsatisfactory design artifacts that introduce unnecessary development workload. With an aim to answer the QoS sensitivity problem and alleviate the requirements evaluation complexity and development workload in the analysis and design workflows of a DRE software product line construction, this dissertation introduces a Quality of Service-driven software Product Line engineering framework (QoSPL). Such a framework consists of domain engineering, application engineering and quantitative analysis processes. The domain engineering process analyzes QoS requirements, represented as the execution flows of application-specific and functionality-determined tasks, and their common and variable features by means of a grammar-oriented specification language. The application engineering process models a set of execution flows to describe the behavioral characteristics of a DRE system by means of formalism with concurrent and asynchronous behaviors in a timely manner. A DRE software product line can be realized by varying different components and/or execution flows. The quantitative analysis process utilizes evolutionary algorithms to simulate the influence factors of the deployment environment and to search the optimal simulation results. Less probable design artifacts in terms of their QoS requirements can be eliminated by means of programs written in a domain-specific language. Adaptive approaches written in the domain-specific language hasten the convergence rates and/or obtain better optimal results for the quantitative analysis process. This dissertation provides two case studies and a number of experimental results to show the benefits of using QoSPL for a DRE software product line construction.},
note = {AAI3301390}
}

@inproceedings{10.1145/3307630.3342419,
author = {Ghofrani, Javad and Kozegar, Ehsan and Bozorgmehr, Arezoo and Soorati, Mohammad Divband},
title = {Reusability in Artificial Neural Networks: An Empirical Study},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342419},
doi = {10.1145/3307630.3342419},
abstract = {Machine learning, especially deep learning has aroused interests of researchers and practitioners for the last few years in development of intelligent systems such as speech, natural language, and image processing. Software solutions based on machine learning techniques attract more attention as alternatives to conventional software systems. In this paper, we investigate how reusability techniques are applied in implementation of artificial neural networks (ANNs). We conducted an empirical study with an online survey among experts with experience in developing solutions with ANNs. We analyze the feedback of more than 100 experts to our survey. The results show existing challenges and some of the applied solutions in an intersection between reusability and ANNs.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {122–129},
numpages = {8},
keywords = {artificial neural networks, empirical study, reusability, survey, systematic reuse},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3336294.3342379,
author = {Cordy, Maxime and Lazreg, Sami},
title = {Automated Evaluation of Embedded-System Design Alternatives},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342379},
doi = {10.1145/3336294.3342379},
abstract = {This half-day tutorial presents a method to tackle the issue of evaluating a plethora of embedded system design-alternatives against functional and non-functional requirements. Our method results from a joint research project between three universities and Visteon Electronics, a multinational company active in the engineering of automotive embedded systems. We will illustrate its application on a real-world application and, first and foremost, under a practical prism. As such, practitioners developing embedded systems are invited to discover the capabilities of our techniques and tools, as well as insights on how to integrate them into their engineering processes. Moreover, researchers will get a comprehensive picture of the underlying techniques and the challenges that remain ahead.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {330},
numpages = {1},
keywords = {design space exploration, embedded systems, model-based evaluation, quality requirements, variability-intensive systems},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1109/SBCARS.2015.23,
author = {Medeiros, Ana Luisa and Cavalcante, Everton and Batista, Thais and Silva, Eduardo},
title = {ArchSPL-MDD: An ADL-Based Model-Driven Strategy for Automatic Variability Management},
year = {2015},
isbn = {9781467396301},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SBCARS.2015.23},
doi = {10.1109/SBCARS.2015.23},
abstract = {Model-driven strategies have been used in the development of software product lines (SPLs) to facilitate product customization and to generate the source code of the derived products through variability management. In this context, the architecture description of the SPL is essential to make it clear how the architecture realizes the feature model and to represent both domain and application engineering architectural artifacts. Moreover, it is important to establish the association between the architectural specification and the artifacts involved in the SPL development process towards code generation. In this paper, we present Arch SPL-MDD, a model-driven strategy to support explicit modeling and automatic management of variabilities in SPLs. Arch SPL-MDD is associated to a generic process with systematic activities aimed to generate customized source code from the product configuration. Furthermore, the proposed strategy uses the Light PL-ACME architecture description language to support the architectural specification of the SPL, which is input of model transformations towards automatically generating SPL products. To evaluate the efficiency and applicability of Arch SPL-MDD, we conducted a controlled experiment by using Ginga For All, an SPL for the Ginga digital TV middleware.},
booktitle = {Proceedings of the 2015 IX Brazilian Symposium on Components, Architectures and Reuse Software},
pages = {120–129},
numpages = {10},
keywords = {architecture description language, code generation, model transformation, model-driven development, software product lines, variability management},
series = {SBCARS '15}
}

@inproceedings{10.1145/2934466.2934475,
author = {Sousa, Gustavo and Rudametkin, Walter and Duchien, Laurence},
title = {Extending feature models with relative cardinalities},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934475},
doi = {10.1145/2934466.2934475},
abstract = {Feature modeling is widely used to capture and manage commonalities and variabilities in software product lines. Cardinality-based feature models are used when variability applies not only to the selection or exclusion of features but also to the number of times a feature can be included in a product. Feature cardinalities are usually considered to apply in either a local or global scope. However, we have identified that these interpretations are insufficient to capture the variability of cloud environments. In this paper, we redefine cardinality-based feature models to allow multiple relative cardinalities between features and we discuss the effects of relative cardinalities on feature modeling semantics, consistency and cross-tree constraints. To evaluate our approach we conducted an analysis of relative cardinalities in four cloud computing providers. In addition, we developed tools for reasoning on feature models with relative cardinalities and performed experiments to verify the performance and scalability of the approach. The results from our study indicate that extending feature models with relative cardinalities is feasible and improves variability modeling, particularly in the case of cloud environments.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {79–88},
numpages = {10},
keywords = {cardinality, constraints, feature model},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2791060.2791106,
author = {Smiley, Karen and Schmidt, Werner and Dagnino, Aldo},
title = {Evolving an industrial analytics product line architecture},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791106},
doi = {10.1145/2791060.2791106},
abstract = {This paper focuses on an industrial experience with software product lines of analytics-enabled solutions, specifically the evolution of the software product line architecture for a Subject Matter Expert Workbench toolset which supports analytic plugins for multiple software product lines. As context, the toolset product line was intended for integration of expert knowledge into a family of industrial asset health applications at runtime. The toolset architecture is now being evolved to build and manage plugins for multiple Industrial Analytics solutions (software systems and services) beyond asset health. This evolution is driving changes in the desired architecture qualities of the toolset; widening the stakeholder pool and influencing priorities; affecting the architecture tradeoffs and decisions; and triggering updates to the product line architecture, the guidance for applying it, and the current prototype of the toolset. We describe our experiences in handling this evolution, assess lessons learned, and discuss potential relevance to other product line scenarios.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {263–272},
numpages = {10},
keywords = {asset health, extensibility, industrial analytics, interoperability, knowledge, performance, reusability, software product line},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3168365.3170426,
author = {Krieter, Sebastian and Kr\"{u}ger, Jacob and Leich, Thomas},
title = {Don't Worry About it: Managing Variability On-The-Fly},
year = {2018},
isbn = {9781450353984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3168365.3170426},
doi = {10.1145/3168365.3170426},
abstract = {Software-product-line engineering (SPLE) has become a widely adopted concept to implement reusable source code. However, instead of using SPLE from the beginning (the proactive approach), a software product line (SPL) is often only introduced after a set of similar systems is already developed (the extractive approach). This can lead to additional costs, new bugs introduced by refactoring, and an overall inconsistent SPL. In particular, inconsistencies between the variability implemented in the source code and the one represented in a variability model can become a major problem. To address this issue, we propose the concept of variability management derivation: We aim to (semi-)automatically model features and their dependencies while developers implement variable source code to facilitate the initial development, reusability, and later maintainability of SPLs, utilizing the reactive approach. In this paper, we demonstrate our concept by means of preprocessors. However, we claim that it can be adapted for other SPLE implementation techniques to facilitate SPL development.},
booktitle = {Proceedings of the 12th International Workshop on Variability Modelling of Software-Intensive Systems},
pages = {19–26},
numpages = {8},
keywords = {Software product line, adoption strategy, reactive development, variability model},
location = {Madrid, Spain},
series = {VAMOS '18}
}

@inproceedings{10.1145/2934466.2934471,
author = {Th\"{u}m, Thomas and Ribeiro, M\'{a}rcio and Schr\"{o}ter, Reimar and Siegmund, Janet and Dalton, Francisco},
title = {Product-line maintenance with emergent contract interfaces},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934471},
doi = {10.1145/2934466.2934471},
abstract = {A software product line evolves whenever one of its products need to evolve. Maintenance of preprocessor-based product lines is a difficult task, as changes to the code base may unintentionally influence the behavior of uninvolved products. Hence, developers should be supported during maintenance. We present emergent contract interfaces to make product-line development more efficient and less error-prone. The key idea is that for a given maintenance point (i.e., an assignment), we calculate (a) features in the source code that may be affected and (b) assertions based on contracts defined in the code base. By means of a controlled experiment, we provide empirical evidence regarding efficiency and error-avoidance with emergent contract interfaces.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {134–143},
numpages = {10},
keywords = {design by contract, evolution, maintenance, preprocessor variability, software product lines, weakest precondition},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3336294.3342370,
author = {Li, Yan and Yue, Tao and Ali, Shaukat and Zhang, Li},
title = {Enabling Automated Requirements Reuse and Configuration},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342370},
doi = {10.1145/3336294.3342370},
abstract = {Software-intensive systems belonging to a product line (PL) often have their shared architecture design available before they are developed. Therefore, the PL often has a large number of reusable and configurable requirements, which are naturally organized hierarchically based on the architecture of the PL. To enable reuse of requirements through configuration at the requirements engineering phase, it is important to provide a methodology (with tool support) to help practitioners to systematically and automatically develop structured and configuration-ready PL requirements repositories. Such a repository can cost-effectively facilitate the development of requirement repositories specific to individual products, i.e., individual systems. In addition, configurations to the repository at the requirements engineering phase of developing a system are part of its complete configurations and can be naturally carried on to downstream product configuration phases such as the design level configuration phase. A complete set system configurations can then be systematically obtained and managed. In this paper, we propose a methodology with tool support, named as Zen-ReqConfig, which is built on existing model-based technologies, natural language processing, and similarity measure techniques, for developing PL requirement repositories and facilitating requirements configuration. Zen-ReqConfig first automatically devises a hierarchical structure for a PL requirements repository. Then, it automatically identifies variabilities in textual requirements. Based on the developed configuration-ready PL requirements repository, it can then facilitate the configuration of products/systems at the requirements level. Zen-ReqConfig relies on two types of variability modeling techniques: cardinality-based feature modeling (CBFM) and a UML-based variability modeling methodology (named as SimPL). Both CBFM and SimPL have been used to address real-world variability modelling problems. To gain insights on the performance of Zen-ReqConfig, we evaluated it with five case studies and experimented with two different similarity measures and two different modelling methods: SimPL and CBFM. Results show that Zen-ReqConfig performed better when it is combined with the Jaro similarity measure. When Zen- ReqConfig is integrated with Jaro, it can (1) structure PL textual requirements under the most fit match criterion with high precision and recall, over 95% for both CBFM and SimPL; (2) identify variabilities in textual requirements under the most fit match criterion, with the average precision over 97% for SimPL and CBFM, and with the average recall over 94% for both SimPL and CBFM; and (3) generate repository structures within 1 second; 4) and allocate a requirement to the repository within 2 seconds on average. When looking into the impact of the two modelling methods on the performance of Zen-ReqConfig, we did not observe practical differences between SimPL and CBFM, implying that Zen-ReqConfig works well with both SimPL and CBFM.Pointer to the original paper: https://link.springer.com/article/10.1007/s10270-017-0641-6},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {206},
numpages = {1},
keywords = {model-based engineering, requirements engineering, software product lines},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2499777.2500719,
author = {Schr\"{o}ter, Reimar and Siegmund, Norbert and Th\"{u}m, Thomas},
title = {Towards modular analysis of multi product lines},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500719},
doi = {10.1145/2499777.2500719},
abstract = {Software product-line engineering enables efficient development of tailor-made software by means of reusable artifacts. As practitioners increasingly develop software systems as product lines, there is a growing potential to reuse product lines in other product lines, which we refer to as multi product line. We identify challenges when developing multi product lines and propose interfaces for different levels of abstraction ranging from variability modeling to functional and non-functional properties. We argue that these interfaces ease the reuse of product lines and identify research questions that need to be solved toward modular analysis of multi product lines.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {96–99},
numpages = {4},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/3106195.3106197,
author = {Cleland-Huang, Jane},
title = {Reverse Engineering Product Lines in Agile Environments: Lesson learned and challenges},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106197},
doi = {10.1145/3106195.3106197},
abstract = {In order to meet competitive market deadlines and to reduce development costs, families of software systems are increasingly developed as Software Product Lines [2]. Adopting agile practices for product-line development brings the promise of faster time-to-market and less costly delivery, while maintaining or even improving safety. Therefore, agile practices are often adopted even though many product lines, such as medical infusion pumps, pacemakers, and flight-control systems, operate in safety-critical domains. This introduces non-trivial risks related to the safe reuse of components across multiple products. The goal is to dynamically compose demonstrably safe products within the constraints of a fast-moving, incrementally delivered project.This talk describes these challenges, with illustrations drawn from Dronology -- a cyber physical environment for managing and coordinating the flight of Unmanned Aerial Vehicles (UAVs) [3]. Dronology was designed to support UAV-based search-and-rescue, environmental data collection, fire reconnaissance, commercial product delivery and other such applications. It was initially targeted toward river-rescue scenarios; and is currently being reverse engineered into a product line.Reverse engineering a product line from a single product, especially one with safety implications, is a challenging task [1]. Within the context of an agile project, the goal is to introduce variability points that bring immediate value to the project stakeholders without breaking the system and without sacrificing safety or other system qualities. On the other hand, by strategically looking ahead, the architecture can be extended incrementally to support the desired variability points. To address incremental delivery, feature models can be evolved over time by adding new common and variable features. As features are planned for current or upcoming sprints, corresponding functional, architectural, and safety stories can be added to the backlog. Practical traceability solutions can be employed from early phases of the project to support product line engineering in order to facilitate the metamorphosis from a single product to a full-fledged product line.These ideas, challenges, and solutions, are presented in this talk, with rich examples drawn from the Dronology system.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {5},
numpages = {1},
keywords = {Agile, Dronology, Product Line},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3336294.3342359,
author = {Oh, Jeho and Gazzillo, Paul and Batory, Don},
title = {t-wise Coverage by Uniform Sampling},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342359},
doi = {10.1145/3336294.3342359},
abstract = {Efficiently testing large configuration spaces of Software Product Lines (SPLs) needs a sampling algorithm that is both scalable and provides good t-wise coverage. The 2019 SPLC Sampling Challenge provides large real-world feature models and asks for a t-wise sampling algorithm that can work for those models.We evaluated t-wise coverage by uniform sampling (US) the configurations of one of the provided feature models. US means that every (legal) configuration is equally likely to be selected. US yields statistically representative samples of a configuration space and can be used as a baseline to compare other sampling algorithms.We used existing algorithm called Smarch to uniformly sample SPL configurations. While uniform sampling alone was not enough to produce 100% 1-wise and 2-wise coverage, we used standard probabilistic analysis to explain our experimental results and to conjecture how uniform sampling may enhance the scalability of existing t-wise sampling algorithms.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {84–87},
numpages = {4},
keywords = {t-wise coverage, software product lines, uniform sampling},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3336294.3336307,
author = {Damasceno, Carlos Diego N. and Mousavi, Mohammad Reza and Simao, Adenilso},
title = {Learning from Difference: An Automated Approach for Learning Family Models from Software Product Lines},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336307},
doi = {10.1145/3336294.3336307},
abstract = {Substantial effort has been spent on extending specification notations and their associated reasoning techniques to software product lines (SPLs). Family-based analysis techniques operate on a single artifact, referred to as a family model, that is annotated with variability constraints. This modeling approach paves the way for efficient model-based testing and model checking for SPLs. Albeit reasonably efficient, the creation and maintenance of family models tend to be time consuming and error-prone, especially if there are crosscutting features. To tackle this issue, we introduce FFSMDiff, a fully automated technique to learn featured finite state machines (FFSM), a family-based formalism that unifies Mealy Machines from SPLs into a single representation. Our technique incorporates variability to compare and merge Mealy machines and annotate states and transitions with feature constraints. We evaluate our technique using 34 products derived from three different SPLs. Our results support the hypothesis that families of Mealy machines can be effectively merged into succinct FFSMs with fewer states, especially if there is high feature sharing among products. These indicate that FFSMDiff is an efficient family-based model learning technique.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {52–63},
numpages = {12},
keywords = {150% model, family model, model learning, software product lines},
location = {Paris, France},
series = {SPLC '19}
}

@article{10.1016/j.infsof.2009.10.009,
author = {Th\"{o}rn, Christer},
title = {Current state and potential of variability management practices in software-intensive SMEs: Results from a regional industrial survey},
year = {2010},
issue_date = {April, 2010},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {52},
number = {4},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2009.10.009},
doi = {10.1016/j.infsof.2009.10.009},
abstract = {Context: More and more, small and medium-sized enterprises (SMEs) are using software to augment the functionality of their products and offerings. Variability management of software is becoming an interesting topic for SMEs with expanding portfolios and increasingly complex product structures. While the use of software product lines to resolve high variability is well known in larger organizations, there is less known about the practices in SMEs. Objective: This paper presents results from a survey of software developing SMEs. The purpose of the paper is to provide a snapshot of the current awareness and practices of variability modeling in organizations that are developing software with the constraints present in SMEs. Method: A survey with questions regarding the variability practices was distributed to software developing organizations in a region of Sweden that has many SMEs. The response rate was 13% and 25 responses are used in this analysis. Results: We find that, although there are SMEs that develop implicit software product lines and have relatively sophisticated variability structures for their solution space, the structures of the problem space and the product space have room for improvement. Conclusions: The answers in the survey indicate that SMEs are in situations where they can benefit from more structured variability management, but the awareness need to be raised. Even though the problem space similarity is high, there is little reuse and traceability activities performed. The existence of SMEs with qualified variability management and product line practices indicates that small organizations are capable to apply such practices.},
journal = {Inf. Softw. Technol.},
month = apr,
pages = {411–421},
numpages = {11},
keywords = {SME, Software engineering, Survey, Variability}
}

@inproceedings{10.1145/2934466.2946044,
author = {Ne\v{s}i\'{c}, Damir and Nyberg, Mattias},
title = {Multi-view modeling and automated analysis of product line variability in systems engineering},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2946044},
doi = {10.1145/2934466.2946044},
abstract = {Product Lines (PL) in the systems engineering (SE) domain are one of the largest and most complex ones. The sheer number of different products that can be derived from PL points out to the scale of the challenge that Product Line Engineering (PLE) faces. Various development artifacts describe PL but due to their diversity, variability modeling across PL is a challenging task. Moreover, this complexity is a major obstacle for achieving traceability across PL which is especially important for product verification. In order to support systems engineering by establishing traceability across PL and aid verification planning we propose Multi-View Variability Model (MVVM). MVVM introduces a set of variability models that represent variability in various development artifacts, e.g. architecture, requirements etc. and corresponding inter-model constraints. We provide a formalization of MVVM and perform a transformation of the MVVM model to a Constraint Satisfiability Problem (CSP) where we formulate queries for the CSP model in order to extract information about variability dependencies among MVVM views. Throughout the paper we use a real system from the automotive domain as the working example in order to illustrate the introduced concepts.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {287–296},
numpages = {10},
keywords = {constraint satisfaction problem, feature diagram, multi-view modeling, product line, variability modeling, verification},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/1151433.1151437,
author = {Ajila, Samuel A. and Bailetti, Antonio J. and Dumitrescu, Razvan T.},
title = {Experience report on software product line evolution due to market reposition},
year = {2004},
isbn = {9781450378185},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1151433.1151437},
doi = {10.1145/1151433.1151437},
abstract = {This paper presents the result of a study on the changes that occurred in the product line of a telecommunication equipments supplier because of the top management decision to change the product line's target market. The study examines six years of data and identifies potential relationships between changes in the product line and changes in the company's customer, inner context, and product layers. Some of the key findings are: (i) Sales are negatively related to product line growth and positively related to design turnover and the number of designers assigned to the product line. (ii) There is no relationship between the size of the code added to the product line and the number of designers required to develop and test it. (iii) There is a positive relationship between designer turnover and impact of change. (iv) The market downturn has an explicit impact on software development activities.},
booktitle = {Proceedings of the 2004 Workshop on Quantitative Techniques for Software Agile Process},
pages = {25–33},
numpages = {9},
keywords = {change, customer, designer, metrics, product line evolution, software product},
location = {Newport Beach, California},
series = {QUTE-SWAP '04}
}

@inproceedings{10.1145/2364412.2364416,
author = {Wanderley, Fernando and da Silveira, Denis Silva and Araujo, Jo\~{a}o and Lencastre, Maria},
title = {Generating feature model from creative requirements using model driven design},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364416},
doi = {10.1145/2364412.2364416},
abstract = {Software Product Lines (SPL) have largely been taken on board by industry. Several reports from large companies such as Bosch, Nokia, Philips and Siemens witness gains and benefits achieved with their use, especially with respect to the reduction on time to market. In SPL development, domain analysis plays a central role where the relevant features are identified. Feature-Oriented Domain Analysis is a method which uses a feature model to specify variabilities and commonalities of an SPL. However, activities related to the Domain Analysis process (managing commonalities and variabilities, with users visibility and relevant stakeholders) in most cases, do not seem to be a simple and easy activity, since to represent these analyzes in modelling domain tools with a certain degree of formality, requires a technical knowledge that domain experts do not always have it prior to use. But creative requirements techniques have been suggested to facilitate the elicitation activity by filling the gap the communications problems between domain experts and software engineers, making the domain analysis more agile. Thus, to improve the domain analysis process, this paper seeks to set out the use of a creative and agile technique for modelling requirements by means of mind maps for cognitive and effective support when building feature models.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {18–25},
numpages = {8},
keywords = {feature model, mind mapping modeling, model-driven engineering, software product line},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2791060.2791099,
author = {Filho, Jo\~{a}o Bosco Ferreira and Allier, Simon and Barais, Olivier and Acher, Mathieu and Baudry, Benoit},
title = {Assessing product line derivation operators applied to Java source code: an empirical study},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791099},
doi = {10.1145/2791060.2791099},
abstract = {Product Derivation is a key activity in Software Product Line Engineering. During this process, derivation operators modify or create core assets (e.g., model elements, source code instructions, components) by adding, removing or substituting them according to a given configuration. The result is a derived product that generally needs to conform to a programming or modeling language. Some operators lead to invalid products when applied to certain assets, some others do not; knowing this in advance can help to better use them, however this is challenging, specially if we consider assets expressed in extensive and complex languages such as Java. In this paper, we empirically answer the following question: which product line operators, applied to which program elements, can synthesize variants of programs that are incorrect, correct or perhaps even conforming to test suites? We implement source code transformations, based on the derivation operators of the Common Variability Language. We automatically synthesize more than 370,000 program variants from a set of 8 real large Java projects (up to 85,000 lines of code), obtaining an extensive panorama of the sanity of the operations.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {36–45},
numpages = {10},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3236405.3236407,
author = {Ghofrani, Javad and Fehlhaber, Anna Lena},
title = {ProductlinRE: online management tool for requirements engineering of software product lines},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3236407},
doi = {10.1145/3236405.3236407},
abstract = {The lack of online tools for managing various artifacts of software product lines is problematic, and stands in contradiction to findings about the need to support collaboration. In this paper, we present ProductLinRE, a web application allowing product line engineers to work cooperatively on artifacts of requirements engineering for software product lines. Our proposed online tool allows distributed teamwork, using a tracking mechanism for projects, artifacts and features while tailoring the requirements artifacts according to the selected features.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {17–22},
numpages = {6},
keywords = {online tools, requirements engineering, software product lines},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2648511.2648538,
author = {Shaker, Pourya and Atlee, Joanne M.},
title = {Behaviour interactions among product-line features},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648538},
doi = {10.1145/2648511.2648538},
abstract = {A software product line (SPL) is often constructed as a set of features, such that individual products can be assembled from a set of common features and a selection of optional features. Although features are conceptualized, developed, and evolved as separate concerns, it is often the case that, in practice, they interfere with each other -- called a feature interaction. In this paper, we precisely define what it means for one feature to have a behaviour interaction with another feature, where the behaviour of one feature is affected by the presence of another feature. Specifically, we use a form of bisimilarity to define when the behaviour of a feature in isolation differs from its behaviour in the presence of an interacting feature. We also consider the case where features are modelled in a language that allows the specification of intended interactions, and we adapt our use of bisimilarity to provide a formal definition for unintended behaviour interactions.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {242–246},
numpages = {5},
keywords = {bisimulation, feature interactions, product lines},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3236405.3236425,
author = {Hinterreiter, Daniel},
title = {Supporting feature-oriented development and evolution in industrial software ecosystems},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3236425},
doi = {10.1145/3236405.3236425},
abstract = {Companies nowadays need to serve a mass market while at the same time customers request highly individual solutions. To handle this problem, development is frequently organized in software ecosystems (SECOs), i.e., interrelated software product lines involving internal and external developers. Individual products for customers are derived and adapted by adding new features or creating new versions of existing features to meet the customer-specific requirements. Development teams typically use version control systems to track fine-grained, implementation-level changes to product lines and products. However, it is difficult to relate such low-level changes to features and their evolution in the SECO. State-of-the-art approaches addressing this issue are variation control systems, which allow tracking of changes at the level of features. However, these systems have not found their way into mainstream development so far. In this thesis we will describe which workflows and additions to variation control systems are required to support feature-oriented development in an industrial SECO environment. We will further investigate mechanisms that support feature-based monitoring to guide the evolution in SECOs.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {79–86},
numpages = {8},
keywords = {configuration management, software evolution, software product lines, variation control systems},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3233027.3233039,
author = {Pereira, Juliana Alves and Schulze, Sandro and Figueiredo, Eduardo and Saake, Gunter},
title = {N-dimensional tensor factorization for self-configuration of software product lines at runtime},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233039},
doi = {10.1145/3233027.3233039},
abstract = {Dynamic software product lines demand self-adaptation of their behavior to deal with runtime contextual changes in their environment and offer a personalized product to the user. However, taking user preferences and context into account impedes the manual configuration process, and thus, an efficient and automated procedure is required. To automate the configuration process, context-aware recommendation techniques have been acknowledged as an effective mean to provide suggestions to a user based on their recognized context. In this work, we propose a collaborative filtering method based on tensor factorization that allows an integration of contextual data by modeling an N-dimensional tensor User-Feature-Context instead of the traditional two-dimensional User-Feature matrix. In the proposed approach, different types of non-functional properties are considered as additional contextual dimensions. Moreover, we show how to self-configure software product lines by applying our N-dimensional tensor factorization recommendation approach. We evaluate our approach by means of an empirical study using two datasets of configurations derived for medium-sized product lines. Our results reveal significant improvements in the predictive accuracy of the configuration over a state-of-the-art non-contextual matrix factorization approach. Moreover, it can scale up to a 7-dimensional tensor containing hundred of configurations in a couple of milliseconds.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {87–97},
numpages = {11},
keywords = {recommender systems, runtime decision-making, self-configuration, software product lines},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3233027.3233035,
author = {Varshosaz, Mahsa and Al-Hajjaji, Mustafa and Th\"{u}m, Thomas and Runge, Tobias and Mousavi, Mohammad Reza and Schaefer, Ina},
title = {A classification of product sampling for software product lines},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233035},
doi = {10.1145/3233027.3233035},
abstract = {The analysis of software product lines is challenging due to the potentially large number of products, which grow exponentially in terms of the number of features. Product sampling is a technique used to avoid exhaustive testing, which is often infeasible. In this paper, we propose a classification for product sampling techniques and classify the existing literature accordingly. We distinguish the important characteristics of such approaches based on the information used for sampling, the kind of algorithm, and the achieved coverage criteria. Furthermore, we give an overview on existing tools and evaluations of product sampling techniques. We share our insights on the state-of-the-art of product sampling and discuss potential future work.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {1–13},
numpages = {13},
keywords = {domain models, feature interaction, sampling algorithms, software product lines, testing},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3336294.3336301,
author = {K\"{u}hn, Thomas and Cazzola, Walter and Giampietro, Nicola Pirritano and Poggi, Massimiliano},
title = {Piggyback IDE Support for Language Product Lines},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336301},
doi = {10.1145/3336294.3336301},
abstract = {The idea to treat domain-specific languages (DSL) as software product lines (SPL) of compilers/interpreters led to the introduction of language product lines (LPL). Although there exist various methodologies and tools for designing LPLs, they fail to provide basic IDE services for language variants-such as, syntax highlighting, auto completion, and debugging support-that programmers normally expect. While state-of-the-art language development tools permit the generation of basic IDE services for a specific language variant, most tools fail to consider and support reuse of basic IDE services of families of DSLs. Consequently, to provide basic IDE services for an LPL, one either generates them for the many language variants or designs a separate SPL of IDEs scattering language concerns. In contrast, we aim to piggyback basic IDE services on language features and provide an IDE for LPLs, which fosters their reuse when generating language variants. In detail, we extended the Neverlang language workbench to permit piggybacking syntax highlighting and debugging support on language components. Moreover, we developed an LPL-driven Eclipse-based plugin that includes a syntax highlighting editor and debugger for an LPL with piggybacked basic IDE services, i.e., where modular language features include the definition for syntax highlighting and debugging. Within this work, we introduce a general mechanism for fostering the basic IDE services' reuse and demonstrate its feasibility by realizing context-aware syntax highlighting for a Java-based family of role-oriented programming languages and providing debugging support for the family of JavaScript-based languages.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {131–142},
numpages = {12},
keywords = {domain specific languages, feature modularity, integrated development environment, language product lines, neverlang},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2934466.2934484,
author = {Vasilevskiy, Anatoly and Chauvel, Franck and Haugen, \O{}ystein},
title = {Toward robust product realisation in software product lines},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934484},
doi = {10.1145/2934466.2934484},
abstract = {Product derivation is a building process of products from selected features in software product lines (SPLs). Realisation paves the way for automatic product derivation. A realisation defines a mapping between abstract features in a feature tree and their implementation artefacts in a model, and therefore governs the derivation of a new product. We experience that a realisation is not always straightforward and robust against modifications in the model. In the paper, we introduce an approach to build robust realisations. It consists of automated planning techniques and a layered architecture to yield a product. We demonstrate how our approach can leverage modern means of software design, development and validation. We evaluate the approach on a use-case provided by an industry partner and compare our technique to the existing realisation layer in the Base Variability Resolution (BVR) language.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {184–193},
numpages = {10},
keywords = {automated planning, bvr, fragment substitution, model, product derivation, product line, realisation, variation point},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2647648.2647649,
author = {Raschke, Wolfgang and Zilli, Massimiliano and Loinig, Johannes and Weiss, Reinhold and Steger, Christian and Kreiner, Christian},
title = {Embedding research in the industrial field: a case of a transition to a software product line},
year = {2014},
isbn = {9781450330459},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647648.2647649},
doi = {10.1145/2647648.2647649},
abstract = {Java Cards [4, 5] are small resource-constrained embedded systems that have to fulfill rigorous security requirements. Multiple application scenarios demand diverse product performance profiles which are targeted towards markets such as banking applications and mobile applications. In order to tailor the products to the customer's needs we implemented a Software Product Line (SPL). This paper reports on the industrial case of an adoption to a SPL during the development of a highly-secure software system. In order to provide a scientific method which allows the description of research in the field, we apply Action Research (AR). The rationale of AR is to foster the transition of knowledge from a mature research field to practical problems encountered in the daily routine. Thus, AR is capable of providing insights which might be overlooked in a traditional research approach. In this paper we follow the iterative AR process, and report on the successful transfer of knowledge from a research project to a real industrial application.},
booktitle = {Proceedings of the 2014 International Workshop on Long-Term Industrial Collaboration on Software Engineering},
pages = {3–8},
numpages = {6},
keywords = {action research, knowledge transfer, software reuse},
location = {Vasteras, Sweden},
series = {WISE '14}
}

@inproceedings{10.1145/3106195.3106202,
author = {Wille, David and Wehling, Kenny and Seidl, Christoph and Pluchator, Martin and Schaefer, Ina},
title = {Variability Mining of Technical Architectures},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106202},
doi = {10.1145/3106195.3106202},
abstract = {Technical architectures (TAs) represent the computing infrastructure of a company with all its hardware and software components. Over the course of time, the number of TAs grows with the companies' requirements and usually a large variety of TAs has to be maintained. Core challenge is the missing information on relations between the existing variants of TAs, which complicates reuse of solutions across systems. However, identifying these relations is an expensive task as architects have to manually analyze each TA individually. Restructuring the existing TAs poses severe risks as often sufficient information is not available (e.g., due to time constraints). To avoid failures in productive systems and resulting loss of profit, companies continue to create new solutions without restructuring existing ones. This increased variability in TAs represents technical debt. In this paper, we adapt the idea of variability mining from the software product line domain and present an efficient and automatic mining algorithm to identify the common and varying parts of TAs by analyzing a potentially arbitrary number of TAs in parallel. Using the identified variability information, architects are capable of analyzing the relations of TAs, identifying reuse potential, and making well-founded maintenance decisions. We show the feasibility and scalability of our approach by applying it to a real-world industrial case study with large sets of TAs.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {39–48},
numpages = {10},
keywords = {enterprise architecture, technical architecture, variability mining},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3336294.3336312,
author = {Gerling, Lea and Schmid, Klaus},
title = {Variability-Aware Semantic Slicing Using Code Property Graphs},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336312},
doi = {10.1145/3336294.3336312},
abstract = {A common problem in program analysis is to identify semantically related statements in programs, for example, which statements change the value of a variable, or implement a specific feature or functionality. This is a very challenging task for large programs and gets even more complicated in the presence of variability implementations like #ifdef-annotations. Program slicing is a technique that can be used to aid developers with this challenge. But while slicing is a well-established technique for individual programs, there has been so far only little work on program slicing of product lines.Here, we introduce a static-analysis approach for semantic slicing of product lines. Our approach introduces the novel concept of a variability-aware code property graph, which combines information about code properties (like statement type) and syntactical structure with data- and control-flow information. This graph is then traversed to gather semantically-related lines of code for a given entry node. We demonstrate our approach with a C-example, including preprocessor statements.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {65–71},
numpages = {7},
keywords = {code property graphs, semantic slicing, software product lines},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3307630.3342410,
author = {Rosiak, Kamil and Urbaniak, Oliver and Schlie, Alexander and Seidl, Christoph and Schaefer, Ina},
title = {Analyzing Variability in 25 Years of Industrial Legacy Software: An Experience Report},
year = {2019},
isbn = {9781450366687},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3307630.3342410},
doi = {10.1145/3307630.3342410},
abstract = {In certain domains, safety-critical software systems may remain operational for decades. To comply with changing requirements, new system variants are commonly created by copying and modifying existing ones. Typically denoted clone-and-own, software quality and overall maintainability are adversely affected in the long-run. With safety being pivotal, a fault in one variant may require the entire portfolio to be assessed. Thus, engineers need to maintain legacy systems dating back decades, implemented in programming languages such as Pascal. Software product lines (SPLs) can be a remedy but migrating legacy systems requires their prior analysis and comparison. For industrial software systems, this remains a challenge.In this paper, we introduce a comparison procedure and customizable metrics to allow for a fine-grained comparison of Pascal modules to the level of individual expressions. By that, we identify common parts of while also capturing different parts between modules as a basis for a transition towards anSPLs practice. Moreover, we demonstrate the feasibility of our approach using a case study with seven Pascal modules totaling 13,271 lines of code with an evolution-history of 25 years and show our procedure to be fast and precise. Furthermore, we elaborate on the case study and detail peculiarities of the Pascal modules, which are characteristic for an evolution-history of a quarter century.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume B},
pages = {65–72},
numpages = {8},
keywords = {clone-and-own, legacy software, software prodct line, variability},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3106195.3106210,
author = {Markiegi, Urtzi and Arrieta, Aitor and Sagardui, Goiuria and Etxeberria, Leire},
title = {Search-based product line fault detection allocating test cases iteratively},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106210},
doi = {10.1145/3106195.3106210},
abstract = {The large number of possible configurations makes it unfeasible to test every single system variant in a product line. Consequently, a small subset of the product line products must be selected, typically following combinatorial interaction testing approaches. Recently, many product line engineering approaches have considered the selection and prioritization of relevant products within the product line. In a further step, these products are thoroughly tested individually. However, the test cases that must be executed in each of the products are not always insignificant, and in systems such as Cyber-Physical System Product Lines (CPSPLs), their test execution time can vary from tens to thousands of seconds. This issue leads to spending a lot of time testing each individual product. To solve this problem we propose a search-based approach to perform the testing of product lines by allocating small number of test cases in each of the products. This approach increases the probability of detecting faults faster. Specifically, our search-based approach obtains a set of products, which are derived from using any state-of-the-art approach as inputs, and a set of attributed test cases. As an output a list of allocated test cases for each product is obtained. We also define a novel fitness function to guide the search and we propose corresponding crossover and mutation operators. The search and test process is iteratively repeated until the time budget is consumed. We performed an evaluation with a CPSPL as a case study. Results suggest that our approach can reduce the fault detection time by 61% and 65% on average when compared with the traditional test process and the Random Search algorithm respectively.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {123–132},
numpages = {10},
keywords = {Fault Detection, Product Line Testing, Search-based Software Engineering},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3336294.3342377,
author = {Tolvanen, Juha-Pekka and Kelly, Steven},
title = {Describing Variability with Domain-Specific Languages and Models},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3342377},
doi = {10.1145/3336294.3342377},
abstract = {This tutorial will teach participants about domain-specific languages and models, where they can best be used (and where not), and how to apply them effectively to improve the speed and quality of product development within a product line.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {329},
numpages = {1},
keywords = {domain-specific language, domain-specific modeling, product derivation, product line variability, tutorial},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3233027.3233057,
author = {Schmid, Klaus and Kr\"{o}her, Christian and El-Sharkawy, Sascha},
title = {Variability modeling with the integrated variability modeling language (IVML) and EASy-producer},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233057},
doi = {10.1145/3233027.3233057},
abstract = {EASy-Producer is an open-source research toolset for engineering product lines, variability-rich software ecosystems, and dynamic software product lines. In this tutorial, we will focus on its (textual) variability modeling capabilities as well as its configuration and validation functionality. Further, we will provide an outlook on how EASy-Producer can be applied to variability instantiation.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {306},
numpages = {1},
keywords = {model-based engineering, software product lines, variability modeling},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2491627.2491652,
author = {Eichelberger, Holger and Schmid, Klaus},
title = {A systematic analysis of textual variability modeling languages},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491652},
doi = {10.1145/2491627.2491652},
abstract = {Industrial variability models tend to grow in size and complexity due to ever-increasing functionality and complexity of software systems. Some authors report on variability models specifying several thousands of variabilities. However, traditional variability modeling approaches do not seem to scale adequately to cope with size and complexity of such models. Recently, textual variability modeling languages have been advocated as one scalable solution.In this paper, we provide a systematic analysis of the capabilities of current textual variability modeling languages, in particular regarding variability management in the large. Towards this aim, we define a classification schema consisting of five dimensions, classify ten different textual variability modeling languages using the classification schema and provide an analysis. In summary, some textual variability modeling languages go beyond textual representations of traditional variability modeling approaches and provide sophisticated modeling concepts and constraint languages. Three textual variability modeling approaches already support mechanisms for large-scale variability modeling such as model composition, modularization, or evolution support.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {12–21},
numpages = {10},
keywords = {scalability, software product lines, textual variability modeling, variability management, variability modeling in the large},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2499777.2500711,
author = {Ciolfi Felice, Marianela and Filho, Joao Bosco Ferreira and Acher, Mathieu and Blouin, Arnaud and Barais, Olivier},
title = {Interactive visualisation of products in online configurators: a case study for variability modelling technologies},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500711},
doi = {10.1145/2499777.2500711},
abstract = {Numerous companies develop interactive environments to assist users in customising sales products through the selection of configuration options. A visual representation of these products is an important factor in terms of user experience. However, an analysis of 100+ existing configurators highlights that not all provide visual representations of configured products. One of the current challenges is the trade-off developers face between either the memory consuming use of pregenerated images of all the combinations of options, or rendering products on the fly, which is non trivial to implement efficiently. We believe that a new approach to associate product configurations to visual representations is needed to compose and render them dynamically. In this paper we present a formal statement of the problem and a model-driven perspective for addressing it as well as our ongoing work and further challenges.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {82–85},
numpages = {4},
keywords = {configurator, software product line, user interface, variability modelling},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/2647908.2655964,
author = {Mannion, Mike and Kaindl, Hermann},
title = {Using similarity metrics for mining variability from software repositories},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655964},
doi = {10.1145/2647908.2655964},
abstract = {Much activity within software product line engineering has been concerned with explicitly representing and exploiting commonality and variability at the feature level for the purpose of a particular engineering task e.g. requirements specification, design, coding, verification, product derivation process, but not for comparing how similar products in the product line are with each other. In contrast, a case-based approach to software development is concerned with descriptions and models as a set of software cases stored in a repository for the purpose of searching at a product level, typically as a foundation for new product development. New products are derived by finding the most similar product descriptions in the repository using similarity metrics.The new idea is to use such similarity metrics for mining variability from software repositories. In this sense, software product line engineering could be informed by the case-based approach. This approach requires defining and implementing such similarity metrics based on the representations used for the software cases in such a repository. It provides complementary benefits to the ones given through feature-based representations of variability and may help mining such variability.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {32–35},
numpages = {4},
keywords = {case-based reasoning, commonality and variability, feature-based representation, product lines, similarity metrics},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3236405.3236411,
author = {Raatikainen, Mikko and Tiihonen, Juha and M\"{a}nnist\"{o}, Tomi and Felfernig, Alexander and Stettinger, Martin and Samer, Ralph},
title = {Using a feature model configurator for release planning},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3236411},
doi = {10.1145/3236405.3236411},
abstract = {The requirements for a system have many dependencies that can be expressed in the individual requirements managed in an issue tracker or a requirements management system. However, managing the entire body of requirements taking into account all complex dependencies is not well supported. We describe how a feature model based configurator can be used as a tool to help manage requirements data. Data transfer and constructing the needed requirements model can be carried out automatically by relying on a model generator. We implemented a prototype tool for requirements and release management that utilizes a knowledge-based configurator.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {29–33},
numpages = {5},
keywords = {feature modeling, release management, requirements engineering},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2019136.2019162,
author = {Quinton, Cl\'{e}ment and Mosser, S\'{e}bastien and Parra, Carlos and Duchien, Laurence},
title = {Using multiple feature models to design applications for mobile phones},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019162},
doi = {10.1145/2019136.2019162},
abstract = {The design of a mobile phone application is a tedious task according to its intrinsic variability. Software designers must take into account in their development process the versatility of available platforms (e.g., Android, iPhone). In addition to this, the variety of existing devices and their divergences (e.g., frontal camera, GPS) introduce another layer of complexity in the development process. These two dimensions can be formalized as Software Product Lines (SPL), independently defined. In this paper, we use a dedicated metamodel to bridge the gap between an application SPL and a mobile device one. This meta-model is also the support for the product derivation process. The approach is implemented in a framework named Applide, and is used to successfully derive customer relationship management software on different devices.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {23},
numpages = {8},
keywords = {application for mobile phones, feature model, meta-model, smartphones, software product line},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/1985484.1985499,
author = {Thao, Cheng and Munson, Ethan V.},
title = {Flexible support for managing evolving software product lines},
year = {2011},
isbn = {9781450305846},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1985484.1985499},
doi = {10.1145/1985484.1985499},
abstract = {In software product line engineering, core assets are shared among multiple products. Core assets and products generally evolve independently. Developers need to capture evolution in both contexts and to propagate changes in both directions between the core assets and the products. Current version control systems have no support for these tasks and this may be one reason for the slow adoption of the product line approach. We address these issues with a prototype version control system that is designed to support product line engineering, but without imposing a strong process model. The prototype is being tested on the DITA documentation standard. It supports evolution of core assets and of products, as well as propagation of changes from core assets to products and vice versa.},
booktitle = {Proceedings of the 2nd International Workshop on Product Line Approaches in Software Engineering},
pages = {60–64},
numpages = {5},
keywords = {software product line engineering, variability management, version control},
location = {Waikiki, Honolulu, HI, USA},
series = {PLEASE '11}
}

@inproceedings{10.1145/2851613.2851959,
author = {Noorian, Mahdi and Bagheri, Ebrahim and Du, Weichang},
title = {Quality-centric feature model configuration using goal models},
year = {2016},
isbn = {9781450337397},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2851613.2851959},
doi = {10.1145/2851613.2851959},
abstract = {In software product line engineering, a feature model represents the possible configuration space and can be customized based on the stakeholders' needs. Considering the complexity of feature models in addition to the diversity of the stake-holders' expectations, the configuration process is viewed as a complex optimization problem. In this paper, we propose a holistic approach for the configuration process that seeks to satisfy the stakeholders' requirements as well as the feature models' structural and integrity constraints. Here, we model stakeholders' functional and non-functional needs and their preferences using requirement engineering goal models. We formalize the structure of the feature model, the stake-holders' objectives, and their preferences in the form of an integer linear program to automatically perform feature selection.},
booktitle = {Proceedings of the 31st Annual ACM Symposium on Applied Computing},
pages = {1296–1299},
numpages = {4},
keywords = {configuration process, feature model, goal model},
location = {Pisa, Italy},
series = {SAC '16}
}

@inproceedings{10.1145/3236405.3236408,
author = {Basile, Davide and Beek, Maurice H. ter and Gnesi, Stefania},
title = {Modelling and analysis with featured modal contract automata},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3236408},
doi = {10.1145/3236405.3236408},
abstract = {Featured modal contract automata (FMCA) have been proposed as a suitable formalism for modelling contract-based dynamic service product lines. A contract is a behavioural description consisting of offers and necessary and permitted service requests with different levels of criticality, to be matched with corresponding offers of other FMCA. Each contract is equipped with a feature constraint, whose features are offers or requests, and characterises a valid product orchestration. A safe orchestration of a product fulfils all necessary and the maximum number of permitted requests, such that all enabled features are available and none of its disabled features is. The entire product line orchestration can be computed from a subset of valid product orchestrations, by exploiting their (partial) ordering. The open-source prototypical toolkit FMCAT supports the specification and orchestration of FMCA, and it interfaces with FeatureIDE for importing feature models and their valid products. In this experience report, we show how to model a Hotel service product line with FMCA and how to analyse it with FMCAT.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {11–16},
numpages = {6},
keywords = {contract automata, orchestration, service product line, variability},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2791060.2791066,
author = {Dhungana, Deepak and Falkner, Andreas and Haselb\"{o}ck, Alois and Schreiner, Herwig},
title = {Smart factory product lines: a configuration perspective on smart production ecosystems},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791066},
doi = {10.1145/2791060.2791066},
abstract = {Smart production aims to increase the flexibility of the production processes and be more efficient in the use of resources. Two important pillars of this initiative are "smart products" and "smart factories". From the perspective of product line engineering, these can be seen as two product lines (product line of factories and product line of goods) that need to be integrated for a common systems engineering approach. In this paper, we look at this problem from the perspective of configuration technologies, outline the research challenges in this area and illustrate our vision using an industrial example. The factory product line goes hand-in-hand with the product line of the products to be manufactured. Future research in product line engineering needs to consider an ecosystem of a multitude of stakeholders - e.g., factory component vendors, product designers, factory owners/operators and end-consumers.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {201–210},
numpages = {10},
keywords = {product and production configuration, product line of factories, smart factory, smart product, smart production},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2364412.2364422,
author = {Damiani, Ferruccio and Owe, Olaf and Dovland, Johan and Schaefer, Ina and Johnsen, Einar Broch and Yu, Ingrid Chieh},
title = {A transformational proof system for delta-oriented programming},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364422},
doi = {10.1145/2364412.2364422},
abstract = {Delta-oriented programming is a modular, yet flexible technique to implement software product lines. To efficiently verify the specifications of all possible product variants of a product line, it is usually infeasible to generate all product variants and to verify them individually. To counter this problem, we propose a transformational proof system in which the specifications in a delta module describe changes to previous specifications. Our approach allows each delta module to be verified in isolation, based on symbolic assumptions for calls to methods which may be in other delta modules. When product variants are generated from delta modules, these assumptions are instantiated by the actual guarantees of the methods in the considered product variant and used to derive the specifications of this product variant.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {53–60},
numpages = {8},
keywords = {program verification, proof system, software product line},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3336294.3336316,
author = {Tolvanen, Juha-Pekka and Kelly, Steven},
title = {How Domain-Specific Modeling Languages Address Variability in Product Line Development: Investigation of 23 Cases},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336316},
doi = {10.1145/3336294.3336316},
abstract = {Domain-Specific Modeling raises the level of abstraction beyond programming by specifying the solution directly with domain concepts. Within product lines domain-specific approaches are applied to specify variability and then generate final products together with commonality. Such automated product derivation is possible because both the modeling language and generator are made for a particular product line --- often inside a single company. In this paper we examine which kinds of reuse and product line approaches are applied in industry with domain-specific modeling. Our work is based on empirical analysis of 23 cases and the languages and models created there. The analysis reveals a wide variety and some commonalities in the size of languages and in the ways they apply reuse and product line approaches.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {155–163},
numpages = {9},
keywords = {code generation, domain-specific language, domain-specific modeling, product derivation, product line variability},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2648511.2648520,
author = {Tribastone, Mirco},
title = {Behavioral relations in a process algebra for variants},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648520},
doi = {10.1145/2648511.2648520},
abstract = {Variant Process Algebra is designed for the formal behavioral modeling of software variation, as arises, for instance, in software product line engineering. Process terms are labelled with the sets of variants, i.e., specific products, where they are enabled. A multi-modal operational semantics enables two compositional forms of reasoning. The first one is concerned with relating the behavior of a variant to the whole family. The second notion relates variants between each other, for instance to be able to formally capture the intuitive idea that a variant is a conservative extension of another, in the sense that it adds more behavior without breaking any existing one. Sufficient conditions are given to establish such a relation statically, by means of syntactic checks on process terms.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {82–91},
numpages = {10},
keywords = {behavioral relations, process algebra},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2791060.2791080,
author = {Van Landuyt, Dimitri and Walraven, Stefan and Joosen, Wouter},
title = {Variability middleware for multi-tenant SaaS applications: a research roadmap for service lines},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791080},
doi = {10.1145/2791060.2791080},
abstract = {Software product line engineering (SPLE) and variability enforcement techniques have been applied to run-time adaptive systems for quite some years, also in the context of multi-tenant Software-as-a-Service (SaaS) applications. The focus has been mainly on (1) the pre-deployment phases of the development life cycle and (2) fine-grained (tenant-level), run-time activation of specific variants. However, with upcoming trends such as DevOps and continuous delivery and deployment, operational aspects become increasingly important.In this paper, we present our integrated vision on the positive interplay between SPLE and adaptive middleware for multi-tenant SaaS applications, focusing on the operational aspects of running and maintaining a successful SaaS offering. This vision, called Service Lines, is based on and motivated by our experience and frequent interactions with a number of Belgian SaaS providers.We concretely highlight and motivate a number of operational use cases that require advanced variability support in middleware and have promising added value for the economic feasibility of SaaS offerings. In addition, we provide a gap analysis of what is currently lacking from the perspectives of variability modeling and management techniques and middleware support, and as such sketch a concrete roadmap for continued research in this area.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {211–215},
numpages = {5},
keywords = {models at run time, multi-tenant SaaS, operational support, run-time variability, service lines, variability middleware},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3493244.3493274,
author = {Silva, Leandro F. and OliveiraJr, Edson},
title = {SMartyModeling: an instance of VMTools-RA for Engineering UML-based Software Product Lines},
year = {2021},
isbn = {9781450395533},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3493244.3493274},
doi = {10.1145/3493244.3493274},
abstract = {Software Product Line (SPL) life cycle comprises a set of essential activities. Variability Management (VM) is one of its most important activities to the success of an SPL, especially those based on UML, as the solution space encompasses different diagrams and perspectives on variability. However, the lack of tools to support UML-based SPLs reflects difficulties in adopting this approach. This scenario motivated the development of SMartyModeling, an environment for engineering UML-based SPL. The SMartyModeling architecture was instantiated based on VMTools-RA, an existing reference architecture for software variability tools. VMTools-RA describes architectural requirements, elements and views on software variability, which aid one to instantiate variability tool architectures. The instantiation process started from the identification of requirements, selection of elements, modules, and visions of VMTools-RA, planning and design of the architectural solutions, implementation of modules and organization of features. We then analyzed the feasibility of adopting VMTools-RA for instantiating an specific tool architecture. In this sense, such instantiation is part of the development process of SMartyModeling, which includes the main activities related to VM. We also empirically evaluated SMartyModeling in three ways: (i) a field study to analyze the instantiation process and the decisions taken; (ii) a comparative experiment analyzing efficiency and effectiveness of SMartyModeling in relation to a general purpose UML tool; and (iii) an evaluation of aspects related to perceived ease of use and perceived usability. The results of such evaluations provide initial evidence VMTools-RA is feasible to instantiate specific architectures and SMartyModeling is feasible to support to VM for UML-based SPLs.},
booktitle = {Proceedings of the XX Brazilian Symposium on Software Quality},
articleno = {33},
numpages = {10},
keywords = {Software Product Line. SMartyModeling. Environment for Modeling Software Product Line. VMTools-RA. UML. Empirical studies.},
location = {Virtual Event, Brazil},
series = {SBQS '21}
}

@inproceedings{10.1145/1944892.1944909,
author = {Thomas, Jacques and Dziobek, Christian and Hedenetz, Bernd},
title = {Variability management in the AUTOSAR-based development of applications for in-vehicle systems},
year = {2011},
isbn = {9781450305709},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1944892.1944909},
doi = {10.1145/1944892.1944909},
abstract = {In automotive electrical/electronics systems, reuse of software applications over vehicle lines is becoming essential due to the growing complexity of the applications. In addition, a growing number of variants have to be handled because of the increasing number of differences arising in vehicle lines. Software product lines are a common approach to address these issues. This paper presents the challenges and our vision for the introduction of a product line approach in the context of AUTOSAR (AUTomotive Open System Architecture)-based development of applications for in vehicle systems.},
booktitle = {Proceedings of the 5th International Workshop on Variability Modeling of Software-Intensive Systems},
pages = {137–140},
numpages = {4},
keywords = {AUTOSAR, feature-oriented development, product line evolution, variability},
location = {Namur, Belgium},
series = {VaMoS '11}
}

@inproceedings{10.1145/3233027.3233041,
author = {Montalvillo, Leticia and D\'{\i}az, Oscar and Fogdal, Thomas},
title = {Reducing coordination overhead in SPLs: peering in on peers},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233041},
doi = {10.1145/3233027.3233041},
abstract = {SPL product customers might not always wait for the next core asset release. When an organization aims to react to market events, quick bug fixes or urgent customer requests, strategies are needed to support fast adaptation, e.g. with product-specific extensions, which are later propagated into the SPL. This leads to the grow-and-prune model where quick reaction to changes often requires copying and specialization (grow) to be later cleaned up by merging and refactoring (prune). This paper focuses on the grow stage. Here, application engineers branch off the core-asset Master branch to account for their products' specifics within the times and priorities of their customers without having to wait for the next release of the core assets. However, this practice might end up in the so-called "integration hell". When long-living branches are merged back into the Master, the amount of code to be integrated might cause build failures or requires complex troubleshooting. On these premises, we advocate for making application engineers aware of potential coordination problems right during coding rather than deferring it until merge time. To this end, we introduce the notion of "peering bar" for Version Control Systems, i.e. visual bars that reflect whether your product's features are being upgraded in other product branches. In this way, engineers are aware of what their peers are doing on the other SPL's products. Being products from the same SPL, they are based on the very same core assets, and hence, bug ixes or functional enhancements undertaken for a product might well serve other products. This work introduces design principles for peering bars. These principles are fleshed out for GitHub as the Version Control System, and pure::variants as the SPL framework.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {110–120},
numpages = {11},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2364412.2364456,
author = {Roos-Frantz, Fabricia and Galindo, Jos\'{e} A. and Benavides, David and Ruiz-Cort\'{e}s, Antonio},
title = {FaMa-OVM: a tool for the automated analysis of OVMs},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364456},
doi = {10.1145/2364412.2364456},
abstract = {Orthogonal Variability Model (OVM) is a modelling language for representing variability in Software Product Line Engineering. The automated analysis of OVMs is defined as the computer-aided extraction of information from such models. In this paper, we present FaMa-OVM, which is a pioneer tool for the automated analysis of OVMs. FaMa-OVM is easy to extend or integrate in other tools. It has been developed as part of the FaMa ecosystem enabling the benefits coming from other tools of that ecosystem as FaMaFW and BeTTy.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {250–254},
numpages = {5},
keywords = {OVMs, software products lines, tools},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3233027.3233036,
author = {Hamza, Mostafa and Walker, Robert J. and Elaasar, Maged},
title = {CIAhelper: towards change impact analysis in delta-oriented software product lines},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233036},
doi = {10.1145/3233027.3233036},
abstract = {Change is inevitable for software systems to deal with the evolving environment surrounding them, and applying changes requires careful design and implementation not to break existing functionalities. Evolution in software product lines (SPLs) is more complex compared to evolution for individual products: a change applied to a single feature might affect all the products in the whole product family. In this paper we present an approach for change impact analysis in delta-oriented programming (DOP), an existing language aimed at supporting SPLs. We propose the CIAHelper tool to identify dependencies within a DOP program, by analyzing the semantics of both the code artifacts and variability models to construct a directed dependency graph. We also consider how the source code history could be used to enhance the recall of detecting the affected artifacts given a change proposal. We evaluate our approach by means of five case studies on two different DOP SPLs.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {31–42},
numpages = {12},
keywords = {change impact analysis, code assets, delta-oriented programming, feature model, variability model},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2019136.2019188,
author = {Mather, Neil},
title = {Concepts and implementation techniques for web systems product-lines using existing frameworks},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019188},
doi = {10.1145/2019136.2019188},
abstract = {In the construction of an enterprise web system spanning multiple domains and customers, software product line engineering is needed to manage the commonalities and variabilities of the product family. Concepts and implementation techniques need to be defined for web systems product lines to enable systematic reuse. Through the definition of these concepts, and the documentation of these techniques, a methodology for reusing existing web frameworks to create enterprise web systems product lines can be defined.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {45},
numpages = {7},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/2362536.2362543,
author = {N\"{o}hrer, Alexander and Biere, Armin and Egyed, Alexander},
title = {A comparison of strategies for tolerating inconsistencies during decision-making},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362543},
doi = {10.1145/2362536.2362543},
abstract = {Tolerating inconsistencies is well accepted in design modeling because it is often neither obvious how to fix an inconsistency nor important to do so right away. However, there are technical reasons why inconsistencies are not tolerated in many areas of software engineering. The most obvious being that common reasoning engines are rendered (partially) useless in the presence of inconsistencies. This paper investigates automated strategies for tolerating inconsistencies during decision-making in product line engineering, based on isolating parts from reasoning that cause inconsistencies. We compare trade offs concerning incorrect and incomplete reasoning and demonstrate that it is even possible to fully eliminate incorrect reasoning in the presence of inconsistencies at the expense of marginally less complete reasoning. Our evaluation is based on seven medium-to-large size software product line case studies. It is important to note that our mechanism for tolerating inconsistencies can be applied to arbitrary SAT problems and thus the basic principles of this approach are applicable to other domains also.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {11–20},
numpages = {10},
keywords = {formal reasoning, inconsistencies, user guidance},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3461001.3473064,
author = {Ayala, Inmaculada and Papadopoulos, Alessandro V. and Amor, Mercedes and Fuentes, Lidia},
title = {ProDSPL: proactive self-adaptation based on dynamic software product lines},
year = {2021},
isbn = {9781450384698},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3461001.3473064},
doi = {10.1145/3461001.3473064},
abstract = {This is an extended abstract of the article: Inmaculada Ayala, Alessandro V. Papadopoulos, Mercedes Amor, Lidia Fuentes, ProDSPL: Proactive self-adaptation based on Dynamic Software Product Lines, Journal of Systems and Software, Volume 175, 2021, 110909, ISSN 0164-1212, https://doi.org/10.1016/j.jss.2021.110909.},
booktitle = {Proceedings of the 25th ACM International Systems and Software Product Line Conference - Volume A},
pages = {81},
numpages = {1},
keywords = {dynamic software product lines, linear constraint, optimization, proactive control, self-adaptation},
location = {Leicester, United Kingdom},
series = {SPLC '21}
}

@inproceedings{10.1145/2934466.2966352,
author = {Javed, Muhammad},
title = {A framework for enhanced feature models based on mathematical analysis},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2966352},
doi = {10.1145/2934466.2966352},
abstract = {A Feature Model is a tree like structure that represents the commonality and variability in Software Product Lines. During analysis required information is extracted from a feature model. In the literature a number of techniques have been presented for the analysis of feature models.Quality of a Feature Model is of prime significance because it is used for the development of families of software. The quality of feature models is affected by the presence of errors. There is a need for a mechanism that could enhance the quality of a feature model by removing all inconsistency, anomaly and redundancy based errors. I am proposing a mathematical technique for the analysis of Feature Models that will lead towards their quality enhancement.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {338–339},
numpages = {2},
keywords = {analysis of feature model, anomaly, error removal, inconsistency, mathematical analysis, quality enhancement, quality of feature model, redundancy},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2791060.2791069,
author = {Valov, Pavel and Guo, Jianmei and Czarnecki, Krzysztof},
title = {Empirical comparison of regression methods for variability-aware performance prediction},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791069},
doi = {10.1145/2791060.2791069},
abstract = {Product line engineering derives product variants by selecting features. Understanding the correlation between feature selection and performance is important for stakeholders to acquire a desirable product variant. We infer such a correlation using four regression methods based on small samples of measured configurations, without additional effort to detect feature interactions. We conduct experiments on six real-world case studies to evaluate the prediction accuracy of the regression methods. A key finding in our empirical study is that one regression method, called Bagging, is identified as the best to make accurate and robust predictions for the studied systems.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {186–190},
numpages = {5},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2934466.2934469,
author = {Zhang, Yi and Guo, Jianmei and Blais, Eric and Czarnecki, Krzysztof and Yu, Huiqun},
title = {A mathematical model of performance-relevant feature interactions},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934469},
doi = {10.1145/2934466.2934469},
abstract = {Modern software systems have grown significantly in their size and complexity, therefore understanding how software systems behave when there are many configuration options, also called features, is no longer a trivial task. This is primarily due to the potentially complex interactions among the features. In this paper, we propose a novel mathematical model for performance-relevant, or quantitative in general, feature interactions, based on the theory of Boolean functions. Moreover, we provide two algorithms for detecting all such interactions with little measurement effort and potentially guaranteed accuracy and confidence level. Empirical results on real-world configurable systems demonstrated the feasibility and effectiveness of our approach.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {25–34},
numpages = {10},
keywords = {boolean functions, feature interactions, fourier transform, performance},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3106195.3106225,
author = {Schlie, Alexander and Wille, David and Schulze, Sandro and Cleophas, Loek and Schaefer, Ina},
title = {Detecting Variability in MATLAB/Simulink Models: An Industry-Inspired Technique and its Evaluation},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106225},
doi = {10.1145/3106195.3106225},
abstract = {Model-based languages such as MATLAB/Simulink play an essential role in the model-driven development of software systems. To comply with new requirements, it is common practice to create new variants by copying existing systems and modifying them. Commonly referred to as clone-and-own, severe problems arise in the long-run when no dedicated variability management is installed. To allow for a documented and structured reuse of systems, their variability information needs to be reverse-engineered. In this paper, we propose an advanced comparison procedure, the Matching Window Technique, and a customizable metric. Both allow us to overcome structural alterations commonly performed during clone-and-own. We analyze related MATLAB/Simulink models and determine, classify and represent their variability information in an understandable way. With our technique, we assist model engineers in maintaining and evolving existing variants. We provide three feasibility studies with real-world models from the automotive domain and show our technique to be fast and precise. Furthermore, we perform semi-structured interviews with domain experts to assess the potential applicability of our technique in practice.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {215–224},
numpages = {10},
keywords = {MATLAB/Simulink, software maintainability, variability mining},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3336294.3336297,
author = {Munoz, Daniel-Jesus and Oh, Jeho and Pinto, M\'{o}nica and Fuentes, Lidia and Batory, Don},
title = {Uniform Random Sampling Product Configurations of Feature Models That Have Numerical Features},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336297},
doi = {10.1145/3336294.3336297},
abstract = {Analyses of Software Product Lines (SPLs) rely on automated solvers to navigate complex dependencies among features and find legal configurations. Often these analyses do not support numerical features with constraints because propositional formulas use only Boolean variables. Some automated solvers can represent numerical features natively, but are limited in their ability to count and Uniform Random Sample (URS) configurations, which are key operations to derive unbiased statistics on configuration spaces.Bit-blasting is a technique to encode numerical constraints as propositional formulas. We use bit-blasting to encode Boolean and numerical constraints so that we can exploit existing #SAT solvers to count and URS configurations. Compared to state-of-art Satisfiability Modulo Theory and Constraint Programming solvers, our approach has two advantages: 1) faster and more scalable configuration counting and 2) reliable URS of SPL configurations. We also show that our work can be used to extend prior SAT-based SPL analyses to support numerical features and constraints.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {289–301},
numpages = {13},
keywords = {bit-blasting, feature model, model counting, numerical features, propositional formula, software product lines},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/3336294.3336296,
author = {Ludwig, Kai and Kr\"{u}ger, Jacob and Leich, Thomas},
title = {Covert and Phantom Features in Annotations: Do They Impact Variability Analysis?},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336296},
doi = {10.1145/3336294.3336296},
abstract = {The annotation-based variability of the C preprocessor (CPP) has a bad reputation regarding comprehensibility and maintainability of software systems, but is widely adopted in practice. To assess the complexity of such systems' variability, several analysis techniques and metrics have been proposed in scientific communities. While most metrics seem reasonable at first glance, they do not generalize over all possible usages of C preprocessor variability that appear in practice. Consequently, some analyses may neglect the actual complexity of variability in these systems and may not properly reflect the real situation. In this paper, we investigate two types of variation points, namely negating and #else directives, to which we refer to as corner cases, as they are seldom explicitly considered in research. To investigate these directives, we rely on three commonly used metrics: lines of feature code, scattering degree, and tangling degree. We (1) describe how the considered directives impact these metrics, (2) unveil the resulting differences within 19 systems, and (3) propose how to address the arising issues. The results show that the corner cases appear regularly in variable feature code and can heavily change the results obtained with established metrics. We argue that we need to refine metrics and improve variability analysis techniques to provide more precise results, but we also need to reason about the meaning of corner cases and metrics.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {218–230},
numpages = {13},
keywords = {empirical study, preprocessor, software metrics, software product lines, variability analysis},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2934466.2934492,
author = {Groher, Iris and Weinreich, Rainer and Buchgeher, Georg and Schossleitner, Robert},
title = {Reusable architecture variants for customer-specific automation solutions},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934492},
doi = {10.1145/2934466.2934492},
abstract = {Manufacturing execution systems (MES) are key elements of industrial automation systems. MES can be deployed at different levels of scale from a single site or plant to a company with globally distributed production sites all over the world. Establishing or extending an MES is a complex process, which requires taking the already existing software and system architecture into account in addition to the desired MES features. We developed an approach and an associated tool to support the process of creating offers for customer-specific MES solutions based on a vendor-specific automation platform. We define architecture variants for selecting a specific MES feature set and for supporting different MES expansion stages. Additionally, we provide an architecture modeling approach to explore the integration with existing software and system infrastructures. The approach has been applied at the STIWA Group, a vendor of MES for industrial production lines.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {242–251},
numpages = {10},
keywords = {architecture variants, automation platform, customer-specific offer, feature set, manufacturing execution system (MES)},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2362536.2362567,
author = {Savolainen, Juha and Mannion, Mike and Kuusela, Juha},
title = {Developing platforms for multiple software product lines},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362567},
doi = {10.1145/2362536.2362567},
abstract = {Many approaches to software product line engineering have been founded on the development of a single product line platform. However as customer requirements change and new products are added to the product line, software producers recognize that the platform cannot be "stretched" indefinitely and a significant problem is striking a balance between development efficiency by increasing platform commonality and customer dissatisfaction from products with additional undesirable features and properties.One alternative is to develop multiple product lines (MPLs). However the challenge remains about what to include in a multiple product line platform. Drawing upon industrial experience of working with 4 companies, this paper explores the characteristics of the contexts in which MPLs are a viable alternative development strategy and then proposes a framework of approaches to platform development.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {220–228},
numpages = {9},
keywords = {industrial experience, multiple product lines, software reuse},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3409334.3452048,
author = {Shatnawi, Hazim and Cunningham, H. Conrad},
title = {Encoding feature models using mainstream JSON technologies},
year = {2021},
isbn = {9781450380683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3409334.3452048},
doi = {10.1145/3409334.3452048},
abstract = {Feature modeling is a process for identifying the common and variable parts of a software product line and recording them in a tree-structured feature model. However, feature models can be difficult for mainstream developers to specify and maintain because most tools rely on specialized theories, notations, or technologies. To address this issue, we propose a design that uses mainstream JSON-related technologies to encode and manipulate feature models and then uses the models to generate Web forms for product configuration. This JSON-based design can form part of a comprehensive, interactive environment that enables mainstream developers to specify, store, update, and exchange feature models and use them to configure members of product families.},
booktitle = {Proceedings of the 2021 ACM Southeast Conference},
pages = {146–153},
numpages = {8},
keywords = {JSON, MongoDB, feature, feature diagram, feature model, software engineering, software product line, software reuse},
location = {Virtual Event, USA},
series = {ACMSE '21}
}

@inproceedings{10.1145/3233027.3236400,
author = {Setyautami, Maya R. A and Adianto, Daya and Azurat, Ade},
title = {Modeling multi software product lines using UML},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3236400},
doi = {10.1145/3233027.3236400},
abstract = {We choose Unified Modeling Language (UML) as the foundation to model the proposed solution of the Multi Software Product Lines (MPL) interoperability challenge. The proposed pseudo-code is modeled as an extension of the UML meta-model to support MPL. The model serves to provide a standard representation of MPL and an intuitive transformation to an Object-Oriented Programming (OOP) language. Some extension to the UML that yet to have intuitive translation into common OO language are augmented with a mechanism using a build automation system. This mechanism provides manual transformation that gives us some hints whether the proposed solution fulfilled the evaluation criteria. The given challenge case has been written in our proposed pseudo-code, modeled in our UML extension, and translated into Java source code and Gradle build scripts. By invoking Gradle tasks, we can simulate product generation that creates products as Java objects.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {274–278},
numpages = {5},
keywords = {UML profile, delta-oriented programming, multi software product lines},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2019136.2019153,
author = {Nascimento, Amanda S\'{a}vio and Rubira, Cec\'{\i}lia Mary Fischer and Lee, Jaejoon},
title = {An SPL approach for adaptive fault tolerance in SOA},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019153},
doi = {10.1145/2019136.2019153},
abstract = {It is challenging to apply existing fault tolerance strategies for developing dependable Service Oriented systems, due to the lack of capabilities to adapt themselves at runtime to cope with dynamic changes of (a) user requirements and (b) the level of quality of services (QoS). In order to support such dynamic changes, we propose to adopt Software Product Line techniques. In particular, we adopt a feature model and product line architecture to capture the variability among software fault tolerance strategies based on design diversity. We propose an infrastructure that supports the strategy changes at runtime through dynamic management of variability and is responsible for the dependable mediation logic between service clients and redundant services. The infrastructure has an autonomous controller (i.e. managing a loop of collection, analysis, planning and execution), which is responsible for monitoring the changes of (i) QoS level and (ii) user requirements and decides, in accordance with high-level policies, an appropriate fault tolerance strategy to be executed. Also, our solution allows the dynamic provision of redundant services by describing them in terms of semantics. Finally, we performed a proof of concept which indicates the feasibility of the proposed solution.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {15},
numpages = {8},
keywords = {QoS-aware, autonomic control loop, dependability improvement, dynamic software product line, semantic services},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3233027.3236404,
author = {Gazzillo, Paul and Koc, Ugur and Nguyen, ThanhVu and Wei, Shiyi},
title = {Localizing configurations in highly-configurable systems},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3236404},
doi = {10.1145/3233027.3236404},
abstract = {The complexity of configurable systems has grown immensely, and it is only getting more complex. Such systems are a challenge for software testing and maintenance, because bugs and other defects can and do appear in any configuration. One common requirement for many development tasks is to identify the configurations that lead to a given defect or some other program behavior. We distill this requirement down to a challenge question: given a program location in a source file, what are valid configurations that include the location? The key obstacle is scalability. When there are thousands of configuration options, enumerating all combinations is exponential and infeasible. We provide a set of target programs of increasing difficulty and variations on the challenge question so that submitters of all experience levels can try out solutions. Our hope is to engage the community and stimulate new and interesting approaches to the problem of analyzing configurations.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {269–273},
numpages = {5},
keywords = {configurations, program analysis, testing, variability},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2499777.2500713,
author = {Lettner, Daniela and Petruzelka, Michael and Rabiser, Rick and Angerer, Florian and Pr\"{a}hofer, Herbert and Gr\"{u}nbacher, Paul},
title = {Custom-developed vs. model-based configuration tools: experiences from an industrial automation ecosystem},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500713},
doi = {10.1145/2499777.2500713},
abstract = {High demands regarding the variability of automation software motivate organizations to automate the configuration process. In practice, this often leads to the development of custom configuration tools designed specifically for configuring the automation software they were developed for. This approach works well as long as both, the development of the software and the configurator are under the full control of the organization. However, software platforms are increasingly open, i.e., key customers add capabilities and thereby change the platform's variability. Often, these customers create a new platform themselves, which they offer to their customers. Moving from a closed platform to a software ecosystem means that development and variability management happen at multiple layers involving multiple teams with different backgrounds. This poses new requirements regarding the flexibility of configuration tools. In this paper, we report experiences and issues with a custom-developed configurator currently in use in an industrial automation software ecosystem. We describe how a model-based tool can be applied to address these issues and provide a scenario-based comparison of the custom-developed solution and the model-based configurator.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {52–58},
numpages = {7},
keywords = {configuration, model-based product lines, software ecosystem},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/2791060.2791114,
author = {Beuche, Danilo and Hellebrand, Robert},
title = {Using pure::variants across the product line lifecycle},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791114},
doi = {10.1145/2791060.2791114},
abstract = {The paper describes a demonstration of pure::variants, a commercial tool for variant and variability management for product lines. The demonstration shows how flexible product line (PL) architectures can be built, tested and maintained by using the modeling and integration capabilities provided by pure::variants [2].},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {352–354},
numpages = {3},
keywords = {feature modelling, software product lines, tools},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2791060.2791093,
author = {Souto, Sabrina and Gopinath, Divya and d'Amorim, Marcelo and Marinov, Darko and Khurshid, Sarfraz and Batory, Don},
title = {Faster bug detection for software product lines with incomplete feature models},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791093},
doi = {10.1145/2791060.2791093},
abstract = {A software product line (SPL) is a family of programs that are differentiated by features --- increments in functionality. Systematically testing an SPL is challenging because it requires running each test of a test suite against a combinatorial number of programs. Feature models capture dependencies among features and can (1) reduce the space of programs to test and (2) enable accurate categorization of failing tests as failures of programs or the tests themselves, not as failures due to illegal combinations of features. In practice, sadly, feature models are not always available.We introduce SPLif, the first approach for testing SPLs that does not require the a priori availability of feature models. Our insight is to use a profile of passing and failing test runs to quickly identify failures that are indicative of real problems in test or code rather than specious failures due to illegal feature combinations.Experimental results on five SPLs and one large configurable system (GCC) demonstrate the effectiveness of our approach. SPLif enabled the discovery of five news bugs in GCC, three of which have already been fixed.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {151–160},
numpages = {10},
keywords = {GCC, feature models, software testing},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2019136.2019164,
author = {El-Sharkawy, Sascha and Kr\"{o}her, Christian and Schmid, Klaus},
title = {Supporting heterogeneous compositional multi software product lines},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019164},
doi = {10.1145/2019136.2019164},
abstract = {Software Product Line Engineering is inherently complex. This complexity increases further if multiple product line infrastructures are composed to yield the final products, an approach sometimes referred to as Multi Software Product Lines (MSPL). In this paper, we present an approach that targets this development scenario. The approach we present here aims at a lightweight, scalable, and practical approach to variability management for multi software product lines.Our approach explicitly supports heterogeneous product lines, i.e. situations where the various product lines use different generation approaches. The approach has been implemented in the EASy-Producer tool set and applied on some case studies.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {25},
numpages = {4},
keywords = {decision modeling, distributed work, heterogeneous composition, multi software product lines, variability modeling},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3233027.3233053,
author = {Th\"{u}m, Thomas and Krieter, Sebastian and Leich, Thomas},
title = {Clean your variable code with featureIDE},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233053},
doi = {10.1145/3233027.3233053},
abstract = {FeatureIDE is an open-source framework to model, develop, and analyze feature-oriented software product lines. It is mainly developed in a cooperation between TU Braunschweig, University of Magdeburg, and Metop GmbH. Nevertheless, many other institutions contributed to it in the past decade. Goal of this tutorial is to illustrate how FeatureIDE can be used to clean variable code, whereas we will focus on dependencies in feature models and on variability implemented with preprocessors. The hands-on tutorial will be highly interactive and is devoted to practitioners facing problems with variability, lecturers teaching product lines, and researchers who want to save resources in building product-line tools based on the FeatureIDE infrastructure.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {299},
numpages = {1},
keywords = {configuration, eclipse, feature modeling, feature-oriented software development, integrated development environment, preprocessors, software product lines},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2934466.2934474,
author = {Myll\"{a}rniemi, Varvana and Raatikainen, Mikko and Savolainen, Juha and M\"{a}nnist\"{o}, Tomi},
title = {Purposeful performance variability in software product lines: a comparison of two case studies},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934474},
doi = {10.1145/2934466.2934474},
abstract = {Within software product lines, customers may have different quality needs. To produce products with purposefully different quality attributes, several challenges must be addressed. First, one must be able to distinguish product quality attributes to the customers in a meaningful way. Second, one must create the desired quality attribute differences during product-line architecture design and derivation. To study how performance is varied purposefully in software product lines, we conducted a comparison and re-analysis of two industrial case studies in the telecommunication and mobile game domains. The results show that performance variants must be communicated to the customer in a way that links to customer value and her role. When performance or its adaptation are crucial for the customer, performance differences must be explicitly "designed in" with software or hardware means. Due to the emergent nature of performance, it is important to test performance and manage how other variability affects performance.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {144–153},
numpages = {10},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3106195.3106213,
author = {Fu\ss{}berger, Nicolas and Zhang, Bo and Becker, Martin},
title = {A Deep Dive into Android's Variability Realizations},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106213},
doi = {10.1145/3106195.3106213},
abstract = {The open source Android operation system is widely used in both mobile consumer electronics as well as other industrial devices. It has actually become a variability-intensive system that can be highly customized to support different customers' requirements and hardware environments, which is a good inspiration for both practitioners and researchers. However, it is still unclear where and how variability is realized in its source code repository. In this paper, we conduct a systematic analysis on the variability realization of the Android operation system. The analysis focuses on the usage of different variability realization mechanisms (e.g., Conditional Compilation) in the Android source code and build environment. Finally, the study provides qualitative and quantitative results that help to understand i) what variability-specific artefacts exist in the Android source repository using which variability mechanisms and techniques; ii) how these artefacts express and instantiate variability along the layered Android realization architecture.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {69–78},
numpages = {10},
keywords = {Android, Variability Mechanisms, Variability Realization},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.5555/1753235.1753266,
author = {Hubaux, Arnaud and Classen, Andreas and Heymans, Patrick},
title = {Formal modelling of feature configuration workflows},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {In software product line engineering, the configuration process can be a long and complex undertaking that involves many participants. When configuration is supported by feature diagrams, two challenges are to modularise the feature diagram into related chunks, and to schedule them as part of the configuration process. Existing work has only focused on the first of these challenges and, for the rest, assumes that feature diagram modules are configured sequentially. This paper addresses the second challenge. It suggests using YAWL, a state-of-the-art workflow language, to represent the configuration workflow while feature diagrams model the available configuration options. The principal contribution of the paper is a new combined formalism: feature configuration workflows. A formal semantics is provided so as to pave the way for unambiguous tool specification and safer reasoning about of the configuration process. The work is motivated and illustrated through a configuration scenario taken from the space industry.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {221–230},
numpages = {10},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.1145/2791060.2791118,
author = {ter Beek, Maurice H. and Fantechi, Alessandro and Gnesi, Stefania and Mazzanti, Franco},
title = {Using FMC for family-based analysis of software product lines},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791118},
doi = {10.1145/2791060.2791118},
abstract = {We show how the FMC model checker can successfully be used to model and analyze behavioural variability in Software Product Lines. FMC accepts parameterized specifications in a process-algebraic input language and allows the verification of properties of such models by means of efficient on-the-fly model checking. The properties can be expressed in a logic that allows to correlate the parameters of different actions within the same formula. We show how this feature can be used to tailor formulas to the verification of only a specific subset of products of a Software Product Line, thus allowing for scalable family-based analyses with FMC. We present a proof-of-concept that shows the application of FMC to an illustrative Featured Transition System from the literature.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {432–439},
numpages = {8},
keywords = {featured transition systems, features, model transformation, process algebra, variability},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3109729.3109734,
author = {Marc\'{e}n, Ana C. and Font, Jaime and Pastor, \'{O}scar and Cetina, Carlos},
title = {Towards Feature Location in Models through a Learning to Rank Approach},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109734},
doi = {10.1145/3109729.3109734},
abstract = {In this work, we propose a feature location approach to discover software artifacts that implement the feature functionality in a model. Given a model and a feature description, model fragments extracted from the model and the feature description are encoded based on a domain ontology. Then, a Learning to Rank algorithm is used to train a classifier that is based on the model fragments and feature description encoded. Finally, the classifier assesses the similarity between a population of model fragments and the target feature being located to find the set of most suitable feature realizations. We have evaluated the approach with an industrial case study, locating features with mean precision and recall values of around 73.75% and 73.31%, respectively (the sanity check obtains less than 35%).},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {57–64},
numpages = {8},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2019136.2019194,
author = {Abbasi, Ebrahim Khalil and Hubaux, Arnaud and Heymans, Patrick},
title = {An interactive multi-perspective toolset for non-linear product configuration processes},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019194},
doi = {10.1145/2019136.2019194},
abstract = {In Software product line engineering (SPLE), feature diagrams (FDs) capture commonality and variability in terms of features and their relationships. The interactive process during which features are selected and excluded is called feature-based configuration. the resulting set of selected features is a high-level specification of the desired product. To facilitate the configuration of large and complex FDs, tools relying on efficient solvers (e.g. SAT, BDD and CSP) were developed.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {50},
numpages = {1},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/2791060.2791083,
author = {Montalvillo, Leticia and D\'{\i}az, Oscar},
title = {Tuning GitHub for SPL development: branching models &amp; repository operations for product engineers},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791083},
doi = {10.1145/2791060.2791083},
abstract = {SPLs distinguish between domain engineering (DE) and application engineering (AE). Though each realm has its own lifecycle, they might need to be regularly synchronized to avoid SPL erosion during evolution. This introduces two sync paths: update propagation (from DE to AE) and feedback propagation (from AE to DE). This work looks at how to support sync paths in Version Control Systems (VCSs) using traditional VCS constructs (i.e. merge, branch, fork and pull). In this way, synchronization mismatches can be resolved \`{a} la VCS, i.e. highlighting difference between distinct versions of the same artifact. However, this results in a conceptual gap between how propagations are conceived (i.e. update, feedback) and how propagation are realized (i.e. merge, branch, etc). To close this gap, we propose to enhance existing VCSs with SPL sync paths as first-class operations. As a proof-of-concept, we use Web Augmentation techniques to extend GitHub's Web pages with this extra functionality. Through a single click, product engineers can now (1) generate product repositories, (2) update propagating newer feature versions, or (3), feedback propagating product customizations amenable to be upgraded as core assets.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {111–120},
numpages = {10},
keywords = {SPL evolution, VCS, branching model, change propagation},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@article{10.1007/s10270-020-00803-8,
author = {Safdar, Safdar Aqeel and Lu, Hong and Yue, Tao and Ali, Shaukat and Nie, Kunming},
title = {A framework for automated multi-stage and multi-step product configuration of cyber-physical systems},
year = {2021},
issue_date = {Feb 2021},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {20},
number = {1},
issn = {1619-1366},
url = {https://doi.org/10.1007/s10270-020-00803-8},
doi = {10.1007/s10270-020-00803-8},
abstract = {Product line engineering (PLE) has been employed to large-scale cyber-physical systems (CPSs) to provide customization based on users’ needs. A PLE methodology can be characterized by its support for capturing and managing the abstractions as commonalities and variabilities and the automation of the configuration process for effective selection and customization of reusable artifacts. The automation of a configuration process heavily relies on the captured abstractions and formally specified constraints using a well-defined modeling methodology. Based on the results of our previous work and a thorough literature review, in this paper, we propose a conceptual framework to support multi-stage and multi-step automated product configuration of CPSs, including a comprehensive classification of constraints and a list of automated functionalities of a CPS configuration solution. Such a framework can serve as a guide for researchers and practitioners to evaluate an existing CPS PLE solution or devise a novel CPS PLE solution. To validate the framework, we conducted three real-world case studies. Results show that the framework fulfills all the requirements of the case studies in terms of capturing and managing variabilities and constraints. Results of the literature review indicate that the framework covers all the functionalities concerned by the literature, suggesting that the framework is complete for enabling the maximum automation of configuration in CPS PLE.},
journal = {Softw. Syst. Model.},
month = feb,
pages = {211–265},
numpages = {55},
keywords = {Cyber-physical systems, Product line engineering, Automated configuration, Multi-stage and multi-step configuration process, Constraint classification, Variability modeling, Real-world case studies}
}

@inproceedings{10.1145/2019136.2019160,
author = {Pichler, Christian and Huemer, Christian and Strommer, Michael},
title = {Evolution patterns for business document models},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019160},
doi = {10.1145/2019136.2019160},
abstract = {The United Nations Centre for Trade Facilitation and Electronic Commerce provides a conceptual approach named Core Components for defining business document models based on reusable building blocks. For the application in concrete business scenarios, these building blocks need customizing, resulting in different variants of business document models. In previous work we have proven the application of concepts from Model-Driven Product Line Engineering to manage the resulting business document model variants. However, due to the highly dynamic environment of electronic commerce with ever-changing market requirements, business document models evolve over time. This adds another dimension of variability to the problem domain leading to complex evolution scenarios. In this paper, we define evolution patterns for capturing the different types of evolution present in the context of business document model variants. Having such patterns at hand, makes the different types of evolution in business document models more tangible.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {21},
numpages = {8},
keywords = {business document models, evolution patterns, model-driven product line engineering},
location = {Munich, Germany},
series = {SPLC '11}
}

@article{10.1145/1183236.1183261,
author = {Clements, Paul C. and Jones, Lawrence G. and McGregor, John D. and Northrop, Linda M.},
title = {Getting there from here: a roadmap for software product line adoption},
year = {2006},
issue_date = {December 2006},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {49},
number = {12},
issn = {0001-0782},
url = {https://doi.org/10.1145/1183236.1183261},
doi = {10.1145/1183236.1183261},
abstract = {Mapping the technical and business activities and steps required for successful organizational adoption.},
journal = {Commun. ACM},
month = dec,
pages = {33–36},
numpages = {4}
}

@inproceedings{10.1145/2934466.2966353,
author = {Sion, Laurens and Van Landuyt, Dimitri and Yskout, Koen and Joosen, Wouter},
title = {Towards systematically addressing security variability in software product lines},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2966353},
doi = {10.1145/2934466.2966353},
abstract = {With the increasingly pervasive role of software in society, security is becoming an important quality concern, emphasizing security by design, but it requires intensive specialization.Security in families of systems is even harder, as diverse variants of security solutions must be considered, with even different security goals per product. Furthermore, security is not a static object but a moving target, adding variability.For this, an approach to systematically address security concerns in software product lines is needed. It should consider security separate from other variability dimensions. The main challenges to realize this are: (i) expressing security and its variability, (ii) selecting the right solution, (iii) properly instantiating a solution, and (iv) verifying and validating it.In this paper, we present our research agenda towards addressing the aforementioned challenges.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {342–343},
numpages = {2},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3106195.3106226,
author = {Perrouin, Gilles and Devroey, Xavier and Cordy, Maxime},
title = {Testing Variability-Intensive Systems},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106226},
doi = {10.1145/3106195.3106226},
abstract = {Cost-effective techniques to test software in the presence of variability are popular in academia but are not systematically applied in practice yet. This half-day tutorial offers an overview of the state of the art of some of the hottest topics in the field such as (dis)similarity &amp; search-based testing, model-based testing or mutation analysis. We will present the most significant results obtained during the last five years ranging from conceptual foundations to readily usable tools. In particular, we will rely on VIBeS, a model-based open source framework we developed to test product lines behaviour. We will illustrate all these concepts on JHipster, a variability-intensive web development stack.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {255},
numpages = {1},
keywords = {Model-based Testing, VIBeS, Variability-intensive Systems},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3106195.3106200,
author = {Andersson, Jesper and Capilla, Rafael and Baresi, Luciano and Eichelberger, Holger},
title = {10th International Workshop on Dynamic Software Product Lines (DSPL'17): Adaptive Systems through Runtime Variability},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106200},
doi = {10.1145/3106195.3106200},
abstract = {Dynamic Software Product Lines (DSPLs) is still an incipient paradigm to support runtime reconfiguration of systems that need to change their behavior under varying circumstances. As many modern systems demand reconfiguration after post-deployment time, this 10th edition of the DSPL workshops attempts to bring new insight and approaches for such needs.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {246},
numpages = {1},
keywords = {Dynamic software product lines, adaptation, reconfiguration, runtime variability},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2648511.2648526,
author = {Acher, Mathieu and Baudry, Benoit and Barais, Olivier and J\'{e}z\'{e}quel, Jean-Marc},
title = {Customization and 3D printing: a challenging playground for software product lines},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648526},
doi = {10.1145/2648511.2648526},
abstract = {3D printing is gaining more and more momentum to build customized product in a wide variety of fields. We conduct an exploratory study of Thingiverse, the most popular Website for sharing user-created 3D design files, in order to establish a possible connection with software product line (SPL) engineering. We report on the socio-technical aspects and current practices for modeling variability, implementing variability, configuring and deriving products, and reusing artefacts. We provide hints that SPL-alike techniques are practically used in 3D printing and thus relevant. Finally, we discuss why the customization in the 3D printing field represents a challenging playground for SPL engineering.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {142–146},
numpages = {5},
keywords = {3D printing, customization, software product lines},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2491627.2493897,
author = {Beuche, Danilo},
title = {Transforming legacy systems into software product lines},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2493897},
doi = {10.1145/2491627.2493897},
abstract = {This tutorial discusses many aspects of the migration process in an organization when existing software systems are used as starting point for a software product line. It is intended to provide food for thought as well as practical approaches for the migration.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {275},
numpages = {1},
keywords = {migration, software product lines, tutorial},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2791060.2793676,
author = {McGee, Ethan T. and McGregor, John D.},
title = {Composition of proof-carrying architectures for cyber-physical systems},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2793676},
doi = {10.1145/2791060.2793676},
abstract = {The Internet of Things (IoT) integrates a variety of cyber-physical systems; systems that are safety-critical and those that are not. Each of these systems is composed from assets that may have been intended to integrate successfully, but they have not necessarily been verified as doing so before the product is instantiated. Because assets are commonly shared among a family of cyber-physical products, Software Product Line (SPL) methods are crucial for the success of these systems if they are to be built economically without compromise to safety. Verification of the SPL architectures will help to ensure the safety of these systems is not compromised by any of the numerous assets that can be swapped in and out as new products are configured. The contribution of this work is an illustration of how software architectures might be annotated embedding verification information of the architecture supporting a compositional approach to verification.In order for verification of the SPL to be successful, the verification properties of one asset must seamlessly integrate with the verification properties of other assets in the SPL family. We introduce a method using two languages which are annexes of the Architecture Analysis &amp; Description Language (AADL), AGREE and Resolute, that can be used to verify a variety of properties of the system described by the AADL model. Our technique allows for definition of constraints that can be proven as being met when the products are instantiated, however, the languages are not entirely sufficient. Our work shows both working cases and the limitations of verification of the architecture.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {419–426},
numpages = {8},
keywords = {agree, architecture analysis &amp; description language, compositional verification, resolute},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3233027.3233047,
author = {El-Sharkawy, Sascha and Dhar, Saura Jyoti and Krafczyk, Adam and Duszynski, Slawomir and Beichter, Tobias and Schmid, Klaus},
title = {Reverse engineering variability in an industrial product line: observations and lessons learned},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233047},
doi = {10.1145/3233027.3233047},
abstract = {Ideally, a variability model is a correct and complete representation of product line features and constraints among them. Together with a mapping between features and code, this ensures that only valid products can be configured and derived. However, in practice the modeled constraints might be neither complete nor correct, which causes problems in the configuration and product derivation phases. This paper presents an approach to reverse engineer variability constraints from the implementation, and thus improve the correctness and completeness of variability models.We extended the concept of feature effect analysis [22] to extract variability constraints from code artifacts of the Bosch PS-EC large-scale product line. We present an industrial application of the approach and discuss its required modifications to handle non-Boolean variability and heterogeneous artifact types.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {215–225},
numpages = {11},
keywords = {reverse engineering, software product lines, static analysis, variability modeling},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3236405.3236428,
author = {Mukelabai, Mukelabai},
title = {Verification of migrated product lines},
year = {2018},
isbn = {9781450359450},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3236405.3236428},
doi = {10.1145/3236405.3236428},
abstract = {Maintaining several code bases (e.g., clones) of software variants in an application domain remains a widespread development practice, though costly and error-prone. Despite the many benefits that come with using the product-line approach, many companies are hesitant to migrate to an integrated platform for their product variants because such a migration is considered challenging and risky. Often this perception is because the migration is seen as a drastic change that is not easy to verify and assure developers that the migrated products still operate as before. In this research we propose to develop a language structure (or abstract representation) of artifacts in a software asset base that would facilitate an incremental migration of several code bases to an integrated platform. We further seek to propose and evaluate techniques for verifying the migrated product line with respect to its original code bases.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 2},
pages = {87–89},
numpages = {3},
keywords = {clone-and-own, migration, software product lines, verification},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2499777.2499782,
author = {Beuche, Danilo},
title = {Modeling and building product lines with pure::variants},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2499782},
doi = {10.1145/2499777.2499782},
abstract = {The paper describes a demonstration of pure::variants, a commercial tool for variant and variability management for product lines. The demonstration shows how flexible product line (PL) architectures can be built by using the modeling capabilities provided by pure::variants [2].},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {147–149},
numpages = {3},
keywords = {feature modelling, software product lines, tools},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/1842752.1842814,
author = {Geertsema, Bas and Jansen, Slinger},
title = {Increasing software product reusability and variability using active components: a software product line infrastructure},
year = {2010},
isbn = {9781450301794},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1842752.1842814},
doi = {10.1145/1842752.1842814},
abstract = {Software Product Lines are typically used to support development of a software product family and not a software product population, which denotes a broader and more diverse range of software products. We present a Software Product Line Infrastructure (SPLI) that has been designed to increase the reuse of software efforts in product populations. The SPLI takes a bottom-up approach by structuring product features in highly reusable software components called Active Components which contain different types of artefacts. Variability is expressed using domain-specific models and formal variability models. Variability is bound during product derivation by executing model-to-artefact transformations. Components are active because they are invoked during the derivation process, thereby empowering the component. The SPLI enables step-wise refinements of applications by allowing specialization and composition of models before variability is bound. A prototype of the SPLI has been created that was used to develop and evaluate an experimental software product line. It is concluded that within the context of our experimental software product line the SPLI improves software reuse in software product populations.},
booktitle = {Proceedings of the Fourth European Conference on Software Architecture: Companion Volume},
pages = {336–343},
numpages = {8},
keywords = {active components, components, model-driven development, software product lines, variability},
location = {Copenhagen, Denmark},
series = {ECSA '10}
}

@article{10.1007/s11277-016-3195-y,
author = {Lee, Jihyun and Hwang, Sunmyung},
title = {Variability Change Management Using the Orthogonal Variability Model-Based Traceability},
year = {2016},
issue_date = {August    2016},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {89},
number = {3},
issn = {0929-6212},
url = {https://doi.org/10.1007/s11277-016-3195-y},
doi = {10.1007/s11277-016-3195-y},
abstract = {Variability is the ability of a software system or artifacts to be changed, customized, or configured for reuse in the product members of a software product line. As the amount of variability increases in software product lines the complexity of managing changes and evolutions of such variability becomes a main concern these days. In this context a high-degree of traceability can support the complexity of variability change management. However, in software product line establishing appropriate traceability is often difficult due to many-to-many relations in different levels of abstraction and across development given two separated and closely related development life cycles called domain and application. This paper proposes an approach tracing variability based on explicit variation points defined in orthogonal variability model and domain artifacts. And we validate the proposed approach through the Calculator product line. As the results of validation we found that our approach supports the defined variability change scenarios well, but has a disadvantage that many derived variation points are additionally defined and managed.},
journal = {Wirel. Pers. Commun.},
month = aug,
pages = {729–745},
numpages = {17},
keywords = {Change management, Software product line, Traceability, Variability management}
}

@inproceedings{10.1145/2934466.2934472,
author = {Temple, Paul and Galindo, Jos\'{e} A. and Acher, Mathieu and J\'{e}z\'{e}quel, Jean-Marc},
title = {Using machine learning to infer constraints for product lines},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934472},
doi = {10.1145/2934466.2934472},
abstract = {Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {209–218},
numpages = {10},
keywords = {constraints and variability mining, machine learning, software product lines, software testing, variability modeling},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2934466.2934477,
author = {Krieter, Sebastian and Schr\"{o}ter, Reimar and Th\"{u}m, Thomas and Fenske, Wolfram and Saake, Gunter},
title = {Comparing algorithms for efficient feature-model slicing},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934477},
doi = {10.1145/2934466.2934477},
abstract = {Feature models are a well-known concept to represent variability in software product lines by defining features and their dependencies. During feature-model evolution, for information hiding, and for feature-model analyses, it is often necessary to remove certain features from a model. As the crude deletion of features can have undesirable effects on their dependencies, dependency-preserving algorithms, known as feature-model slicing, have been proposed. However, current algorithms do not perform well when removing a high number of features from large feature models. Therefore, we propose an efficient algorithm for feature-model slicing based on logical resolution and the minimization of logical formulas. We empirically evaluate the scalability of our algorithm on a number of feature models and find that our algorithm generally outperforms existing algorithms.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {60–64},
numpages = {5},
keywords = {feature-model analyses, feature-model evolution, software product lines},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3382025.3414977,
author = {Schmid, Klaus and Eichelberger, Holger and El-Sharkawy, Sascha},
title = {Variability modeling and implementation with EASy-producer},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414977},
doi = {10.1145/3382025.3414977},
abstract = {This tutorial introduces the EASy-Producer product line environment. EASy-Producer is an open-source toolset for engineering product lines, variability-rich software ecosystems, and dynamic software product lines. In particular, it features a variability modeling and a variability implementation DSL. It has been applied in several industrial case studies and research projects showing its practical applicability both from a stability and a capability point of view. While the tool-set also includes an interactive approach to product line definition and configuration through DSLs, the focus of this tutorial will be on the DSL-based techniques. We cover both the modeling of software product lines using the Integrated Variability Modeling Language (IVML) and its underlying conceptual approach, which differs from traditional feature modeling, but we will also provide an overview of the approach to variability instantiation with EASy-Producer (using the Variability Instantiation Language (VIL)).},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {41},
numpages = {1},
keywords = {EASy-producer, IVML, VIL, model-based engineering, software product lines, textual variability modeling},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/2362536.2362558,
author = {Rubin, Julia and Kirshin, Andrei and Botterweck, Goetz and Chechik, Marsha},
title = {Managing forked product variants},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362558},
doi = {10.1145/2362536.2362558},
abstract = {We consider the problem of supporting effective code reuse as part of Software Product Line Engineering. Our approach is based on code forking -- a practice commonly used in industry where new products are created by cloning the existing ones. We propose to maintain meta-information allowing organization to reason about the developed product line in terms of features rather than incremental code changes made in different forks and to detect inconsistencies in implementations of these features. In addition, we propose to detect and maintain semantic, implementation-level require relationships between features, supporting the developers when they copy features from different branches or delete features in their own branch, thus facilitating reuse of features between products. Our approach aims at mitigating the disadvantages of the forking mechanism while leveraging its advantages. We illustrate the approach on an example, and discuss its possible implementation and integration with Software Configuration Management systems.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {156–160},
numpages = {5},
keywords = {SCM, software configuration management, software product lines},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2647908.2655980,
author = {Samih, Hamza and Bogusch, Ralf},
title = {MPLM - MaTeLo product line manager: [relating variability modelling and model-based testing]},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655980},
doi = {10.1145/2647908.2655980},
abstract = {The diversity of requirements elicited from different customers leads to the development of many variants. Furthermore, compliance with safety standards as mandated for safety-critical systems requires high test efforts for each variant. Model-based testing aims to reduce test efforts by automatically generating test cases from test models.In this paper, we introduce variability management to usage models, a widely used model-based testing formalism. We present an approach that allows to derive usage model variants from a desired set of features and thus generate test cases for each variant. The approach is integrated in the industrial model-based testing tool chain MaTeLo and exemplified using an industrial case study from the aerospace domain.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {138–142},
numpages = {5},
keywords = {MaTeLo, OVM, feature, model-based testing, model-based testing tool, product line engineering, product line manager, product line requirements, product line usage model, usage model variant, variability, variability model, variant},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3106195.3106207,
author = {Li, Yang and Schulze, Sandro and Saake, Gunter},
title = {Reverse Engineering Variability from Natural Language Documents: A Systematic Literature Review},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106207},
doi = {10.1145/3106195.3106207},
abstract = {Identifying features and their relations (i.e., variation points) is crucial in the process of migrating single software systems to software product lines (SPL). Various approaches have been proposed to perform feature extraction automatically from different artifacts, for instance, feature location in legacy code. Usually such approaches a) omit variability information and b) rely on artifacts that reside in advanced phases of the development process, thus, being only of limited usefulness in the context of SPLs. In contrast, feature and variability extraction from natural language (NL) documents is more favorable, because a mapping to several other artifacts is usually established from the very beginning. In this paper, we provide a multi-dimensional overview of approaches for feature and variability extraction from NL documents by means of a systematic literature review (SLR). We selected 25 primary studies and carefully evaluated them regarding different aspects such as techniques used, tool support, or accuracy of the results. In a nutshell, our key insights are that i) standard NLP techniques are commonly used, ii) post-processing often includes clustering &amp; machine learning algorithms, iii) only in rare cases, the approaches support variability extraction, iv) tool support, apart from text pre-processing is often not available, and v) many approaches lack a comprehensive evaluation. Based on these observations, we derive future challenges, arguing that more effort need to be invested for making such approaches applicable in practice.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {133–142},
numpages = {10},
keywords = {Feature Identification, Natural Language Documents, Reverse Engineering, Software Product Lines, Systematic Literature Review, Variability Extraction},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2648511.2648525,
author = {Stein, Jacob and Nunes, Ingrid and Cirilo, Elder},
title = {Preference-based feature model configuration with multiple stakeholders},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648525},
doi = {10.1145/2648511.2648525},
abstract = {Feature model configuration is known to be a hard, error-prone and time-consuming activity. This activity gets even more complicated when it involves multiple stakeholders in the configuration process. Research work has proposed approaches to aid multi-stakeholder feature model configuration, but they rely on systematic processes that constraint decisions of some of the stakeholders. In this paper, we propose a novel approach to improve the multi-stakeholder configuration process, considering stakeholders' preferences expressed through both hard and soft constraints. Based on such preferences, we recommend different product configurations using different strategies from the social choice theory. We conducted an empirical study to evaluate the effectiveness of our strategies with respect to individual stakeholder satisfaction and fairness among all stakeholders. Results indicate that particular strategies perform best with respect to these aspects.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {132–141},
numpages = {10},
keywords = {feature model configuration, preferences, social choice},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2491627.2491644,
author = {Rubin, Julia and Czarnecki, Krzysztof and Chechik, Marsha},
title = {Managing cloned variants: a framework and experience},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491644},
doi = {10.1145/2491627.2491644},
abstract = {In our earlier work, we have proposed a generic framework for managing collections of related products realized via cloning -- both in the case when such products are refactored into a single-copy software product line representation and the case when they are maintained as distinct clones. In this paper, we ground the framework in empirical evidence and exemplify its usefulness. In particular, we systematically analyze three industrial case studies of organizations with cloned product lines and derive the set of basic operators comprising the framework. We discuss options for implementing the operators and benefits of the operator-based view.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {101–110},
numpages = {10},
keywords = {cloned product variants, industrial case studies, legacy software product lines},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2791060.2791089,
author = {Abbas, Nadeem and Andersson, Jesper},
title = {Harnessing variability in product-lines of self-adaptive software systems},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791089},
doi = {10.1145/2791060.2791089},
abstract = {This work studies systematic reuse in the context of self-adaptive software systems. In our work, we realized that managing variability for such platforms is different compared to traditional platforms, primarily due to the run-time variability and system uncertainties. Motivated by the fact that recent trends show that self-adaptation will be used more often in future system generation and that software reuse state-of-practice or research do not provide sufficient support, we have investigated the problems and possibly resolutions in this context. We have analyzed variability for these systems, using a systematic reuse prism, and identified a research gap in variability management. The analysis divides variability handling into four activities: (1) identify variability, (2) constrain variability, (3) implement variability, and (4) manage variability. Based on the findings we envision a reuse framework for the specific domain and present an example framework that addresses some of the identified challenges. We argue that it provides basic support for engineering self-adaptive software systems with systematic reuse. We discuss some important avenues of research for achieving the vision.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {191–200},
numpages = {10},
keywords = {self-adaptive software systems, software reuse, variability analysis},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2362536.2362570,
author = {Braga, Rosana T. V. and Trindade, Onofre and Branco, Kalinka R. L. J. Castelo and Lee, Jaejoon},
title = {Incorporating certification in feature modelling of an unmanned aerial vehicle product line},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362570},
doi = {10.1145/2362536.2362570},
abstract = {Safety critical systems (e.g., an avionics control system for safe flight) are often required to achieve certification under pre-established standards (e.g., DO-178B for software considerations in airborne systems and equipment certification). We have been working with our industrial partner for the last three years to develop product line assets for their avionics software product line (SPL) and, recently, we encountered two major challenges regarding certification. Firstly, an individual product must be certified, but each may require a different certification level: there might be variations in the certification requirements according to specific system usage contexts. Secondly, certification involves not only product but also process, as standards such as DO-178B also assess the quality of the development process. In this paper, we propose to include a certification view during feature modelling to provide a better understanding of the relationships between features and a certification level required for each product. The experience of introducing certification into the design model of an Unmanned Aerial Vehicle (UAV) SPL is presented to illustrate some key ideas. We also describe the lessons we have learned from this experience.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {249–258},
numpages = {10},
keywords = {critical software development, feature modelling, software certification, software product lines},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2791060.2791068,
author = {B\'{e}can, Guillaume and Behjati, Razieh and Gotlieb, Arnaud and Acher, Mathieu},
title = {Synthesis of attributed feature models from product descriptions},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791068},
doi = {10.1145/2791060.2791068},
abstract = {Many real-world product lines are only represented as nonhierarchical collections of distinct products, described by their configuration values. As the manual preparation of feature models is a tedious and labour-intensive activity, some techniques have been proposed to automatically generate boolean feature models from product descriptions. However, none of these techniques is capable of synthesizing feature attributes and relations among attributes, despite the huge relevance of attributes for documenting software product lines. In this paper, we introduce for the first time an algorithmic and parametrizable approach for computing a legal and appropriate hierarchy of features, including feature groups, typed feature attributes, domain values and relations among these attributes. We have performed an empirical evaluation by using both randomized configuration matrices and real-world examples. The initial results of our evaluation show that our approach can scale up to matrices containing 2,000 attributed features, and 200,000 distinct configurations in a couple of minutes.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {1–10},
numpages = {10},
keywords = {attributed feature models, product descriptions},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2934466.2946045,
author = {Noir, J\'{e}rome Le and Madel\'{e}nat, S\'{e}bastien and Gailliard, Gr\'{e}gory and Labreuche, Christophe and Acher, Mathieu and Barais, Olivier and Constant, Olivier},
title = {A decision-making process for exploring architectural variants in systems engineering},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2946045},
doi = {10.1145/2934466.2946045},
abstract = {In systems engineering, practitioners shall explore numerous architectural alternatives until choosing the most adequate variant. The decision-making process is most of the time a manual, time-consuming, and error-prone activity. The exploration and justification of architectural solutions is ad-hoc and mainly consists in a series of tries and errors on the modeling assets. In this paper, we report on an industrial case study in which we apply variability modeling techniques to automate the assessment and comparison of several candidate architectures (variants). We first describe how we can use a model-based approach such as the Common Variability Language (CVL) to specify the architectural variability. We show that the selection of an architectural variant is a multi-criteria decision problem in which there are numerous interactions (veto, favor, complementary) between criteria.We present a tooled process for exploring architectural variants integrating both CVL and the MYRIAD method for assessing and comparing variants based on an explicit preference model coming from the elicitation of stakeholders' concerns. This solution allows understanding differences among variants and their satisfactions with respect to criteria. Beyond variant selection automation improvement, this experiment results highlight that the approach improves rationality in the assessment and provides decision arguments when selecting the preferred variants.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {277–286},
numpages = {10},
keywords = {architecture, decision-making, design exploration, model-driven engineering, multi-criteria decision analysis, systems engineering},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2364412.2364439,
author = {Vale, Tassio and Figueiredo, Gustavo Bittencourt and de Almeida, Eduardo Santana and de Lemos Meira, Silvio Romero},
title = {A study on service identification methods for software product lines},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364439},
doi = {10.1145/2364412.2364439},
abstract = {The combination of service-orientation and software product line engineering, called Service-Oriented Product Line Engineering (SOPLE) have received attention by researchers and practitioners in the last years, and these areas can address issues of each other. One service-orientation issue is service identification. It consists of determining candidate services to a service-oriented environment based on pre-existing software artifacts, e.g., business process, source code, and so on. In order to provide a systematic identification of services, there are many available service identification methods in the literature, regarding different understanding of services, goals, and techniques. Due to this heterogeneity, this paper presents an in-depth comparison of service identification methods as well as a recommendation of the most suitable ones in the SOPLE context. This work can help the decision making of the most suitable method according to stakeholders' needs.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {156–163},
numpages = {8},
keywords = {service identification, service-oriented computing, service-oriented product lines, software product lines},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.5555/1885639.1885703,
author = {Jarzabek, Stan},
title = {Pragmatic strategies for variability management in product lines in small- to medium-size companies},
year = {2010},
isbn = {3642155782},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
booktitle = {Proceedings of the 14th International Conference on Software Product Lines: Going Beyond},
pages = {503–504},
numpages = {2},
location = {Jeju Island, South Korea},
series = {SPLC'10}
}

@inproceedings{10.1145/2791060.2791113,
author = {Beuche, Danilo},
title = {Managing variability with feature models},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791113},
doi = {10.1145/2791060.2791113},
abstract = {In this paper, we give a brief overview on the tutorial "Managing Variability with Feature Models".},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {386},
numpages = {1},
keywords = {feature models, product lines, variability},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2934466.2934487,
author = {Rabiser, Daniela and Gr\"{u}nbacher, Paul and Pr\"{a}hofer, Herbert and Angerer, Florian},
title = {A prototype-based approach for managing clones in clone-and-own product lines},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934487},
doi = {10.1145/2934466.2934487},
abstract = {Feature models are commonly used in industrial contexts to guide and automate the derivation of product variants. However, in real-world product lines the derivation process goes beyond selecting and composing product features. Specifically, developers often perform clone-and-own reuse, i.e., they copy, modify, and extend existing code to provide the functionality required by customers. Clones are created at different levels of granularity, ranging from individual features to entire systems. Refactoring and reverse engineering approaches have been proposed for dealing with cloned product variants. However, managing clones has not been addressed in the context of feature models. For instance, if clones are created to address customer requirements in specific product variants, the connection to the original feature models is frequently lost. We thus present a modeling approach based on prototypes, i.e., prefabricated objects from which clones are created. Our approach allows to manage prototypes and their clones at the levels of products, components, and features. We use compliance levels to define the required level of consistency between prototypes and clones. We further adapt an existing consistency checking framework for detecting inconsistent clones when the product line evolves. Our approach uses feature-to-code mappings to determine the impact of changes on code elements. We present a case study illustrating prototypes, clones, and compliance levels in selected development scenarios of our industry partner's product line. We also discuss the use of static code analysis techniques to support engineers in determining the impact of changed prototypes on affected clones, an area we plan to address in our future work.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {35–44},
numpages = {10},
keywords = {cloning, co-evolution, feature modeling, industrial systems},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2934466.2971318,
author = {Tamai, Tetsuo},
title = {Product-centered view vs process-centered view},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2971318},
doi = {10.1145/2934466.2971318},
abstract = {Looking back the history of software engineering, we can observe an alternating cycle of interest on product-centered view vs. process-centered view in software research and practices.From the late 1980's to early 1990's, software process became quite an active field. Activities concerning software process were hot in academia as well as in industry. The interest on software process saw its peak in early 1990's but lost the momentum soon. Then came the fever on software architecture.The book "Software Architecture" by M. Shaw and D. Garlan was published in 1996 and widely read. Design patterns and application frameworks drew attention about the same time, which together indicate a shift of interest from process to product.In 2000's, the interest on processes revived. One phenomenon is the upsurge of interest on the agile process. As software product lines (SPL) contains the word product in the term, it deals with a variety of products but its focus is also on the process of managing development and evolution of a family of similar software products.We will give a perspective on the alternating cycle of interest on product-centered view vs. process-centered view and then characterize SPL in this framework.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {18–21},
numpages = {4},
keywords = {product line, software architecture, software product and process},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3109729.3109750,
author = {Kim, Jongwook and Batory, Don and Dig, Danny},
title = {X15: A Tool For Refactoring Java Software Product Lines},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109750},
doi = {10.1145/3109729.3109750},
abstract = {X15 is the first tool that can apply common object-oriented refactorings to Java Software Product Lines (SPLs). X15 is also the first tool that programmers can write custom scripts (to call refactorings programmatically) to retrofit design patterns into Java SPLs. We motivate and illustrate X15's unique capabilities in this paper.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {28–31},
numpages = {4},
keywords = {refactoring, software product lines},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3109729.3109739,
author = {Hamza, Mostafa and Walker, Robert J. and Elaasar, Maged},
title = {Unanticipated Evolution in Software Product Lines versus Independent Products: A Case Study},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109739},
doi = {10.1145/3109729.3109739},
abstract = {Real product families need to evolve in ways that are not always anticipated by a pre-planned design. Any given approach for software product lines will likely lead to both positive and negative consequences during unanticipated software evolution. Unfortunately, we know little about the evolvability characteristics of SPL approaches that concern both modelling and implementation, limiting our ability to make rational and disciplined decisions about adoption. We conduct a case study into the unanticipated evolution of a software product family using two approaches: separate products versus a common codebase using delta-oriented programming (DOP). We compare the ease of change within the two versions through a set of quantitative measurements and qualitative observations. We find that both versions have strengths and weaknesses: complexity and incomplete support from DOP tools versus significant duplication and error-proneness in the separate products.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {97–104},
numpages = {8},
keywords = {Software product lines, case study, comparative study, delta-oriented programming, retrospective study, separate products, unanticipated evolution},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2362536.2362553,
author = {Andersen, Nele and Czarnecki, Krzysztof and She, Steven and W\k{a}sowski, Andrzej},
title = {Efficient synthesis of feature models},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362553},
doi = {10.1145/2362536.2362553},
abstract = {Variability modeling, and in particular feature modeling, is a central element of model-driven software product line architectures. Such architectures often emerge from legacy code, but, unfortunately creating feature models from large, legacy systems is a long and arduous task.We address the problem of automatic synthesis of feature models from propositional constraints. We show that this problem is NP-hard. We design efficient techniques for synthesis of models from respectively CNF and DNF formulas, showing a 10- to 1000-fold performance improvement over known techniques for realistic benchmarks.Our algorithms are the first known techniques that are efficient enough to be applied to dependencies extracted from real systems, opening new possibilities of creating reverse engineering and model management tools for variability models. We discuss several such scenarios in the paper.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {106–115},
numpages = {10},
keywords = {feature models, software product lines, variability models},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3233027.3233037,
author = {Butting, Arvid and Eikermann, Robert and Kautz, Oliver and Rumpe, Bernhard and Wortmann, Andreas},
title = {Modeling language variability with reusable language components},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233037},
doi = {10.1145/3233027.3233037},
abstract = {Proliferation of modeling languages has produced a great variety of similar languages whose individual maintenance is challenging and costly. Reusing the syntax and semantics of modeling languages and their heterogeneous constituents, however, is rarely systematic. Current research on modeling language reuse focuses on reusing abstract syntax in form of metamodel parts. Systematic reuse of static and dynamic semantics is yet to be achieved. We present an approach to compose syntax and semantics of independently developed modeling languages through language product lines and derive new stand-alone language products. Using the MontiCore language workbench, we implemented a mechanism to compose language syntaxes and the realization of their semantics in form of template-based code generators according to language product line configurations. Leveraging variability of product lines greatly facilitates reusing modeling language and alleviates their proliferation.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {65–75},
numpages = {11},
keywords = {language product lines, language variability, software language engineering},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/3233027.3233059,
author = {Tolvanen, Juha-Pekka and Kelly, Steven},
title = {Describing variability with domain-specific languages and models},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233059},
doi = {10.1145/3233027.3233059},
abstract = {This tutorial will teach participants about domain-specific languages and models, where they can best be used (and where not), and how to apply them effectively to improve the speed and quality of product development within a product line.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {300},
numpages = {1},
keywords = {domain-specific language, domain-specific modeling, product derivation, product line variability, tutorial},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/1176617.1176726,
author = {Hetrick, William A. and Krueger, Charles W. and Moore, Joseph G.},
title = {Incremental return on incremental investment: Engenio's transition to software product line practice},
year = {2006},
isbn = {159593491X},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1176617.1176726},
doi = {10.1145/1176617.1176726},
abstract = {Engenio made the transition to software product line practice in order to keep pace with growing business demand for its products. By using an incremental transition strategy, Engenio avoided the typical upfront adoption barrier - the equivalent development effort of 2 to 3 standalone products - which in their case was projected to be 900 to 1350 developer-months. Engenio discovered that by making an upfront investment of only 4 developer-months, they were able to start a chain reaction in which the tactical and strategic incremental returns quickly outpaced the incremental investments, making the transition pay for itself.},
booktitle = {Companion to the 21st ACM SIGPLAN Symposium on Object-Oriented Programming Systems, Languages, and Applications},
pages = {798–804},
numpages = {7},
keywords = {incremental methods, software product lines, transition to software product line practice},
location = {Portland, Oregon, USA},
series = {OOPSLA '06}
}

@inproceedings{10.1145/2647908.2655971,
author = {Devroey, Xavier and Perrouin, Gilles and Schobbens, Pierre-Yves},
title = {Abstract test case generation for behavioural testing of software product lines},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655971},
doi = {10.1145/2647908.2655971},
abstract = {In Model Based Testing (MBT), test cases are generated automatically from a partial representation of expected behaviour of the System Under Test (SUT) (i.e., the model). For most industrial systems, it is impossible to generate all the possible test cases from the model. The test engineer recourse to generation algorithms that maximize a given coverage criterion, a metric indicating the percentage of possible behaviours of the SUT covered by the test cases. Our previous work redefined classical Transition Systems (TSs) criteria for SPLs, using Featured Transition Systems (FTSs), a mathematical structure to compactly represent the behaviour of a SPL, as model for test case generation. In this paper, we provide one all-states coverage driven generation algorithm and discuss its scalability and efficiency with respect to random generation. All-states and random generation are compared on fault-seeded FTSs.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {86–93},
numpages = {8},
keywords = {model-based testing, software product line, test case generation},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2648511.2648544,
author = {N\"{o}bauer, Markus and Seyff, Norbert and Groher, Iris},
title = {Inferring variability from customized standard software products},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648544},
doi = {10.1145/2648511.2648544},
abstract = {Systematic variability management is an important prerequisite for successful software reuse. However, it requires significant effort and extensive domain knowledge to document and maintain information on variability. In this paper we present a tool-supported approach which supports semi-automatically inferring variability information from customized standard software products. The approach does not only enable the identification and documentation of variability information based on existing products, it is also capable of incrementally updating this information. To guarantee quick access to reusable code artifacts (e.g. requirements, features or software components), the presented solution stores these artifacts together with related requirements and a generated variability model in an asset repository. The tool-supported approach has been applied to customizations of Microsoft Dynamics AX ERP systems. Our experiences highlight the potential and benefits of our approach compared to manually gathering information on software variability.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {284–293},
numpages = {10},
keywords = {ERP systems, reuse, standard software product customizations, variability inference},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2362536.2362566,
author = {Kircher, Michael and Hofman, Peter},
title = {Combining systematic reuse with Agile development: experience report},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362566},
doi = {10.1145/2362536.2362566},
abstract = {This paper documents the experiences of Siemens Healthcare in mastering challenges when transitioning a large-scale dispersed platform development organization to Agile. Product Line Engineering aims at increasing productivity through reuse, but since strategic reuse requires up-front decisions, is also seen as heavy weight and process driven. Agile development on the other hand is perceived as lightweight, change friendly, but at the same time neglecting long term strategic planning. With this paper we want to report on our experience combining both approaches, PLE for strategic reuse and agile principles for achieving steady progress while still leveraging the long-term benefits. The key was to build the foundation on the common best practice of 'feature-orientation' present in flavors in both disciplines. Feature-orientation allowed merging both disciplines into a holistic approach that blends the benefits of product line engineering with those of Agility -- resulting in improved product delivery, as well as employee and customer satisfaction.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {215–219},
numpages = {5},
keywords = {Agile, hierarchical platform, lean},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3109729.3109741,
author = {Basile, Davide and ter Beek, Maurice H. and Di Giandomenico, Felicita and Gnesi, Stefania},
title = {Orchestration of Dynamic Service Product Lines with Featured Modal Contract Automata},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109741},
doi = {10.1145/3109729.3109741},
abstract = {In Service-Oriented Computing, contracts provide a way to characterise the behavioural conformance of a composition of services, and to guarantee that the results do not lead to spurious compositions. Adding variability leads to a product line of services capable of adapting to customer requirements and to changes in the context in which they operate. To this aim, we extended a previously introduced formal model of service contracts. In particular, we included: (i) feature-based constraints and (ii) four classes of service requests to characterise different variants of service agreement. We then exploited Supervisory Control Theory to define an algorithm to synthesise an orchestration of services that satisfies: (i) all feature constraints of the service product line, and (ii) the maximal number of service requests for which an agreement can be reached. Moreover, such an orchestration of a service product line, whose number of products is potentially exponential in the number of features, can be synthesised from only a subset of its products. A prototypical tool supports the developed theory. In this short paper, we provide the intuition for our approach and illustrate it by means of a Hotel reservation service product line.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {117–122},
numpages = {6},
keywords = {Featured Modal Contract Automata, Product lines, Services},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2934466.2934476,
author = {Eichelberger, Holger and Qin, Cui and Sizonenko, Roman and Schmid, Klaus},
title = {Using IVML to model the topology of big data processing pipelines},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934476},
doi = {10.1145/2934466.2934476},
abstract = {Creating product lines of Big Data stream processing applications introduces a number of novel challenges to variability modeling. In this paper, we discuss these challenges and demonstrate how advanced variability modeling capabilities can be used to directly model the topology of processing pipelines as well as their variability. We also show how such processing pipelines can be modeled, configured and validated using the Integrated Variability Modeling Language (IVML).},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {204–208},
numpages = {5},
keywords = {software product lines, topologies, variability modeling},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3106195.3106203,
author = {Seidl, Christoph and Berger, Thorsten and Elsner, Christoph and Schultis, Klaus-Benedikt},
title = {Challenges and Solutions for Opening Small and Medium-Scale Industrial Software Platforms},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106203},
doi = {10.1145/3106195.3106203},
abstract = {Establishing open software platforms is becoming increasingly important. Many vendors of large and well-known open platforms, such as Android or iOS, have successfully established huge ecosystems of platform extensions (apps). While such platforms are important role models, the practices and technologies employed by their vendors are often not applicable for smaller platform vendors, who have different goals and carry substantial legacy, such as an existing closed platform. Yet, many vendors start to open their platforms---for instance, when they alone cannot realize all incoming requirements anymore. Unfortunately, very few best practices exist to guide this opening process, especially for small and medium-scale industrial platforms with their specific solutions. We present a study of industrial organizations that successfully opened closed platforms. Using a survey, we identified 18 opened platforms, providing a broad picture, which is complemented with in-depth, qualitative insights from a case study of three organizations. We elicited the platforms' core characteristics, the organizations' opening strategies, as well as challenges and solutions. We believe that our results support practitioners seeking to open platforms, and researchers striving to build better methods and tools.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {153–162},
numpages = {10},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2934466.2962730,
author = {Bezerra, Carla I. M. and Barbosa, Jefferson and Freires, Joao Holanda and Andrade, Rossana M. C. and Monteiro, Jos\'{e} Maria},
title = {DyMMer: a measurement-based tool to support quality evaluation of DSPL feature models},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2962730},
doi = {10.1145/2934466.2962730},
abstract = {For Dynamic Software Product Lines (DSPLs), evaluating the quality of a feature model is important to ensure that errors in the early stages do not spread throughout the DSPL. Measures extracted from feature models have been proved to be useful in the quality evaluation of such models. However, the process used for computing the values of these quality measures for a large set of feature models can be cumbersome and error prone. To cope with this problem, we present DyMMer, a tool to support the automatic extraction of quality measures from feature models in DSPLs. After that, we can analyse the results and propose improvements for the feature models. Currently, the DyMMer tool is able to collect 40 different quality measures from a DSPL feature model.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {314–317},
numpages = {4},
keywords = {dynamic software product lines, feature models, quality measures},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2791060.2791107,
author = {Ji, Wenbin and Berger, Thorsten and Antkiewicz, Michal and Czarnecki, Krzysztof},
title = {Maintaining feature traceability with embedded annotations},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791107},
doi = {10.1145/2791060.2791107},
abstract = {Features are commonly used to describe functional and nonfunctional aspects of software. To effectively evolve and reuse features, their location in software assets has to be known. However, locating features is often difficult given their crosscutting nature. Once implemented, the knowledge about a feature's location quickly deteriorates, requiring expensive recovering of these locations. Manually recording and maintaining traceability information is generally considered expensive and error-prone. In this paper, we argue to the contrary and hypothesize that such information can be effectively embedded into software assets, and that arising costs will be amortized by the benefits of this information later during development. We test this hypothesis in a study where we simulate the development of a product line of cloned/forked projects using a lightweight code annotation approach. We identify annotation evolution patterns and measure the cost and benefit of these annotations. Our results show that not only the cost of adding annotations, but also that of maintaining them is small compared to the actual development cost. Embedding the annotations into assets significantly reduced the maintenance cost because they naturally co-evolve with the assets. Our results also show that a majority of these annotations provides a benefit for feature-related code maintenance tasks, such as feature propagation and migrating clones into a platform.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {61–70},
numpages = {10},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3109729.3109760,
author = {Basile, Davide and Di Giandomenico, Felicita and Gnesi, Stefania},
title = {FMCAT: Supporting Dynamic Service-based Product Lines},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109760},
doi = {10.1145/3109729.3109760},
abstract = {We describe FMCAT, a toolkit for Featured Modal Contract Automata (FMCA). FMCAT supports the analysis of dynamic service product lines, i.e., applications consisting of ensembles of interacting services organized as product lines. Services are modelled as FMCA, with features identifying obligations and requirements of services. Service requirements can be either permitted or necessary, whereas the latter are further partitioned according to their criticality. A notion of agreement among service contracts is used to characterise safety.We show how FMCAT can be used to (i) specify dynamic service product line, (ii) efficiently identify all valid products, and to synthesise a safe orchestration of services for either (iii) a single product, or (iv) the whole service product line. FMCAT exploits the theory of FMCA to efficiently perform the above tasks by only visiting a subset of valid products, and it is equipped with a GUI.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {3–8},
numpages = {6},
keywords = {Featured Modal Contract Automata Tool, Product line, Services},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2791060.2791101,
author = {Quinton, Cl\'{e}ment and Rabiser, Rick and Vierhauser, Michael and Gr\"{u}nbacher, Paul and Baresi, Luciano},
title = {Evolution in dynamic software product lines: challenges and perspectives},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791101},
doi = {10.1145/2791060.2791101},
abstract = {In many domains systems need to run continuously and cannot be shut down for reconfiguration or maintenance tasks. Cyber-physical or cloud-based systems, for instance, thus often provide means to support their adaptation at runtime. The required flexibility and adaptability of systems suggests the application of Software Product Line (spl) principles to manage their variability and to support their reconfiguration. Specifically, Dynamic Software Product Lines (dspl) have been proposed to support the management and binding of variability at runtime. While spl evolution has been widely studied, it has so far not been investigated in detail in a dspl context. Variability models that are used in a dspl have to co-evolve and be kept consistent with the systems they represent to support reconfiguration even after changes to the systems at runtime. In this short paper we present a classification of the required operations for jointly evolving problem and solution space in a dspl. We analyze the impact of such operations on the consistency of a dspl and propose an approach to deal with the described issues. We describe a runtime monitoring system used in the domain of industrial automation software as an example of a dspl evolving at runtime to motivate and explain our work.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {126–130},
numpages = {5},
keywords = {consistency, dynamic software product lines, evolution},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3109729.3109757,
author = {S\'{a}nchez, Ana B. and Segura, Sergio},
title = {SmarTest: A Test Case Prioritization Tool for Drupal},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109757},
doi = {10.1145/3109729.3109757},
abstract = {Test case prioritization techniques aim to identify the optimal ordering of tests to accelerate the detection of faults. The importance of these techniques has been recognized in the context of Software Product Lines (SPLs), where the potentially huge number of products makes testing extremely challenging. We found that the open source Drupal framework shares most of the principles and challenges of SPL development and it can be considered a real-world example of family of products. In a previous work, we represented the Drupal configuration space as a feature model and we collected extra functional information about its features from open repositories. Part of this data proved to be a good indicator of faults propensity in Drupal features. Thus, they become valuable assets to prioritize tests in individual Drupal products. In this paper, we present SmarTest, a test prioritization tool for accelerating the detection of faults in Drupal. SmarTest has been developed as an extension of the Drupal core testing system. SmarTest supports the prioritization of tests providing faster feedback and letting testers begin correcting critical faults earlier. Different test prioritization criteria can be selected in SmarTest, such as prioritization based on the number of commits made in the code, or based on the tests that failed in last executions. A customizable dashboard with significant system information to guide the testing is also provided by SmarTest at run-time. This work represents an interesting application of SPL-inspired testing techniques to real-world software systems, which could be applicable to other open-source SPLs.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {9–12},
numpages = {4},
keywords = {Prioritization, Software product lines, Testing, Tool, Variability},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3106195.3106198,
author = {Batory, Don},
title = {Test of Time Award &amp; Conjectures on the Future of SPLs},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106198},
doi = {10.1145/3106195.3106198},
abstract = {This talk has two parts: First, I briefly summarize and explain the paper "Feature Models, Grammars, and Propositional Formulas" and acknowledge many researchers who have contributed to this and related results over the last decade.Second, I convey my insights on how scientific knowledge progresses and matures, the bumps in the road that we are all experiencing now as a consequence, and the existential challenges ahead for many sub-disciplines in Software Engineering, including Software Product Lines.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {4},
numpages = {1},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1109/MODELS-C.2019.00045,
author = {Bilic, Damir and Brosse, Etienne and Sadovykh, Andrey and Truscan, Dragos and Bruneliere, Hugo and Ryssel, Uwe},
title = {An integrated model-based tool chain for managing variability in complex system design},
year = {2021},
isbn = {9781728151250},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/MODELS-C.2019.00045},
doi = {10.1109/MODELS-C.2019.00045},
abstract = {Software-intensive systems in the automotive domain are often built in different variants, notably in order to support different market segments and legislation regions. Model-based concepts are frequently applied to manage complexity in such variable systems. However, the considered approaches are often focused on single-product development. In order to support variable products in a model-based systems engineering environment, we describe a tool-supported approach that allows us to annotate SysML models with variability data. Such variability information is exchanged between the system modeling tool and variability management tools through the Variability Exchange Language. The contribution of the paper includes the introduction of the model-based product line engineering tool chain and its application on a practical case study at Volvo Construction Equipment. Initial results suggest an improved efficiency in developing such a variable system.},
booktitle = {Proceedings of the 22nd International Conference on Model Driven Engineering Languages and Systems Companion},
pages = {288–293},
numpages = {6},
keywords = {integrated tool chain, model-based systems engineering, product line engineering},
location = {Munich, Germany},
series = {MODELS '19 Companion}
}

@inproceedings{10.1145/2364412.2364437,
author = {Derakhshanmanesh, Mahdi and Salehie, Mazeiar and Ebert, J\"{u}rgen},
title = {Towards model-centric engineering of a dynamic access control product line},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364437},
doi = {10.1145/2364412.2364437},
abstract = {Access control systems are deployed in organizations to protect critical cyber-physical assets. These systems need to be adjustable to cope with different contextual factors like changes in resources or requirements. Still, adaptation is often performed manually. In addition, different product variants of access control systems need to developed together systematically. These characteristics demand a product line engineering approach for enhanced reuse. Moreover, to cope with uncertainty at runtime, adaptivity, i.e., switching between variations in a cyber-physical domain (reconfiguration) and adjusting access policies (behavior adaptation), needs to be supported.In this position paper, we sketch an approach for engineering dynamic access control systems based on core concepts from dynamic software product lines and executable runtime models. The proposed solution is presented and first experiences are discussed along a sample dynamic software product line in the role-based access control domain.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {151–155},
numpages = {5},
keywords = {access control systems, adaptive software, dynamic software product lines, runtime models},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2364412.2364452,
author = {Berger, Thorsten},
title = {Variability modeling in the wild},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364452},
doi = {10.1145/2364412.2364452},
abstract = {Variability modeling is one of the key disciplines in software product line engineering and has been addressed by academic and industrial research over the past twenty years. While the research community's focus was on creating notations and tools, most of which based on feature modeling, there are relatively few empirical studies that aim at understanding the actual use of these techniques.In this light, we present empirical work that investigates variability modeling in the context of software product lines. We study concepts and semantics of real-world variability languages and the usage of these concepts in real, large-scale variability models. We further extend our discussion to variability in software ecosystems, which target inter-organizational reuse and are often seen as natural successors of software product lines. We provide empirical evidence that the well-researched concepts of feature modeling are used in practice, but also that more advanced concepts are needed. We observe that some assumptions about realistic variability models in the literature do not hold. Further, our findings indicate that variability models are not suited for software ecosystems, and that particular kinds of dependencies are needed to enable growth of such ecosystems.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {233–241},
numpages = {9},
keywords = {empirical software engineering, software ecosystems, software product lines, variability modeling},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@article{10.1007/s10270-012-0305-5,
author = {Buchmann, Thomas and Westfechtel, Bernhard},
title = {Mapping feature models onto domain models: ensuring consistency of configured domain models},
year = {2014},
issue_date = {October   2014},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {13},
number = {4},
issn = {1619-1366},
url = {https://doi.org/10.1007/s10270-012-0305-5},
doi = {10.1007/s10270-012-0305-5},
abstract = {We present an approach to model-driven software product line engineering which is based on feature models and domain models. A feature model describes both common and varying properties of the instances of a software product line. The domain model is composed of a structural model (package and class diagrams) and a behavioral model (story diagrams). Features are mapped onto the domain model by annotating elements of the domain model with features. An element of a domain model is specific to the features included in its feature annotation. An instance of the product line is defined by a set of selected features (a feature configuration). A configuration of the domain model is built by excluding all elements whose feature set is not included in the feature configuration. To ensure consistency of the configured domain model, we define constraints on the annotations of inter-dependent domain model elements. These constraints guarantee that a model element may be selected only when the model elements are also included on which it depends. Violations of dependency constraints may be removed automatically with the help of an error repair tool which propagates features to dependent model elements.},
journal = {Softw. Syst. Model.},
month = oct,
pages = {1495–1527},
numpages = {33},
keywords = {Dependency constraints, Domain models, Feature mappings, Feature models, Model-driven software product line engineering}
}

@inproceedings{10.1145/2934466.2934485,
author = {Lape\~{n}a, Ra\'{u}l and Ballarin, Manuel and Cetina, Carlos},
title = {Towards clone-and-own support: locating relevant methods in legacy products},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934485},
doi = {10.1145/2934466.2934485},
abstract = {Clone-and-Own (CAO) is a common practice in families of software products consisting of reusing code from methods in legacy products in new developments. In industrial scenarios, CAO consumes high amounts of time and effort without guaranteeing good results. We propose a novel approach, Computer Assisted CAO (CACAO), that given the natural language requirements of a new product, and the legacy products from that family, ranks the legacy methods in the family for each of the new product requirements according to their relevancy to the new development. We evaluated our approach in the industrial domain of train control software. Without CACAO, software engineers tasked with the development of a new product had to manually review a total of 2200 methods in the family. Results show that CACAO can reduce the number of methods to be reviewed, and guide software engineers towards the identification of relevant legacy methods to be reused in the new product.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {194–203},
numpages = {10},
keywords = {clone and own, families of software products, software reuse},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2934466.2962726,
author = {Pfofe, Tristan and Th\"{u}m, Thomas and Schulze, Sandro and Fenske, Wolfram and Schaefer, Ina},
title = {Synchronizing software variants with variantsync},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2962726},
doi = {10.1145/2934466.2962726},
abstract = {Developing and managing software variants is a key challenge in today's software development. Due to conflicting requirements, software is developed in multiple variants to satisfy the needs of individual customers. While software product lines allow the efficient development of a high number of variants, many projects in industrial software development start with few variants, where each variant is developed separately. Unfortunately, for an increasing number of variants, this clone-and-own approach becomes error-prone and unprofitable regarding synchronization of changes between variants. With VariantSync, we demonstrate a tool to reduce the gap between clone-and-own and product lines by automating the synchronization of software variants and simplifying a potential later transition to a product line.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {329–332},
numpages = {4},
keywords = {clone-and-own, evolution, software product lines},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3106195.3106208,
author = {El-Sharkawy, Sascha and Krafczyk, Adam and Schmid, Klaus},
title = {An Empirical Study of Configuration Mismatches in Linux},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106208},
doi = {10.1145/3106195.3106208},
abstract = {Ideally the variability of a product line is represented completely and correctly by its variability model. However, in practice additional variability is often represented on the level of the build system or in the code. Such a situation may lead to inconsistencies, where the actually realized variability does not fully correspond to the one described by the variability model. In this paper we focus on configuration mismatches, i.e., cases where the effective variability differs from the variability as it is represented by the variability model. While previous research has already shown that these situations still exist even today in well-analyzed product lines like Linux, so far it was unclear under what circumstances such issues occur in reality. In particular, it is open what types of configuration mismatches occur and how severe they are. Here, our contribution is to close this gap by presenting a detailed manual analysis of 80 configuration mismatches in the Linux 4.4.1 kernel and assess their criticality. We identify various categories of configuration issues and show that about two-thirds of the configuration mismatches may actually lead to kernel misconfigurations.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {19–28},
numpages = {10},
keywords = {Kconfig, Linux, Software product lines, configuration mismatches, empirical software engineering, static analysis, variability modeling},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2364412.2364417,
author = {Ripon, Shamim and Azad, Keya and Hossain, Sk Jahir and Hassan, Mehidee},
title = {Modeling and analysis of product-line variants},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364417},
doi = {10.1145/2364412.2364417},
abstract = {Formal verification of variant requirements has gained much interest in the software product line (SPL) community. Feature diagrams are widely used to model product line variants. However, there is a lack of precisely defined formal notation for representing and verifying such models. This paper presents an approach to modeling and analyzing SPL variant feature diagrams using first-order logic. It provides a precise and rigorous formal interpretation of the feature diagrams. Logical expressions can be built by modeling variants and their dependencies by using propositional connectives. These expressions can then be validated by any suitable verification tool such as Alloy. A case study of a Computer Aided Dispatch (CAD) system variant feature model is presented to illustrate the analysis and verification process.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {26–31},
numpages = {6},
keywords = {alloy, feature model, first-order logic, product line, variants},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3109729.3109733,
author = {T\"{e}rnava, Xhevahire and Collet, Philippe},
title = {On the Diversity of Capturing Variability at the Implementation Level},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109733},
doi = {10.1145/3109729.3109733},
abstract = {In many Software product lines (SPLs), if domain variability can be properly specified in terms of features in a feature model (FM), their implementation in core-code assets is hard to capture and maintain, as there are different techniques to implement the variability. Even with an organization in variation points and variants, most of these techniques do not shape the code in terms of features, and inconsistencies appear when the variability evolves at one level with no co-evolution at the other. To help SPL architects, one possible solution is to be able to reconstruct the FM by capturing the variability in core-code assets, but different implementation techniques expose diverse characteristics, hampering the process. We study in this paper the diverse dimensions of the existing variability implementation techniques, and how they can be captured in an abstract way. We then categorize them regarding these dimensions in a single catalog, extending previous classifications of such techniques. We also briefly show how the characteristics of the techniques could help to better capture the implemented variability, opening some potential in reverse engineering processes.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {81–88},
numpages = {8},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3109729.3109743,
author = {Moritani, Bruno Iizuka and Lee, Jaejoon},
title = {An approach for managing a distributed feature model to evolve self-adaptive dynamic software product lines},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109743},
doi = {10.1145/3109729.3109743},
abstract = {While maintaining core assets of a product line, product line engineers may need to adapt the assets to accommodate new requirements and new devices from the changing and newly emerging markets. Additionally, due to the emergence of new computing environments like autonomous systems (e.g., ubiquitous computing and the Internet of Things), there is increasing demand for dynamic adaptations of core assets, and this often needs to be managed with minimum human intervention. We propose an approach for managing a distributed feature model in order to facilitate the adaptation of self-adaptive dynamic software product lines (DSPLs). In addition, our approach allows the change of behaviours to promote the long lifecycle of self-adaptive DSPL. The case study applied in this paper is a baby care system (BCS). BCS assists people to monitor a baby while they are sleeping. We tested our BCS in the following scenarios: adding features, removing features and changing behaviours. All these scenarios showed that it is possible to use our approach to self-adapt DSPLs.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {107–110},
numpages = {4},
keywords = {Dynamic Software Product Lines, Feature Model, Software Evolution},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2019136.2019158,
author = {Guana, Victor and Correal, Dario},
title = {Variability quality evaluation on component-based software product lines},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019158},
doi = {10.1145/2019136.2019158},
abstract = {Quality assurance and evaluation in Model Driven Software Product Lines (MD-SPLs) are pivotal points for the growing and solidification of the generative software factories. They are framed as one of the future fact methodologies for the construction of software systems. Although several approximations address the problem of generative environments, software product line scope expression, and core asset definition, not many of them try to solve, as a fundamental step, the automation of the quality attribute evaluation in the MD-SPL development cycle. This paper presents a model-driven engineering method and a tool for the quality evaluation of product line configurations through a cross architectural view analysis.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {19},
numpages = {8},
keywords = {domain specific modeling, model composition, model-driven software product line, quality attribute, sensitivity point},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3302333.3302341,
author = {Greiner, Sandra and Westfechtel, Bernhard},
title = {On Determining Variability Annotations In Partially Annotated Models},
year = {2019},
isbn = {9781450366489},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3302333.3302341},
doi = {10.1145/3302333.3302341},
abstract = {In model-driven software product line engineering (SPLE) the superset of products is developed over models. A feature model typically states the discriminating and common factors of the software. In annotative approaches model elements are associated with variability annotations which are boolean expressions over the features defining in which products the elements are visible. When the product line is defined over different models, the developer wants to annotate the model of one type and transform it to different representations, e.g., a (UML) class diagram into a relational database schema for establishing an object-relational mapping. Assigning the annotations manually to the target model is an error-prone and laborious task. In a black-box approach we automatically assign the correct annotations to the target model without analyzing the transformation specification. It is an easy task in the case of 1:1 mappings where the annotation of the source element is copied to the corresponding element in the target model. Typically this kind of information is available, e.g., in traces written during the transformation execution. In reality, more complex mappings are frequent but the correspondences harder to determine. Assuming a target model is already annotated with the annotation of 1:1 correspondences, a certain number of elements remains without annotations. This paper contributes strategies to determine missing annotations in partially annotated models. We compare a global include strategy with more sophisticated ones which take the model structure into account. Since we apply missing annotations locally on one model, we solve a general SPLE problem where completely annotated models reduce the manual user effort and are desirable for filtering.},
booktitle = {Proceedings of the 13th International Workshop on Variability Modelling of Software-Intensive Systems},
articleno = {17},
numpages = {10},
keywords = {(multi-variant) model transformations, Model-driven Software Product Line Engineering, annotative approach, feature propagation, software evolution},
location = {Leuven, Belgium},
series = {VaMoS '19}
}

@inproceedings{10.1145/2647908.2655966,
author = {Itzik, Nili and Reinhartz-Berger, Iris},
title = {Generating feature models from requirements: structural vs. functional perspectives},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655966},
doi = {10.1145/2647908.2655966},
abstract = {Adoption of SPLE techniques is challenging and expensive. Hence, automation in the adoption process is desirable, especially with respect to variability management. Different methods have been suggested for (semi-)automatically generating feature models from requirements or textual descriptions of products. However, while there are different ways to represent the same SPL in feature models, addressing different stakeholders' needs and preferences, existing methods usually follow fixed, predefined ways to generate feature models. As a result, the generated feature models may represent perspectives less relevant to the given tasks.In this paper we suggest an ontological approach that measures the semantic similarity, extracts variability, and automatically generates feature models that represent structural (objects-related) or functional (actions-related) perspectives. The stakeholders are able to control the perspective of the generated feature models, considering their needs and preferences for given tasks.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {44–51},
numpages = {8},
keywords = {feature models, mining, ontology, reverse engineering, semantic similarity},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3474624.3474626,
author = {Bettin, Giovanna and OliveiraJr, Edson},
title = {SMartyPerspective: a perspective-based inspection technique for software product lines},
year = {2021},
isbn = {9781450390613},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3474624.3474626},
doi = {10.1145/3474624.3474626},
abstract = {Software Product Line (SPL) is an approach for reusing software artifacts for a specific domain. To improve products quality, verification and validation activities for SPL artifacts are necessary, thus defects are not propagated to derived products. The lack of techniques to exploit the inherited SPL reuse characteristics, mainly in early phases, provides an opportunity to investigate how to improve SPL quality. Perspective-Based Reading (PBR) has proven to be a feasible inspection technique, as it considers different scenarios and perspectives of reviewers of software artifacts. Therefore, in this paper, we specify and evaluate SMartyPerspective, a PBR technique to inspect UML-based SPL diagrams (use case, class, sequence, and component) and feature diagrams. SMartyPerspective comprises Domain Engineering perspectives: Product Manager, Domain Requirements Engineer, Domain Architect, Domain Developer, and Domain Asset Manager. We evaluated it by carrying out a TAM-based qualitative study with 19 participants with experience in SPL and software inspections. We also used coding to analyze the open questions. Obtained results provide initial evidence SMartyPerspective is feasible for inspecting its supported diagrams.},
booktitle = {Proceedings of the XXXV Brazilian Symposium on Software Engineering},
pages = {90–94},
numpages = {5},
keywords = {Defects, Perspective-Based Reading, SMarty, SPL Inspections, Software Product Line, TAM, UML},
location = {Joinville, Brazil},
series = {SBES '21}
}

@article{10.1145/2579281.2579294,
author = {Castelluccia, Daniela and Boffoli, Nicola},
title = {Service-oriented product lines: a systematic mapping study},
year = {2014},
issue_date = {March 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {39},
number = {2},
issn = {0163-5948},
url = {https://doi.org/10.1145/2579281.2579294},
doi = {10.1145/2579281.2579294},
abstract = {Software product line engineering and service-oriented architectures both enable organizations to capitalize on reuse of existing software assets and capabilities and improve competitive advantage in terms of development savings, product flexibility, time-to-market. Both approaches accommodate variation of assets, including services, by changing the software being reused or composing services according a new orchestration. Therefore, variability management in Service-oriented Product Lines (SoPL) is one of the main challenges today. In order to highlight the emerging evidence-based results from the research community, we apply the well-defined method of systematic mapping in order to populate a classification scheme for the SoPL field of interest. The analysis of results throws light on the current open issues. Moreover, different facets of the scheme can be combined to answer more specific research questions. The report reveals the need for more empirical research able to provide new metrics measuring efficiency and efficacy of the proposed models, new methods and tools supporting variability management in SoPL, especially during maintenance and verification and validation. The mapping study about SoPL opens further investigations by means of a complete systematic review to select and validate the most efficient solutions to variability management in SoPL.},
journal = {SIGSOFT Softw. Eng. Notes},
month = mar,
pages = {1–6},
numpages = {6},
keywords = {empirical study, mapping study, product line development, service-oriented architecture, service-oriented computing, software product line, variability management}
}

@inproceedings{10.1145/3168365.3168378,
author = {Carbonnel, Jessie and Huchard, Marianne and Nebut, Cl\'{e}mentine},
title = {Towards the Extraction of Variability Information to Assist Variability Modelling of Complex Product Lines},
year = {2018},
isbn = {9781450353984},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3168365.3168378},
doi = {10.1145/3168365.3168378},
abstract = {Software product line engineering gathers a set of methods that rely on systematic reuse and mass customisation to reduce the development time and cost of a set of similar software systems. Boolean feature models are the de facto standard used to represent product line variability in terms of features, a feature being a distinguishable characteristic of one or several softwares. The extractive adoption of a product line from a set of individually developed softwares requires to extract variability information from a collection of software descriptions to model their variability. With the appearance of more and more complex software systems, software product line engineering faces new challenges including variability extraction and modelling. Extensions of boolean feature models, as multi-valued attributes or UML-like cardinalities have since been proposed to support variability modelling in complex product lines. In this paper, we propose research directions to address the issue of extracting more complex variability information, as a part of extended feature models synthesis from software descriptions. We consider the capabilities of Formal Concept Analysis, a mathematical framework for knowledge discovery, along with two of its extensions called Pattern Structures and Relational Concept Analysis, to answer this problematic. These frameworks bring theoretical foundations to complex variability extraction algorithms.},
booktitle = {Proceedings of the 12th International Workshop on Variability Modelling of Software-Intensive Systems},
pages = {113–120},
numpages = {8},
keywords = {Reverse Engineering, Software Product Line, Variability Extraction},
location = {Madrid, Spain},
series = {VAMOS '18}
}

@inproceedings{10.1145/3233027.3233030,
author = {Weckesser, Markus and Kluge, Roland and Pfannem\"{u}ller, Martin and Matth\'{e}, Michael and Sch\"{u}rr, Andy and Becker, Christian},
title = {Optimal reconfiguration of dynamic software product lines based on performance-influence models},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233030},
doi = {10.1145/3233027.3233030},
abstract = {Today's adaptive software systems (i) are often highly configurable product lines, exhibiting hundreds of potentially conflicting configuration options; (ii) are context dependent, forcing the system to reconfigure to ever-changing contextual situations at runtime; (iii) need to fulfill context-dependent performance goals by optimizing measurable nonfunctional properties. Usually, a large number of consistent configurations exists for a given context, and each consistent configuration may perform differently with regard to the current context and performance goal(s). Therefore, it is crucial to consider nonfunctional properties for identifying an appropriate configuration. Existing black-box approaches for estimating the performance of configurations provide no means for determining context-sensitive reconfiguration decisions at runtime that are both consistent and optimal, and hardly allow for combining multiple context-dependent quality goals. In this paper, we propose a comprehensive approach based on Dynamic Software Product Lines (DSPL) for obtaining consistent and optimal reconfiguration decisions. We use training data obtained from simulations to learn performance-influence models. A novel integrated runtime representation captures both consistency properties and the learned performance-influence models. Our solution provides the flexibility to define multiple context-dependent performance goals. We have implemented our approach as a standalone component. Based on an Internet-of-Things case study using adaptive wireless sensor networks, we evaluate our approach with regard to effectiveness, efficiency, and applicability.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {98–109},
numpages = {12},
keywords = {dynamic software product lines, machine learning, performance-influence models},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@article{10.1007/s10270-020-00791-9,
author = {Westfechtel, Bernhard and Greiner, Sandra},
title = {Extending single- to multi-variant model transformations by trace-based propagation of variability annotations},
year = {2020},
issue_date = {Jul 2020},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {19},
number = {4},
issn = {1619-1366},
url = {https://doi.org/10.1007/s10270-020-00791-9},
doi = {10.1007/s10270-020-00791-9},
abstract = {Model-driven engineering involves the construction of models on different levels of abstraction. Software engineers are supported by model transformations, which automate the transition from high- to low-level models. Product line engineering denotes a systematic process that aims at developing different product variants from a set of reusable assets. When model-driven engineering is combined with product line engineering, engineers have to deal with multi-variant models. In annotative approaches to product line engineering, model elements are decorated with annotations, i.e., Boolean expressions that define the product variants in which model elements are to be included. In model-driven product line engineering, domain engineers require multi-variant transformations, which create multi-variant target models from multi-variant source models. We propose a reuse-based gray-box approach to realizing multi-variant model transformations. We assume that single-variant transformations already exist, which have been developed for model-driven engineering, without considering product lines. Furthermore, we assume that single-variant transformations create traces, which comprise the steps executed in order to derive target models from source models. Single-variant transformations are extended into multi-variant transformations by trace-based propagation: after executing a single-variant transformation, the resulting single-variant target model is enriched with annotations that are calculated with the help of the transformation’s trace. This approach may be applied to single-variant transformations written in different languages and requires only access to the trace, not to the respective transformation definition. We also provide a correctness criterion for trace-based propagation, and a proof that this criterion is satisfied under the prerequisites of a formal computational model.},
journal = {Softw. Syst. Model.},
month = jul,
pages = {853–888},
numpages = {36},
keywords = {Model transformation, Software product line, Annotative variability}
}

@inproceedings{10.1145/2648511.2648549,
author = {Berger, Thorsten and St\u{a}nciulescu, \c{S}tefan and \O{}g\r{a}rd, Ommund and Haugen, \O{}ystein and Larsen, Bo and W\k{a}sowski, Andrzej},
title = {To connect or not to connect: experiences from modeling topological variability},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648549},
doi = {10.1145/2648511.2648549},
abstract = {Variability management aims at taming variability in large and complex software product lines. To efficiently manage variability, it has to be modeled using formal representations, such as feature or decision models. Such models are efficient in many domains, where variability is about switching on and off features, or using parameters to customize products of the product line. However, variability can be represented in the form of a topology in domains where variability is about connecting components in a certain order, in specific interconnected hierarchies, or in different quantities.In this experience report, we explore topological variability within a case study of large-scale fire alarm systems. We identify core characteristics of the variability, derive modeling requirements, model the variability using UML2 class diagrams, and discuss the applicability of further variability modeling languages. We show that, although challenging, class diagrams can suffice to represent topological variability in order to generate a configurator tool. In contrast, modeling parallel and recursive structures, cycles, informal constraints, and orthogonal hierarchies were among the main experienced challenges that require further research.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {330–339},
numpages = {10},
keywords = {class diagrams, configuration, experience report, software product lines, topology, variability modeling},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2791060.2791100,
author = {ter Beek, Maurice H. and Fantechi, Alessandro and Gnesi, Stefania},
title = {Applying the product lines paradigm to the quantitative analysis of collective adaptive systems},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791100},
doi = {10.1145/2791060.2791100},
abstract = {Engineering a Collective Adaptive System (CAS) requires the support of a framework for quantitative modeling and analysis of the system. In order to jointly address variability and quantitative analysis, we apply the Product Lines paradigm, considered at the level of system engineering, to a case study of the European project QUANTICOL, by first defining a reference feature model and then adding feature attributes and global quantitative constraints, in the form of a Clafer attributed feature model. ClaferMOOVisualizer is subsequently used for quantitative analyses and multi-objective optimization of the resulting attributed feature model.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {321–326},
numpages = {6},
keywords = {ClaferMOO, collective adaptive systems, multi-objective optimization, quantitative analysis, quantitative modeling, variability analysis},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2491627.2491643,
author = {Fantechi, Alessandro},
title = {Topologically configurable systems as product families},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491643},
doi = {10.1145/2491627.2491643},
abstract = {We address a category of systems whose deployment requires a configuration according to topological information. Although inspired by the case of railway interlocking systems, we give a general definition of topologically configurable control systems. We consider the application of product line engineering principles to the development of these systems, by discussing the adoption of different approaches to achieve a flexible configuration of products, able to factorise most of the design effort, as typical in a product line approach.Verifying the behaviour of such systems, either by testing or by formal verification is actually a challenge: the intricate relations between the actual topology controlled by a product and its functional requirements may prevent any attempt to factorise analysis activities. We will discuss how the application of product line engineering principles can help, with special focus on formal verification, pointing to several open research issues.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {151–156},
numpages = {6},
keywords = {topological configuration, variability modelling},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2934466.2956656,
author = {Beuche, Danilo},
title = {Managing requirements in product lines},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2956656},
doi = {10.1145/2934466.2956656},
abstract = {In this paper, we give a brief overview on the tutorial "Managing Requirements in Product Line".},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {311},
numpages = {1},
keywords = {product lines, requirements, variant management},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2019136.2019192,
author = {Feigenspan, Janet and Papendieck, Maria and K\"{a}stner, Christian and Frisch, Mathias and Dachselt, Raimund},
title = {FeatureCommander: colorful #ifdef world},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019192},
doi = {10.1145/2019136.2019192},
abstract = {Software product line engineering is a promising paradigm to create variable software. In practice, conditional compilation is often used to implement software product lines, such that code of features is annotated with ifdef directives. However, preprocessor usage can lead to obfuscated source code that is hard to understand and maintain. In the literature, ifdef directives are even referred to as "ifdef hell" [1, 5].},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {48},
numpages = {2},
keywords = {FeatureCommander, preprocessor, program comprehension},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3109729.3109738,
author = {Ne\v{s}i\'{c}, Damir and Nyberg, Mattias and Gallina, Barbara},
title = {Modeling Product-Line Legacy Assets using Multi-Level Theory},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109738},
doi = {10.1145/3109729.3109738},
abstract = {The use of non-systematic reuse techniques in Systems Engineering (SE) leads to the creation of legacy products comprised of legacy assets like software, hardware, and mechanical parts coupled with associated traceability links to requirements, testing artifacts, architectural fragments etc. The sheer number of different legacy assets and different technologies used to engineer such legacy products makes reverse engineering of PLs in this context a daunting task. One of the prerequisites for reverse engineering of PLs is to create a family model that captures implementation aspects of all the legacy products. In this paper, we evaluate the applicability of a modeling paradigm called Multi-Level Modeling, which is based on the class-instance relation, for the creation of a family model that captures all the implementation concerns in an SE PL. More specifically, we evaluate an approach called Multi-Level conceptual Theory (MLT) for capturing different legacy assets, their mutual relations and related variability information. Moreover, we map PL concepts like variants, presence conditions and product configurations to MLT concepts and provide formal interpretation of their semantics in the MLT framework. The illustrative example used throughout the paper comes from a real case from the automotive domain.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {89–96},
numpages = {8},
keywords = {Legacy systems, Multi-Level Modeling, Reverse engineering},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2362536.2362547,
author = {Johansen, Martin Fagereng and Haugen, \O{}ystein and Fleurey, Franck},
title = {An algorithm for generating t-wise covering arrays from large feature models},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362547},
doi = {10.1145/2362536.2362547},
abstract = {A scalable approach for software product line testing is required due to the size and complexity of industrial product lines. In this paper, we present a specialized algorithm (called ICPL) for generating covering arrays from feature models. ICPL makes it possible to apply combinatorial interaction testing to software product lines of the size and complexity found in industry. For example, ICPL allows pair-wise testing to be readily applied to projects of about 7,000 features and 200,000 constraints, the Linux Kernel, one of the largest product lines where the feature model is available. ICPL is compared to three of the leading algorithms for t-wise covering array generation. Based on a corpus of 19 feature models, data was collected for each algorithm and feature model when the algorithm could finish 100 runs within three days. These data are used for comparing the four algorithms. In addition to supporting large feature models, ICPL is quick, produces small covering arrays and, even though it is non-deterministic, produces a covering array of a similar size within approximately the same time each time it is run with the same feature model.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {46–55},
numpages = {10},
keywords = {combinatorial interaction testing, feature models, product lines, testing},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2648511.2648561,
author = {Beuche, Danilo and Schulze, Michael},
title = {Managing variability with feature models},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648561},
doi = {10.1145/2648511.2648561},
abstract = {In this paper, we give a brief overview on the tutorial "Managing Variability with Feature Models".},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {364},
numpages = {1},
keywords = {feature models, product lines, variability},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2934466.2946046,
author = {Arrieta, Aitor and Wang, Shuai and Sagardui, Goiuria and Etxeberria, Leire},
title = {Search-based test case selection of cyber-physical system product lines for simulation-based validation},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2946046},
doi = {10.1145/2934466.2946046},
abstract = {Cyber-Physical Systems (CPSs) are often tested at different test levels following "X-in-the-Loop" configurations: Model-, Software- and Hardware-in-the-loop (MiL, SiL and HiL). While MiL and SiL test levels aim at testing functional requirements at the system level, the HiL test level tests functional as well as non-functional requirements by performing a real-time simulation. As testing CPS product line configurations is costly due to the fact that there are many variants to test, test cases are long, the physical layer has to be simulated and co-simulation is often necessary. It is therefore extremely important to select the appropriate test cases that cover the objectives of each level in an allowable amount of time. We propose an efficient test case selection approach adapted to the "X-in-the-Loop" test levels. Search algorithms are employed to reduce the amount of time required to test configurations of CPS product lines while achieving the test objectives of each level. We empirically evaluate three commonly-used search algorithms, i.e., Genetic Algorithm (GA), Alternating Variable Method (AVM) and Greedy (Random Search (RS) is used as a baseline) by employing two case studies with the aim of integrating the best algorithm into our approach. Results suggest that as compared with RS, our approach can reduce the costs of testing CPS product line configurations by approximately 80% while improving the overall test quality.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {297–306},
numpages = {10},
keywords = {cyber-physical system product lines, search-based software engineering, test case selection},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3442391.3442397,
author = {Silva, Leandro Flores da and OliveiraJr, Edson},
title = {SMartyModeling: an Environment for Engineering UML-based Software Product Lines},
year = {2021},
isbn = {9781450388245},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3442391.3442397},
doi = {10.1145/3442391.3442397},
abstract = {Software Product Line (SPL) has been successfully consolidated as an approach for systematic reuse. The adoption of the SPL approach aims at increasing the reuse of requirements and artifacts, thus reusing documents, source code and artifacts and ensuring better quality control to software production in a large-scale. One of the essential activities for SPL management is the modeling of variability. Variability modeling in UML-based SPL has been carried out mostly using the UML Profiling mechanism, in which new stereotypes and tagged values are created for such purpose. The available option in general-purpose UML tools for exporting UML models is through XMI files, standardized by OMG. This option is important to process XMI files in particular environments or tools, for example, managing variabilities, generating product configurations from an SPL, and even collecting metrics, and estimating SPLs. However, different versions, tool restrictions, and different file standards compromise operations involving XMI files. In this scenario, the industry has increasingly required the supporting tools for the SPL approach. However, the current support tools are mainly restricted to the problem space based on feature modeling and present problems with data integration with other tools. Therefore, we developed SMartyModeling, an environment for engineering UML-based SPLs in which variabilities are modeled as stereotypes using any UML compliant profile. This paper presents an overview of SMartyModeling, describing its motivation, main components, and available features.},
booktitle = {Proceedings of the 15th International Working Conference on Variability Modelling of Software-Intensive Systems},
articleno = {5},
numpages = {5},
keywords = {SMarty, UML, software product line, variability modeling},
location = {Krems, Austria},
series = {VaMoS '21}
}

@inproceedings{10.1145/3106195.3106206,
author = {Arcaini, Paolo and Gargantini, Angelo and Vavassori, Paolo},
title = {Automated Repairing of Variability Models},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106206},
doi = {10.1145/3106195.3106206},
abstract = {Variability models are a common means for describing the commonalities and differences in Software Product Lines (SPL); configurations of the SPL that respect the constraints imposed by the variability model define the problem space. The same variability is usually also captured in the final implementation through implementation constraints, defined in terms of preprocessor directives, build files, build-time errors, etc. Configurations satisfying the implementation constraints and producing correct (compilable) programs define the solution space. Since sometimes the variability model is defined after the implementation exists, it could wrongly assess the validity of some system configurations, i.e., it could consider acceptable some configurations (not belonging to the solution space) that do not permit to obtain a correct program. We here propose an approach that automatically repairs variability models such that the configurations they consider valid are also part of the solution space. Experiments show that some existing variability models are indeed faulty and can be repaired by our approach.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {9–18},
numpages = {10},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2648511.2648522,
author = {Schr\"{o}ter, Reimar and Siegmund, Norbert and Th\"{u}m, Thomas and Saake, Gunter},
title = {Feature-context interfaces: tailored programming interfaces for software product lines},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648522},
doi = {10.1145/2648511.2648522},
abstract = {Despite the wide use of software product lines, their implementation and evolution is a challenging task. When implementing a feature, a developer has to know which code fragments of other (already implemented) features are accessible in each program variant in which the feature is included. Especially for composition-based implementation techniques, in which the code is implemented in separated modules, it is an exhausting and error-prone task to find safely accessible code fragments of other modules. State-of-the-art tool support, such as product-line type checkers, detect errors a posteriori (i.e., during compilation), but fails to prevent errors during the implementation. To overcome this problem, we propose feature-context interfaces, which provide a modular and non-variable programming interface to the variable source code of a product line. These interfaces ease changes, extensions, and the maintainability of product lines. To demonstrate applicability, we implemented a content assist and an outline view in Eclipse based on feature-context interfaces. We evaluate the potential of our method by analyzing the number of potential type errors we prevent compared to state-of-the-art techniques.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {102–111},
numpages = {10},
keywords = {modularity, software product lines, syntactic interface},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2791060.2791111,
author = {Cordy, Maxime and Davril, Jean-Marc and Greenyer, Joel and Gressi, Erika and Heymans, Patrick},
title = {All-at-once-synthesis of controllers from scenario-based product line specifications},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791111},
doi = {10.1145/2791060.2791111},
abstract = {Software-intensive systems often consist of multiple components that interact to realize complex requirements. An additional dimension of complexity arises when one designs many variants of a system at once, that is, a software product line (SPL). We propose a scenario-based approach to design SPLs, based on a combination of Modal Sequence Diagrams (MSDs) and a feature model. It consists in associating every MSD to the set of variants that have to satisfy its specification. Variability constitutes a new source of complexity, which can lead to inconsistencies in the specification of one or multiple variants. It is therefore crucial to detect these inconsistencies, and to produce a controller for each variant that makes it behave so that it satisfies its specification. We present a new controller synthesis technique that checks the absence of inconsistencies in all variants at once, thereby more radically exploiting the similarities between them. Our method first translates the MSD specification into a variability-aware B\"{u}chi game, and then solves this game for all variants in a single execution. We implemented the approach in ScenarioTools, a software tool which we use to evaluate our algorithms against competing methods.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {26–35},
numpages = {10},
keywords = {controller synthesis, features, message sequence diagrams},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2499777.2499778,
author = {Henard, Christopher and Papadakis, Mike and Perrouin, Gilles and Klein, Jacques and Traon, Yves Le},
title = {PLEDGE: a product line editor and test generation tool},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2499778},
doi = {10.1145/2499777.2499778},
abstract = {Specific requirements of clients lead to the development of variants of the same software. These variants form a Software Product Line (SPL). Ideally, testing a SPL involves testing all the software products that can be configured through the combination of features. This, however, is intractable in practice since a) large SPLs can lead to millions of possible software variants and b) the testing process is usually limited by budget and time constraints. To overcome this problem, this paper introduces PLEDGE, an open source tool that selects and prioritizes the product configurations maximizing the feature interactions covered. The uniqueness of PLEDGE is that it bypasses the computation of the feature interactions, allowing to scale to large SPLs.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {126–129},
numpages = {4},
keywords = {T-wise, combinatorial interaction testing, prioritization, scalability, search-based approaches, software product lines},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/3106195.3106214,
author = {Couto, Marco and Borba, Paulo and Cunha, J\'{a}come and Fernandes, Jo\~{a}o Paulo and Pereira, Rui and Saraiva, Jo\~{a}o},
title = {Products go Green: Worst-Case Energy Consumption in Software Product Lines},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106214},
doi = {10.1145/3106195.3106214},
abstract = {The optimization of software to be (more) energy efficient is becoming a major concern for the software industry. Although several techniques have been presented to measure energy consumption for software, none has addressed software product lines (SPLs). Thus, to measure energy consumption of a SPL, the products must be generated and measured individually, which is too costly.In this paper, we present a technique and a prototype tool to statically estimate the worst case energy consumption for SPL. The goal is to provide developers with techniques and tools to reason about the energy consumption of all products in a SPL, without having to produce, run and measure the energy in all of them.Our technique combines static program analysis techniques and worst case execution time prediction with energy consumption analysis. This technique analyzes all products in a feature-sensitive manner, that is, a feature used in several products is analyzed only once, while the energy consumption is estimated once per product.We implemented our technique in a tool called Serapis. We did a preliminary evaluation using a product line for image processing implemented in C. Our experiments considered 7 products from such line and our initial results show that the tool was able to estimate the worst-case energy consumption with a mean error percentage of 9.4% and standard deviation of 6.2% when compared with the energy measured when running the products.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {84–93},
numpages = {10},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/3493244.3493250,
author = {Wolfart, Daniele and Assun\c{c}\~{a}o, Wesley Klewerton Guez and Martinez, Jabier},
title = {Variability Debt: Characterization, Causes and Consequences},
year = {2021},
isbn = {9781450395533},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3493244.3493250},
doi = {10.1145/3493244.3493250},
abstract = {Variability is an inherent property of software systems to create families of products dealing with needs of different customers and environments. However, some practices to manage variability may incur technical debt. For example, the use of opportunistic reuse strategies, e.g., clone-and-own, harms maintenance and evolution activities; or deciding to abandon variability management and deriving a single product with all the features might threaten system usability. These examples are common problems found in practice but, to the best of or knowledge, not properly investigated from the perspective of technical debt. To expand the knowledge on the research and practice of technical debt in the perspective of variability management, we report results of this phenomenon, which we defined as variability debt. Our work is based on 52 industrial case studies that report problems observed in the use of opportunistic reuse. The results show that variability debt is caused by business, operational and technical aspects; leads to complex maintenance, creates difficulties to customize and create new products, misuse of human resources, usability problems; and impacts artifacts along the whole life-cycle. Although some of these issues are investigated in the field of systematic variability management, e.g., software product lines, our contribution is to present them from a technical debt perspective to enrich and create synergies between the two fields. As additional contribution, we present a catalog of variability debts in the light of technical debts found in the literature.},
booktitle = {Proceedings of the XX Brazilian Symposium on Software Quality},
articleno = {17},
numpages = {10},
keywords = {Software Product Lines, Technical Debt, Variability Debt, Variability management},
location = {Virtual Event, Brazil},
series = {SBQS '21}
}

@inproceedings{10.1145/2491627.2491639,
author = {Filho, Jo\~{a}o Bosco Ferreira and Barais, Olivier and Acher, Mathieu and Baudry, Benoit and Le Noir, J\'{e}r\^{o}me},
title = {Generating counterexamples of model-based software product lines: an exploratory study},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491639},
doi = {10.1145/2491627.2491639},
abstract = {Model-based Software Product Line (MSPL) engineering aims at deriving customized models corresponding to individual products of a family. MSPL approaches usually promote the joint use of a variability model, a base model expressed in a specific formalism, and a realization layer that maps variation points to model elements. The design space of an MSPL is extremely complex to manage for the engineer, since the number of variants may be exponential and the derived product models have to be conformant to numerous well-formedness and business rules. In this paper, the objective is to provide a way to generate MSPLs, called counterexamples, that can produce invalid product models despite a valid configuration in the variability model. We provide a systematic and automated process, based on the Common Variability Language (CVL), to randomly search the space of MSPLs for a specific formalism. We validate the effectiveness of this process for three formalisms at different scales (up to 247 metaclasses and 684 rules). We also explore and discuss how counterexamples could guide practitioners when customizing derivation engines, when implementing checking rules that prevent early incorrect CVL models, or simply when specifying an MSPL.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {72–81},
numpages = {10},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2791060.2791070,
author = {Liang, Jia Hui and Ganesh, Vijay and Czarnecki, Krzysztof and Raman, Venkatesh},
title = {SAT-based analysis of large real-world feature models is easy},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791070},
doi = {10.1145/2791060.2791070},
abstract = {Modern conflict-driven clause-learning (CDCL) Boolean SAT solvers provide efficient automatic analysis of real-world feature models (FM) of systems ranging from cars to operating systems. It is well-known that solver-based analysis of real-world FMs scale very well even though SAT instances obtained from such FMs are large, and the corresponding analysis problems are known to be NP-complete. To better understand why SAT solvers are so effective, we systematically studied many syntactic and semantic characteristics of a representative set of large real-world FMs. We discovered that a key reason why large real-world FMs are easy-to-analyze is that the vast majority of the variables in these models are unrestricted, i.e., the models are satisfiable for both true and false assignments to such variables under the current partial assignment. Given this discovery and our understanding of CDCL SAT solvers, we show that solvers can easily find satisfying assignments for such models without too many backtracks relative to the model size, explaining why solvers scale so well. Further analysis showed that the presence of unrestricted variables in these real-world models can be attributed to their high-degree of variability. Additionally, we experimented with a series of well-known nonbacktracking simplifications that are particularly effective in solving FMs. The remaining variables/clauses after simplifications, called the core, are so few that they are easily solved even with backtracking, further strengthening our conclusions. We explain the connection between our findings and backdoors, an idea posited by theorists to explain the power of SAT solvers. This connection strengthens our hypothesis that SAT-based analysis of FMs is easy. In contrast to our findings, previous research characterizes the difficulty of analyzing randomly-generated FMs in terms of treewidth. Our experiments suggest that the difficulty of analyzing real-world FMs cannot be explained in terms of treewidth.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {91–100},
numpages = {10},
keywords = {SAT-based analysis, feature model},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2791060.2791075,
author = {Fang, Miao and Leyh, Georg and Doerr, Joerg and Elsner, Christoph and Zhao, Jingjing},
title = {Towards model-based derivation of systems in the industrial automation domain},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791075},
doi = {10.1145/2791060.2791075},
abstract = {Many systems in the industrial automation domain include information systems. They manage manufacturing processes and control numerous distributed hardware and software components. In current practice, the development and reuse of such systems is costly and time-consuming, due to the variability of systems' topology and processes. Up to now, product line approaches for systematic modeling and management of variability have not been well established for such complex domains.In this paper, we present a model-based approach to support the derivation of systems in the target domain. The proposed architecture of the derivation infrastructure enables feature-, topology- and process configuration to be integrated into the multi-staged derivation process. We have developed a prototype to prove feasibility and improvement of derivation efficiency. We report the evaluation results that we collected through semi-structured interviews from domain stakeholders. The results show high potential to improve derivation efficiency by adopting the approach in practice. Finally, we report the lessons learned that raise the opportunities and challenges for future research.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {283–292},
numpages = {10},
keywords = {derivation, model-based engineering, product line, variability modeling},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2362536.2362546,
author = {Myll\"{a}rniemi, Varvana and Raatikainen, Mikko and M\"{a}nnist\"{o}, Tomi},
title = {A systematically conducted literature review: quality attribute variability in software product lines},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362546},
doi = {10.1145/2362536.2362546},
abstract = {Typically, products in a software product line differ by their functionality, and quality attributes are not intentionally varied. Why, how, and which quality attributes to vary has remained an open issue. A systematically conducted literature review on quality attribute variability is presented, where primary studies are selected by reading all content of full studies in Software Product Line Conference. The results indicate that the success of feature modeling influences the proposed approaches, different approaches suit specific quality attributes differently, and empirical evidence on industrial quality variability is lacking.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {41–45},
numpages = {5},
keywords = {quality attribute, systematic literature review, variability},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2791060.2793677,
author = {D\"{u}dder, Boris and Rehof, Jakob and Heineman, George T.},
title = {Synthesizing type-safe compositions in feature oriented software designs using staged composition},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2793677},
doi = {10.1145/2791060.2793677},
abstract = {The composition of features that interact with each other is challenging. Algebraic formalisms have been proposed by various authors to describe feature compositions and their interactions. The intention of feature compositions is the composition of fragments of documents of any kind to a product that fulfills users' requirements expressed by a feature selection. These modules often include code modules of typed programming languages whereas the proposed algebraic formalism is agnostic to types. This situation can lead to product code which is not type correct. In addition, types can carry semantic information on a program or module. We present a type system and connect it to an algebraic formalism thereby allowing automatic synthesis of feature compositions yielding well-typed programs.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {398–401},
numpages = {4},
keywords = {automatic program synthesis, combinatory logic, feature composition, type theory},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2019136.2019187,
author = {Abbas, Nadeem},
title = {Towards autonomic software product lines},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019187},
doi = {10.1145/2019136.2019187},
abstract = {We envision an Autonomic Software Product Line (ASPL). The ASPL is a dynamic software product line that supports self adaptable products. We plan to use reflective architecture to model and develop ASPL. To evaluate the approach, we have implemented three autonomic product lines which show promising results. The ASPL approach is at initial stages, and require additional work. We plan to exploit online learning to realize more dynamic software product lines to cope with the problem of product line evolution. We propose on-line knowledge sharing among products in a product line to achieve continuous improvement of quality in product line products.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {44},
numpages = {8},
keywords = {knowledge, on-line learning, self-adaptation},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3109729.3109753,
author = {Tenev, Vasil and Duszynski, Slawomir and Becker, Martin},
title = {Variant Analysis: Set-Based Similarity Visualization for Cloned Software Systems},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109753},
doi = {10.1145/3109729.3109753},
abstract = {Software product lines are frequently created using an extractive approach, in which a group of existing software products is reengineered to extract their reusable core. To direct that effort, it is necessary to analyze the reuse potential and the code similarity across the products. We present Variant Analysis, a tool visualizing code similarity across a group of software systems. We represent the systems as intersecting sets of content elements, and place the elements similar between any n systems into the intersection of the respective n sets. Using the resulting set model and the system structure hierarchy, we provide similarity visualizations scaling for tens of compared software systems and millions lines of code. The current Variant Analysis tool analyzes similarity of text files such as source code. However, the underlying models and visualizations can also be used for other types of data, even beyond the software domain.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {22–27},
numpages = {6},
keywords = {Similarity, set model, set visualization, software cloning, tools},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2648511.2648540,
author = {Kodama, Ryuichiro and Shimabukuro, Jun and Takagi, Yoshimitsu and Koizumi, Shinobu and Tano, Shun'ichi},
title = {Experiences with commonality control procedures to develop clinical instrument system},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648540},
doi = {10.1145/2648511.2648540},
abstract = {This paper reports our experience with software development based on the Software Product Line (SPL) approach employed for Clinical Instrument Integration Management Software (CIIMS). CIIMS is the system software which systemizes heterogeneous clinical instruments. These instruments require their particular management so that various parts of CIIMS are forced to be changed. This makes it difficult to create development plans to connect new instruments to CIIMS. In this paper we summarize a new estimate method called the Architecture Domain Matrix (ADM) method which effectively solved this problem in our experience. In ADM each architectural element is further decomposed into clinical operation flow elements and core assets of software are extracted from these elements. This method estimates the CIIMS commonality with precision and finally enables to successfully connect new instruments. In addition this method provides a Work Breakdown Structure (WBS) and supports development team building. WBS is generated by collecting all the changes for each operational flow element. A development team suitable for change is organized by taking into consideration all the changes for each architecture element. We integrated three different instruments into CIIMS in 18 months after applying this method to a real project and achieved 2.5 times greater productivity with the embedded software than that with our previous non-SPL process.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {254–263},
numpages = {10},
keywords = {architectures, cost estimation, domain analysis, software product lines},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2934466.2934493,
author = {Beuche, Danilo and Schulze, Michael and Duvigneau, Maurice},
title = {When 150% is too much: supporting product centric viewpoints in an industrial product line},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934493},
doi = {10.1145/2934466.2934493},
abstract = {Use of product lines promises easier production of varying products from a common base using the concepts of variation points and binding of these. This paper describes a successful industrial application of product line concepts based on the superset approach (aka 150%), where the success provided strong improvements in many aspects (e.g. product quality, amount of code to be maintained, time to delivery of new variants) but also introduced new challenges in the production of certain required product assets such as documentation or source code. We focus on the latter in this paper. We'll discuss the challenges which arose in the industrial use case from using the 150% superset approach with standard engineering programming languages and workflows and how the challenges have been solved. We evaluate our approach in a real industrial product line setting and the results show the effectiveness as well as the efficiency of the realized solution.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {262–269},
numpages = {8},
keywords = {industry use case, product lines, transformation, variant management},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3106195.3106216,
author = {Li, Yi and Zhu, Chenguang and Rubin, Julia and Chechik, Marsha},
title = {FHistorian: Locating Features in Version Histories},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106216},
doi = {10.1145/3106195.3106216},
abstract = {Feature location techniques aim to locate software artifacts that implement a specific program functionality, a.k.a. a feature. In this paper, we build upon the previous work of semantic history slicing to locate features in software version histories. We leverage the information embedded in version histories for identifying changes implementing features and discovering relationships between features.The identified feature changes are fully functional and guaranteed to preserve the desired behaviors. The resulting feature relationship graph is precise and can be used to assist in understanding of the underlying connections between the features.We evaluate the technique on a number of real-world case studies and compare our results with developer-specified feature annotations.We conclude that, when available, historical information of software changes can lead to precise identification of features in existing software artifacts.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {49–58},
numpages = {10},
keywords = {Feature location, feature relationship, version history},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2647908.2655977,
author = {El Yamany, Ahmed Eid and Shaheen, Mohamed and Sayyad, Abdel Salam},
title = {OPTI-SELECT: an interactive tool for user-in-the-loop feature selection in software product lines},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655977},
doi = {10.1145/2647908.2655977},
abstract = {Opti-Select is an Interactive Multi-objective feature analysis and optimization tool for software product lines configuration and feature models optimization based on an innovative UIL (User-In-the-loop) idea. In this tool, the experience of system analysts and stakeholders are merged with optimization techniques and algorithms.Opti-Select interactive tool is an integrated set of techniques providing step by step feature model and attribute configuration, selecting and excluding features, solution set optimization, and user interaction utilities that can all together reach satisfactory set of solutions that fits stakeholder preferences.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {126–129},
numpages = {4},
keywords = {Pareto front visualization, exploration, feature modeling, feature models, features, modeling, multi-objective optimization, optimal feature selection, optimal variant, product line engineering, search-based software engineering, software product lines, user-in-the-loop (UIL)},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2791060.2791087,
author = {ter Beek, M. H. and Legay, A. and Lafuente, A. Lluch and Vandin, A.},
title = {Statistical analysis of probabilistic models of software product lines with quantitative constraints},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791087},
doi = {10.1145/2791060.2791087},
abstract = {We investigate the suitability of statistical model checking for the analysis of probabilistic models of software product lines with complex quantitative constraints and advanced feature installation options. Such models are specified in the feature-oriented language QFLan, a rich process algebra whose operational behaviour interacts with a store of constraints, neatly separating product configuration from product behaviour. The resulting probabilistic configurations and behaviour converge seamlessly in a semantics based on DTMCs, thus enabling quantitative analyses ranging from the likelihood of certain behaviour to the expected average cost of products. This is supported by a Maude implementation of QFLan, integrated with the SMT solver Z3 and the distributed statistical model checker MultiVeStA. Our approach is illustrated with a bikes product line case study.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {11–15},
numpages = {5},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2364412.2364473,
author = {Beuche, Danilo},
title = {Transforming legacy systems into software product lines},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364473},
doi = {10.1145/2364412.2364473},
abstract = {This tutorial discusses many aspects of the migration process in an organization when existing software systems are used as starting point for a software product line. It is intended to provide food for thought as well as practical approaches for the migration.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {281},
numpages = {1},
keywords = {migration, software product lines, tutorial},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@article{10.4018/ijkss.2014100103,
author = {Bashari, Mahdi and Noorian, Mahdi and Bagheri, Ebrahim},
title = {Product Line Stakeholder Preference Elicitation via Decision Processes},
year = {2014},
issue_date = {October 2014},
publisher = {IGI Global},
address = {USA},
volume = {5},
number = {4},
issn = {1947-8208},
url = {https://doi.org/10.4018/ijkss.2014100103},
doi = {10.4018/ijkss.2014100103},
abstract = {In the software product line configuration process, certain features are selected based on the stakeholders' needs and preferences regarding the available functional and quality properties. This book chapter presents how a product configuration can be modeled as a decision process and how an optimal strategy representing the stakeholders' desirable configuration can be found. In the decision process model of product configuration, the product is configured by making decisions at a number of decision points. The decisions at each of these decision points contribute to functional and quality attributes of the final product. In order to find an optimal strategy for the decision process, a utility-based approach can be adopted, through which, the strategy with the highest utility is selected as the optimal strategy. In order to define utility for each strategy, a multi-attribute utility function is defined over functional and quality properties of a configured product and a utility elicitation process is then introduced for finding this utility function. The utility elicitation process works based on asking gamble queries over functional and quality requirement from the stakeholder. Using this utility function, the optimal strategy and therefore optimal product configuration is determined.},
journal = {Int. J. Knowl. Syst. Sci.},
month = oct,
pages = {35–51},
numpages = {17},
keywords = {Configuration Process, Decision Process, Economic Value, Software Product Line, Utility Elicitation}
}

@inproceedings{10.1145/1858996.1859064,
author = {Boucher, Quentin and Classen, Andreas and Heymans, Patrick and Bourdoux, Arnaud and Demonceau, Laurent},
title = {Tag and prune: a pragmatic approach to software product line implementation},
year = {2010},
isbn = {9781450301169},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1858996.1859064},
doi = {10.1145/1858996.1859064},
abstract = {To realise variability at the code level, product line methods classically advocate usage of inheritance, components, frameworks, aspects or generative techniques. However, these might require unaffordable paradigm shifts for the developers if the software was not thought at the outset as a product line. Furthermore, these techniques can be conflicting with a company's coding practices or external regulations.These concerns were the motivation for the industry-university collaboration described in this paper where we develop a minimally intrusive coding technique based on tags. It is supported by a toolchain and is now in use in the partner company for the development of flight grade satellite communication software libraries.},
booktitle = {Proceedings of the 25th IEEE/ACM International Conference on Automated Software Engineering},
pages = {333–336},
numpages = {4},
keywords = {code tagging, feature diagram},
location = {Antwerp, Belgium},
series = {ASE '10}
}

@inproceedings{10.1145/2791060.2791074,
author = {Reuling, Dennis and B\"{u}rdek, Johannes and Rot\"{a}rmel, Serge and Lochau, Malte and Kelter, Udo},
title = {Fault-based product-line testing: effective sample generation based on feature-diagram mutation},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791074},
doi = {10.1145/2791060.2791074},
abstract = {Testing every member of a product line individually is often impracticable due to large number of possible product configurations. Thus, feature models are frequently used to generate samples, i.e., subsets of product configurations under test. Besides the extensively studied combinatorial interaction testing (CIT) approach for coverage-driven sample generation, only few approaches exist so far adopting mutation testing to emulate faults in feature models to be detected by a sample. In this paper, we present a mutation-based sampling framework for fault-based product-line testing. We define a comprehensive catalog of atomic mutation operators on the graphical representation of feature models. This way, we are able (1) to also define complex mutation operators emulating more subtle faults, and (2) to classify operators semantically, e.g., to avoid redundant and equivalent mutants. We further introduce similarity-based mutant selection and higher order mutation strategies to reduce testing efforts. Our implementation is based on the graph transformation engine Henshin and is evaluated concerning effectiveness/efficiency trade-offs.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {131–140},
numpages = {10},
keywords = {combinatorial interaction testing, mutation testing},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2364412.2364446,
author = {Leitner, Andrea and Wei\ss{}, Reinhold and Kreiner, Christian and Ebner, Wolfgang},
title = {Improving domain representation with multi-paradigm modeling},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364446},
doi = {10.1145/2364412.2364446},
abstract = {Domain modeling is a key task in Software Product Line (SPL) development. We identified two popular modeling paradigms: Feature-Oriented Domain Modeling (FODM) and Domain-Specific Modeling (DSM). The representation of the domain model is crucial in SPL engineering, since domain models have a long lifecycle and represent the externalized organizational domain knowledge. For complex and heterogeneous domains, such as embedded systems, different representation techniques can be useful to describe different aspects of the system.This paper describes a multi-paradigm modeling approach which enables the combined representation of Feature models and Domain-Specific Languages (DSL). The main idea is to reduce the complexity of the model and, thus, to improve its usability and maintainability. The technical realization of the multi-paradigm modeling approach uses 3 types of constraints to connect different modeling paradigms. The constraint checking mechanism reuses existing technology in order to not re-invent the wheel.A case study describes the applicability of the approach in a real-life automotive project for hybrid electric vehicle control software (HybConS) and shows the improvement of this approach compared to single-paradigm modeling.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {201–208},
numpages = {8},
keywords = {domain-specific modeling, feature-oriented domain modeling, multi-paradigm modeling, software product lines},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3233027.3233046,
author = {Beek, Maurice H. ter and Fantechi, Alessandro and Gnesi, Stefania},
title = {Product line models of large cyber-physical systems: the case of ERTMS/ETCS},
year = {2018},
isbn = {9781450364645},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3233027.3233046},
doi = {10.1145/3233027.3233046},
abstract = {A product line perspective may help to understand the possible variants in interactions between the subsystems of a large, cyber-physical system. This observation is exemplified in this paper by proposing a feature model of the family of ERTMS/ETCS train control systems and their foreseen extensions. This model not only shows the different components that have to be installed when deploying the system at the different levels established by the ERTMS/ETCS standards, but it also helps to identify and discuss specific issues, such as the borders between onboard and wayside equipment, different manufacturers of the subsystems, interoperability among systems developed at different levels, backward compatibility of trains equipped with higher level equipment running on lines equipped with lower level equipment, and evolution towards future trends of railway signalling. The feature model forms the basis for formal modelling of the behaviour of the critical components of the system and for evaluating the overall cost, effectiveness and sustainability, for example by adding cost and performance attributes to the feature model.},
booktitle = {Proceedings of the 22nd International Systems and Software Product Line Conference - Volume 1},
pages = {208–214},
numpages = {7},
keywords = {ERTMS/ETCS train control systems, cyber-physical systems, feature models, product lines, variability},
location = {Gothenburg, Sweden},
series = {SPLC '18}
}

@inproceedings{10.1145/2934466.2962733,
author = {Lillack, Max and Berger, Thorsten and Hebig, Regina},
title = {Experiences from reengineering and modularizing a legacy software generator with a projectional language workbench},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2962733},
doi = {10.1145/2934466.2962733},
abstract = {We present a case study of migrating a legacy language infrastructure and its codebase to a projectional language workbench. Our subject is the generator tool ADS used for generating COBOL code for critical software systems. We decompose the ADS language into smaller sub-languages, which we implement as individual DSLs in the projectional language workbench JetBrains Meta Programming System (MPS). Our focus is on ADS' preprocessor sub-language, used to realize static variability by conditionally including or parameterizing target code. The modularization of ADS supports future extensions and tailoring the language infrastructure to the needs of individual customers. We re-implement the generation process of target code as chained model-to-model and model-to-text transformations. For migrating existing ADS code, we implement an importer relying on a parser in order to create a model in MPS. We validate the approach using an ADS codebase for handling car registrations in the Netherlands. Our case study shows the feasibility and benefits (e.g., language extensibility and modern editors) of the migration, but also smaller caveats (e.g., small syntax adaptations, the necessity of import tools, and providing training to developers). Our experiences are useful for practitioners attempting a similar migration of legacy generators to a projectional language workbench.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {346–353},
numpages = {8},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2491627.2491633,
author = {Tsuchiya, Ryosuke and Kato, Tadahisa and Washizaki, Hironori and Kawakami, Masumi and Fukazawa, Yoshiaki and Yoshimura, Kentaro},
title = {Recovering traceability links between requirements and source code in the same series of software products},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491633},
doi = {10.1145/2491627.2491633},
abstract = {If traceability links between requirements and source code are not clarified when conducting maintenance and enhancements for the same series of software products, engineers cannot immediately find the correction location in the source code for requirement changes. However, manually recovering links in a large group of products requires significant costs and some links may be overlooked. Here, we propose a semi-automatic method to recover traceability links between requirements and source code in the same series of large software products. In order to support differences in representation between requirements and source code, we recover links by using the configuration management log as an intermediary. We refine the links by classifying requirements and code elements in terms of whether they are common or specific to the products. As a result of applying our method to real products that have 60KLOC, we have recovered valid traceability links within a reasonable amount of time. Automatic parts have taken 13 minutes 36 seconds, and non-automatic parts have taken about 3 hours, with a recall of 76.2% and a precision of 94.1%. Moreover, we recovered some links that were unknown to engineers. By recovering traceability links, software reusability will be improved, and software product line introduction will be facilitated.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {121–130},
numpages = {10},
keywords = {commonality and variability analysis, configuration management log, traceability recovery},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2791060.2793675,
author = {Steffen, Bernhard and Lamprecht, Anna-Lena and Margaria, Tiziana},
title = {User-level synthesis: treating product lines as systems of constraints},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2793675},
doi = {10.1145/2791060.2793675},
abstract = {In this paper, we sketch how treating product lines as systems of possibly heterogeneous constraints allows one to elegantly and consistently manage product lines in terms of a product line of product lines. In fact, as will also be illustrated along our example scenarios, this leads to a framework for a consistent division of labour in an "easy for the many difficult for the few" fashion which supports correctness by construction. Central for this approach are our powerful model-based synthesis and code generation technologies, which turn systems of constraints into executable models or target code.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {427–431},
numpages = {5},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/3109729.3109745,
author = {Markiegi, Urtzi},
title = {Test optimisation for Highly-Configurable Cyber-Physical Systems},
year = {2017},
isbn = {9781450351195},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3109729.3109745},
doi = {10.1145/3109729.3109745},
abstract = {Cyber-Physical Systems (CPS) have become one of the core-enabling technologies for multiple domains, such as manufacturing, healthcare, energy and transportation. Furthermore, these domains are demanding CPS to be highly-configurable in order to respond to multiple and changing market requirements. Testing these Highly-Configurable Cyber-Physical Systems (HCCPS) is challenging. First, when working with CPSs, considerable time is required in order to tackle physical processes during testing. And secondly, in highly-configurable systems, a large number of system variants need to be tested. Consequently, reducing HCCPS testing time is essential.In this context, a research work is presented to reduce the overall testing time of HCCPS, focusing on a merged strategy of product and test cases optimisation. In particular, two approaches are proposed in order to achieve the testing time reduction. The first approach aims to reduce the HCCPS testing time by an iterative allocation of products and test cases. The second approach aims to reduce the HCCPS testing time by a feedback driven dynamic and iterative allocation of products and test cases.A preliminary experiment has been undertaken to test the iterative allocation approach. In this experiment, products to be tested are selected and prioritised. Next, multiple testing iterations are perform until the time-budget is consumed. In each iteration a small number of test cases are allocated for each of the products to be tested. The experiment was evaluated with an academic HCCPS and preliminary results suggest that the proposed approach reduces the fault detection time when compared with traditional approaches.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume B},
pages = {139–144},
numpages = {6},
keywords = {Cyber-Physical Systems, Fault Detection, Highly-Configurable Systems, Product Line Testing, Search-Based Software Engineering, Software Engineering},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1145/2110147.2110150,
author = {N\"{o}bauer, Markus and Seyff, Norbert and Dhungana, Deepak and Stoiber, Reinhard},
title = {Managing variability of ERP ecosystems: research issues and solution ideas from Microsoft Dynamics AX},
year = {2012},
isbn = {9781450310581},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2110147.2110150},
doi = {10.1145/2110147.2110150},
abstract = {Systematic reuse of artifacts and a clear understanding of the variability within a product family are key success concepts within diverse industrial domains. Nevertheless, there are still many open issues regarding adapting and tailoring of software product line engineering approaches to specialized domains. The nature of ERP systems would suggest the application of product line techniques, but the limitations and constraints within this domain makes this a challenging task from the viewpoint of a partner company. In this paper we discuss ERP domain constraints and provide first conceptual solutions on how to adapt and extend software product line techniques for this particular context. Furthermore, we present a first tool prototype to support sales consultants at ERP partner companies.},
booktitle = {Proceedings of the 6th International Workshop on Variability Modeling of Software-Intensive Systems},
pages = {21–26},
numpages = {6},
keywords = {ERP ecosystems, Microsoft Dynamics AX, product line engineering, variability management},
location = {Leipzig, Germany},
series = {VaMoS '12}
}

@inproceedings{10.1145/2362536.2362549,
author = {Cordy, Maxime and Schobbens, Pierre-Yves and Heymans, Patrick and Legay, Axel},
title = {Behavioural modelling and verification of real-time software product lines},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362549},
doi = {10.1145/2362536.2362549},
abstract = {In Software Product Line (SPL) engineering, software products are build in families rather than individually. Many critical software are nowadays build as SPLs and most of them obey hard real-time requirements. Formal methods for verifying SPLs are thus crucial and actively studied. The verification problem for SPL is, however, more complicated than for individual systems; the large number of different software products multiplies the complexity of SPL model-checking. Recently, promising model-checking approaches have been developed specifically for SPLs. They leverage the commonality between the products to reduce the verification effort. However, none of them considers real time.In this paper, we combine existing SPL verification methods with established model-checking procedures for real-time systems. We introduce Featured Timed Automata (FTA), a formalism that extends the classical Timed Automata with constructs for modelling variability. We show that FTA model-checking can be achieved through a smart combination of real-time and SPL model checking.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {66–75},
numpages = {10},
keywords = {features, model checking, real-time, software product lines},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2791060.2791091,
author = {Chavarriaga, Jaime and Rangel, Carlos and Noguera, Carlos and Casallas, Rubby and Jonckers, Viviane},
title = {Using multiple feature models to specify configuration options for electrical transformers: an experience report},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791091},
doi = {10.1145/2791060.2791091},
abstract = {Electrical Transformers are complex devices that exhibit an enormous variability depending on the intended power transformation, environmental conditions, standards imposed and customer particularities. Incomplete information or inconsistencies in the specifications can lead to re-processes and higher bid times. This paper presents our experience on using multiple feature models to specify custom Electrical Transformer as a Configuration Process. This process facilitates the elicitation of knowledge from multidisciplinary experts using several feature models, one per domain and per standard and defining relationships among them. This separation of domains eases the analysis and validation of the models. To support the process, we have developed some tools to separate, merge and analyze these models. The final feature models are tested configuring and comparing products from existing company catalogs. We consider that the same strategy can be used in other contexts where experts on multiple disciplines participate.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {216–224},
numpages = {9},
keywords = {electrical transformers, product configuration, variability models},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2791060.2791085,
author = {Font, Jaime and Arcega, Lorena and Haugen, \O{}ystein and Cetina, Carlos},
title = {Building software product lines from conceptualized model patterns},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791085},
doi = {10.1145/2791060.2791085},
abstract = {Software Product Lines (SPLs) can be established from a set of similar models. Establishing the Product Line by mechanically finding model differences may not be the best approach. The identified model fragments may not be seen as recognizable units by the application engineers. We propose to identify model patterns by human-in-the-loop and conceptualize them as reusable model fragments. The approach provides the means to identify and extract those model patterns and further apply them to existing product models. Model fragments obtained by applying our approach seem to perform better than mechanically found ones. It turns out that the repetition of a fragment does not guarantee its relevance as reusable asset for the SPL engineers and vice versa, a fragment that has not been repeated yet, may be relevant as a reusable asset. We have validated these ideas with our industrial partner BSH, an induction hobs manufacturer that generates the firmware of their products from a model-driven SPL.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {46–55},
numpages = {10},
keywords = {human-in-the-loop, model-based software product lines, reverse engineering, variability identification},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2499777.2500714,
author = {Huang, Changyun and Kamei, Yasutaka and Yamashita, Kazuhiro and Ubayashi, Naoyasu},
title = {Using alloy to support feature-based DSL construction for mining software repositories},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500714},
doi = {10.1145/2499777.2500714},
abstract = {The Mining Software Repositories (MSR) field reveals knowledge for software development by analyzing data stored in repositories such as source control and bug trace systems. In order to reveal the knowledge, MSR researchers need to perform complicated procedures iteratively. To help the complex work of MSR practitioners, we study the construction of domain specific languages (DSLs) for MSR. We have conducted feature-oriented domain analysis (FODA) on MSR and developed a DSL based on the feature model. In this paper, we expand our previous work and propose to construct not a single DSL but a DSL family. A DSL family consists of a series of DSLs with commonality in their domain but suitable to specific applications of MSR. To readily construct these DSLs, we use Alloy to encode the feature model. Our encoding includes not only the DSL features and their relations but also some composition rules that can be used to generate the syntax of DSLs. Based on this, we can automatically derive the language elements to construct DSLs suitable to specific purposes of MSR.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {86–89},
numpages = {4},
keywords = {DSL, FODA, SPL, mining software repositories},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/2648511.2648562,
author = {McGregor, John D.},
title = {The many flavors of ecosystems},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648562},
doi = {10.1145/2648511.2648562},
abstract = {This panel will address issues surrounding software ecosystems. We have chosen individuals who will present a differing set of views on the topic.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {366},
numpages = {1},
keywords = {evolution, software ecosystems},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2934466.2934488,
author = {Plakidas, Konstantinos and Stevanetic, Srdjan and Schall, Daniel and Ionescu, Tudor B. and Zdun, Uwe},
title = {How do software ecosystems evolve? a quantitative assessment of the r ecosystem.},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934488},
doi = {10.1145/2934466.2934488},
abstract = {In this work we advance the understanding of software eco-systems research by examining the structure and evolution of the R statistical computing open-source ecosystem. Our research attempts to shed light on the following intriguing question: what makes software ecosystems successful? The approach we follow is to perform a quantitative analysis of the R ecosystem. R is a well-established and popular ecosystem, whose community and marketplace are steadily growing. We assess and quantify the ecosystem throughout its history, and derive metrics on its core software components, the marketplace as well as its community. We use our insights to make observations that are applicable to ecosystems in general, validate existing theories from the literature, and propose a predictive model for the evolution of software packages. Our results show that the success of the ecosystem relies on a strong commitment by a small core of users who support a large and growing community.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {89–98},
numpages = {10},
keywords = {R, empirical study, predictive model, software ecosystems},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/2791060.2791092,
author = {K\"{u}hn, Thomas and Cazzola, Walter and Olivares, Diego Mathias},
title = {Choosy and picky: configuration of language product lines},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791092},
doi = {10.1145/2791060.2791092},
abstract = {Although most programming languages naturally share several language features, they are typically implemented as a monolithic product. Language features cannot be plugged and unplugged from a language and reused in another language. Some modular approaches to language construction do exist but composing language features requires a deep understanding of its implementation hampering their use. The choose and pick approach from software product lines provides an easy way to compose a language out of a set of language features. However, current approaches to language product lines are not sufficient enough to cope with the complexity and evolution of real world programming languages. In this work, we propose a general light-weight bottom-up approach to automatically extract a feature model from a set of tagged language components. We applied this approach to the Neverlang language development framework and developed the AiDE tool to guide language developers towards a valid language composition. The approach has been evaluated on a decomposed version of Javascript to highlight the benefits of such a language product line.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {71–80},
numpages = {10},
keywords = {language composition, language product lines},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2362536.2362557,
author = {Elsner, Christoph},
title = {Light-weight tool support for staged product derivation},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362557},
doi = {10.1145/2362536.2362557},
abstract = {Tool support that checks for configuration errors and generates product parts from configurations can significantly improve on product derivation in product line engineering. Up to now, however, derivation tools commonly disregard the staged derivation process. They do not restrict configuration consistency checks to process entities such as configuration stages, stakeholders, or build tasks. As a result, constraints that are only valid for certain process entities must either be checked permanently, leading to false positive errors, or one must refrain from defining them at all.This paper contributes a light-weight approach to provide tailored tool support for staged product derivation. Compared to previous approaches, it is not tied to a single configuration mechanism (e.g., feature modeling), and also accounts for the stakeholders involved and the build tasks that generate product parts. First, the product line engineer describes the derivation process in a concise model. Then, based on constraint checks on the configuration (e.g., a feature model configuration) that are linked to the modeled entities, comprehensive tool support can be provided: Configuration actions can be guided and restricted depending on the configuring stakeholder in a fine-grained manner, and constraints attached to a build task will only be checked if it actually shall be executed. Finally, in combination with previous work, the paper provides evidence that the approach is applicable to legacy product lines in a light-weight manner and that it technically scales to thousands of constraint checks.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {146–155},
numpages = {10},
keywords = {product line, staged product derivation, tool support},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2791060.2791072,
author = {Patel, Sachin and Shah, Vipul},
title = {Automated testing of software-as-a-service configurations using a variability language},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791072},
doi = {10.1145/2791060.2791072},
abstract = {The benefits offered by cloud technologies have compelled enterprises to adopt the Software-as-a-Service (SaaS) model for their enterprise software needs. A SaaS has to be configured or customized to suit the specific requirements of every enterprise that subscribes to it. IT service providers have to deal with the problem of testing many such configurations created for different enterprises. The software gets upgraded periodically and the configurations need to be tested on an ongoing basis to ensure business continuity. In order to run the testing organization efficiently, it is imperative that the test cycle is automated. Developing automated test scripts for a large number of configurations is a non-trivial task because differences across them may range from a few user interface changes to business process level changes. We propose an approach that combines the benefits of model driven engineering and variability modeling to address this issue. The approach comprises of the Enterprise Software Test Modeling Language to model the test cases. We use the Common Variability Language to model variability in the test cases and apply model transformations on a base model to generate a test model for each configuration. These models are used to generate automated test scripts for all the configurations. We describe the test modelling language and an experiment which shows that the approach can be used to automatically generate variations in automated test scripts.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {253–262},
numpages = {10},
keywords = {enterprise software testing, model based testing, software-as-a-service, test automation, variability specification},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2648511.2648524,
author = {Quinton, Cl\'{e}ment and Pleuss, Andreas and Berre, Daniel Le and Duchien, Laurence and Botterweck, Goetz},
title = {Consistency checking for the evolution of cardinality-based feature models},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648524},
doi = {10.1145/2648511.2648524},
abstract = {Feature-models (fms) are a widely used approach to specify the commonalities and variability in variable systems and software product lines. Various works have addressed edits to fms for fm evolution and tool support to ensure consistency of fms. An important extension to fms are feature cardinalities and related constraints, as extensively used e.g., when modeling variability of cloud computing environments. Since cardinality-based fms pose additional complexity, additional support for evolution and consistency checking with respect to feature cardinalities would be desirable, but has not been addressed yet. In this paper, we discuss common cardinality-based fm edits and resulting inconsistencies based on experiences with fms in cloud domain. We introduce tool-support for automated inconsistency detection and explanation based on an off-the-shelf solver. We demonstrate the feasibility of the approach by an empirical evaluation showing the performance of the tool.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {122–131},
numpages = {10},
keywords = {cardinality, consistency, edit, feature model},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2364412.2364414,
author = {Derakhshanmanesh, Mahdi and Fox, Joachim and Ebert, J\"{u}rgen},
title = {Adopting feature-centric reuse of requirements assets: an industrial experience report},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364414},
doi = {10.1145/2364412.2364414},
abstract = {In this paper, we share practical experiences from an ongoing effort towards adopting a feature-centric method that enhances reuse of requirements at TRW Automotive's slip control system department (based in Koblenz, Germany). After introducing identified challenges in detail, key solution factors and a technical reuse concept for managing and deriving product-specific requirements are presented. Then, we demonstrate one way of implementing this solution approach based on industry-standard tools. In addition, identified pitfalls and lessons learned are discussed.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {2–9},
numpages = {8},
keywords = {features, requirements, reuse, software product lines},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2791060.2791097,
author = {Degueule, Thomas and Filho, Joao Bosco Ferreira and Barais, Olivier and Acher, Mathieu and Le Noir, J\'{e}r\^{o}me and Madel\'{e}nat, S\'{e}bastien and Gailliard, Gr\'{e}gory and Burlot, Godefroy and Constant, Olivier},
title = {Tooling support for variability and architectural patterns in systems engineering},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791097},
doi = {10.1145/2791060.2791097},
abstract = {In systems engineering, the deployment of software components is error-prone since numerous safety and security rules have to be preserved. Furthermore, many deployments on different heterogeneous platforms are possible. In this paper we present a technological solution to assist industrial practitioners in producing a safe and secure solution out of numerous architectural variants. First, we introduce a pattern technology that provides correct-by-construction deployment models through the reuse of modeling artifacts organized in a catalog. Second, we develop a variability solution, connected to the pattern technology and based on an extension of the common variability language, for supporting the synthesis of model-based architectural variants. This paper describes a live demonstration of an industrial effort seeking to bridge the gap between variability modeling and model-based systems engineering practices. We illustrate the tooling support with an industrial case study (a secure radio platform).},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {361–364},
numpages = {4},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2934466.2956655,
author = {Th\"{u}m, Thomas and Leich, Thomas and Krieter, Sebastian},
title = {Clean your variable code with featureIDE},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2956655},
doi = {10.1145/2934466.2956655},
abstract = {FeatureIDE is an open-source framework to model, develop, and analyze feature-oriented software product lines. It is mainly developed in a cooperation between University of Magdeburg and Metop GmbH. Nevertheless, many other institutions contributed to it in the past decade. Goal of this tutorial is to illustrate how FeatureIDE can be used to clean variable code, whereas we will focus on dependencies in feature models and on variability implemented with preprocessors. The hands-on tutorial will be highly interactive and is devoted to practitioners facing problems with variability, lecturers teaching product lines, and researchers who want to safe resources in building product line tools.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {308},
numpages = {1},
keywords = {antenna, configuration, eclipse, feature modeling, feature-oriented software development, integrated development environment, preprocessors, software product lines},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1145/3297280.3297510,
author = {Heisig, Philipp and Stegh\"{o}fer, Jan-Philipp and Brink, Christopher and Sachweh, Sabine},
title = {A generic traceability metamodel for enabling unified end-to-end traceability in software product lines},
year = {2019},
isbn = {9781450359337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297280.3297510},
doi = {10.1145/3297280.3297510},
abstract = {Mature development methodologies like software product line engineering or model-driven engineering are more and more adopted in software development. Accordingly, the resulting development processes combine artifacts from different disciplines and on different abstraction levels. It is crucial that the relationship between these artifacts is explicitly maintained to be able to track the development process and the reasons for design decisions. This problem becomes exacerbated if variability is considered since it is a cross-cutting concern that impacts all disciplines and artifacts. Traceability links support the linking of artifacts across model boundaries in an end-to-end manner. However, existing traceability solutions are either limited to specific development processes, tools, and artifact types, lack in uniformity, or do not consider variability. Thus, this paper introduces a MOF-based generic traceability metamodel for establishing uniform traceability-enabled workflows in a variability-aware and model-based environment. Necessary steps for instantiating the metamodel to specific artifact types of certain development processes are described. We evaluate the proposed solution with an exemplar of a car headlight and demonstrate the benefits of a consistent traceability concept.},
booktitle = {Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing},
pages = {2344–2353},
numpages = {10},
keywords = {component model, feature model, model-driven engineering, requirement, software product line, traceability, workflow},
location = {Limassol, Cyprus},
series = {SAC '19}
}

@inproceedings{10.1145/2648511.2648533,
author = {Simidchieva, Borislava I. and Osterweil, Leon J.},
title = {Generation, composition, and verification of families of human-intensive systems},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648533},
doi = {10.1145/2648511.2648533},
abstract = {Software products are rarely developed without providing different sets of features to better meet varying user needs, whether through tiered products as part of a product line or different subscription levels for software as a service (SaaS). Software product line approaches for generating and maintaining a family of different variants of software products address such needs for variation quite well. Real-world human-intensive systems (HISs) display similar needs for families of variants. A key contribution of this paper is to show how many of these needs can be rigorously and systematically addressed by adapting established techniques from system and software product line engineering (SPLE).In this paper, we present an approach for creating such families by explicitly modeling variation in HISs. We focus on two kinds of variation we have previously described in other work---functional detail variation and service variation. We describe a prototype system that is able to meet the need for these kinds of variation within an existing modeling framework and present a case study of the application of our prototype system to generate a family in an HIS from the domain of elections. Our approach also demonstrates how to perform model-checking of this family to discover whether any variants in the family may violate specified system requirements.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {207–216},
numpages = {10},
keywords = {process families, software product lines, system variation},
location = {Florence, Italy},
series = {SPLC '14}
}

@article{10.1016/j.jss.2019.06.002,
author = {Carbonnel, Jessie and Huchard, Marianne and Nebut, Cl\'{e}mentine},
title = {Towards complex product line variability modelling: Mining relationships from non-boolean descriptions},
year = {2019},
issue_date = {Oct 2019},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {156},
number = {C},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2019.06.002},
doi = {10.1016/j.jss.2019.06.002},
journal = {J. Syst. Softw.},
month = oct,
pages = {341–360},
numpages = {20},
keywords = {Complex software product line, Reverse engineering, Variability modelling, Extended feature models, Formal concept analysis, Pattern structures}
}

@inproceedings{10.1145/2648511.2648516,
author = {Reinhartz-Berger, Iris and Figl, Kathrin},
title = {Comprehensibility of orthogonal variability modeling languages: the cases of CVL and OVM},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648516},
doi = {10.1145/2648511.2648516},
abstract = {As the complexity and variety of systems and software products have increased, the ability to manage their variability effectively and efficiently became crucial. To this end, variability can be specified either as an integral part of the development artifacts or in a separate orthogonal variability model. Lately, orthogonal variability models attract a lot of attention due to the fact that they do not require changing the complexity of the development artifacts and can be used in conjunction with different development artifacts. Despite this attention and to the best of our knowledge, no empirical study examined the comprehensibility of orthogonal variability models.In this work, we conducted an exploratory experiment to examine potential comprehension problems in two common orthogonal variability modeling languages, namely, Common Variability Language (CVL) and Orthogonal Variability Model (OVM). We examined the comprehensibility of the variability models and their relations to the development artifacts for novice users. To measure comprehensibility we used comprehension score (i.e., percentage of correct solution), time spent to complete tasks, and participants' perception of difficulty of different model constructs. The results showed high comprehensibility of the variability models, but low comprehensibility of the relations between the variability models and the development artifacts. Although the comprehensibility of CVL and OVM was similar in terms of comprehension score and time spent to complete tasks, novice users perceived OVM as more difficult to comprehend.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {42–51},
numpages = {10},
keywords = {CVL, OVM, empirical study, model comprehension, variability analysis},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2019136.2019140,
author = {Pichler, Christian and Huemer, Christian},
title = {Feature modeling for business document models},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019140},
doi = {10.1145/2019136.2019140},
abstract = {The United Nations Centre for Trace Facilitation and eBusiness (UN/CEFACT) provides a conceptual approach named Core Components for defining business document types based on generic, reusable building blocks. For facilitating interoperability in Electronic Data Interchange, these reusable building blocks are defined in an all-embracing manner. Accordingly, business partners customize the standard business document types for fitting their needs and requirements, resulting in different business document type variants. However, the approach is missing sufficient mechanisms for managing business document model variants. First, customizing standardized business document types is purely based on a textual specification. Second, the variability present within the Core Component approach lacks an explicit representation. In this paper, we aim at making variability explicit as well as adding a formal aspect to the business document type customization process by employing variability concepts from Product Line Engineering. Furthermore, based on having explicit variability models, business partners are provided with an approach for customizing business document types through configuring variability models.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {3},
numpages = {8},
keywords = {business document models, feature modeling, service-oriented architecture, variability modeling},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3077286.3077325,
author = {Shatnawi, Hazim and Cunningham, H. Conrad},
title = {Mapping SPL Feature Models to a Relational Database},
year = {2017},
isbn = {9781450350242},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3077286.3077325},
doi = {10.1145/3077286.3077325},
abstract = {Building a software product line (SPL) is a systematic strategy for reusing software within a family of related systems from some application domain. To define an SPL, domain analysts must identify the common and variable aspects of systems in the family and capture this information so that it can be used effectively to construct specific products. Often analysts record this information using a feature model expressed visually as a feature diagram. The overall goal of this project is to enable wider use of SPLs by identifying relevant concepts, defining systematic methods, and developing practical tools that leverage familiar web programming technologies. This paper presents a novel approach to specification of feature models: capture the details using automatically generated user interfaces, encode the models in a relational database, and then validate the models and construct specific products using SQL.},
booktitle = {Proceedings of the 2017 ACM Southeast Conference},
pages = {42–49},
numpages = {8},
keywords = {Software product line, domain analysis, domain design, feature model, feature selection, relational database},
location = {Kennesaw, GA, USA},
series = {ACMSE '17}
}

@inproceedings{10.1145/2491627.2491630,
author = {Linsbauer, Lukas and Lopez-Herrejon, E. Roberto and Egyed, Alexander},
title = {Recovering traceability between features and code in product variants},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491630},
doi = {10.1145/2491627.2491630},
abstract = {Many companies offer a palette of similar software products though they do not necessarily have a Software Product Line (SPL). Rather, they start building and selling individual products which they then adapt, customize and extend for different customers. As the number of product variants increases, these companies then face the severe problem of having to maintain them all. Software Product Lines can be helpful here - not so much as a platform for creating new products but as a means of maintaining the existing ones with their shared features. Here, an important first step is to determine where features are implemented in the source code and in what product variants. To this end, this paper presents a novel technique for deriving the traceability between features and code in product variants by matching code overlaps and feature overlaps. This is a difficult problem because a feature's implementation not only covers its basic functionality (which does not change across product variants) but may include code that deals with feature interaction issues and thus changes depending on the combination of features present in a product variant. We empirically evaluated the approach on three non-trivial case studies of different sizes and domains and found that our approach correctly identifies feature to code traces except for code that traces to multiple disjunctive features, a rare case involving less than 1% of the code.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {131–140},
numpages = {10},
keywords = {features, product variants, traceability},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@article{10.1007/s10270-011-0220-1,
author = {Hubaux, Arnaud and Heymans, Patrick and Schobbens, Pierre-Yves and Deridder, Dirk and Abbasi, Ebrahim Khalil},
title = {Supporting multiple perspectives in feature-based configuration},
year = {2013},
issue_date = {July      2013},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {12},
number = {3},
issn = {1619-1366},
url = {https://doi.org/10.1007/s10270-011-0220-1},
doi = {10.1007/s10270-011-0220-1},
abstract = {Feature diagrams have become commonplace in software product line engineering as a means to document variability early in the life cycle. Over the years, their application has also been extended to assist stakeholders in the configuration of software products. However, existing feature-based configuration techniques offer little support for tailoring configuration views to the profiles of the various stakeholders. In this paper, we propose a lightweight, yet formal and flexible, mechanism to leverage multidimensional separation of concerns in feature-based configuration. We propose a technique to specify concerns in feature diagrams and to generate automatically concern-specific configuration views. Three alternative visualisations are proposed. Our contributions are motivated and illustrated through excerpts from a real web-based meeting management application which was also used for a preliminary evaluation. We also report on the progress made in the development of a tool supporting multi-view feature-based configuration.},
journal = {Softw. Syst. Model.},
month = jul,
pages = {641–663},
numpages = {23},
keywords = {Feature diagram, Feature-based configuration, Multi-view, Separation of concerns, Software product line engineering}
}

@inproceedings{10.1007/978-3-030-64694-3_17,
author = {Benmerzoug, Amine and Yessad, Lamia and Ziadi, Tewfik},
title = {Analyzing the Impact of Refactoring Variants on Feature Location},
year = {2020},
isbn = {978-3-030-64693-6},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-030-64694-3_17},
doi = {10.1007/978-3-030-64694-3_17},
abstract = {Due to the increasing importance of feature location process, several studies evaluate the performance of different techniques based on IR strategies and a set of software variants as input artifacts. The proposed techniques attempt to improve the results obtained but it is often a difficult task. None of the existing feature location techniques considers the changing nature of the input artifacts, which may undergo series of refactoring changes. In this paper, we investigate the impact of refactoring variants on the feature location techniques. We first evaluate the performance of two techniques through the ArgoUML SPL benchmark when the variants are refactored. We then discuss the degraded results and the possibility of restoring them. Finally, we outline a process of variant alignment that aims to preserve the performance of the feature location.},
booktitle = {Reuse in Emerging Software Engineering Practices: 19th International Conference on Software and Systems Reuse, ICSR 2020, Hammamet, Tunisia, December 2–4, 2020, Proceedings},
pages = {279–291},
numpages = {13},
keywords = {Software Product Line, Feature location, Refactoring},
location = {Hammamet, Tunisia}
}

@inproceedings{10.1145/2648511.2648512,
author = {Baresi, Luciano},
title = {Self-adaptive systems, services, and product lines},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648512},
doi = {10.1145/2648511.2648512},
abstract = {Self-adaptive systems, services, and product lines can be seen as different facets of the same problem. Self-adaptation provides the requirements, product lines a conceptual means to frame them, and services a possible technology to implement the resulting systems. This short paper starts presenting an overview of the many solutions proposed for adding self-adaptive capabilities to software systems. It also introduces service-based solutions and software product lines to discuss what self-adaptive systems can borrow from them.The paper proposes then the solutions we have developed so far to contribute to the aforementioned scenario. It touches FLAGS, for eliciting the requirements of these systems, DYNAMO, an example of flexible and dynamic service compositions, and DyBPEL, a means to enact dynamic service-centric product lines. Some final remarks conclude the paper.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {2–4},
numpages = {3},
keywords = {self-adaptive systems, service compositions, software product lines},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2791060.2791117,
author = {Ferrari, Alessio and Spagnolo, Giorgio O. and Gnesi, Stefania and Dell'Orletta, Felice},
title = {CMT and FDE: tools to bridge the gap between natural language documents and feature diagrams},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791117},
doi = {10.1145/2791060.2791117},
abstract = {A business subject who wishes to enter an established technological market is required to accurately analyse the features of the products of the different competitors. Such features are normally accessible through natural language (NL) brochures, or NL Web pages, which describe the products to potential customers. Building a feature model that hierarchically summarises the different features available in competing products can bring relevant benefits in market analysis. A company can easily visualise existing features, and reason about aspects that are not covered by the available solutions. However, designing a feature model starting from publicly available documents of existing products is a time consuming and error-prone task. In this paper, we present two tools, namely Commonality Mining Tool (CMT) and Feature Diagram Editor (FDE), which can jointly support the feature model definition process. CMT allows mining common and variant features from NL descriptions of existing products, by leveraging a natural language processing (NLP) approach based on contrastive analysis, which allows identifying domain-relevant terms from NL documents. FDE takes the commonalities and variabilities extracted by CMT, and renders them in a visual form. Moreover, FDE allows the graphical design and refinement of the final feature model, by means of an intuitive GUI.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {402–410},
numpages = {9},
keywords = {software product lines, tools, variability mining},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1109/SPLC.2011.29,
author = {Wende, Christian and Assmann, Uwe and Zivkovic, Srdjan and Kuhn, Harald},
title = {Feature-Based Customisation of Tool Environments for Model-Driven Software Development},
year = {2011},
isbn = {9780769544878},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/SPLC.2011.29},
doi = {10.1109/SPLC.2011.29},
abstract = {Model-driven software development (MDSD) bridges the gap between domain-specific abstractions and general purpose implementation languages and promises enhanced productivity for software engineering. The availability and appropriateness of tool environments supporting the developer is a crucial factor for such productivity promises. The widespread use of MDSD on various domains means a special challenge for the development of MDSD environments. Tool users expect advanced tools customised for the very special domain they are working in. However, tool development and customisation is a complex and expensive task. To address these challenges we propose to apply the principles of software product line engineering (SPLE) for feature-based customisation of MDSD tool environments. This paper is an experience report for the development of a product-line of MDSD tool environments that employ ontology technology to advance MDSD. Finally, we discuss the lessons learned as well as the benefits and challenges observed for feature-based tool customisation.},
booktitle = {Proceedings of the 2011 15th International Software Product Line Conference},
pages = {45–54},
numpages = {10},
keywords = {Component-based Software Engineering, Experience Report, Feature Modelling, Model-Driven Software Development, Ontology, Software Product Line Engineering, Tool Customisation, Tool Environments},
series = {SPLC '11}
}

@inproceedings{10.1145/2791060.2791077,
author = {Rumpe, Bernhard and Schulze, Christoph and von Wenckstern, Michael and Ringert, Jan Oliver and Manhart, Peter},
title = {Behavioral compatibility of simulink models for product line maintenance and evolution},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791077},
doi = {10.1145/2791060.2791077},
abstract = {Embedded software systems, e.g. automotive, robotic or automation systems are highly configurable and consist of many software components being available in different variants and versions. To identify the degree of reusability between these different occurrences of a component, it is necessary to determine the functional backward and forward compatibility between them. Based on this information it is possible to identify in which system context a component can be replaced safely by another version, e.g. exchanging an older component, or variant, e.g. introducing new features, to achieve the same functionality.This paper presents a model checking approach to determine behavioral compatibility of Simulink models, obtained from different component variants or during evolution. A prototype for automated compatibility checking demonstrates its feasibility. In addition implemented optimizations make the analysis more efficient, when the compared variants or versions are structurally similar.A case study on a driver assistance system provided by Daimler AG shows the effectiveness of the approach to automatically compare Simulink components.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {141–150},
numpages = {10},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2648511.2648517,
author = {Angerer, Florian and Pr\"{a}hofer, Herbert and Lettner, Daniela and Grimmer, Andreas and Gr\"{u}nbacher, Paul},
title = {Identifying inactive code in product lines with configuration-aware system dependence graphs},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648517},
doi = {10.1145/2648511.2648517},
abstract = {Application engineers frequently create customer-specific products in two stages: the required software components are first selected to create an initial product which is then evolved by refining the selected features and adapting the code to meet the customers' requirements. For instance, developers frequently set configuration options in the code to adjust the product. However, given that such changes are often necessary in the entire code base it is hard to know which part of the code is still relevant for the chosen configuration options. This means that engineers need to understand and maintain a lot of code that is potentially inactive in a particular product variant. Existing approaches provide only partial solutions: for instance, feature-to-code mappings do not adequately consider complex code dependencies of the implemented features. Static analysis techniques provide better results but usually do not consider variability aspects. We present an approach to automatically identify inactive code in product variants using a configuration-aware code analysis technique. We demonstrate the flexibility of our approach by customizing it to a product line of an industry partner in the domain of industrial automation. We further evaluate the approach to demonstrate its effectiveness, accuracy, and performance.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {52–61},
numpages = {10},
keywords = {application engineering, clone-and-own product lines, configuration, maintenance, static analysis},
location = {Florence, Italy},
series = {SPLC '14}
}

@article{10.1016/j.infsof.2010.08.007,
author = {Tizzei, Leonardo P. and Dias, Marcelo and Rubira, Cec\'{\i}lia M. F. and Garcia, Alessandro and Lee, Jaejoon},
title = {Components meet aspects: Assessing design stability of a software product line},
year = {2011},
issue_date = {February, 2011},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {53},
number = {2},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2010.08.007},
doi = {10.1016/j.infsof.2010.08.007},
abstract = {Context: It is important for Product Line Architectures (PLA) to remain stable accommodating evolutionary changes of stakeholder's requirements. Otherwise, architectural modifications may have to be propagated to products of a product line, thereby increasing maintenance costs. A key challenge is that several features are likely to exert a crosscutting impact on the PLA decomposition, thereby making it more difficult to preserve its stability in the presence of changes. Some researchers claim that the use of aspects can ameliorate instabilities caused by changes in crosscutting features. Hence, it is important to understand which aspect-oriented (AO) and non-aspect-oriented techniques better cope with PLA stability through evolution. Objective: This paper evaluates the positive and negative change impact of component and aspect based design on PLAs. The objective of the evaluation is to assess how aspects and components promote PLA stability in the presence of various types of evolutionary change. To support a broader analysis, we also evaluate the PLA stability of a hybrid approach (i.e. combined use of aspects and components) against the isolated use of component-based, OO, and AO approaches. Method: An quantitative and qualitative analysis of PLA stability which involved four different implementations of a PLA: (i) an OO implementation, (ii) an AO implementation, (iii) a component-based implementation, and (iv) a hybrid implementation where both components and aspects are employed. Each implementation has eight releases and they are functionally equivalent. We used conventional metrics suites for change impact and modularity to measure the architecture stability evaluation of the 4 implementations. Results: The combination of aspects and components promotes superior PLA resilience than the other PLAs in most of the circumstances. Conclusion: It is concluded that the combination of aspects and components supports the design of high cohesive and loosely coupled PLAs. It also contributes to improve modularity by untangling feature implementation.},
journal = {Inf. Softw. Technol.},
month = feb,
pages = {121–136},
numpages = {16},
keywords = {Aspect-Oriented Software Development, Component-based Development, Design stability, Product Line Architecture}
}

@inproceedings{10.5555/1753235.1753255,
author = {Sun, Hongyu and Lutz, Robyn R. and Basu, Samik},
title = {Product-line-based requirements customization for web service compositions},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {Customizing web services according to users' individual functional and non-functional requirements has become increasingly difficult as the number of users increases. This paper introduces a new way to customize and verify composite web services by incorporating a software product-line engineering approach into web-service composition. The approach uses a partitioning similar to that between domain engineering and application engineering in the product-line context. It specifies the options that the user can select and constructs the resulting web-service compositions. By first creating a web-service composition search space that satisfies the common requirements and then querying the search space as the user selects values for the parameters of variation, we provide a more efficient way to customize web services. A decision model, illustrated with examples from an emergency-response application, is created to interact with the customers and ensure the consistency of their specifications. The capability to reuse the composition search space may also help improve the quality and reliability of the composite services and reduce the cost of re-verifying the same compositions.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {141–150},
numpages = {10},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.1145/2791060.2791078,
author = {Vale, Gustavo and Albuquerque, Danyllo and Figueiredo, Eduardo and Garcia, Alessandro},
title = {Defining metric thresholds for software product lines: a comparative study},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791078},
doi = {10.1145/2791060.2791078},
abstract = {A software product line (SPL) is a set of software systems that share a common and variable set of features. Software metrics provide basic means to quantify several modularity aspects of SPLs. However, the effectiveness of the SPL measurement process is directly dependent on the definition of reliable thresholds. If thresholds are not properly defined, it is difficult to actually know whether a given metric value indicates a potential problem in the feature implementation. There are several methods to derive thresholds for software metrics. However, there is little understanding about their appropriateness for the SPL context. This paper aims at comparing three methods to derive thresholds based on a benchmark of 33 SPLs. We assess to what extent these methods derive appropriate values for four metrics used in product-line engineering. These thresholds were used for guiding the identification of a typical anomaly found in features' implementation, named God Class. We also discuss the lessons learned on using such methods to derive thresholds for SPLs.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {176–185},
numpages = {10},
keywords = {metrics, software product lines, thresholds},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2648511.2648521,
author = {Olaechea, Rafael and Rayside, Derek and Guo, Jianmei and Czarnecki, Krzysztof},
title = {Comparison of exact and approximate multi-objective optimization for software product lines},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648521},
doi = {10.1145/2648511.2648521},
abstract = {Software product lines (SPLs) allow stakeholders to manage product variants in a systematical way and derive variants by selecting features. Finding a desirable variant is often difficult, due to the huge configuration space and usually conflicting objectives (e.g., lower cost and higher performance). This scenario can be characterized as a multi-objective optimization problem applied to SPLs. We address the problem using an exact and an approximate algorithm and compare their accuracy, time consumption, scalability, parameter setting requirements on five case studies with increasing complexity. Our empirical results show that (1) it is feasible to use exact techniques for small SPL multi-objective optimization problems, and (2) approximate methods can be used for large problems but require substantial effort to find the best parameter setting for acceptable approximation which can be ameliorated with known good parameter ranges. Finally, we discuss the tradeoff between accuracy and time consumption when using exact and approximate techniques for SPL multi-objective optimization and guide stakeholders to choose one or the other in practice.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {92–101},
numpages = {10},
keywords = {multi-objective optimization, software product lines},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2791060.2791102,
author = {Mu\~{n}oz-Fern\'{a}ndez, Juan C. and Tamura, Gabriel and Raicu, Irina and Mazo, Ra\'{u}l and Salinesi, Camille},
title = {REFAS: a PLE approach for simulation of self-adaptive systems requirements},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791102},
doi = {10.1145/2791060.2791102},
abstract = {Model simulation has demonstrated its usefulness in evaluation and decision-making for improving preliminary versions of artefacts before production. Particularly, one of the main goals of simulation is to verify model properties based on data collected from its execution. In this paper, we present the simulation capabilities of our REFAS framework for specifying requirements models for dynamic software products lines and self-adaptive systems. The simulation is controlled by a feedback loop and a reasoning engine that operates on the functional and non-functional requirements. The paper contribution is threefold. First, REFAS allows developers to evaluate and improve requirements models through their simulation capabilities. Second, REFAS provides rich feedback in its interactive simulations for the human modeller to make informed decisions to improve her model. Third, REFAS automates the generation of simulation scenarios required to verify the model adequacy and correctness. We evaluate our contribution by comparing the application of REFAS to a case study used in other approaches.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {121–125},
numpages = {5},
keywords = {MAPE-K loops, dynamic adaptation, dynamic software product lines, requirements engineering, simulation},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2648511.2648528,
author = {Barreiros, Jorge and Moreira, Ana},
title = {A cover-based approach for configuration repair},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648528},
doi = {10.1145/2648511.2648528},
abstract = {Feature models are often used to describe variability and commonality in Software Product Lines, specifying admissible configurations of valid products. However, invalid configurations may arise in some scenarios. These include feature model evolution that invalidates pre-existing products or collaborative configuration by multiple stakeholders with conflicting goals, among others. This problem has been acknowledged in the literature and some techniques for configuration repair have already been proposed. However, common optimization criteria such as proximity between original and repaired configurations can result in a significant number of alternative repair possibilities, easily attaining thousands of alternatives for models of practical dimension. Consequently, rather than just efficiently providing an exhaustive list of possibilities, an approach that specifically addresses this issue should be able to offer the user a manageable and comprehensible view of the configuration problems and potential repair options. We offer a novel approach for configuration repair, based on partitioning and cover analysis, with high performance and generating high quality solutions, which allows efficient identification and presentation of multiple competing repairs.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {157–166},
numpages = {10},
keywords = {configuration, configuration diagnosis, configuration repair, feature modeling, software product lines},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.5555/1753235.1753262,
author = {Hartmann, Herman and Trew, Tim and Matsinger, Aart},
title = {Supplier independent feature modelling},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {The growing use of Software Supply Chains results in an increasing proportion of the functionality of a software product line (SPL) being determined by functionality of suppliers. In order to cover the whole product line, it is sometimes necessary to use several suppliers, offering partly the same functionality. This leads to overlapping feature models.This paper introduces a Supplier Independent Feature Model (SIFM). Through dependency relations between the SIFM and the feature models of the individual suppliers, the variability of the combined components is modelled. In this way the complexity of merging feature models is avoided and the relations with the development artefacts are maintained.The creation of an SIFM is elaborated through an example and a case study. These show that this is a straightforward process, and show that the SIFM facilitates the generation of product variants in an efficient manner.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {191–200},
numpages = {10},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.1145/2362536.2362552,
author = {G\'{o}mez, Abel and Penad\'{e}s, M. Carmen and Can\'{o}s, Jos\'{e} H. and Borges, Marcos R. S. and Llavador, Manuel},
title = {DPLfw: a framework for variable content document generation},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362552},
doi = {10.1145/2362536.2362552},
abstract = {Variable Data Printing solutions provide means to generate documents whose content varies according to some criteria. Since the early Mail Merge-like applications that generated letters with destination data taken from databases, different languages and frameworks have been developed with increasing levels of sophistication. Current tools allow the generation of highly customized documents that are variable not only in content, but also in layout. However, most frameworks are technology-oriented, and their use requires high skills in implementation-related tools (XML, XPATH, and others), which do not include support for domain-related tasks like identification of document content variability.In this paper, we introduce DPLfw, a framework for variable content document generation based on Software Product Line Engineering principles. It is an implementation of the Document Product Lines (DPL) approach, which was defined with the aim of supporting variable content document generation from a domain-oriented point of view. DPL models document content variability in terms of features, and product line-like processes support the generation of documents. We define the DPLfw architecture, and illustrate its use in the definition of variable-content emergency plans.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {96–105},
numpages = {10},
keywords = {DITA, document product line, feature modeling, model driven engineering, variable data printing},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3382025.3414985,
author = {Halin, Axel and Nuttinck, Alexandre and Acher, Mathieu and Devroey, Xavier and Perrouin, Gilles and Baudry, Benoit},
title = {Test them all, is it worth it? assessing configuration sampling on the JHipster web development stack},
year = {2020},
isbn = {9781450375696},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3382025.3414985},
doi = {10.1145/3382025.3414985},
abstract = {This is an extended abstract of the article: Axel Halin, Alexandre Nuttinck, Mathieu Acher, Xavier Devroey, Gilles Perrouin, and Benoit Baudry. 2018. Test them all, is it worth it? Assessing configuration sampling on the JHipster Web development stack. In Empirical Software Engineering (17 Jul 2018). https://doi.org/10.1007/s10664-018-9635-4.},
booktitle = {Proceedings of the 24th ACM Conference on Systems and Software Product Line: Volume A - Volume A},
articleno = {12},
numpages = {1},
keywords = {JHipster, case study, configuration sampling, software testing, variability-intensive systems},
location = {Montreal, Quebec, Canada},
series = {SPLC '20}
}

@inproceedings{10.1145/2499777.2500712,
author = {Kolokolov, Viktor and Baumann, Paul and Santini, Silvia and Ruehl, Stefan T. and Verclas, Stephan A. W.},
title = {Flexible development of variable software features for mobile business applications},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500712},
doi = {10.1145/2499777.2500712},
abstract = {With recent advances in development and deployment of mobile business applications (MBAs) based on the hybrid Web approach (hybrid MBAs) enterprises around the world well recognize new potentials to mobilize their business processes (BPs). Variability has a natural appearance in complex environments of different enterprises, where even similar BPs can have varying facets on the cross-enterprise scale. Yet, despite this fact current development tools for hybrid MBAs are lacking systematic variability management. Further, the literature on this particular technological landscape is scarce. We highlight in this paper emerging importance of this research field and describe its context and a research methodology. We propose an SPL-based approach to tackle considerable variabilities of hybrid MBAs.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {67–73},
numpages = {7},
keywords = {hybrid web, mobile business applications, software product lines, variability modeling},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/3336294.3336319,
author = {Carvalho, Luiz and Garcia, Alessandro and Assun\c{c}\~{a}o, Wesley K. G. and Bonif\'{a}cio, Rodrigo and Tizzei, Leonardo P. and Colanzi, Thelma Elita},
title = {Extraction of Configurable and Reusable Microservices from Legacy Systems: An Exploratory Study},
year = {2019},
isbn = {9781450371384},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3336294.3336319},
doi = {10.1145/3336294.3336319},
abstract = {Microservices is an emerging industrial technique to promote better modularization and management of small and autonomous services. Microservice architecture is widely used to overcome the limitations of monolithic legacy systems, such as limited maintainability and reusability. Migration to a microservice architecture is increasingly becoming the focus of academic research. However, there is little knowledge on how microservices are extracted from legacy systems in practice. Among these limitations, there is a lack of understanding if variability is considered useful along the microservice extraction from a configurable system. In order to address this gap, we performed an exploratory study composed of two phases. Firstly, we conducted an online survey with 26 specialists that contributed to the migration of existing systems to a microservice architecture. Secondly, we performed individual interviews with seven survey participants. A subset of the participants (13 out of 26) dealt with systems with variability during the extraction, which stated that variability is a key criterion for structuring the microservices. Moreover, variability in the legacy system is usually implemented with simple mechanisms. Finally, initial evidence points out that microservices extraction can increase software customization.},
booktitle = {Proceedings of the 23rd International Systems and Software Product Line Conference - Volume A},
pages = {26–31},
numpages = {6},
keywords = {architecture migration, microservice architecture, microservice customization, software variability},
location = {Paris, France},
series = {SPLC '19}
}

@inproceedings{10.1145/2019136.2019177,
author = {Abbas, Nadeem and Andersson, Jesper and Weyns, Danny},
title = {Knowledge evolution in autonomic software product lines},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019177},
doi = {10.1145/2019136.2019177},
abstract = {We describe ongoing work in knowledge evolution management for autonomic software product lines. We explore how an autonomic product line may benefit from new knowledge originating from different source activities and artifacts at run time. The motivation for sharing run-time knowledge is that products may self-optimize at run time and thus improve quality faster compared to traditional software product line evolution. We propose two mechanisms that support knowledge evolution in product lines: online learning and knowledge sharing. We describe two basic scenarios for runtime knowledge evolution that involves these mechanisms. We evaluate online learning and knowledge sharing in a small product line setting that shows promising results.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {36},
numpages = {8},
keywords = {knowledge sharing, online learning, product-line management, self-adaptation, software design, software product-lines},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/1134285.1134412,
author = {Kim, Kyungseok and Kim, Hyejung and Ahn, Miyoung and Seo, Minseok and Chang, Yeop and Kang, Kyo C.},
title = {ASADAL: a tool system for co-development of software and test environment based on product line engineering},
year = {2006},
isbn = {1595933751},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1134285.1134412},
doi = {10.1145/1134285.1134412},
abstract = {Recently, product line software engineering (PLSE) is gaining popularity. To employ PLSE methods, many organizations are looking for a tool system that supports PLSE methods so that core assets and target software can be developed and tested in an effective and systematic way.ASADAL (A System Analysis and Design Aid tooL) supports the entire lifecycle of software development process based on a PLSE method called FORM (Feature-Oriented Reuse Method) [6]. It supports domain analysis, architecture and component design, code generation, and simulation-based verification and validation (V&amp;V). Using the tool, users may co-develop target software and its test environment and verify software in a continuous and incremental way.},
booktitle = {Proceedings of the 28th International Conference on Software Engineering},
pages = {783–786},
numpages = {4},
keywords = {CASE tool, product line engineering, reuse, simulation},
location = {Shanghai, China},
series = {ICSE '06}
}

@inproceedings{10.1145/2362536.2362563,
author = {Heider, Wolfgang and Rabiser, Rick and Gr\"{u}nbacher, Paul and Lettner, Daniela},
title = {Using regression testing to analyze the impact of changes to variability models on products},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362563},
doi = {10.1145/2362536.2362563},
abstract = {Industrial product lines are typically maintained for a long time and evolve continuously to address changing requirements and new technologies. Already derived products often have to be re-derived after such changes to benefit from new and updated features. Product line engineers thus frequently need to analyze the impact of changes to variability models to prevent unexpected changes of re-derived products. In this paper we present a tool-supported approach that informs engineers about the impacts of variability model changes on existing products. Regression tests are used to determine whether existing product configurations and generated product outputs can be re-derived without unexpected effects. We evaluate the feasibility of the approach based on changes observed in a real-world software product line. More specifically, we show how our approach helps engineers performing specific evolution tasks to analyze the change impacts on existing products. We also evaluate the performance and scalability of our approach. Our results show that variability change impact analyses can be automated using model regression testing and can help reducing the gap between domain engineering and application engineering.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {196–205},
numpages = {10},
keywords = {product line evolution, regression testing, variability models},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2364412.2364423,
author = {van den Broek, Pim},
title = {Intersection of feature models},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364423},
doi = {10.1145/2364412.2364423},
abstract = {In this paper, we present an algorithm for the construction of the intersection of two feature models. The feature models are allowed to have "requires" and "excludes" constraints, and should be parent-compatible. The algorithm is applied to the problem of combining feature models from stakeholders with different viewpoints.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {61–65},
numpages = {5},
keywords = {feature models, intersection, viewpoints},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2934466.2934467,
author = {Ferreira, Gabriel and Malik, Momin and K\"{a}stner, Christian and Pfeffer, J\"{u}rgen and Apel, Sven},
title = {Do #ifdefs influence the occurrence of vulnerabilities? an empirical study of the linux kernel},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934467},
doi = {10.1145/2934466.2934467},
abstract = {Preprocessors support the diversification of software products with #ifdefs, but also require additional effort from developers to maintain and understand variable code. We conjecture that #ifdefs cause developers to produce more vulnerable code because they are required to reason about multiple features simultaneously and maintain complex mental models of dependencies of configurable code.We extracted a variational call graph across all configurations of the Linux kernel, and used configuration complexity metrics to compare vulnerable and non-vulnerable functions considering their vulnerability history. Our goal was to learn about whether we can observe a measurable influence of configuration complexity on the occurrence of vulnerabilities.Our results suggest, among others, that vulnerable functions have higher variability than non-vulnerable ones and are also constrained by fewer configuration options. This suggests that developers are inclined to notice functions appear in frequently-compiled product variants. We aim to raise developers' awareness to address variability more systematically, since configuration complexity is an important, but often ignored aspect of software product lines.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {65–73},
numpages = {9},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.1007/978-3-030-34644-7_14,
author = {Boaventura, Filipe M. B. and Sarinho, Victor T.},
title = {A Feature-Based Approach to Develop Digital Board Games},
year = {2019},
isbn = {978-3-030-34643-0},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-030-34644-7_14},
doi = {10.1007/978-3-030-34644-7_14},
abstract = {Several types of development strategies are available to provide digital games in a reusable way. However, the idea of a “one-size-fits-all” architecture for digital games can be problematic, being preferable to build dedicated architectures for specific game genres. This paper proposes the development of feature-based artifacts for the production of digital board games. It presents a subdomain game architecture that represents configurable features of core concepts related to board games (the game model and controller), and implements feature artifacts capable of being executed in distinct game clients (the game view). For validation purposes, two types of classic board games, together with a proposed web client for board games, were developed, consolidating as a result a software product line approach to develop classic board games.},
booktitle = {Entertainment Computing and Serious Games: First IFIP TC 14 Joint International Conference, ICEC-JCSG 2019, Arequipa, Peru, November 11–15, 2019, Proceedings},
pages = {175–186},
numpages = {12},
keywords = {Feature modeling, Software product line, Board games},
location = {Arequipa, Peru}
}

@inproceedings{10.1145/2648511.2648547,
author = {Domis, Dominik and Sehestedt, Stephan and Gamer, Thomas and Aleksy, Markus and Koziolek, Heiko},
title = {Customizing domain analysis for assessing the reuse potential of industrial software systems: experience report},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648547},
doi = {10.1145/2648511.2648547},
abstract = {In companies with a large portfolio of software or software-intensive products, functional overlaps are often perceived between independent products. In such situations it is advisable to systematically analyze the potential of systematic reuse and Software Product Lines. To this end, several domain analysis approaches, e.g., SEI Technical Probe, have been proposed to decide whether a set of products with a perceived functional overlap should be integrated into a single product line. Based on the principles of those approaches we devised our own approach. One important property is the inherent flexibility of the method to be able to apply it to four different application cases in industrial software products at ABB. In this paper we present our refined approach for domain analysis. The results and lessons learned are meant to support industrial researchers and practitioners alike. Moreover, the lessons learned highlight real-world findings concerning software reuse.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {310–319},
numpages = {10},
keywords = {domain analysis, software product lines, software reuse},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1007/978-3-030-21290-2_42,
author = {Reinhartz-Berger, Iris and Shimshoni, Ilan and Abdal, Aviva},
title = {Behavior-Derived Variability Analysis: Mining Views for Comparison and Evaluation},
year = {2019},
isbn = {978-3-030-21289-6},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-030-21290-2_42},
doi = {10.1007/978-3-030-21290-2_42},
abstract = {The large variety of computerized solutions (software and information systems) calls for a systematic approach to their comparison and evaluation. Different methods have been proposed over the years for analyzing the similarity and variability of systems. These methods get artifacts, such as requirements, design models, or code, of different systems (commonly in the same domain), identify and calculate their similarities, and represent the variability in models, such as feature diagrams. Most methods rely on implementation considerations of the input systems and generate outcomes based on predefined, fixed strategies of comparison (referred to as variability views). In this paper, we introduce an approach for mining relevant views for comparison and evaluation, based on the input artifacts. Particularly, we equip SOVA – a Semantic and Ontological Variability Analysis method – with data mining techniques in order to identify relevant views that highlight variability or similarity of the input artifacts (natural language requirement documents). The comparison is done using entropy and Rand index measures. The method and its outcomes are evaluated on a case of three photo sharing applications.},
booktitle = {Advanced Information Systems Engineering: 31st International Conference, CAiSE 2019, Rome, Italy, June 3–7, 2019, Proceedings},
pages = {675–690},
numpages = {16},
keywords = {Software Product Line Engineering, Variability analysis, Requirements specifications, Feature diagrams},
location = {Rome, Italy}
}

@article{10.1007/s42979-021-00541-8,
author = {Saber, Takfarinas and Brevet, David and Botterweck, Goetz and Ventresque, Anthony},
title = {Reparation in Evolutionary Algorithms for Multi-objective Feature Selection in Large Software Product Lines},
year = {2021},
issue_date = {May 2021},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
volume = {2},
number = {3},
url = {https://doi.org/10.1007/s42979-021-00541-8},
doi = {10.1007/s42979-021-00541-8},
abstract = {Software Product Lines Engineering is the area of software engineering that aims to systematise the modelling, creation and improvement of groups of interconnected software systems by formally expressing possible alternative products in the form of Feature Models. Deriving a software product/system from a feature model is called Feature Configuration. Engineers select the subset of features (software components) from a feature model that suits their needs, while respecting the underlying relationships/constraints of the system–which is challenging on its own. Since there exist several (and often antagonistic) perspectives on which the quality of software could be assessed, the problem is even more challenging as it becomes a multi-objective optimisation problem. Current multi-objective feature selection in software product line approaches (e.g., SATIBEA) combine the scalability of a genetic algorithm (IBEA) with a solution reparation approach based on a SAT solver or one of its derivatives. In this paper, we propose MILPIBEA, a novel hybrid algorithm which combines IBEA with the accuracy of a mixed-integer linear programming (MILP) reparation. We show that the MILP reparation modifies fewer features from the original infeasible solutions than the SAT reparation and in a shorter time. We also demonstrate that MILPIBEA outperforms SATIBEA on average on various multi-objective performance metrics, especially on the largest feature models. The other major challenge in software engineering in general and in software product lines, in particular, is evolution. While the change in software components is common in the software engineering industry, the particular case of multi-objective optimisation of evolving software product lines is not well-tackled yet. We show that MILPIBEA is not only able to better take advantage of the evolution than SATIBEA, but it is also the one that continues to improve the quality of the solutions when SATIBEA stagnates. Overall, IBEA performs better when combined with MILP instead of SAT reparation when optimising the multi-objective feature selection in large and evolving software product lines.},
journal = {SN Comput. Sci.},
month = mar,
numpages = {14},
keywords = {Software product line, Feature selection, Multi-objective optimisation, Evolutionary algorithm, Reparation, Mixed-integer linear programming}
}

@inproceedings{10.1145/2491627.2491634,
author = {Ferrari, Alessio and Spagnolo, Giorgio O. and Dell'Orletta, Felice},
title = {Mining commonalities and variabilities from natural language documents},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491634},
doi = {10.1145/2491627.2491634},
abstract = {A company who wishes to enter an established marked with a new, competitive product is required to analyse the product solutions of the competitors. Identifying and comparing the features provided by the other vendors might greatly help during the market analysis. However, mining common and variant features of from the publicly available documents of the competitors is a time consuming and error-prone task. In this paper, we suggest to employ a natural language processing approach based on contrastive analysis to identify commonalities and variabilities from the brochures of a group of vendors. We present a first step towards a practical application of the approach, in the the context of the market of Communications-Based Train Control (CBTC) systems.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {116–120},
numpages = {5},
keywords = {software product lines, variability mining},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2362536.2362551,
author = {Tischer, Christian and Boss, Birgit and M\"{u}ller, Andreas and Thums, Andreas and Acharya, Rajneesh and Schmid, Klaus},
title = {Developing long-term stable product line architectures},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362551},
doi = {10.1145/2362536.2362551},
abstract = {Product lines are usually built for the long term in order to repay the initial investment. While long-term stable software systems are already hard, if they are developed individually, it is even harder for complete product lines. At the time a new product line is created, the details of future product line characteristics are typically not known, no matter how well and detailed scoping and planning is done. Thus, any product line needs to evolve and adapt over time to incorporate new customer requirements as well as new technology constraints.Stability of the product line architecture is very important to the successful long-term evolution of a product line. In this paper, we discuss how a form of domain decomposition, which we call conceptual architecture, can be used to guide product line engineering towards long-term viability. We will illustrate this approach in the context of a large-scale product line development and analyze the evolution properties of the product line. Transferability of the approach is suggested to other embedded software systems that drive mature, well-understood physical control system.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {86–95},
numpages = {10},
keywords = {AUTOSAR, multi product lines, scoping, software architecture, software product lines},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2791060.2791082,
author = {Hotz, Lothar and Wang, Yibo and Riebisch, Matthias and G\"{o}tz, Olaf and Lackhove, Josef},
title = {Evaluation across multiple views for variable automation systems},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791082},
doi = {10.1145/2791060.2791082},
abstract = {Automation systems in industry are often software-intensive systems consisting of software and hardware components. During their development several engineers of different disciplines are involved, such as mechanical, electrical and software engineering. Each engineer focuses on specific system aspects to be developed. To enable an efficient development, product lines especially with feature models for variability modeling are promising technologies. In order to reduce the complexity of both feature models and development process, views on feature models can be applied. The use of views for filtering purposes constitutes an established method. However, views also enable further options missing in current approaches, such as evaluations regarding requirements, including non-functional ones. This paper presents an approach for evaluation across multiple views to enable collaborative development for developers who focus on different system aspects. We validate our approach by applying it in an industrial project for the planning of flying saws.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {311–315},
numpages = {5},
keywords = {automation systems, configuration, consistency check, feature model, multi-criteria evaluation, product lines},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.5555/1753235.1753241,
author = {John, Isabel and Eisenbarth, Michael},
title = {A decade of scoping: a survey},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {Scoping can be defined as the process of deciding in which parts of an organization's products, features and domains systematic reuse is economically useful. It generally is the first phase in product line engineering. For a decade now scoping has been recognized as a discipline of it's own in product line engineering. So it's time to look at what has been done in scoping in the last years and what is still to be done. In this survey, we identify and characterize existing scoping approaches with the main goal to derive open areas and research questions for further research in scoping. We analyze and compare existing approaches and derive open and partially addressed research questions that can be tackled by researchers in product line engineering in the next years.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {31–40},
numpages = {10},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.5555/1753235.1753242,
author = {Fernandez-Amoros, David and Gil, Ruben Heradio and Somolinos, Jose Cerrada},
title = {Inferring information from feature diagrams to product line economic models},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {Existing economic models support the estimation of the costs and benefits of developing and evolving a Software Product Line (SPL) as compared to undertaking traditional software development approaches. In addition, Feature Diagrams (FDs) are a valuable tool to scope the domain of a SPL. This paper proposes an algorithm to calculate, from a FD, the following information for economic models: the total number of products of a SPL, the SPL homogeneity and the commonality of the SPL requirements. The algorithm running time belongs to the complexity class O(f42c). In contrast to related work, the algorithm is free of dependencies on off-the-self tools and is generally specified for an abstract FD notation, that works as a pivot language for most of the available notations for feature modeling.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {41–50},
numpages = {10},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.1145/3218585.3218670,
author = {Martins, Luana Almeida and Parreira, Paulo Afonso and Freire, Andr\'{e} Pimenta and Costa, Heitor},
title = {Exploratory Study on the Use of Software Product Lines in the Development of Quality Assistive Technology Software},
year = {2018},
isbn = {9781450364676},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3218585.3218670},
doi = {10.1145/3218585.3218670},
abstract = {The use of Software Product Line for the development of Assistive Technologies has not been widely explored yet. However, some studies point to the viability of using this approach to develop Assistive Technology software. Through this approach, important limiting factors to use Assistive Technologies can be overcome. These factors are related to the acquisition costs and difficulty to find products corresponding to specific and varying user needs. Considering that Software Product Line approach provides mass customization of software products, the specific needs of each user can be more easily satisfied by software developers. Furthermore, the reuse of code artifacts to development provides a fall in the acquisition cost of these software products. We present in this paper a literature review that aims to investigate how this approach has been applied to the development of Assistive Technology software. Also, we present some quality factors that should be considered to develop Assistive Technologies using Software Product Lines. Thus, the main findings of the review are grouped in order to find the main gaps to be explored in future work.},
booktitle = {Proceedings of the 8th International Conference on Software Development and Technologies for Enhancing Accessibility and Fighting Info-Exclusion},
pages = {262–269},
numpages = {8},
keywords = {Assistive Technology, Software Product Line, Software Quality},
location = {Thessaloniki, Greece},
series = {DSAI '18}
}

@inproceedings{10.1145/2491627.2491635,
author = {Henard, Christopher and Papadakis, Mike and Perrouin, Gilles and Klein, Jacques and Traon, Yves Le},
title = {Multi-objective test generation for software product lines},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491635},
doi = {10.1145/2491627.2491635},
abstract = {Software Products Lines (SPLs) are families of products sharing common assets representing code or functionalities of a software product. These assets are represented as features, usually organized into Feature Models (FMs) from which the user can configure software products. Generally, few features are sufficient to allow configuring millions of software products. As a result, selecting the products matching given testing objectives is a difficult problem.The testing process usually involves multiple and potentially conflicting testing objectives to fulfill, e.g. maximizing the number of optional features to test while at the same time both minimizing the number of products and minimizing the cost of testing them. However, most approaches for generating products usually target a single objective, like testing the maximum amount of feature interactions. While focusing on one objective may be sufficient in certain cases, this practice does not reflect real-life testing situations.The present paper proposes a genetic algorithm to handle multiple conflicting objectives in test generation for SPLs. Experiments conducted on FMs of different sizes demonstrate the effectiveness, feasibility and practicality of the introduced approach.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {62–71},
numpages = {10},
keywords = {feature models, genetic algorithms, multi-objective optimization, software product lines, test generation},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2364412.2364415,
author = {Casal\'{a}nguida, Hern\'{a}n and Dur\'{a}n, Juan Eduardo},
title = {Automatic generation of feature models from UML requirement models},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364415},
doi = {10.1145/2364412.2364415},
abstract = {It is well known that during the domain requirement engineering phase with UML, both feature models and UML notations (e.g. UML use case diagrams and activity diagrams for describing use cases) are necessary. The development in parallel of UML models and a feature model could introduce inconsistencies between such models that should be removed. The construction of UML models for requirements from a feature model is usually a complex task, the generation of UML models from a feature model cannot be automated, and it cannot be expected that UML specialists will construct feature models of high quality; for these reasons we propose in this paper to first develop UML models for requirements and from them to automatically generate a feature model. We have found only a few papers proposing methods for the construction of feature model from UML models for requirements, but these methods do not consider the mapping of use case descriptions, expressed using a UML notation, onto a feature model. In this paper we extend our previous work in requirements engineering of product lines with new kinds of variabilities for use case diagrams, and new stereotypes for classifying activity diagram actions. Additionally, we defined a transformation from these use case diagram and activity diagram notations onto feature model.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {10–17},
numpages = {8},
keywords = {UML, application family engineering, feature model, model driven architecture, requirements engineering},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.5555/1753235.1753265,
author = {Weston, Nathan and Chitchyan, Ruzanna and Rashid, Awais},
title = {A framework for constructing semantically composable feature models from natural language requirements},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {Software Product Line Engineering (SPLE) requires the construction of feature models from large, unstructured and heterogeneous documents, and the reliable derivation of product variants from the resulting model. This can be an arduous task when performed manually, and can be error-prone in the presence of a change in requirements. In this paper we introduce a tool suite which automatically processes natural-language requirements documents into a candidate feature model, which can be refined by the requirements engineer. The framework also guides the process of identifying variant concerns and their composition with other features. We also provide language support for specifying semantic variant feature compositions which are resilient to change. We show that feature models produced by this framework compare favourably with those produced by domain experts by application to a real-life industrial example.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {211–220},
numpages = {10},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.1145/2648511.2648529,
author = {Vacchi, Edoardo and Cazzola, Walter and Combemale, Benoit and Acher, Mathieu},
title = {Automating variability model inference for component-based language implementations},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648529},
doi = {10.1145/2648511.2648529},
abstract = {Recently, domain-specific language development has become again a topic of interest, as a means to help designing solutions to domain-specific problems. Componentized language frameworks, coupled with variability modeling, have the potential to bring language development to the masses, by simplifying the configuration of a new language from an existing set of reusable components. However, designing variability models for this purpose requires not only a good understanding of these frameworks and the way components interact, but also an adequate familiarity with the problem domain.In this paper we propose an approach to automatically infer a relevant variability model from a collection of already implemented language components, given a structured, but general representation of the domain. We describe techniques to assist users in achieving a better understanding of the relationships between language components, and find out which languages can be derived from them with respect to the given domain.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {167–176},
numpages = {10},
keywords = {DSL implementation, SW product lines, variability models},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2647908.2655973,
author = {Cordy, Maxime and Willemart, Marco and Dawagne, Bruno and Heymans, Patrick and Schobbens, Pierre-Yves},
title = {An extensible platform for product-line behavioural analysis},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655973},
doi = {10.1145/2647908.2655973},
abstract = {Software Product-Line (SPL) model checking has reached an adequate level of efficiency and expressiveness to be applied on real-world cases. Yet a major challenge remains: model checkers should consist of black-box tools that do not require in-depth expertise to be used. In particular, it is essential to provide engineers with easy-to-learn languages to model both the behaviour of their SPL and the properties to check. In this paper, we propose a framework to build customized product-line verifiers modularly. Our extensible architecture allows one to plug new modelling languages or verifications algorithms without modifying other parts of it. It also provides means of representing and reasoning on variability that can facilitate the development of other SPL quality assurance techniques. We illustrate the benefits of our approach by detailing how we created a new domain-specific SPL modelling language and linked it to our tool.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {102–109},
numpages = {8},
keywords = {features, model checking, software product lines, tool},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.5555/820750.821486,
author = {Mohan, Kannan and Ramesh, Balasubramaniam},
title = {Ontology-Based Support for Variability Management in Product and Service Families},
year = {2003},
isbn = {0769518745},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {Product/service family engineering, which encourages the development of a common productplatform, plays a key role in facilitating large-scale and planned reuse in the development of customized products. In product family designs, managing points of variability is critical to achieve product variety. Variation points are points at which one among the several possible variations of a feature of a system can be selected to achieve different configurations of aproduct. We are developing an ontology that catalogues the different concepts associated with variability. This ontology is used to define the elements characterizing the knowledge elements necessary for managing variability in product/service families. We have also developed a knowledge management system integrated with an ontology development tool to facilitate knowledge capture and retrieval for variability management.},
booktitle = {Proceedings of the 36th Annual Hawaii International Conference on System Sciences (HICSS'03) - Track 3 - Volume 3},
pages = {75.1},
series = {HICSS '03}
}

@inproceedings{10.1145/2934466.2934470,
author = {K\"{u}hn, Thomas and Cazzola, Walter},
title = {Apples and oranges: comparing top-down and bottom-up language product lines},
year = {2016},
isbn = {9781450340502},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2934466.2934470},
doi = {10.1145/2934466.2934470},
abstract = {Over the past decade language development tools have been significantly improved. This permitted both practitioners and researchers to design a wide variety of domain-specific languages (DSL) and extensions to programming languages. Moreover, multiple researchers have combined different language variants to form families of DSLs as well as programming languages. Unfortunately, current language development tools cannot directly support the development of these families. To overcome this limitation, researchers have recently applied ideas from software product lines (SPL) to create product lines of compilers/interpreters for language families, denoted language product lines (LPL). Similar to SPLs, however, these product lines can be created either using a top-down or a bottom-up approach. Yet, there exist no case study comparing the suitability of both approaches to the development of LPLs, making it unclear how language development tools should evolve. Accordingly, this paper compares both feature modeling approaches by applying them to the development of an LPL for the family of role-based programming languages and discussing their applicability, feasibility and overall suitability for the development of LPLs. Although one might argue that this compares apples and oranges, we believe that this case still provides crucial insights into the requirements, assumptions, and challenges of each approach.},
booktitle = {Proceedings of the 20th International Systems and Software Product Line Conference},
pages = {50–59},
numpages = {10},
location = {Beijing, China},
series = {SPLC '16}
}

@inproceedings{10.5555/2666064.2666069,
author = {Quinton, Cl\'{e}ment and Duchien, Laurence and Heymans, Patrick and Mouton, St\'{e}phane and Charlier, Etienne},
title = {Using feature modelling and automations to select among cloud solutions},
year = {2012},
isbn = {9781467317511},
publisher = {IEEE Press},
abstract = {Cloud computing is a major trend in distributed computing environments. Resources are accessed on demand by customers and are delivered as services by cloud providers in a pay-per-use model. Companies provide their applications as services and rely on cloud providers to provision, host and manage such applications on top of their infrastructure. However, the wide range of cloud solutions and the lack of knowledge in this domain is a real problem for companies when facing the cloud solution choice. In this paper, we propose to use Software Product Line Engineering (SPLE) and Feature Model (FM) configuration to develop a decision-supporting tool. Using such modelling techniques and automations, this tool takes into consideration the application technical requirements as well as the user quality requirements to provide an accurate result among cloud solutions that best fits both requirements.},
booktitle = {Proceedings of the Third International Workshop on Product LinE Approaches in Software Engineering},
pages = {17–20},
numpages = {4},
keywords = {cloud computing, feature modelling, separation of concerns, software product line engineering},
location = {Zurich, Switzerland},
series = {PLEASE '12}
}

@inproceedings{10.1145/2648511.2648519,
author = {Moens, Hendrik and De Turck, Filip},
title = {Feature-based application development and management of multi-tenant applications in clouds},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648519},
doi = {10.1145/2648511.2648519},
abstract = {In recent years, there has been a rising interest in cloud computing, which is often used to offer Software as a Service (SaaS) over the Internet. SaaS applications can be offered to clients at a lower cost as they are usually multi-tenant: many end users make use of a single application instance, even when they are from different organisations. It is difficult to offer highly customizable SaaS applications that are still multi-tenant, which is why these SaaS applications are often offered in a one size fits all approach.In some application domains applications must be highly customizable, making it more difficult to migrate them to a cloud environment, and losing the benefits of multi-tenancy. In this paper we compare multiple approaches for the development and management of highly customizable multitenant SaaS applications, and present a methodology for developing and managing these applications. We compare two approaches, an application-based approach focusing on deploying multiple multi-tenant applications variants, and a feature-based approach where applications are composed out of multi-tenant services using a service oriented architecture. In addition, we also discuss a hybrid approach combining properties of both. We conclude that the feature-based approach results in the fewest application instances at runtime resulting in more multi-tenancy.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {72–81},
numpages = {10},
keywords = {cloud computing, feature modeling, multi-tenancy},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2499777.2500718,
author = {Abbas, Nadeem and Andersson, Jesper},
title = {Architectural reasoning for dynamic software product lines},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500718},
doi = {10.1145/2499777.2500718},
abstract = {Software quality is critical in today's software systems. A challenge is the trade-off situation architects face in the design process. Designers often have two or more alternatives, which must be compared and put into context before a decision is made. The challenge becomes even more complex for dynamic software product lines, where domain designers have to take runtime variations into consideration as well. To address the problem we propose extensions to an architectural reasoning framework with constructs/artifacts to define and model a domain's scope and dynamic variability. The extended reasoning framework encapsulates knowledge to understand and reason about domain quality behavior and self-adaptation as a primary variability mechanism. The framework is demonstrated for a self-configuration property, self-upgradability on an educational product-line.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {117–124},
numpages = {8},
keywords = {adaptation, architectural reasoning, software product lines, variability},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/2499777.2500708,
author = {Wille, David and Holthusen, S\"{o}nke and Schulze, Sandro and Schaefer, Ina},
title = {Interface variability in family model mining},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2500708},
doi = {10.1145/2499777.2500708},
abstract = {Model-driven development of software gains more and more importance, especially in domains with high complexity. In order to develop differing but still similar model-based systems, these models are often copied and modified according to the changed requirements. As the variability between these different models is not documented, issues arise during maintenance. For example, applying patches becomes a tedious task because errors have to be fixed in all of the created models and no information about modified and unchanged parts exists. In this paper, we present an approach to analyze related models and determine the variability between them. This analysis provides crucial information about the variability (i.e., changed parts, additional parts, and parts without any modification) between the models in order to create family models. The particular focus is the analysis of models containing components with differing interfaces.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {44–51},
numpages = {8},
keywords = {SPL, analysis, family model mining, variability},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@article{10.1016/j.infsof.2014.11.007,
author = {Reinhartz-Berger, Iris and Wulf-Hadash, Ora},
title = {Improving the management of product lines by performing domain knowledge extraction and cross product line analysis},
year = {2015},
issue_date = {March 2015},
publisher = {Butterworth-Heinemann},
address = {USA},
volume = {59},
number = {C},
issn = {0950-5849},
url = {https://doi.org/10.1016/j.infsof.2014.11.007},
doi = {10.1016/j.infsof.2014.11.007},
abstract = {ContextIncrease in market competition is one of the main reasons for developing and maintaining families of systems, termed Product Lines (PLs). Managing those PLs is challenging, let alone the management of several related PLs. Currently, those PLs are managed separately or their relations are analyzed assuming explicit specification of dependencies or use of an underlying terminology. Such assumptions may not hold when developing the PLs in different departments or companies applying various engineering processes. ObjectiveIn this work we call for utilizing the knowledge gained from developing and maintaining different PLs in the same domain in order to recommend on improvements to the management of PLs. MethodThe suggested approach conducts domain knowledge extraction and cross PL analysis on feature diagrams - the main aid for modeling PL variability. The domain knowledge is extracted by applying similarity metrics, clustering, and mining techniques. Based on the created domain models, the approach performs cross PL analysis that examines relations in the domain models and generates improvement recommendations to existing PLs and overall management recommendations (e.g., merging or splitting PLs). ResultsThe approach outcomes were evaluated by humans in a domain of mobile phones. The evaluation results may provide evidence that the outcomes of the approach in general and its recommendations in particular meet human perception of the given domain. ConclusionWe conclude that through domain knowledge extraction and cross PL analysis the suggested approach may generate recommendations useful to the management of individual PLs, as well as to the overall management of different PLs in the same domain.},
journal = {Inf. Softw. Technol.},
month = mar,
pages = {191–204},
numpages = {14},
keywords = {Domain analysis, Feature modeling, Software product line engineering, Variability management}
}

@inproceedings{10.1145/3377024.3377030,
author = {Reuling, Dennis and Pietsch, Christopher and Kelter, Udo and Kehrer, Timo},
title = {Towards projectional editing for model-based SPLs},
year = {2020},
isbn = {9781450375016},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3377024.3377030},
doi = {10.1145/3377024.3377030},
abstract = {Model-based software product lines (MBSPLs) are implemented using various variability mechanisms. These are commonly categorized whether they separate features virtually (e.g., using annotations) or physically (e.g., using modules). Each of these mechanisms comprises advantages and disadvantages regarding MBSPL development, maintenance and analysis. To date, MBSPL developers have to choose upfront which variability mechanism to use, and the chosen mechanism including its drawbacks is bound to the MBSPL's entire lifecycle. In contrast, projectional editing has recently shown very promising potential of making the development of classical SPLs (e.g., implemented in C/C++) more flexible. User-editable projections allow developers to switch fluidly between different variability mechanisms based upon a common internal representation known as variational abstract syntax tree.In this paper, we report on ongoing work on the projectional editing of MBSPLs, which is challenged by a set of additional requirements. We lay the foundation for different editable projections using a common variational abstract syntax graph (vASG) as internal representation. This vASG is used for a fine-grained variability representation of EMOF-based models. We demonstrate the feasibility of our approach by incorporating different variability mechanism projections (150% models and delta modules) and modeling languages (Ecore class diagrams and UML state machines) used in existing MBSPL case studies.},
booktitle = {Proceedings of the 14th International Working Conference on Variability Modelling of Software-Intensive Systems},
articleno = {25},
numpages = {10},
keywords = {Physical Separation, model-based software product line engineering, projectional editing, virtual separation},
location = {Magdeburg, Germany},
series = {VaMoS '20}
}

@article{10.1016/j.asoc.2016.07.040,
author = {Xue, Yinxing and Zhong, Jinghui and Tan, Tian Huat and Liu, Yang and Cai, Wentong and Chen, Manman and Sun, Jun},
title = {IBED},
year = {2016},
issue_date = {December 2016},
publisher = {Elsevier Science Publishers B. V.},
address = {NLD},
volume = {49},
number = {C},
issn = {1568-4946},
url = {https://doi.org/10.1016/j.asoc.2016.07.040},
doi = {10.1016/j.asoc.2016.07.040},
abstract = {Graphical abstractDisplay Omitted HighlightsWe propose to combine IBEA and DE for the optimal feature selection in SPLE.We propose a feedback-directed method into EAs to improve the correctness of results.Our IBED with the seeding method has significantly shortened the search time.In most cases, IBED finds more unique and non-dominated solutions than IBEA. Software configuration, which aims to customize the software for different users (e.g., Linux kernel configuration), is an important and complicated task. In software product line engineering (SPLE), feature oriented domain analysis is adopted and feature model is used to guide the configuration of new product variants. In SPLE, product configuration is an optimal feature selection problem, which needs to find a set of features that have no conflicts and meanwhile achieve multiple design objectives (e.g., minimizing cost and maximizing the number of features). In previous studies, several multi-objective evolutionary algorithms (MOEAs) were used for the optimal feature selection problem and indicator-based evolutionary algorithm (IBEA) was proven to be the best MOEA for this problem. However, IBEA still suffers from the issues of correctness and diversity of found solutions. In this paper, we propose a dual-population evolutionary algorithm, named IBED, to achieve both correctness and diversity of solutions. In IBED, two populations are individually evolved with two different types of evolutionary operators, i.e., IBEA operators and differential evolution (DE) operators. Furthermore, we propose two enhancement techniques for existing MOEAs, namely the feedback-directed mechanism to fast find the correct solutions (e.g., solutions that satisfy the feature model constraints) and the preprocessing method to reduce the search space. Our empirical results have shown that IBED with the enhancement techniques can outperform several state-of-the-art MOEAs on most case studies in terms of correctness and diversity of found solutions.},
journal = {Appl. Soft Comput.},
month = dec,
pages = {1215–1231},
numpages = {17},
keywords = {Differential evolutionary algorithm (DE), Indicator-based evolutionary algorithm (IBEA), Optimal feature selection, Software product line engineering}
}

@inproceedings{10.1145/2648511.2648557,
author = {Reinhartz-Berger, Iris},
title = {Can domain modeling be automated? levels of automation in domain modeling},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648557},
doi = {10.1145/2648511.2648557},
abstract = {In this tutorial we will review some ways to automate domain modeling and discuss the boundaries of automation in this context. We will concentrate on an ontological and conceptual approach which examines software behaviors and not just domain terminology and semantic similarity. We will show and demonstrate a tool named SOVA -- Semantic and Ontological Variability Analysis, which supports automatic domain modeling from software requirements written in free text. We will further discuss how the existence of different SPLs in the same domain may improve the domain models through cross product line analysis.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {359},
numpages = {1},
keywords = {domain analysis, feature models, mining, ontology, semantic similarity},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2647908.2655974,
author = {B\'{e}can, Guillaume and Ben Nasr, Sana and Acher, Mathieu and Baudry, Benoit},
title = {WebFML: synthesizing feature models everywhere},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655974},
doi = {10.1145/2647908.2655974},
abstract = {Feature Models (FMs) are the de-facto standard for documenting, model checking, and reasoning about the configurations of a software system. This paper introduces WebFML a comprehensive environment for synthesizing FMs from various kinds of artefacts (e.g. propositional formula, dependency graph, FMs or product comparison matrices). A key feature of WebFML is an interactive support (through ranking lists, clusters, and logical heuristics) for choosing a sound and meaningful hierarchy. WebFML opens avenues for numerous practical applications (e.g., merging multiple product lines, slicing a configuration process, reverse engineering configurable systems).},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {112–116},
numpages = {5},
keywords = {feature modeling environment, ontologic-aware synthesis, reverse engineering feature models},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/2647908.2655957,
author = {Murguzur, Aitor and Capilla, Rafael and Trujillo, Salvador and Ortiz, \'{O}scar and Lopez-Herrejon, Roberto E.},
title = {Context variability modeling for runtime configuration of service-based dynamic software product lines},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655957},
doi = {10.1145/2647908.2655957},
abstract = {In emerging domains such as Cloud-based Industrial Control Systems (ICSs) and SCADA systems where data-intensive and high performance computing are needed, a higher degree of flexibility is being demanded to meet new stakeholder requirements, context changes and intrinsic complexity. In this light, Dynamic Software Product Lines (DSPLs) provide a way to build self-managing systems exploiting traditional product line engineering concepts at runtime. Although context-awareness is widely perceived to be a first-class concern in such runtime variability mechanisms, existing approaches do not provide the necessary level of formalization to model and enact context variability for DSPLs. This is crucial for operational analytics processes since variant configuration could differ from context to context depending on diverse data values linked to context features and cross-tree constraints in a feature model. In this paper, we propose a context variability modeling approach, demonstrate its applicability and usability via a wind farm use case, and present the fundamental building blocks of a framework for enabling context variability in service-based DSPLs which provide Workflow as a Service (WFaaS).},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {2–9},
numpages = {8},
keywords = {context awareness, context variability, data-aware systems, process variability},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1007/978-3-319-23781-7_27,
author = {Bouarar, Selma and Jean, St\'{e}phane and Siegmund, Norbert},
title = {SPL Driven Approach for Variability in Database Design},
year = {2015},
isbn = {9783319237800},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-319-23781-7_27},
doi = {10.1007/978-3-319-23781-7_27},
abstract = {The evolution of computer technology has strongly impacted the database design. No phase was spared: several conceptual formalisms e.g. ER, UML, ontological, various logical models e.g. relational, object, key-value, a wide panoply of physical optimization structures and deployment platforms have been proposed. As a result, the database design process has become more complex involving more tasks and even more actors as database architect or analyst. Getting inspired from software engineering in dealing with variable similar systems, we propose a methodological framework for a variability-aware design of databases, whereby this latter is henceforth devised as a Software Product Line. Doing so guarantees a high reuse, automation, and customizability in generating ready-to-be implemented databases. We also propose a solution to help users make a suitable choice among the wide panoply. Finally, a case study is presented.},
booktitle = {Proceedings of the 5th International Conference on Model and Data Engineering - Volume 9344},
pages = {332–342},
numpages = {11},
keywords = {Database design, Software Product Line, Variability},
location = {Rhodes, Greece},
series = {MEDI 2015}
}

@inproceedings{10.1145/2019136.2019159,
author = {Otsuka, Jun and Kawarabata, Kouichi and Iwasaki, Takashi and Uchiba, Makoto and Nakanishi, Tsuneo and Hisazumi, Kenji},
title = {Small inexpensive core asset construction for large gainful product line development: developing a communication system firmware product line},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019159},
doi = {10.1145/2019136.2019159},
abstract = {Product line development of communication system firmware with more than 2,000 features was performed in a large-scale project that involved more than 300 engineers (at a maximum) across four distributed sites. However, since intense demands to reduce development costs and time made it prohibitive to construct core assets for all those identified features, the project screened a limited number of the features, for which core assets were constructed, and then performed partial application of product line engineering. Nevertheless, when compared with previously engineered derivative developments, when the second product of the product line was released, it was clear that the project had achieved significant improvements in quality, as well as reductions in development costs and time requirements. Automatic code generation also contributed to those improvements.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {20},
numpages = {5},
keywords = {case study, core assets, feature modeling, product line},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/2019136.2019151,
author = {Naeem, Muhammad and Heckel, Reiko},
title = {Towards matching of service feature models based on linear logic},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019151},
doi = {10.1145/2019136.2019151},
abstract = {When matching services, we are caught in the tradeoff between precise specifications required to make dynamic binding safe and the lack of flexibility that comes with this precision. We propose to use feature modelling techniques to specify the variability of provided and required services, thus increasing the flexibility of the matching process. In particular, we address the matching of one required against several provided specifications, distinguishing between static matching, where all services are known in advance, and dynamic matching, where one provided service is matched at a time. After analysing the requirements for matching feature models in this context, we use an interpretation in linear logic to analyse their use in service specifications and matching.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {13},
numpages = {8},
keywords = {feature models, partial matching, service composition},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.5555/776816.776947,
author = {Knauber, Peter and Bosch, Jan},
title = {ICSE workshop on: Software Variability Management},
year = {2003},
isbn = {076951877X},
publisher = {IEEE Computer Society},
address = {USA},
abstract = {During recent years, the amount of variability that has to be supported by a software artifact is growing considerably and its management is developing as a main challenge during development, usage, and evolution of software artifacts. Successful management of variability in software artifacts leads to better customizable software products that are in turn likely to result in higher market success.The aim of this workshop is to study software variability management both from a 'problems' and from a 'solutions' perspective by bringing together people from industrial practice and from applied research in academia to present and discuss their respective experience.Issues to be addressed include, but are not limited to, technological, process, and organizational aspects as well as notation, assessment, design, and evolution aspects.},
booktitle = {Proceedings of the 25th International Conference on Software Engineering},
pages = {779–780},
numpages = {2},
keywords = {software adaptation, software configuration, software customization, software variability, variability management},
location = {Portland, Oregon},
series = {ICSE '03}
}

@inproceedings{10.1145/2362536.2362568,
author = {Hofman, Peter and Stenzel, Tobias and Pohley, Thomas and Kircher, Michael and Bermann, Andreas},
title = {Domain specific feature modeling for software product lines},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362568},
doi = {10.1145/2362536.2362568},
abstract = {This paper summarizes our experience with introducing feature modeling into a product line for imaging and therapy systems in the Siemens Healthcare Sector. Determining and negotiating the scope in a product line that spans several business units with their own economic goals is challenging. Feature modeling offers a good way to do variability/commonality analysis for complex product lines. A precondition for feature modeling is the identification of all features supporting the product line. To identify these features, we developed a method for systematically deriving a feature model top down based on domain know-how. We call this method domain specific feature modeling. As the primary artifact to describe the problem space, a domain specific feature model additionally improves the requirement understanding for all stakeholders by considerably improving the scoping, traceability, testing, efficiency and transparency of planning activities and making the development efforts easier to estimate. In this paper, we share our experience with domain specific feature modeling in a large platform project and describe the lessons learned. We describe our general approach that can also be used for other domains.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {229–238},
numpages = {10},
keywords = {Scrum, agile, commonality analysis, domain specific feature model, feature dependency diagram, feature modeling, product line, variability analysis},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3141848.3141851,
author = {Assis, Guilherme and Vale, Gustavo and Figueiredo, Eduardo},
title = {Feature oriented programming in Groovy},
year = {2017},
isbn = {9781450355186},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3141848.3141851},
doi = {10.1145/3141848.3141851},
abstract = {Software Product Line (SPL) aims to reuse code and other artifacts in order to reduce costs and gain agility. Feature Oriented Programming (FOP) is a technique to develop SPLs that aims to improve the modularity and flexibility of feature code. The basic idea of FOP is to decompose software into smaller pieces, called features, so they can be composed according to the needs of each customer. Currently, Groovy programming language has no tool or framework that supports the implementation of FOP-SPLs. Groovy is a programming language that has been growing in popularity in recent years. Given this scenario, this work proposes and evaluates G4FOP, a light way to develop SPLs using Groovy. G4FOP extends FeatureHouse which is a framework for software composition and FOP. A preliminary evaluation shows that G4FOP covers Groovy grammar. We also demonstrate by an example that G4FOP is suitable to develop SPLs. G4FOP is currently integrated to the official FeatureHouse repository.},
booktitle = {Proceedings of the 8th ACM SIGPLAN International Workshop on Feature-Oriented Software Development},
pages = {21–30},
numpages = {10},
keywords = {Feature Oriented Programming, FeatureHouse, Groovy, Software Product Line},
location = {Vancouver, BC, Canada},
series = {FOSD 2017}
}

@inproceedings{10.5555/1753235.1753238,
author = {White, Jules and Dougherty, Brian and Schmidt, Doulas C. and Benavides, David},
title = {Automated reasoning for multi-step feature model configuration problems},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {The increasing complexity and cost of software-intensive systems has led developers to seek ways of increasing software reusability. One software reuse approach is to develop a Software Product-line (SPL), which is a reconfigurable software architecture that can be reused across projects. Creating configurations of the SPL that meets arbitrary requirements is hard.Existing research has focused on techniques that produce a configuration of the SPL in a single step. This paper provides three contributions to the study of multi-step configuration for SPLs. First, we present a formal model of multi-step SPL configuration and map this model to constraint satisfaction problems (CSPs). Second, we show how solutions to these CSP configuration problem CSPs can be derived automatically with a constraint solver. Third, we present empirical results demonstrating that our CSP-based technique can solve multi-step configuration problems involving hundreds of features in seconds.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {11–20},
numpages = {10},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.5555/2663370.2663379,
author = {Remmel, Hanna and Paech, Barbara and Engwer, Christian and Bastian, Peter},
title = {Design and rationale of a quality assurance process for a scientific framework},
year = {2013},
isbn = {9781467362610},
publisher = {IEEE Press},
abstract = {The testing of scientific frameworks is a challenging task. The special characteristics of scientific software e.g. missing test oracle, the need for high performance parallel computing, and high priority of non-functional requirements, need to be accounted for as well as the large variability in a framework. In our previous research, we have shown how software product line engineering can be applied to support the testing of scientific frameworks. We developed a process for handling the variability of a framework using software product line (SPL) variability modeling. From the variability models, we derive test applications and use them for system tests for the framework. In this paper we examine the overall quality assurance for a scientific framework. First, we propose a SPL test strategy for scientific frameworks called Variable test Application strategy for Frameworks (VAF). This test strategy tests both, commonality and variability, of the framework and supports the framework's users in testing their applications by creating reusable test artifacts. We operationalize VAF with test activities that are combined with other quality assurance activities to form the design of a quality assurance process for scientific frameworks. We introduce a list of special characteristics for scientific software that we use as rationale for the design of this process.},
booktitle = {Proceedings of the 5th International Workshop on Software Engineering for Computational Science and Engineering},
pages = {58–67},
numpages = {10},
keywords = {quality assurance process, scientific software development, software product line engineering, test strategy},
location = {San Francisco, California},
series = {SE-CSE '13}
}

@inproceedings{10.1145/2491627.2491632,
author = {Haber, Arne and H\"{o}lldobler, Katrin and Kolassa, Carsten and Look, Markus and Rumpe, Bernhard and M\"{u}ller, Klaus and Schaefer, Ina},
title = {Engineering delta modeling languages},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491632},
doi = {10.1145/2491627.2491632},
abstract = {Delta modeling is a modular, yet flexible approach to capture spatial and temporal variability by explicitly representing the differences between system variants or versions. The conceptual idea of delta modeling is language-independent. But, in order to apply delta modeling for a concrete language, so far, a delta language had to be manually developed on top of the base language leading to a large variety of heterogeneous language concepts. In this paper, we present a process that allows deriving a delta language from the grammar of a given base language. Our approach relies on an automatically generated language extension that can be manually adapted to meet domain-specific needs. We illustrate our approach using delta modeling on a textual variant of statecharts.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {22–31},
numpages = {10},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2364412.2364435,
author = {Saller, Karsten and Oster, Sebastian and Sch\"{u}rr, Andy and Schroeter, Julia and Lochau, Malte},
title = {Reducing feature models to improve runtime adaptivity on resource limited devices},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364435},
doi = {10.1145/2364412.2364435},
abstract = {Mobile devices like smartphones are getting increasingly important in our daily lifes. They are used in various environments and have to dynamically adapt themselves accordingly in order to provide an optimal runtime behavior. Naturally, adapting to continuously changing environmental conditions is a challenging task because mobile devices are always limited in their resources and have to adapt in real-time. In this paper, we introduce an approach that enables resource limited devices to adapt to changing conditions using dynamic software product lines techniques. Therefore, feature models are reduced to a specific hardware context before installing the adaptive mobile application on the device. This reduces the amount of possible configurations that are compatible with the device and, thereby, minimizes the costs and the duration of an adaptation during runtime.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {135–142},
numpages = {8},
keywords = {adaptive systems, context-awareness, dynamic software product lines, feature models},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@article{10.1016/j.jss.2019.05.001,
author = {Kicsi, Andr\'{a}s and Csuvik, Viktor and Vid\'{a}cs, L\'{a}szl\'{o} and Horv\'{a}th, Ferenc and Besz\'{e}des, \'{A}rp\'{a}d and Gyim\'{o}thy, Tibor and Kocsis, Ferenc},
title = {Feature analysis using information retrieval, community detection and structural analysis methods in product line adoption},
year = {2019},
issue_date = {Sep 2019},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {155},
number = {C},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2019.05.001},
doi = {10.1016/j.jss.2019.05.001},
journal = {J. Syst. Softw.},
month = sep,
pages = {70–90},
numpages = {21},
keywords = {Software product line, Feature extraction, Information retrieval, Community detection}
}

@inproceedings{10.1109/ICSE-Companion52605.2021.00123,
author = {Le, Viet-Man},
title = {Group recommendation techniques for feature modeling and configuration},
year = {2021},
publisher = {IEEE Press},
url = {https://doi.org/10.1109/ICSE-Companion52605.2021.00123},
doi = {10.1109/ICSE-Companion52605.2021.00123},
abstract = {In large-scale feature models, feature modeling and configuration processes are highly expected to be done by a group of stakeholders. In this context, recommendation techniques can increase the efficiency of feature-model design and find optimal configurations for groups of stakeholders. Existing studies show plenty of issues concerning feature model navigation support, group members' satisfaction, and conflict resolution. This study proposes group recommendation techniques for feature modeling and configuration on the basis of addressing the mentioned issues.},
booktitle = {Proceedings of the 43rd International Conference on Software Engineering: Companion Proceedings},
pages = {266–268},
numpages = {3},
keywords = {configuration, feature models, group decision making, group-based recommendation, software product line},
location = {Virtual Event, Spain},
series = {ICSE '21}
}

@article{10.1007/s10664-020-09915-7,
author = {Temple, Paul and Perrouin, Gilles and Acher, Mathieu and Biggio, Battista and J\'{e}z\'{e}quel, Jean-Marc and Roli, Fabio},
title = {Empirical assessment of generating adversarial configurations for software product lines},
year = {2021},
issue_date = {Jan 2021},
publisher = {Kluwer Academic Publishers},
address = {USA},
volume = {26},
number = {1},
issn = {1382-3256},
url = {https://doi.org/10.1007/s10664-020-09915-7},
doi = {10.1007/s10664-020-09915-7},
abstract = {Software product line (SPL) engineering allows the derivation of products tailored to stakeholders’ needs through the setting of a large number of configuration options. Unfortunately, options and their interactions create a huge configuration space which is either intractable or too costly to explore exhaustively. Instead of covering all products, machine learning (ML) approximates the set of acceptable products (e.g., successful builds, passing tests) out of a training set (a sample of configurations). However, ML techniques can make prediction errors yielding non-acceptable products wasting time, energy and other resources. We apply adversarial machine learning techniques to the world of SPLs and craft new configurations faking to be acceptable configurations but that are not and vice-versa. It allows to diagnose prediction errors and take appropriate actions. We develop two adversarial configuration generators on top of state-of-the-art attack algorithms and capable of synthesizing configurations that are both adversarial and conform to logical constraints. We empirically assess our generators within two case studies: an industrial video synthesizer (MOTIV) and an industry-strength, open-source Web-app configurator (JHipster). For the two cases, our attacks yield (up to) a 100% misclassification rate without sacrificing the logical validity of adversarial configurations. This work lays the foundations of a quality assurance framework for ML-based SPLs.},
journal = {Empirical Softw. Engg.},
month = jan,
numpages = {49},
keywords = {Software product line, Configurable system, Software variability, Software testing, Machine learning, Quality assurance}
}

@inproceedings{10.1145/2499777.2499781,
author = {Cordy, Maxime and Classen, Andreas and Heymans, Patrick and Schobbens, Pierre-Yves and Legay, Axel},
title = {ProVeLines: a product line of verifiers for software product lines},
year = {2013},
isbn = {9781450323253},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2499777.2499781},
doi = {10.1145/2499777.2499781},
abstract = {Software Product Lines (SPLs) are families of similar software products built from a common set of features. As the number of products of an SPL is potentially exponential in the number of its features, the model checking problem is harder than for single software. A practical way to face this exponential blow-up is to reuse common behaviour between products. We previously introduced Featured Transition Systems (FTS), a mathematical model that serves as a basis for efficient SPL model checking techniques. In this paper, we present ProVeLines, a product line of verifiers for SPLs that incorporates the results of over three years of research on formal verification of SPLs. Being itself a product line, our tool is flexible and extensible, and offers a wide range of solutions for SPL modelling and verification.},
booktitle = {Proceedings of the 17th International Software Product Line Conference Co-Located Workshops},
pages = {141–146},
numpages = {6},
keywords = {features, model checking, software product lines, tool},
location = {Tokyo, Japan},
series = {SPLC '13 Workshops}
}

@inproceedings{10.1145/1944892.1944901,
author = {Oster, Sebastian and Zorcic, Ivan and Markert, Florian and Lochau, Malte},
title = {MoSo-PoLiTe: tool support for pairwise and model-based software product line testing},
year = {2011},
isbn = {9781450305709},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1944892.1944901},
doi = {10.1145/1944892.1944901},
abstract = {Testing Software Product Lines is a very challenging task and approaches like combinatorial testing and model-based testing are frequently used to reduce the effort of testing Software Product Lines and to reuse test artifacts. In this contribution we present a tool chain realizing our MoSo-PoLiTe concept combining combinatorial and model-based testing. Our tool chain contains a pairwise configuration selection component on the basis of a feature model. This component implements an heuristic finding a minimal subset of configurations covering 100% pairwise interaction. Additionally, our tool chain allows the model-based test case generation for each configuration within this generated subset. This tool chain is based on commercial tools since it was developed within industrial cooperations. A non-commercial implementation of pairwise configuration selection is available and an integration with an Open Source model-based testing tool is under development.},
booktitle = {Proceedings of the 5th International Workshop on Variability Modeling of Software-Intensive Systems},
pages = {79–82},
numpages = {4},
keywords = {combinatorial testing, feature model, model-based testing, product lines, pure, reusable test model, variants},
location = {Namur, Belgium},
series = {VaMoS '11}
}

@inproceedings{10.1145/2647908.2655978,
author = {Beuche, Danilo},
title = {Modeling and building product lines with pure::variants},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655978},
doi = {10.1145/2647908.2655978},
abstract = {The paper describes a demonstration of pure::variants, a commercial tool for variant and variability management for product lines. The demonstration shows how flexible product line (PL) architectures can be built by using the modeling capabilities provided by pure::variants [2].},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {130–132},
numpages = {3},
keywords = {feature modelling, software product lines, tools},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1145/3483899.3483907,
author = {Uch\^{o}a, Anderson and Assun\c{c}\~{a}o, Wesley Klewerton Guez and Garcia, Alessandro},
title = {Do Critical Components Smell Bad? An Empirical Study with Component-based Software Product Lines},
year = {2021},
isbn = {9781450384193},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3483899.3483907},
doi = {10.1145/3483899.3483907},
abstract = {Component-based software product line (SPL) consists of a set of software products that share common components. For a proper SPL product composition, each component has to follow three principles: encapsulating a single feature, restricting data access, and be replaceable. However, it is known that developers usually introduce anomalous structures, i.e., code smells, along the implementation of components. These code smells might violate one or more component principles and hinder the SPL product composition. Thus, developers should identify code smells in component-based SPLs, especially those affecting highly interconnected components, which are called critical components. Nevertheless, there is limited evidence of how smelly these critical components tend to be in component-based SPLs. To address this limitation, this paper presents a survey with developers of three SPLs. We inquire these developers about their perceptions of a critical component. Then, we characterize critical components per SPL, and identify nine recurring types of code smells. Finally, we quantitatively assess the smelliness of the critical components. Our results suggest that: (i) critical components are ten times more prone to have code smells than non-critical ones; (ii) the most frequent code smell types affecting critical components violate several component principles together; and (iii) these smell types affect multiple SPL components.},
booktitle = {Proceedings of the 15th Brazilian Symposium on Software Components, Architectures, and Reuse},
pages = {21–30},
numpages = {10},
keywords = {Component-based software product line, empirical study, smell},
location = {Joinville, Brazil},
series = {SBCARS '21}
}

@inproceedings{10.1145/2362536.2362569,
author = {Patzke, Thomas and Becker, Martin and Steffens, Michaela and Sierszecki, Krzysztof and Savolainen, Juha Erik and Fogdal, Thomas},
title = {Identifying improvement potential in evolving product line infrastructures: 3 case studies},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362569},
doi = {10.1145/2362536.2362569},
abstract = {Successful software products evolve continuously to meet the changing stakeholder requirements. For software product lines, an additional challenge is that variabilities, characteristics that vary among products, change as well over time. That challenge must be carefully tackled during the evolution of the product line infrastructure. This is a significant problem for many software development organizations, as practical guidelines on how to evolve core assets, and especially source code, are missing.This paper investigates how to achieve "good enough" variability management during the evolution of variation in software design and implementation assets. As a first contribution, we present a customizable goal-based approach which helps to identify improvement potential in existing core assets to ease evolution. To find concrete ways to improve the product line infrastructure, we list the typical symptoms of variability "code smells" and show how to refine them to root causes, questions, and finally to metrics that can be extracted from large code bases.As a second main contribution, we show how this method was applied to evaluate the reuse quality of three industrial embedded systems. These systems are implemented in C or C++ and use Conditional Compilation as the main variability mechanism. We also introduce the analysis and refactoring tool set that was used in the case studies and discuss the lessons learnt.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {239–248},
numpages = {10},
keywords = {PuLSE-E, goal-based product line measurement, industrial case study, product line code evolution, variability code smells},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/3229345.3229349,
author = {Martins, Gev\~{a} and Veiga, Welington and Campos, Fernanda and Str\"{o}ele, Victor and David, Jos\'{e} Maria N. and Braga, Regina},
title = {Building Educational Games from a Feature Model},
year = {2018},
isbn = {9781450365598},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3229345.3229349},
doi = {10.1145/3229345.3229349},
abstract = {We present BROAD-PLG, a Software Product Line to support the construction of educational games, with a set of features that will integrate the artefact to be developed. The evaluation was based on the development of the infrastructure and the generation of new products. It followed two steps: the development of a game for teaching Logic using the defined features and, in the second step, we describe the game in use in two virtual learning environments - the Moodle (free platform) and youKnow (private platform). For evaluation in a real learning environment the game was wrapped as a service. The results point to the feasibility of using the solution and the set of features for automatic or semi automatic generation of educational games.},
booktitle = {Proceedings of the XIV Brazilian Symposium on Information Systems},
articleno = {3},
numpages = {7},
keywords = {Educational games, software product line, virtual learning environments},
location = {Caxias do Sul, Brazil},
series = {SBSI '18}
}

@inproceedings{10.1145/3106195.3106211,
author = {Garc\'{\i}a-Gal\'{a}n, Jes\'{u}s and Garc\'{\i}a, Jos\'{e} Mar\'{\i}a and Trinidad, Pablo and Fern\'{a}ndez, Pablo},
title = {Modelling and Analysing Highly-Configurable Services},
year = {2017},
isbn = {9781450352215},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3106195.3106211},
doi = {10.1145/3106195.3106211},
abstract = {Since the emergence of XaaS and Cloud Computing paradigms, the number and complexity of available services have been increasing enormously. These services usually offer a plethora of configuration options, which can even include additional services provided as a bundled offer. In this scenario, usual tasks, such as description, discovery and selection, become increasingly complex due to the variability of the decision space. The notion of Highly-Configurable Service (HCS) has been coined to identify such group of services that can be configured and bundled together to perform demanding computing tasks. In this paper we characterize HCSs by means of an abstract model and a text-based, human-readable notation named SYNOPSIS that facilitates the execution of various service tasks. In particular, we validate the usefulness of our model when checking the validity of HCSs descriptions in SYNOPSIS, as well as selecting the optimal configuration with regards to user requirements and preferences by providing a prototype implementation.},
booktitle = {Proceedings of the 21st International Systems and Software Product Line Conference - Volume A},
pages = {114–122},
numpages = {9},
keywords = {Automated Analysis, Configurable Services, Service Modelling, Service Selection, Validity Checking},
location = {Sevilla, Spain},
series = {SPLC '17}
}

@inproceedings{10.1109/COMPSAC.2012.20,
author = {Dayibas, Orcun and Oguztuzun, Halit},
title = {Kutulu: A Domain-Specific Language for Feature-Driven Product Derivation},
year = {2012},
isbn = {9780769547367},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/COMPSAC.2012.20},
doi = {10.1109/COMPSAC.2012.20},
abstract = {Software Product Line Engineering (SPLE) defines processes to facilitate the development of a family of products in a pre-defined market more effectively. Its success depends on implementation of these processes utilizing best practices with proper tool support. This paper describes how to enhance domain design and variation management processes of SPLE with a domain-specific language (DSL), namely "Kutulu". It also introduces novel modeling tools and dependency injection-based realization approach that are well-suited for product derivation in SPL. Our DSL definition, developed tools and their position in the product line context are put forth in this paper.},
booktitle = {Proceedings of the 2012 IEEE 36th Annual Computer Software and Applications Conference},
pages = {105–110},
numpages = {6},
keywords = {Dependency Injection, Domain-specific Language, Feature-Component Binding, Software Product Line, Variability Management},
series = {COMPSAC '12}
}

@inproceedings{10.1145/3350768.3351299,
author = {de Oliveira, Davi Cedraz S. and Bezerra, Carla I. M.},
title = {Development of the Maintainability Index for SPLs Feature Models Using Fuzzy Logic},
year = {2019},
isbn = {9781450376518},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3350768.3351299},
doi = {10.1145/3350768.3351299},
abstract = {The variability of the common features in an Software Product Line (SPL) can be managed by an feature model, an artifact that consist of a tree-shaped diagram, that describe the features identified in the products and the possible relationships between them. Guarantee the quality of the feature model may be essential to ensure that errors do not propagate across all products. The process of evaluating the quality of a product or artifact can be done using measures, which may reflect the characteristics, sub-characteristics or attributes of quality. However, the isolated values of each measure do not allow access to a whole quality of the feature model, since most of the measures cover several specific aspects that are not correlated. In this context, this paper proposes the aggregation of measures in order to evaluate the maintainability of the feature model in SPL. We aim to investigate how to aggregate these measures and access the respective sub-characteristics by means of a single aggregate value that has the same available information as a set of measures. For this, we have used the theory of Fuzzy Logic as a technique for aggregation of these measures. The new aggregate measure represents the maintainability index of a feature models (MIFM) was obtained. Moreover, to evaluate the MIFM, we applied it to a set of models. It was verified that the aggregate measure obtained allows to measure if a feature models has a high or low maintainability index, supporting the domain engineer in the evaluation of the maintenance of the feature model in a faster and more precise way.},
booktitle = {Proceedings of the XXXIII Brazilian Symposium on Software Engineering},
pages = {357–366},
numpages = {10},
keywords = {Feature Models, Fuzzy Logic, Measures, Quality Evaluation, Software Product Line},
location = {Salvador, Brazil},
series = {SBES '19}
}

@inproceedings{10.1145/2791060.2791115,
author = {Beuche, Danilo},
title = {Managing requirements in product lines},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791115},
doi = {10.1145/2791060.2791115},
abstract = {In this paper, we give a brief overview on the tutorial "Managing Requirements in Product Lines".},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {387},
numpages = {1},
keywords = {product lines, requirements, variability},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2362536.2362550,
author = {Seidl, Christoph and Heidenreich, Florian and A\ss{}mann, Uwe},
title = {Co-evolution of models and feature mapping in software product lines},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362550},
doi = {10.1145/2362536.2362550},
abstract = {Software Product Lines (SPLs) are a successful approach to software reuse in the large. Even though tools exist to create SPLs, their evolution is widely unexplored. Evolving an SPL manually is tedious and error-prone as it is hard to avoid unintended side-effects that may harm the consistency of the SPL. The main contribution of this paper is the conceptual basis of a system for the evolution of model-based SPLs, which maintains consistency of models and feature mapping. As further contribution, a novel classification is introduced that distinguishes evolutions by their potential to harm the mapping of an SPL. In addition, multiple remapping operators are presented that can remedy the negative side-effects of evolutions in order to co-evolve the feature mapping. Finally, an implementation of the evolution system in the SPL tool FeatureMapper is provided to demonstrate the capabilities of the presented approach when co-evolving models and feature mapping of an SPL.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {76–85},
numpages = {10},
keywords = {co-evolution, evolution, feature mapping, feature modeling, model transformation, software product lines},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2364412.2364457,
author = {Beuche, Danilo},
title = {Modeling and building software product lines with pure::variants},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364457},
doi = {10.1145/2364412.2364457},
abstract = {The demonstration shows how flexible product line (PL) architectures can be built by using the modeling capabilities provided by pure::variants [2], a commercial tool for SPLD.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {255},
numpages = {1},
keywords = {feature modelling, software product lines, tools},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1109/ICITA.2005.118,
author = {Min, Hyun Gi and Her, Jin Sun},
title = {DREAM: A Practical Product Line Engineering Using Model Driven Architecture},
year = {2005},
isbn = {0769523161},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/ICITA.2005.118},
doi = {10.1109/ICITA.2005.118},
abstract = {Both product line engineering (PLE) and model driven architecture (MDA) are emerging as effective paradigms for building a family of applications in cost effective way. PLE supports this by reusing common assets and MDA supports this by generating applications on diverse platforms through model transformation. However, both technologies have shortcomings to be a comprehensive methodology. The instructions and artifacts of PLE processes are not yet precisely defined. Especially, instructions for detailed design considering implementation platforms are not yet provided. Careful observations on PLE and MDA reveal that they complement each other by overcoming their limitations. We find a possibility of seamless integration, resulting in a comprehensive commercial-level methodology. In this paper, we propose a practical product line methodology, DREAM, which adopts key activities of PLE and model transformation feature of MDA. By applying the proposed methodology, it becomes possible to efficiently and semi-automatically develop a large number of applications that vary on behavior and implementation platform.},
booktitle = {Proceedings of the Third International Conference on Information Technology and Applications (ICITA'05) Volume 2 - Volume 02},
pages = {70–75},
numpages = {6},
series = {ICITA '05}
}

@inproceedings{10.1145/2019136.2019190,
author = {Beuche, Danilo},
title = {Modeling and building software product lines with pure::variants},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019190},
doi = {10.1145/2019136.2019190},
abstract = {The demonstration shows how flexible product line (PL) architectures can be built by using the modeling capabilities provided by pure::variants [2], a commercial tool for SPLD.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {46},
numpages = {1},
keywords = {feature modelling, software product lines, tools},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/2491627.2493898,
author = {Beuche, Danilo},
title = {Managing requirements in product lines},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2493898},
doi = {10.1145/2491627.2493898},
abstract = {The tutorial covers theory and practice of requirements management in product lines.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {276},
numpages = {1},
keywords = {reuquirements, reuse, software product lines},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2019136.2019150,
author = {Serajzadeh, Hadi and Shams, Fereidoon},
title = {The application of swarm intelligence in service-oriented product lines},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019150},
doi = {10.1145/2019136.2019150},
abstract = {Changing markets and environments has made the ability to rapidly adapt to these changes a necessity in software systems. However the costs of changing and adapting systems to new requirements still remains an unsolved issue. In this context service-oriented software product lines were introduced with the aim to combine the reusability of software product line with the flexibility of service-oriented architecture. Although this approach helps build flexible software systems with high levels of reuse, certain issues are raised. The main issue is the complexity that a service-oriented product line will face. Developing systems from internal and external assets, taking into consideration the variety and number of these assets, can cause problems in deciding which asset is best suited for the system. To help solve these issues we propose the use of approaches based on artificial intelligence. In this paper we show how swarm intelligence can be used in service-oriented product lines to reduce complexity and find optimal solutions for the development of software systems. We also present an example of the application of swarm intelligence in finding the optimal product for a service-oriented product line.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {12},
numpages = {7},
keywords = {optimization, service-oriented product line, swarm intelligence},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/3474624.3476016,
author = {Bezerra, Carla and Lima, Rafael and Silva, Publio},
title = {DyMMer 2.0: A Tool for Dynamic Modeling and Evaluation of Feature Model},
year = {2021},
isbn = {9781450390613},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3474624.3476016},
doi = {10.1145/3474624.3476016},
abstract = {Managing dynamic variability has motivated several researchers to combine Dynamic Software Product Lines (DSPLs) practices with runtime variability mechanisms. By combining these approaches, a DSPL acquires important features, ranging from the ability to reconfigure by changing the context, adding or removing features, crash recovery, and re-adaptation based on changes in the model’s features. Feature model (FM) is an important artifact of a DPSL and there is a lack of tools that support the modeling of this artifact. We have extended the DyMMer tool for modeling FM of DSPLs from an adaptation mechanism based on MAPE-K to solve this problem. We migrated the DyMMer tool to a web version and incorporated new features: (i) modeling of FMs from SPLs and DSPLs, (ii) development of an adaptation mechanism for FM of DSPLs, (iii) repository of FMs, (iv) inclusion of thresholds for measures, and (v) user authentication. We believe that this tool is useful for research in the area of DSPLs, and also for dynamic domain modeling and evaluation. Video: https://youtu.be/WVHW6bI8ois},
booktitle = {Proceedings of the XXXV Brazilian Symposium on Software Engineering},
pages = {121–126},
numpages = {6},
keywords = {Dynamic Software Product Line, Feature Model, Modeling},
location = {Joinville, Brazil},
series = {SBES '21}
}

@inproceedings{10.1145/2362536.2362560,
author = {Lettner, Daniela and Vierhauser, Michael and Rabiser, Rick and Gr\"{u}nbacher, Paul},
title = {Supporting end users with business calculations in product configuration},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362560},
doi = {10.1145/2362536.2362560},
abstract = {Business calculations like break-even, return on investment, or cost are essential in many domains to support decision making while configuring products. For instance, customers and sales people need to estimate and compare the business value of different product variants. Some product line approaches provide initial support, e.g., by defining quality attributes in relation to features. However, an approach that allows domain engineers to easily define business calculations together with variability models is still lacking. In product configuration, calculation results need to be instantly presented to end users after making configuration choices. Further, due to the often high number of calculations, the presentation of calculation results to end users can be challenging. These challenges cannot be addressed by integrating off-the-shelf applications performing the calculations with product line tools. We thus present an approach based on dedicated calculation models that are related to variability models. Our approach seamlessly integrates business calculations with product configuration and provides support for formatting calculations and calculation results. We use the DOPLER tool suite to deploy calculations together with variability models to end users in product configuration. We evaluate the expressiveness and practical relevance of the approach by investigating the development of business calculations for 15 product lines from the domain of industrial automation.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {171–180},
numpages = {10},
keywords = {business calculations, product configuration, variability models},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2019136.2019141,
author = {Ryssel, Uwe and Ploennigs, Joern and Kabitzsch, Klaus},
title = {Extraction of feature models from formal contexts},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019141},
doi = {10.1145/2019136.2019141},
abstract = {For economical reasons, the creation of feature oriented software should include previously created products and should not be done from scratch. To speed up this migration process, feature models have to be generated automatically from existing product variants. This work presents an approach based on formal concept analysis that analyzes incidence matrices containing matching relations as input and creates feature models as output. The resulting feature models describe exactly the given input variants. The introduced novel optimized approach performs this transformation in reasonable time even for large product libraries.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {4},
numpages = {8},
keywords = {feature models, formal concept analysis},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/1509239.1509258,
author = {Bonif\'{a}cio, Rodrigo and Borba, Paulo},
title = {Modeling scenario variability as crosscutting mechanisms},
year = {2009},
isbn = {9781605584423},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1509239.1509258},
doi = {10.1145/1509239.1509258},
abstract = {Variability management is a common challenge for Software Product Line (SPL) adoption, since developers need suitable mechanisms for specifying and implementing variability that occurs at different SPL artifacts (requirements, design, implementation, and test). In this paper, we present a novel approach for use case scenario variability management, enabling a better separation of concerns between languages used to manage variabilities and languages used to specify use case scenarios. The result is that both representations can be understood and evolved in a separate way. We achieve such a goal by modeling variability management as a crosscutting phenomenon, for the reason that artifacts such as feature models, product configurations, and configuration knowledge crosscut each other with respect to each specific SPL member. After applying our approach to different case studies, we achieved a better feature modularity and scenario cohesion.},
booktitle = {Proceedings of the 8th ACM International Conference on Aspect-Oriented Software Development},
pages = {125–136},
numpages = {12},
keywords = {requirements models, software product line, variability management},
location = {Charlottesville, Virginia, USA},
series = {AOSD '09}
}

@inproceedings{10.1145/3459955.3460604,
author = {Chika Eleonu, Henry},
title = {A Framework and Tool Support for Managing a Family of Business Process Variants},
year = {2021},
isbn = {9781450389136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3459955.3460604},
doi = {10.1145/3459955.3460604},
abstract = {Business organizations maintain business processes with multiple variants because of varied business requirements of which the support of these multiple business process variants constitutes a big challenge. BPPLE tool demonstration presents an extension of Eclipse BPMN modeller to cope with the modelling, and customization of business processes at build time and run time to compose the business process variants it may have. BPPLE tool is based on the Business Process Product Line Engineering (BPPLE) approach, our proposed approach for managing a family of business process variants. We have applied BPPLE in the scenarios such as the student registration in a higher education institution. Tests carried out showed that BPPLE tool enables the customization of business process models or instances to compose business process variant models or instances, respectively.},
booktitle = {Proceedings of the 4th International Conference on Information Science and Systems},
pages = {81–89},
numpages = {9},
keywords = {Business process management, Business process modelling, Business process modelling notation (BPMN), Business rules, Software engineering, Software product line},
location = {Edinburgh, United Kingdom},
series = {ICISS '21}
}

@inproceedings{10.1145/2364412.2364450,
author = {da Silva, Ivonei Freitas},
title = {An agile approach for software product lines scoping},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364450},
doi = {10.1145/2364412.2364450},
abstract = {Agile principles and practices have been applied in some Software Product Lines (SPL) activities such as scoping, requirements, tests, and architecture to address benefits from both paradigms. Agile principles and practices can be appropriate to scenarios with frequent changes decreasing effort, improving the communication and collaboration among the stakeholders, and adapting easier to volatilities of technology, domain, or requirements when performing the SPL activities. This paper describes an initial approach for SPL scoping combined with Agile principles and practices.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {225–228},
numpages = {4},
keywords = {Agile, features, scoping, software product lines},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2701319.2701333,
author = {Weber, Jens H. and Katahoire, Anita and Price, Morgan},
title = {Uncovering Variability Models for Software Ecosystems from Multi-Repository Structures},
year = {2015},
isbn = {9781450332736},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2701319.2701333},
doi = {10.1145/2701319.2701333},
abstract = {Variability is a significant source of complexity in many large-scale software systems. Software variability must be managed in order to effectively tame the arising complexity. Consequently, variability management processes are at the heart of current software product line engineering practices. However, legacy software systems exist that have not been developed with such practices. Moreover, an increasing amount of software is developed in large, fragmented communities, also referred to as software ecosystems. Variability in such systems is often not explicitly managed and causes significant difficulties during software maintenance and evolution. Methods and tools for uncovering and explicitly managing this variability have been subject to ongoing research. This paper presents our research in progress of empirically studying the application and combination of such methods in the context of real-world industrial case study in the health care domain.},
booktitle = {Proceedings of the 9th International Workshop on Variability Modelling of Software-Intensive Systems},
pages = {103–108},
numpages = {6},
keywords = {multi-repository software, software ecosystems, software product lines, variability management},
location = {Hildesheim, Germany},
series = {VaMoS '15}
}

@article{10.1016/j.jss.2011.04.020,
author = {Hanssen, Geir K.},
title = {A longitudinal case study of an emerging software ecosystem: Implications for practice and theory},
year = {2012},
issue_date = {July, 2012},
publisher = {Elsevier Science Inc.},
address = {USA},
volume = {85},
number = {7},
issn = {0164-1212},
url = {https://doi.org/10.1016/j.jss.2011.04.020},
doi = {10.1016/j.jss.2011.04.020},
abstract = {Software ecosystems is an emerging trend within the software industry, implying a shift from closed organizations and processes towards open structures, where actors external to the software development organization are becoming increasingly involved in development. This forms an ecosystem of organizations that are related through the shared interest in a software product, leading to new opportunities and new challenges to the industry and its organizational environment. To understand why and how this change occurs, we have followed the development of a software product line organization for a period of approximately five years. We have studied their change from a waterfall-like approach, via agile software product line engineering, towards an emerging software ecosystem. We discuss implications for practice, and propose a nascent theory on software ecosystems. We conclude that the observed change has led to an increase in collaboration across (previously closed) organizational borders, and to the development of a shared value consisting of two components: the technology (the product line, as an extensible platform), and the business domain it supports. Opening up both the technical interface of the product and the organizational interfaces are key enablers of such a change.},
journal = {J. Syst. Softw.},
month = jul,
pages = {1455–1466},
numpages = {12},
keywords = {Agile software development, Longitudinal case study, Software ecosystems, Software product line engineering}
}

@inproceedings{10.1145/2647908.2655960,
author = {Capilla, Rafael},
title = {From feature modeling to context variability modeling},
year = {2014},
isbn = {9781450327398},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2647908.2655960},
doi = {10.1145/2647908.2655960},
abstract = {In this invited talk we will draw the evolution from feature modeling techniques to context variability models and its importance for Dynamic Software Product Lines approaches and for supporting dynamic variability as well.},
booktitle = {Proceedings of the 18th International Software Product Line Conference: Companion Volume for Workshops, Demonstrations and Tools - Volume 2},
pages = {13},
numpages = {1},
keywords = {context variability, dynamic software product lines, dynamic variability, feature model},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.1007/978-3-662-45234-9_24,
author = {Devroey, Xavier and Perrouin, Gilles and Legay, Axel and Cordy, Maxime and Schobbens, Pierre-Yves and Heymans, Patrick},
title = {Coverage Criteria for Behavioural Testing of Software Product Lines},
year = {2014},
isbn = {9783662452332},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg},
url = {https://doi.org/10.1007/978-3-662-45234-9_24},
doi = {10.1007/978-3-662-45234-9_24},
abstract = {Featured Transition Systems FTS is a mathematical structure to represent the behaviour of software product line in a concise way. The combination of the well-known transition systems approach to formal behavioural modelling with feature expressions was pivotal to the design of efficient verification approaches. Such approaches indeed avoid to consider products' behaviour independently, leading to often exponential savings. Building on this successful structure, we lay the foundations of model-based testing approach to SPLs. We define several FTS-aware coverage criteria and report on our experience combining FTS with usage-based testing for configurable websites.},
booktitle = {Part I of the Proceedings of the 6th International Symposium on Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change - Volume 8802},
pages = {336–350},
numpages = {15},
keywords = {Coverage Criteria, Model Based Testing, Software Product Line Engineering}
}

@inproceedings{10.5555/1753235.1753259,
author = {Ali Babar, Muhammad and Ihme, Tuomas and Pikkarainen, Minna},
title = {An industrial case of exploiting product line architectures in agile software development},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {There has been an increased interest in exploring the ways of integrating agile software development and software product line approaches. Both approaches share several common goals, which provide the motivation for integrating them. However, there has been little empirical research for understanding how these approaches can be integrated in industrial settings. This paper presents the findings from a case study of a software development company that has successfully integrated software product line architecture and agile software development practices. The company's processes are described based on product line and agile practices. The results are expected to provide useful insights into the mechanics of exploiting product line practices in agile software development despite apparent philosophical clashes between the two approaches.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {171–179},
numpages = {9},
keywords = {agile approaches, empirical research, software architecture, software product lines},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.1145/2648511.2648530,
author = {Th\"{u}m, Thomas and Meinicke, Jens and Benduhn, Fabian and Hentschel, Martin and von Rhein, Alexander and Saake, Gunter},
title = {Potential synergies of theorem proving and model checking for software product lines},
year = {2014},
isbn = {9781450327404},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2648511.2648530},
doi = {10.1145/2648511.2648530},
abstract = {The verification of software product lines is an active research area. A challenge is to efficiently verify similar products without the need to generate and verify them individually. As solution, researchers suggest family-based verification approaches, which either transform compile-time into runtime variability or make verification tools variability-aware. Existing approaches either focus on theorem proving, model checking, or other verification techniques. For the first time, we combine theorem proving and model checking to evaluate their synergies for product-line verification. We provide tool support by connecting five existing tools, namely FeatureIDE and FeatureHouse for product-line development, as well as KeY, JPF, and OpenJML for verification of Java programs. In an experiment, we found the synergy of improved effectiveness and efficiency, especially for product lines with few defects. Further, we experienced that model checking and theorem proving are more efficient and effective if the product line contains more defects.},
booktitle = {Proceedings of the 18th International Software Product Line Conference - Volume 1},
pages = {177–186},
numpages = {10},
keywords = {design by contract, family-based verification, feature-based specification, feature-oriented contracts, model checking, software product lines, theorem proving, variability encoding},
location = {Florence, Italy},
series = {SPLC '14}
}

@inproceedings{10.5555/1753235.1753254,
author = {Parra, Carlos and Blanc, Xavier and Duchien, Laurence},
title = {Context awareness for dynamic service-oriented product lines},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {This paper presents a Context-Aware Dynamic Software Product Line (DSPL) for building service oriented applications and adapting them at runtime in accordance with their using context. This DSPL, named CAPucine for Context-Aware Service-Oriented Product Line is based on two different processes for product derivation. The first process uses assets that represent features of the product family. The assets, represented as models, get composed and transformed in order to generate the product. The second process relates to dynamic adaptation. This process introduces context-aware assets that operate at runtime. These context-aware assets contain three kinds of data: the context when the assets can be modified, the place where the assets must be applied and the change that must be performed. The realization of these context-aware assets combines two runtime platforms. On the one hand,COSMOS is a context-aware framework connected to the environment by the use of sensors. On the other hand FraSCAti is a Service Component Architecture (SCA) platform with dynamic properties that enables to bind and unbind components at runtime. CAPucine allows designing and processing context-aware applications based on an SCA platform which is dynamic, introspectable, and reconfigurable in accordance with the context environment.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {131–140},
numpages = {10},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.1145/2019136.2019145,
author = {G\"{u}nther, Sebastian and Fischer, Marco},
title = {Supporting program variant generation and feature files in rbFeatures},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019145},
doi = {10.1145/2019136.2019145},
abstract = {To enhance software variability, feature-oriented programming approaches can be used to identify, express, and compose programs with different behavior. One implementation for feature-oriented programming is rbFeatures. This Ruby-based implementation allows to define features as first-class entities, uses semantic annotations to indicate where coarse or fine-grained feature-specific source code is expressed, and allows runtime modification of the program behavior. In this paper, we add two more capabilities to rbFeatures. First, the Variant Generator uses the annotations in a preprocessor style to generate program variants with a fixed behavior. Both Ruby and non-Ruby files are processed, and all source code that does not belong to the current feature configuration is pruned. Second, the Feature Aggregator helps to better edit features that are scattered over different artifacts of a program. It extracts all feature-specific code from the codebase, adds metadata, and allows the generated file to be edited by developers and the changes to be merged back to the codebase. We explain the concept and implementation of both tools, and illustrate the applicability with the Redmine project management application.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {8},
numpages = {8},
keywords = {feature-oriented programming, software product lines},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/2019136.2019143,
author = {Oster, Sebastian and Zink, Marius and Lochau, Malte and Grechanik, Mark},
title = {Pairwise feature-interaction testing for SPLs: potentials and limitations},
year = {2011},
isbn = {9781450307895},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2019136.2019143},
doi = {10.1145/2019136.2019143},
abstract = {A fundamental problem of testing Software Product Lines (SPLs) is that variability enables the production of a large number of instances and it is difficult to construct and run test cases even for SPLs with a small number of variable features. Interacting features is a foundation of a fault model for SPLs, where faults are likely to be revealed at execution points where features exchange information with other features or influence one another. Therefore, a test adequacy criterion is to cover as many interactions among different features as possible, thus increasing the probability of finding bugs. Our approach combines a combinatorial designs algorithm for pairwise feature generation with model-based testing to reduce the size of the SPL required for comprehensive coverage of interacting features. We implemented our approach and applied it to an SPL from the automotive domain provided by one of our industrial partners. The results suggest that with our approach higher coverage of feature interactions is achieved at a fraction of cost when compared with a baseline approach of testing all feature interactions.},
booktitle = {Proceedings of the 15th International Software Product Line Conference, Volume 2},
articleno = {6},
numpages = {8},
keywords = {combinatorial testing, feature interaction, feature model, model-based testing, product lines, reusable test model},
location = {Munich, Germany},
series = {SPLC '11}
}

@inproceedings{10.1145/2791060.2791096,
author = {F\'{e}derle, \'{E}dipo Luis and do Nascimento Ferreira, Thiago and Colanzi, Thelma Elita and Vergilio, Silvia Regina},
title = {OPLA-tool: a support tool for search-based product line architecture design},
year = {2015},
isbn = {9781450336130},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2791060.2791096},
doi = {10.1145/2791060.2791096},
abstract = {The Product Line Architecture (PLA) design is a complex task, influenced by many factors such as feature modularization and PLA extensibility, which are usually evaluated according to different metrics. Hence, the PLA design is an optimization problem and problems like that have been successfully solved in the Search-Based Software Engineering (SBSE) area, by using metaheuristics such as Genetic Algorithm. Considering this fact, this paper introduces a tool named OPLA-Tool, conceived to provide computer support to a search-based approach for PLA design. OPLA-Tool implements all the steps necessary to use multi-objective optimization algorithms, including PLA transformations and visualization through a graphical interface. OPLA-Tool receives as input a PLA at the class diagram level, and produces a set of good alternative diagrams in terms of cohesion, feature modularization and reduction of crosscutting concerns.},
booktitle = {Proceedings of the 19th International Conference on Software Product Line},
pages = {370–373},
numpages = {4},
keywords = {multi-objective evolutionary algorithms, product line architecture design, search-based software engineering},
location = {Nashville, Tennessee},
series = {SPLC '15}
}

@inproceedings{10.1145/2364412.2364431,
author = {Kumaki, Kentaro and Tsuchiya, Ryosuke and Washizaki, Hironori and Fukazawa, Yoshiaki},
title = {Supporting commonality and variability analysis of requirements and structural models},
year = {2012},
isbn = {9781450310956},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2364412.2364431},
doi = {10.1145/2364412.2364431},
abstract = {The commonality and variability analysis of legacy software assets requires high costs in terms of personnel and time in extractive core asset development. We propose a technique for supporting the commonality and variability analysis, targeting the requirements and structural models of legacy software assets for the development of a feature diagram and a product line architecture (PLA). We analyze the commonality and variability of the sentences as requirements and classes as structural models by calculating similarities based on a vector space model. By using our technique, the costs in terms of personnel and time required for the analysis of legacy software assets can be reduced.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 2},
pages = {115–118},
numpages = {4},
keywords = {feature diagram, product line architecture, traceability},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.1145/2491627.2491651,
author = {Nakagawa, Elisa Yumi and Becker, Martin and Maldonado, Jos\'{e} Carlos},
title = {Towards a process to design product line architectures based on reference architectures},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491651},
doi = {10.1145/2491627.2491651},
abstract = {Software Product Line (SPL) has arisen as an approach for developing a family of software-intensive systems at lower costs, within shorter time, and with higher quality. In particular, SPL is supported by a product line architecture (sometimes also referred to as reference architecture) that captures the architectures of a product family. From another perspective, a special type of architecture that contains knowledge about a specific domain has been increasingly investigated, resulting in the research area of Reference Architecture. In spite of the positive impact of this type of architecture on reuse and productivity, the use of the knowledge contained in existing reference architectures in order to develop SPL has not been widely explored yet. The main contribution of this paper is to present a process, named ProSA-RA2PLA, that systematizes the use of reference architectures for building product line architectures. To illustrate the application of this process, we have built a product line architecture for an SPL of software testing tools using a reference architecture of that domain. Based on initial results, we have observed that benefits can be achieved, mainly regarding improvement in reuse and productivity to develop SPL.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {157–161},
numpages = {5},
keywords = {knowledge sharing, reference architecture},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1145/2491627.2491628,
author = {Passos, Leonardo and Guo, Jianmei and Teixeira, Leopoldo and Czarnecki, Krzysztof and W\k{a}sowski, Andrzej and Borba, Paulo},
title = {Coevolution of variability models and related artifacts: a case study from the Linux kernel},
year = {2013},
isbn = {9781450319683},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2491627.2491628},
doi = {10.1145/2491627.2491628},
abstract = {Variability-aware systems are subject to the coevolution of variability models and related artifacts. Surprisingly, little knowledge exists to understand such coevolution in practice. This shortage is directly reflected in existing approaches and tools for variability management, as they fail to provide effective support for such a coevolution. To understand how variability models and related artifacts coevolve in a large and complex real-world variability-aware system, we inspect over 500 Linux kernel commits spanning almost four years of development. We collect a catalog of evolution patterns, capturing the coevolution of the Linux kernel variability model, Makefiles, and C source code. Further, we extract general findings to guide further research and tool development.},
booktitle = {Proceedings of the 17th International Software Product Line Conference},
pages = {91–100},
numpages = {10},
keywords = {Linux, catalog, evolution, patterns, variability},
location = {Tokyo, Japan},
series = {SPLC '13}
}

@inproceedings{10.1109/CSMR.2013.67,
author = {Lopez-Herrejon, Roberto E. and Egyed, Alexander},
title = {SBSE4VM: Search Based Software Engineering for Variability Management},
year = {2013},
isbn = {9780769549484},
publisher = {IEEE Computer Society},
address = {USA},
url = {https://doi.org/10.1109/CSMR.2013.67},
doi = {10.1109/CSMR.2013.67},
abstract = {SBSE4VM is an ongoing Lise Meitner Fellowship project sponsored by the Austrian Science Fund (FWF) that runs for two years. The driving goal of the project is to explore the application of Search Based Software Engineering techniques to reverse engineer, evolve, and fix inconsistencies in systems with variability.},
booktitle = {Proceedings of the 2013 17th European Conference on Software Maintenance and Reengineering},
pages = {441–444},
numpages = {4},
keywords = {Feature Orientation, Fixing Inconsistencies, Product Line Evolution, Search Based Software Engineering, Software Product Lines},
series = {CSMR '13}
}

@inproceedings{10.1145/3427423.3427450,
author = {Haris, M Syauqi and Kurniawan, Tri Astoto},
title = {Automated requirement sentences extraction from software requirement specification document},
year = {2021},
isbn = {9781450376051},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3427423.3427450},
doi = {10.1145/3427423.3427450},
abstract = {In the requirement reuse and natural language document-based Software Product Line (SPL) domain analysis, requirement sentences of the requirement document are the primary concern. Most studies conducted in this research area have document preprocessing stage in their methods that is a manual process to separate requirement sentences and non-requirement sentences from the document. This manual labor process might be tedious and error-prone since it will need much time and expert intervention to make this process completely done. In this paper, we present a method to automate requirement sentence extraction from the Software Requirement Specification (SRS) document by leveraging Natural Language Processing (NLP) approach and requirement boilerplate sentence patterns. Conducted experiments in this research show this method has such accuracy from 64% to 100% on precision value and recall value in the range of 64% to 89%.},
booktitle = {Proceedings of the 5th International Conference on Sustainable Information Engineering and Technology},
pages = {142–147},
numpages = {6},
keywords = {domain analysis, natural language processing, requirement boilerplate, software product line, software requirement reuse},
location = {Malang, Indonesia},
series = {SIET '20}
}

@inproceedings{10.1145/2362536.2362556,
author = {Nunes, Camila and Garcia, Alessandro and Lucena, Carlos and Lee, Jaejoon},
title = {History-sensitive heuristics for recovery of features in code of evolving program families},
year = {2012},
isbn = {9781450310949},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2362536.2362556},
doi = {10.1145/2362536.2362556},
abstract = {A program family might degenerate due to unplanned changes in its implementation, thus hindering the maintenance of family members. This degeneration is often induced by feature code that is changed individually in each member without considering other family members. Hence, as a program family evolves over time, it might no longer be possible to distinguish between common and variable features. One of the imminent activities to address this problem is the history-sensitive recovery of program family's features in the code. This recovery process encompasses the analysis of the evolution history of each family member in order to classify the implementation elements according to their variability nature. In this context, this paper proposes history-sensitive heuristics for the recovery of features in code of degenerate program families. Once the analysis of the family history is carried out, the feature elements are structured as Java project packages; they are intended to separate those elements in terms of their variability degree. The proposed heuristics are supported by a prototype tool called RecFeat. We evaluated the accuracy of the heuristics in the context of 33 versions of 2 industry program families. They presented encouraging results regarding recall measures that ranged from 85% to 100%; whereas the precision measures ranged from 71% to 99%.},
booktitle = {Proceedings of the 16th International Software Product Line Conference - Volume 1},
pages = {136–145},
numpages = {10},
keywords = {feature recovery, heuristics, program families, software evolution},
location = {Salvador, Brazil},
series = {SPLC '12}
}

@inproceedings{10.5555/1753235.1753243,
author = {Savolainen, Juha and Bosch, Jan and Kuusela, Juha and M\"{a}nnist\"{o}, Tomi},
title = {Default values for improved product line management},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {Many companies apply software product lines based on explicit variability management. These product lines have existed for more than ten years. While research has progressed during that time and industrial experiences have been extensively reported, there seems to still be a gap between the industrial practice and research with respect to explicit software variability management. In this paper, we explain how commonality is managed in industry; how default values can be used to gain control over expanding scope and near-commonality; and discuss how evolution of default values indicate potential problems in industrial product lines. In addition, we explain what corrective actions can be taken to alleviate the identified problems.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {51–60},
numpages = {10},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

@inproceedings{10.5555/1753235.1753267,
author = {Mendonca, Marcilio and W\k{a}sowski, Andrzej and Czarnecki, Krzysztof},
title = {SAT-based analysis of feature models is easy},
year = {2009},
publisher = {Carnegie Mellon University},
address = {USA},
abstract = {Feature models are a popular variability modeling notation used in product line engineering. Automated analyses of feature models, such as consistency checking and interactive or offline product selection, often rely on translating models to propositional logic and using satisfiability (SAT) solvers.Efficiency of individual satisfiability-based analyses has been reported previously. We generalize and quantify these studies with a series of independent experiments. We show that previously reported efficiency is not incidental. Unlike with the general SAT instances, which fall into easy and hard classes, the instances induced by feature modeling are easy throughout the spectrum of realistic models. In particular, the phenomenon of phase transition is not observed for realistic feature models.Our main practical conclusion is a general encouragement for researchers to continued development of SAT-based methods to further exploit this efficiency in future.},
booktitle = {Proceedings of the 13th International Software Product Line Conference},
pages = {231–240},
numpages = {10},
location = {San Francisco, California, USA},
series = {SPLC '09}
}

