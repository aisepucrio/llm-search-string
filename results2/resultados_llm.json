{
    "gemma3:12b": [
        {
            "id": 0,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"product line\" OR \"feature-oriented programming\") AND (\"non-functional properties\" OR \"performance\" OR \"footprint\" OR \"energy\" OR \"quality attributes\" OR \"optimization\" OR \"variability management\") AND (\"machine learning\" OR \"ML\" OR \"artificial intelligence\" OR \"AI\" OR \"data analysis\" OR \"predictive modeling\")",
            "execution_time": 58.33
        },
        {
            "id": 1,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"product line\" OR \"variability management\" OR \"feature-based development\") AND (\"non-functional properties\" OR \"NFP\" OR \"quality attributes\" OR \"performance\" OR \"size\" OR \"binary size\" OR \"guarantees\" OR \"quality of service\" OR \"QoS\") AND (\"measurement\" OR \"metrics\" OR \"assessment\" OR \"evaluation\" OR \"analysis\")",
            "execution_time": 27.02
        },
        {
            "id": 2,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\" OR \"neural network\" OR \"PNN\" OR \"CART\" OR \"J48\" OR \"data mining\") AND (\"software defect\" OR \"defect prediction\" OR \"fault prediction\" OR \"bug prediction\" OR \"fault detection\" OR \"error prediction\") AND (\"source code\" OR \"code metrics\" OR \"software project\" OR \"project management\")",
            "execution_time": 25.98
        },
        {
            "id": 3,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\" OR \"classification\" OR \"learning\") AND (\"product line\" OR \"product-line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\" OR \"configuration management\" OR \"feature selection\") AND (\"constraint\" OR \"constraints\" OR \"rules\" OR \"restrictions\" OR \"limitations\") AND (\"oracle\" OR \"validation\" OR \"verification\" OR \"assessment\" OR \"evaluation\")",
            "execution_time": 28.98
        },
        {
            "id": 4,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "answer": "(\"configurable system\" OR \"configurable systems\" OR \"product line\" OR \"product lines\" OR \"software product line\" OR \"SPL\") AND (\"performance prediction\" OR \"performance modeling\" OR \"performance evaluation\" OR \"performance analysis\") AND (\"sampling\" OR \"sample selection\" OR \"subset selection\" OR \"reduced set\") AND (\"feature\" OR \"features\" OR \"variability\")",
            "execution_time": 22.12
        },
        {
            "id": 5,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "answer": "(\"software product line\" OR SPL OR \"product line engineering\" OR \"product family\") AND (\"non-functional properties\" OR \"quality attributes\" OR performance OR footprint OR energy OR efficiency OR \"quality of service\" OR QoS) AND (\"optimization\" OR \"optimization techniques\" OR \"performance tuning\" OR \"trade-off analysis\") AND (\"variability management\" OR \"feature engineering\" OR \"configuration management\")",
            "execution_time": 26.18
        },
        {
            "id": 6,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"product family\") AND (\"non-functional properties\" OR \"quality attributes\" OR \"performance\" OR \"reliability\" OR \"security\" OR \"maintainability\" OR \"scalability\" OR \"usability\" OR \"efficiency\") AND (\"measurement\" OR \"metrics\" OR \"evaluation\" OR \"assessment\" OR \"analysis\")",
            "execution_time": 22.63
        },
        {
            "id": 7,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\" OR \"neural network\" OR \"classification\" OR \"prediction\") AND (\"software defect\" OR \"defect prediction\" OR \"fault prediction\" OR \"bug prediction\" OR \"software quality\" OR \"fault detection\" OR \"error prediction\")",
            "execution_time": 19.49
        },
        {
            "id": 8,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\" OR \"classification\" OR \"learning\") AND (\"product line\" OR \"product-line\" OR \"SPL\" OR \"product line engineering\" OR \"product family\" OR \"variability management\" OR \"configuration management\" OR \"software variants\") AND (\"constraint\" OR \"constraints\" OR \"rules\" OR \"restrictions\" OR \"limitations\" OR \"dependencies\")",
            "execution_time": 25.04
        },
        {
            "id": 9,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "answer": "(\"configurable systems\" OR \"product family\" OR \"product line\" OR \"variant generation\" OR \"system variants\" OR \"feature combinations\") AND (\"performance prediction\" OR \"performance modeling\" OR \"performance evaluation\" OR \"system performance\" OR \"runtime prediction\") AND (\"sampling\" OR \"sample selection\" OR \"data sampling\" OR \"subset selection\" OR \"experimental design\")",
            "execution_time": 20.81
        },
        {
            "id": 10,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "answer": "(\"software product line\" OR SPL OR \"product line engineering\" OR \"product family\" OR \"variant management\" OR \"variability management\" OR \"feature-oriented programming\") AND (\"non-functional properties\" OR \"quality attributes\" OR \"performance\" OR \"footprint\" OR \"energy consumption\" OR \"scalability\" OR \"reliability\" OR \"maintainability\" OR \"usability\" OR \"security\") AND (\"optimization\" OR \"optimization techniques\" OR \"performance tuning\" OR \"trade-off analysis\" OR \"quality optimization\") AND (\"measurement\" OR \"assessment\" OR \"evaluation\" OR \"profiling\" OR \"benchmarking\") AND (\"feature selection\" OR \"variant derivation\" OR \"configuration\" OR \"customization\") AND (\"case studies\" OR \"application domains\" OR \"real-world applications\")",
            "execution_time": 54.33
        },
        {
            "id": 11,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"product family\" OR \"software variants\" OR \"variant management\") AND (\"non-functional properties\" OR \"quality attributes\" OR \"performance\" OR \"reliability\" OR \"security\" OR \"usability\" OR \"maintainability\" OR \"scalability\" OR \"efficiency\" OR \"binary size\") AND (\"measurement\" OR \"metrics\" OR \"assessment\" OR \"evaluation\" OR \"analysis\" OR \"testing\" OR \"validation\") AND (\"configuration\" OR \"derivation\" OR \"generation\" OR \"customization\" OR \"adaptation\") AND (\"software modules\" OR \"code units\" OR \"components\" OR \"artifacts\")",
            "execution_time": 40.47
        },
        {
            "id": 12,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\" OR \"neural network\" OR \"deep learning\" OR \"classification\" OR \"prediction\" OR \"pattern recognition\") AND (\"software defect\" OR \"defect prediction\" OR \"fault prediction\" OR \"bug prediction\" OR \"fault detection\" OR \"error prediction\" OR \"software quality\" OR \"code quality\") AND (\"source code\" OR \"codebase\" OR \"software project\" OR \"software development\" OR \"code analysis\" OR \"software metrics\" OR \"code metrics\") AND (\"feature selection\" OR \"variable selection\" OR \"attribute selection\" OR \"dimensionality reduction\" OR \"importance ranking\") AND (\"accuracy\" OR \"sensitivity\" OR \"specificity\" OR \"performance\" OR \"effectiveness\")",
            "execution_time": 45.7
        },
        {
            "id": 13,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\" OR \"data mining\" OR \"artificial intelligence\" OR \"AI\" OR \"predictive modeling\") AND (\"product line\" OR \"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\" OR \"variant generation\" OR \"configuration management\" OR \"feature engineering\") AND (\"constraint\" OR \"constraints\" OR \"rules\" OR \"dependencies\" OR \"relationships\" OR \"restrictions\" OR \"limitations\" OR \"validation\" OR \"verification\") AND (\"oracle\" OR \"assessment\" OR \"evaluation\" OR \"testing\" OR \"quality assurance\" OR \"correctness\" OR \"validation\")",
            "execution_time": 44.21
        },
        {
            "id": 14,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "answer": "(\"configurable system*\" OR \"variant generation\" OR \"product configurator\" OR \"product variation\" OR \"system configuration\" OR \"feature-based system*\" OR \"system design space\") AND (\"performance prediction\" OR \"performance modeling\" OR \"performance evaluation\" OR \"system analysis\" OR \"simulation\" OR \"estimation\" OR \"modeling and simulation\") AND (\"sampling\" OR \"sample selection\" OR \"data selection\" OR \"subset selection\" OR \"experimental design\") AND (\"feature frequency\" OR \"feature coverage\" OR \"attribute frequency\" OR \"attribute coverage\" OR \"characteristic frequency\" OR \"characteristic coverage\")",
            "execution_time": 33.73
        }
    ],
    "mistral-nemo:latest": [
        {
            "id": 15,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\") AND (\"non-functional properties\" OR \"NFP\" OR \"quality attributes\" OR \"performance\" OR \"footprint\" OR \"energy efficiency\")",
            "execution_time": 21.51
        },
        {
            "id": 16,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\") AND (\"non-functional property\" OR \"functional property\" OR \"performance guarantee\" OR \"binary size\" OR \"code unit\" OR \"feature\" OR \"configuration process\")",
            "execution_time": 9.06
        },
        {
            "id": 17,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software defect\" OR \"defect prediction\" OR \"software fault\")",
            "execution_time": 6.07
        },
        {
            "id": 18,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"product line engineering\" OR \"software product line\" OR \"SPL\" OR \"variability management\" OR \"constraints\" OR \"configuration\" OR \"product-line constraints\" OR \"cross-tree constraints\")",
            "execution_time": 10.06
        },
        {
            "id": 19,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "answer": "(\"configurable systems\" OR \"software product line\" OR \"SPL\") AND (\"performance prediction\" OR \"sampling strategies\" OR \"measurement effort\")",
            "execution_time": 5.18
        },
        {
            "id": 20,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\") AND (\"non-functional properties\" OR \"NFP\" OR \"quality attributes\" OR \"performance optimization\" OR \"footprint optimization\" OR \"energy optimization\")",
            "execution_time": 9.44
        },
        {
            "id": 21,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\" OR \"feature configuration\" OR \"non-functional properties\" OR \"performance optimization\")",
            "execution_time": 9.34
        },
        {
            "id": 22,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software defect\" OR \"defect prediction\" OR \"software quality\")",
            "execution_time": 6.18
        },
        {
            "id": 23,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\" OR \"feature modeling\" OR \"cross-tree constraints\")",
            "execution_time": 9.13
        },
        {
            "id": 24,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "answer": "(\"configurable systems\" OR \"software product line\" OR \"SPL\") AND (\"performance prediction\" OR \"sampling strategies\" OR \"measurement effort\")",
            "execution_time": 5.5
        },
        {
            "id": 25,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\") AND (\"non-functional properties\" OR \"quality attributes\" OR \"performance optimization\" OR \"footprint optimization\" OR \"energy efficiency\") AND (\"measurement\" OR \"quantification\" OR \"assessment\") AND (\"variant derivation\" OR \"product configuration\" OR \"feature selection\")",
            "execution_time": 14.18
        },
        {
            "id": 26,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\") AND (\"non-functional property\" OR \"quality attribute\" OR \"performance\" OR \"binary size\" OR \"measurement\" OR \"optimization\")",
            "execution_time": 8.41
        },
        {
            "id": 27,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "answer": "(\"software defect\" OR \"defect prediction\") AND (\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\" OR \"PNN\" OR \"CART\" OR \"J48\") AND (\"source code metrics\" OR \"code entities\" OR \"social structure of software project\")",
            "execution_time": 10.65
        },
        {
            "id": 28,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\" OR \"feature models\" OR \"configuration constraints\")",
            "execution_time": 8.42
        },
        {
            "id": 29,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "answer": "(\"configurable systems\" OR \"software product lines\" OR \"SPL\" OR \"product line engineering\") AND (\"performance prediction\" OR \"performance estimation\" OR \"variant analysis\" OR \"feature selection\") AND (\"sampling strategies\" OR \"sample size determination\" OR \"measurement effort\" OR \"prediction accuracy\")",
            "execution_time": 10.36
        }
    ],
    "llama3.1:latest": [
        {
            "id": 30,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\") AND (\"non-functional properties\" OR \"performance optimization\" OR \"footprint reduction\" OR \"energy efficiency\" OR \"variant derivation\" OR \"optimization goals\" OR \"measurement and evaluation\" OR \"holistic approach\" OR \"quantitative measurement\" OR \"qualitative specification\")",
            "execution_time": 11.64
        },
        {
            "id": 31,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\") AND (\"non-functional properties\" OR \"performance\" OR \"binary size\" OR \"efficiency\" OR \"effectiveness\" OR \"quality attributes\") AND (\"measurement techniques\" OR \"evaluation methods\" OR \"configuration optimization\" OR \"user needs\" OR \"requirements analysis\")",
            "execution_time": 5.44
        },
        {
            "id": 32,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\" OR \"predictive models\") AND (\"software defect\" OR \"defect prediction\" OR \"fault prediction\" OR \"software quality\" OR \"variability management\" OR \"product line engineering\" OR \"SPL\")",
            "execution_time": 4.88
        },
        {
            "id": 33,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\" OR \"inference\" OR \"constraint inference\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\" OR \"constraints\" OR \"cross-tree constraints\")",
            "execution_time": 4.76
        },
        {
            "id": 34,
            "prompt_name": "prompt0",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your goal is to generate one, and only one, **comprehensive Boolean search string** to retrieve **relevant articles on the same topic**.\n\nTo do this, extract the **key concepts** from the text and identify **related terms**, including synonyms, abbreviations, variations, and associated expressions, in order to **broaden the scope** and increase recall. Focus on the underlying meaning of the topic, not just keywords that appear literally in the text.\n\nThe final output must be a single, logically structured search string using Boolean operators:\n- Use OR to connect similar terms within a concept.\n- Use AND to connect distinct concepts.\n\nDo not provide any explanation or additional information. Return **only** the complete search string.\n\nExpected output format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "answer": "(\"sampling strategies\" OR \"performance prediction\" OR \"configurable systems\" OR \"system variants\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\" OR \"feature combinatorics\" OR \"prediction accuracy\" OR \"measurement effort\")",
            "execution_time": 4.49
        },
        {
            "id": 35,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\" OR \"program family\" OR \"family of products\") AND (\"non-functional properties\" OR \"performance optimization\" OR \"footprint reduction\" OR \"energy efficiency\" OR \"optimization goals\" OR \"variant derivation\" OR \"measurement and evaluation\")",
            "execution_time": 5.74
        },
        {
            "id": 36,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\" OR \"component-based design\" OR \"modular software development\") AND (\"non-functional properties\" OR \"performance metrics\" OR \"binary size optimization\" OR \"efficiency measurement\" OR \"quality attributes\")",
            "execution_time": 4.57
        },
        {
            "id": 37,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\" OR \"predictive modeling\") AND (\"software defect prediction\" OR \"defect detection\" OR \"fault prediction\" OR \"variability management\" OR \"product line engineering\" OR \"software quality assurance\")",
            "execution_time": 4.61
        },
        {
            "id": 38,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\" OR \"artificial intelligence\" OR \"AI\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\" OR \"feature configuration\" OR \"configuration constraints\" OR \"constraint inference\")",
            "execution_time": 4.98
        },
        {
            "id": 39,
            "prompt_name": "prompt1",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **search string** to retrieve articles on the same general topic. The search string must be **semantically rich and contextually expanded** to improve retrieval of **relevant scientific literature**.\n\nTo build it, follow these steps:\n1. Identify the **main topics and concepts** from the title and abstract.\n2. For each concept, include **related expressions**, such as synonyms, abbreviations, technical variations, or common usage forms.\n3. Group semantically related terms using OR.\n4. Combine different conceptual groups using AND.\n5. Avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the final Boolean search string. Do not include explanations or intermediate steps.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")",
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "answer": "(\"configurable systems\" OR \"variable systems\" OR \"product lines\" OR \"software product families\") AND (\"performance prediction\" OR \"predictive modeling\" OR \"sampling strategies\" OR \"cost-efficient sampling\")",
            "execution_time": 3.35
        },
        {
            "id": 40,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: SPL Conqueror: Toward optimization of non-functional properties in software product lines\n\n        abstract: A software product line (SPL) is a family of related programs of a domain. The programs of an SPL are distinguished in terms of features, which are end-user visible characteristics of programs. Based on a selection of features, stakeholders can derive tailor-made programs that satisfy functional requirements. Besides functional requirements, different application scenarios raise the need for optimizing non-functional properties of a variant. The diversity of application scenarios leads to heterogeneous optimization goals with respect to non-functional properties (e. g., performance vs. footprint vs. energy optimized variants). Hence, an SPL has to satisfy different and sometimes contradicting requirements regarding non-functional properties. Usually, the actually required non-functional properties are not known before product derivation and can vary for each application scenario and customer. Allowing stakeholders to derive optimized variants requires us to measure non-functional properties after the SPL is developed. Unfortunately, the high variability provided by SPLs complicates measurement and optimization of non-functional properties due to a large variant space. With SPL Conqueror, we provide a holistic approach to optimize non-functional properties in SPL engineering. We show how non-functional properties can be qualitatively specified and quantitatively measured in the context of SPLs. Furthermore, we discuss the variant-derivation process in SPL Conqueror that reduces the effort of computing an optimal variant. We demonstrate the applicability of our approach by means of nine case studies of a broad range of application domains (e. g., database management and operating systems). Moreover, we show that SPL Conqueror is implementation and language independent by using SPLs that are implemented with different mechanisms, such as conditional compilation and feature-oriented programming. \n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\") AND (\"non-functional properties\" OR \"performance optimization\" OR \"energy efficiency\" OR \"footprint reduction\") AND (\"optimization\" OR \"measurement\" OR \"quantification\" OR \"variant derivation\")",
            "execution_time": 5.26
        },
        {
            "id": 41,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: Measuring non-functional properties in software product lines for product derivation\n\n        abstract: A software product line (SPL) enables stakeholders to derive different software products for a domain while providing a high degree of reuse of their code units. Software products are derived in a configuration process by composing different code units. The configuration process becomes complex if SPLs contain hundreds of features. In many cases, a stakeholder is not only interested in functional but also in non-functional properties of a desired product. Because SPLs can be used in different application scenarios alternative implementations of already existing functionality are developed to meet special non-functional requirements, like restricted binary size and performance guarantees. To enable these complex configurations we discuss and present techniques to measure non-functional properties of software modules and use these values to compute SPL configurations optimized to the users needs.\n    ",
            "answer": "(\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\") AND (\"non-functional properties\" OR \"performance\" OR \"binary size\" OR \"efficiency\" OR \"effectiveness\" OR \"usability\" OR \"reliability\" OR \"maintainability\") AND (\"software derivation\" OR \"product derivation\" OR \"configuration process\" OR \"code reuse\" OR \"domain-specific software development\")",
            "execution_time": 6.68
        },
        {
            "id": 42,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: Machine learning techniques to predict software defect\n\n        abstract: The past 10 years have seen the prediction of software defects proposed by many researchers using various metrics based on measurable aspects of source code entities (e.g. methods, classes, files or modules) and the social structure of software project in an effort to predict the software defects. However, these metrics could not predict very high accuracies in terms of sensitivity, specificity and accuracy. In this chapter, we propose the use of machine learning techniques to predict software defects. The effectiveness of all these techniques is demonstrated on ten datasets taken from literature. Based on an experiment, it is observed that PNN outperformed all other techniques in terms of accuracy and sensitivity in all the software defects datasets followed by CART and Group Method of data handling. We also performed feature selection by t-statistics based approach for selecting feature subsets across different folds for a given technique and followed by the feature subset selection. By taking the most important variables, we invoked the classifiers again and observed that PNN outperformed other classifiers in terms of sensitivity and accuracy. Moreover, the set of 'if- then rules yielded by J48 and CART can be used as an expert system for prediction of software defects. \n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"predictive models\" OR \"artificial intelligence\") AND (\"software defect prediction\" OR \"defect detection\" OR \"fault prediction\" OR \"software quality assessment\" OR \"variability management\" OR \"product line engineering\" OR \"SPL\")",
            "execution_time": 4.52
        },
        {
            "id": 43,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: Using machine learning to infer constraints for product lines\n\n        abstract: Variability intensive systems may include several thousand features allowing for an enormous number of possible configurations, including wrong ones (e.g. the derived product does not compile). For years, engineers have been using constraints to a priori restrict the space of possible configurations, i.e. to exclude configurations that would violate these constraints. The challenge is to find the set of constraints that would be both precise (allow all correct configurations) and complete (never allow a wrong configuration with respect to some oracle). In this paper, we propose the use of a machine learning approach to infer such product-line constraints from an oracle that is able to assess whether a given product is correct. We propose to randomly generate products from the product line, keeping for each of them its resolution model. Then we classify these products according to the oracle, and use their resolution models to infer cross-tree constraints over the product-line. We validate our approach on a product-line video generator, using a simple computer vision algorithm as an oracle. We show that an interesting set of cross-tree constraint can be generated, with reasonable precision and recall.\n    ",
            "answer": "(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\" OR \"artificial intelligence\" OR \"AI\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\" OR \"feature configuration\" OR \"configuration management\" OR \"constraints inference\" OR \"constraint-based reasoning\")",
            "execution_time": 5.66
        },
        {
            "id": 44,
            "prompt_name": "prompt2",
            "prompt_content": "You will receive the **title** and **abstract** of a scientific article. Your task is to generate one, and only one, **expanded Boolean search string** to retrieve relevant literature on the same topic. The goal is not to narrow the topic, but to ensure **broad yet relevant** retrieval of literature.\n\nUse the following approach:\n1. Extract the main concepts from the title and abstract.\n2. Expand each concept by identifying semantically related terms (e.g., synonyms, expressions, domain-specific variations, acronyms, plural/singular forms).\n3. Organize terms into **clusters**, where each cluster represents a coherent subtopic.\n4. Use OR to join terms within a cluster and AND to connect different clusters.\n\nThen, simulate a refinement step: imagine that the initial string was used to retrieve articles. Based on the retrieved set, expand the query by including additional terms that would likely improve recall while maintaining topic relevance.\n\nYou have to avoid overly specific expressions that might reduce the number of retrieved articles. You need to **broaden the scope**, thinking about what more general terms could relate to those.\n\nReturn only the **final version** of the enriched Boolean search string, incorporating both the initial and the expanded terms. Do not include reasoning or commentary.\n\nExpected format:\n(\"machine learning\" OR \"ML\" OR \"supervised learning\" OR \"unsupervised learning\") AND (\"software product line\" OR \"SPL\" OR \"product line engineering\" OR \"variability management\")\n",
            "article": "title: Cost-efficient sampling for performance prediction of configurable systems\n\n        abstract: A key challenge of the development and maintenanceof configurable systems is to predict the performance ofindividual system variants based on the features selected. It isusually infeasible to measure the performance of all possible variants, due to feature combinatorics. Previous approaches predictperformance based on small samples of measured variants, butit is still open how to dynamically determine an ideal samplethat balances prediction accuracy and measurement effort. Inthis paper, we adapt two widely-used sampling strategies forperformance prediction to the domain of configurable systemsand evaluate them in terms of sampling cost, which considersprediction accuracy and measurement effort simultaneously. Togenerate an initial sample, we introduce a new heuristic based onfeature frequencies and compare it to a traditional method basedon t-way feature coverage. We conduct experiments on six realworldsystems and provide guidelines for stakeholders to predictperformance by sampling.\n    ",
            "answer": "(\"sampling\" OR \"stratified sampling\" OR \"random sampling\" OR \"system performance prediction\") AND (\"configurable systems\" OR \"software product line variability\" OR \"product line engineering\" OR \"variability management\" OR \"feature selection\" OR \"feature combinatorics\")",
            "execution_time": 4.27
        }
    ]
}